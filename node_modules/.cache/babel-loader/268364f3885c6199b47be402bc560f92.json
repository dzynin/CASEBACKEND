{"ast":null,"code":"import { createElement, Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Draggable from 'react-draggable';\nimport Resizable from 're-resizable';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar resizableStyle = {\n  width: 'auto',\n  height: 'auto',\n  display: 'inline-block',\n  position: 'absolute',\n  top: 0,\n  left: 0\n};\n\nvar Rnd = function (_React$Component) {\n  inherits(Rnd, _React$Component);\n\n  function Rnd(props) {\n    classCallCheck(this, Rnd);\n\n    var _this = possibleConstructorReturn(this, (Rnd.__proto__ || Object.getPrototypeOf(Rnd)).call(this, props));\n\n    _this.state = {\n      z: props.z,\n      original: {\n        x: 0,\n        y: 0\n      },\n      bounds: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      maxWidth: props.maxWidth,\n      maxHeight: props.maxHeight,\n      isMounted: false\n    };\n    _this.onResizeStart = _this.onResizeStart.bind(_this);\n    _this.onResize = _this.onResize.bind(_this);\n    _this.onResizeStop = _this.onResizeStop.bind(_this);\n    _this.onDragStart = _this.onDragStart.bind(_this);\n    _this.onDrag = _this.onDrag.bind(_this);\n    _this.onDragStop = _this.onDragStop.bind(_this);\n    _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);\n    return _this;\n  }\n\n  createClass(Rnd, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.z !== nextProps.z) {\n        this.setState({\n          z: nextProps.z\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.setParentPosition();\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: 'getParentSize',\n    value: function getParentSize() {\n      return this.resizable.getParentSize();\n    }\n  }, {\n    key: 'getMaxSizesFromProps',\n    value: function getMaxSizesFromProps() {\n      var maxWidth = typeof this.props.maxWidth === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;\n      var maxHeight = typeof this.props.maxHeight === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;\n      return {\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      };\n    }\n  }, {\n    key: 'getSelfElement',\n    value: function getSelfElement() {\n      if (!this) return null;\n      return findDOMNode(this);\n    }\n  }, {\n    key: 'setParentPosition',\n    value: function setParentPosition() {\n      var element = this.getSelfElement();\n\n      if (element instanceof Element) {\n        var parent = element.parentNode;\n        if (!parent || typeof window === 'undefined') return;\n        if (!(parent instanceof HTMLElement)) return;\n\n        if (getComputedStyle(parent).position !== 'static') {\n          return;\n        }\n\n        parent.style.position = 'relative';\n      }\n    }\n  }, {\n    key: 'onDragStart',\n    value: function onDragStart(e, data) {\n      if (this.props.onDragStart) {\n        this.props.onDragStart(e, data);\n      }\n\n      if (!this.props.bounds) return;\n      var parent = this.resizable && this.resizable.parentNode;\n      var target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n\n      if (!(target instanceof HTMLElement) || !(parent instanceof HTMLElement)) {\n        return;\n      }\n\n      var targetRect = target.getBoundingClientRect();\n      var targetLeft = targetRect.left;\n      var targetTop = targetRect.top;\n      var parentRect = parent.getBoundingClientRect();\n      var parentLeft = parentRect.left;\n      var parentTop = parentRect.top;\n      var left = targetLeft - parentLeft;\n      var top = targetTop - parentTop;\n      if (!this.resizable) return;\n      this.setState({\n        bounds: {\n          top: top,\n          right: left + (target.offsetWidth - this.resizable.size.width),\n          bottom: this.props._freeBottomBounds // eslint-disable-line\n          ? 2147483647 : top + (target.offsetHeight - this.resizable.size.height),\n          left: left\n        }\n      });\n    }\n  }, {\n    key: 'onDrag',\n    value: function onDrag(e, data) {\n      if (this.props.onDrag) {\n        this.props.onDrag(e, data);\n      }\n    }\n  }, {\n    key: 'onDragStop',\n    value: function onDragStop(e, data) {\n      if (this.props.onDragStop) {\n        this.props.onDragStop(e, data);\n      }\n    }\n  }, {\n    key: 'onResizeStart',\n    value: function onResizeStart(e, dir, refToElement) {\n      e.stopPropagation();\n      this.setState({\n        original: {\n          x: this.draggable.state.x,\n          y: this.draggable.state.y\n        }\n      });\n\n      if (this.props.bounds) {\n        var parent = this.resizable && this.resizable.parentNode;\n        var target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n        var self = this.getSelfElement();\n\n        if (self instanceof Element && target instanceof HTMLElement && parent instanceof HTMLElement) {\n          var _getMaxSizesFromProps = this.getMaxSizesFromProps(),\n              _maxWidth = _getMaxSizesFromProps.maxWidth,\n              _maxHeight = _getMaxSizesFromProps.maxHeight;\n\n          var parentSize = this.getParentSize();\n\n          if (_maxWidth && typeof _maxWidth === 'string') {\n            if (_maxWidth.endsWith('%')) {\n              var ratio = Number(_maxWidth.replace('%', '')) / 100;\n              _maxWidth = parentSize.width * ratio;\n            } else if (_maxWidth.endsWith('px')) {\n              _maxWidth = Number(_maxWidth.replace('px', ''));\n            }\n          }\n\n          if (_maxHeight && typeof _maxHeight === 'string') {\n            if (_maxHeight.endsWith('%')) {\n              var _ratio = Number(_maxHeight.replace('%', '')) / 100;\n\n              _maxHeight = parentSize.width * _ratio;\n            } else if (_maxHeight.endsWith('px')) {\n              _maxHeight = Number(_maxHeight.replace('px', ''));\n            }\n          }\n\n          var selfRect = self.getBoundingClientRect();\n          var selfLeft = selfRect.left;\n          var selfTop = selfRect.top;\n          var targetRect = target.getBoundingClientRect();\n          var targetLeft = targetRect.left;\n          var targetTop = targetRect.top;\n\n          if (/left/i.test(dir) && this.resizable) {\n            var max = selfLeft - targetLeft + this.resizable.size.width;\n            this.setState({\n              maxWidth: max > Number(_maxWidth) ? _maxWidth : max\n            });\n          }\n\n          if (/right/i.test(dir)) {\n            var _max = target.offsetWidth + (targetLeft - selfLeft);\n\n            this.setState({\n              maxWidth: _max > Number(_maxWidth) ? _maxWidth : _max\n            });\n          }\n\n          if (/top/i.test(dir) && this.resizable) {\n            var _max2 = selfTop - targetTop + this.resizable.size.height;\n\n            this.setState({\n              maxHeight: _max2 > Number(_maxHeight) ? _maxHeight : _max2\n            });\n          }\n\n          if (/bottom/i.test(dir)) {\n            var _max3 = target.offsetHeight + (targetTop - selfTop);\n\n            this.setState({\n              maxHeight: _max3 > Number(_maxHeight) ? _maxHeight : _max3\n            });\n          }\n        }\n      } else {\n        this.setState({\n          maxWidth: this.props.maxWidth,\n          maxHeight: this.props.maxHeight\n        });\n      }\n\n      if (this.props.onResizeStart) {\n        this.props.onResizeStart(e, dir, refToElement);\n      }\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize(e, direction, refToResizableElement, delta) {\n      var x = void 0;\n      var y = void 0;\n\n      if (/left/i.test(direction)) {\n        x = this.state.original.x - delta.width;\n        this.draggable.setState({\n          x: x\n        });\n      }\n\n      if (/top/i.test(direction)) {\n        y = this.state.original.y - delta.height;\n        this.draggable.setState({\n          y: y\n        });\n      }\n\n      if (this.props.onResize) {\n        this.props.onResize(e, direction, refToResizableElement, delta, {\n          x: x || this.draggable.state.x,\n          y: y || this.draggable.state.y\n        });\n      }\n    }\n  }, {\n    key: 'onResizeStop',\n    value: function onResizeStop(e, direction, refToResizableElement, delta) {\n      var _getMaxSizesFromProps2 = this.getMaxSizesFromProps(),\n          maxWidth = _getMaxSizesFromProps2.maxWidth,\n          maxHeight = _getMaxSizesFromProps2.maxHeight;\n\n      this.setState({\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n\n      if (this.props.onResizeStop) {\n        var _position = {\n          x: this.draggable.state.x,\n          y: this.draggable.state.y\n        };\n        this.props.onResizeStop(e, direction, refToResizableElement, delta, _position);\n      }\n    }\n  }, {\n    key: 'updateSize',\n    value: function updateSize(size) {\n      if (!this.resizable) return;\n      this.resizable.updateSize({\n        width: size.width,\n        height: size.height\n      });\n    }\n  }, {\n    key: 'updatePosition',\n    value: function updatePosition(position) {\n      this.draggable.setState(position);\n    }\n  }, {\n    key: 'updateZIndex',\n    value: function updateZIndex(z) {\n      this.setState({\n        z: z\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var cursorStyle = this.props.disableDragging || this.props.dragHandleClassName ? {\n        cursor: 'normal'\n      } : {\n        cursor: 'move'\n      };\n\n      var innerStyle = _extends({}, resizableStyle, {\n        zIndex: this.state.z\n      }, cursorStyle, this.props.style); // HACK: Wait for setting relative to parent element.\n\n\n      if (!this.state.isMounted) return createElement('div', null, this.props.children);\n      var maxHeight = this.props._freeBottomBounds ? 2147483647 : this.state.maxHeight; // eslint-disable-line\n\n      return createElement(Draggable, {\n        ref: function ref(c) {\n          _this2.draggable = c;\n        },\n        handle: this.props.dragHandleClassName,\n        defaultPosition: this.props.default,\n        onStart: this.onDragStart,\n        onDrag: this.onDrag,\n        onStop: this.onDragStop,\n        axis: this.props.dragAxis,\n        disabled: this.props.disableDragging,\n        grid: this.props.dragGrid,\n        bounds: this.props.bounds ? this.state.bounds : undefined,\n        position: this.props.position,\n        enableUserSelectHack: this.props.enableUserSelectHack,\n        cancel: this.props.cancel\n      }, createElement(Resizable, _extends({}, this.props.extendsProps, {\n        className: this.props.className,\n        ref: function ref(c) {\n          _this2.resizable = c;\n        },\n        defaultSize: this.props.default,\n        size: this.props.size,\n        enable: this.props.enableResizing,\n        onResizeStart: this.onResizeStart,\n        onResize: this.onResize,\n        onResizeStop: this.onResizeStop,\n        style: innerStyle,\n        minWidth: this.props.minWidth,\n        minHeight: this.props.minHeight,\n        maxWidth: this.state.maxWidth,\n        maxHeight: maxHeight,\n        grid: this.props.resizeGrid,\n        handleWrapperClass: this.props.resizeHandleWrapperClass,\n        handleWrapperStyle: this.props.resizeHandleWrapperStyle,\n        lockAspectRatio: this.props.lockAspectRatio,\n        lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth,\n        lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight,\n        handleStyles: this.props.resizeHandleStyles,\n        handleClasses: this.props.resizeHandleClasses\n      }), this.props.children));\n    }\n  }]);\n  return Rnd;\n}(Component);\n\nRnd.defaultProps = {\n  maxWidth: Number.MAX_SAFE_INTEGER,\n  maxHeight: Number.MAX_SAFE_INTEGER,\n  onResizeStart: function onResizeStart() {},\n  onResize: function onResize() {},\n  onResizeStop: function onResizeStop() {},\n  onDragStart: function onDragStart() {},\n  onDrag: function onDrag() {},\n  onDragStop: function onDragStop() {}\n};\nexport default Rnd;","map":{"version":3,"sources":["../src/index.js"],"names":["resizableStyle","Rnd","React","defaultProps","Number","props","nextProps","z","isMounted","maxWidth","maxHeight","findDOMNode","element","parent","getComputedStyle","e","data","target","document","targetRect","targetLeft","targetTop","parentRect","parentLeft","parentTop","left","top","dir","refToElement","x","y","self","parentSize","ratio","selfRect","selfLeft","selfTop","max","direction","refToResizableElement","delta","position","size","width","height","cursorStyle","cursor","innerStyle","React.createElement","children","cancel","resizeHandleClasses"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Draggable from 'react-draggable';\nimport Resizable from 're-resizable';\nimport type { ResizeDirection, ResizeCallback, ResizeStartCallback } from 're-resizable';\n\nexport type Grid = [number, number];\n\nexport type Position = {\n  x: number,\n  y: number,\n};\n\nexport type DraggableData = {\n  node: HTMLElement,\n  deltaX: number,\n  deltaY: number,\n  lastX: number,\n  lastY: number,\n} & Position;\n\nexport type RndDragCallback = (e: Event, data: DraggableData) => void | false;\n\nexport type RndResizeStartCallback = (\n  e: SyntheticMouseEvent<HTMLDivElement> | SyntheticTouchEvent<HTMLDivElement>,\n  dir: ResizeDirection,\n  refToElement: React.ElementRef<'div'>,\n) => void;\n\nexport type ResizableDelta = {\n  width: number,\n  height: number,\n};\n\nexport type RndResizeCallback = (\n  e: MouseEvent | TouchEvent,\n  dir: ResizeDirection,\n  refToElement: React.ElementRef<'div'>,\n  delta: ResizableDelta,\n  position: Position,\n) => void;\n\ntype Size = {\n  width: string | number,\n  height: string | number,\n};\n\ntype State = {\n  z?: number,\n  original: Position,\n  bounds: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number,\n  },\n  maxWidth?: number | string,\n  maxHeight?: number | string,\n  isMounted: boolean,\n};\n\ntype MaxSize = {\n  maxWidth: number | string,\n  maxHeight: number | string,\n};\n\nexport type ResizeEnable = {\n  bottom?: boolean,\n  bottomLeft?: boolean,\n  bottomRight?: boolean,\n  left?: boolean,\n  right?: boolean,\n  top?: boolean,\n  topLeft?: boolean,\n  topRight?: boolean,\n};\n\nexport type HandleClasses = {\n  bottom?: string,\n  bottomLeft?: string,\n  bottomRight?: string,\n  left?: string,\n  right?: string,\n  top?: string,\n  topLeft?: string,\n  topRight?: string,\n};\n\ntype Style = {\n  [key: string]: string | number,\n};\n\nexport type HandleStyles = {\n  bottom?: Style,\n  bottomLeft?: Style,\n  bottomRight?: Style,\n  left?: Style,\n  right?: Style,\n  top?: Style,\n  topLeft?: Style,\n  topRight?: Style,\n};\n\ntype Props = {\n  z?: number,\n  dragGrid?: Grid,\n  default?: {\n    x: number,\n    y: number,\n  } & Size,\n  position?: {\n    x: number,\n    y: number,\n  },\n  size?: Size,\n  resizeGrid?: Grid,\n  bounds?: string,\n  onResizeStart?: RndResizeStartCallback,\n  onResize?: RndResizeCallback,\n  onResizeStop?: RndResizeCallback,\n  onDragStart?: RndDragCallback,\n  onDrag?: RndDragCallback,\n  onDragStop?: RndDragCallback,\n  className?: string,\n  style?: Style,\n  children?: React.Node,\n  enableResizing?: ResizeEnable,\n  extendsProps?: { [key: string]: any },\n  resizeHandleClasses?: HandleClasses,\n  resizeHandleStyles?: HandleStyles,\n  resizeHandleWrapperClass?: string,\n  resizeHandleWrapperStyle?: Style,\n  lockAspectRatio?: boolean | number,\n  lockAspectRatioExtraWidth?: number,\n  lockAspectRatioExtraHeight?: number,\n  maxHeight?: number | string,\n  maxWidth?: number | string,\n  minHeight?: number | string,\n  minWidth?: number | string,\n  dragAxis?: 'x' | 'y' | 'both' | 'none',\n  dragHandleClassName?: string,\n  disableDragging?: boolean,\n  cancel?: boolean,\n  enableUserSelectHack?: boolean,\n  _freeBottomBounds?: boolean, // Back door for react-elastic-grid.\n};\n\nconst resizableStyle = {\n  width: 'auto',\n  height: 'auto',\n  display: 'inline-block',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n};\n\nexport default class Rnd extends React.Component<Props, State> {\n  static defaultProps = {\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    maxHeight: Number.MAX_SAFE_INTEGER,\n    onResizeStart: () => {},\n    onResize: () => {},\n    onResizeStop: () => {},\n    onDragStart: () => {},\n    onDrag: () => {},\n    onDragStop: () => {},\n  };\n  resizable: React$ElementRef<typeof Resizable> | null;\n  draggable: Draggable;\n  onResizeStart: ResizeStartCallback;\n  onResize: ResizeCallback;\n  onResizeStop: ResizeCallback;\n  onDragStart: RndDragCallback;\n  onDrag: RndDragCallback;\n  onDragStop: RndDragCallback;\n  getMaxSizesFromProps: () => {\n    maxWidth: number | string,\n    maxHeight: number | string,\n  };\n  wrapper: HTMLElement;\n  parentId: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      z: props.z,\n      original: {\n        x: 0,\n        y: 0,\n      },\n      bounds: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n      maxWidth: props.maxWidth,\n      maxHeight: props.maxHeight,\n      isMounted: false,\n    };\n    this.onResizeStart = this.onResizeStart.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.onResizeStop = this.onResizeStop.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDrag = this.onDrag.bind(this);\n    this.onDragStop = this.onDragStop.bind(this);\n    this.getMaxSizesFromProps = this.getMaxSizesFromProps.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.z !== nextProps.z) {\n      this.setState({ z: nextProps.z });\n    }\n  }\n\n  componentDidMount() {\n    this.setParentPosition();\n    this.setState({ isMounted: true });\n  }\n\n  getParentSize(): { width: number, height: number } {\n    return (this.resizable: any).getParentSize();\n  }\n\n  getMaxSizesFromProps(): MaxSize {\n    const maxWidth = typeof this.props.maxWidth === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;\n    const maxHeight = typeof this.props.maxHeight === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;\n    return { maxWidth, maxHeight };\n  }\n\n  getSelfElement(): null | Element | Text {\n    if (!this) return null;\n    return findDOMNode(this);\n  }\n\n  setParentPosition() {\n    const element = this.getSelfElement();\n    if (element instanceof Element) {\n      const parent = element.parentNode;\n      if (!parent || typeof window === 'undefined') return;\n      if (!(parent instanceof HTMLElement)) return;\n      if (getComputedStyle(parent).position !== 'static') {\n        return;\n      }\n      parent.style.position = 'relative';\n    }\n  }\n\n  onDragStart(e: Event, data: DraggableData) {\n    if (this.props.onDragStart) {\n      this.props.onDragStart(e, data);\n    }\n    if (!this.props.bounds) return;\n    const parent = this.resizable && this.resizable.parentNode;\n    const target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n    if (!(target instanceof HTMLElement) || !(parent instanceof HTMLElement)) {\n      return;\n    }\n    const targetRect = target.getBoundingClientRect();\n    const targetLeft = targetRect.left;\n    const targetTop = targetRect.top;\n    const parentRect = parent.getBoundingClientRect();\n    const parentLeft = parentRect.left;\n    const parentTop = parentRect.top;\n    const left = targetLeft - parentLeft;\n    const top = targetTop - parentTop;\n    if (!this.resizable) return;\n    this.setState({\n      bounds: {\n        top,\n        right: left + (target.offsetWidth - this.resizable.size.width),\n        bottom: this.props._freeBottomBounds // eslint-disable-line\n          ? 2147483647\n          : top + (target.offsetHeight - this.resizable.size.height),\n        left,\n      },\n    });\n  }\n\n  onDrag(e: Event, data: DraggableData) {\n    if (this.props.onDrag) {\n      this.props.onDrag(e, data);\n    }\n  }\n\n  onDragStop(e: Event, data: DraggableData) {\n    if (this.props.onDragStop) {\n      this.props.onDragStop(e, data);\n    }\n  }\n\n  onResizeStart(\n    e: SyntheticMouseEvent<HTMLDivElement> | SyntheticTouchEvent<HTMLDivElement>,\n    dir: ResizeDirection,\n    refToElement: React.ElementRef<'div'>,\n  ) {\n    e.stopPropagation();\n    this.setState({\n      original: { x: this.draggable.state.x, y: this.draggable.state.y },\n    });\n    if (this.props.bounds) {\n      const parent = this.resizable && this.resizable.parentNode;\n      const target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n      const self = this.getSelfElement();\n      if (self instanceof Element && target instanceof HTMLElement && parent instanceof HTMLElement) {\n        let { maxWidth, maxHeight } = this.getMaxSizesFromProps();\n        const parentSize = this.getParentSize();\n        if (maxWidth && typeof maxWidth === 'string') {\n          if (maxWidth.endsWith('%')) {\n            const ratio = Number(maxWidth.replace('%', '')) / 100;\n            maxWidth = parentSize.width * ratio;\n          } else if (maxWidth.endsWith('px')) {\n            maxWidth = Number(maxWidth.replace('px', ''));\n          }\n        }\n        if (maxHeight && typeof maxHeight === 'string') {\n          if (maxHeight.endsWith('%')) {\n            const ratio = Number(maxHeight.replace('%', '')) / 100;\n            maxHeight = parentSize.width * ratio;\n          } else if (maxHeight.endsWith('px')) {\n            maxHeight = Number(maxHeight.replace('px', ''));\n          }\n        }\n        const selfRect = self.getBoundingClientRect();\n        const selfLeft = selfRect.left;\n        const selfTop = selfRect.top;\n        const targetRect = target.getBoundingClientRect();\n        const targetLeft = targetRect.left;\n        const targetTop = targetRect.top;\n        if (/left/i.test(dir) && this.resizable) {\n          const max = selfLeft - targetLeft + this.resizable.size.width;\n          this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });\n        }\n        if (/right/i.test(dir)) {\n          const max = target.offsetWidth + (targetLeft - selfLeft);\n          this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });\n        }\n        if (/top/i.test(dir) && this.resizable) {\n          const max = selfTop - targetTop + this.resizable.size.height;\n          this.setState({\n            maxHeight: max > Number(maxHeight) ? maxHeight : max,\n          });\n        }\n        if (/bottom/i.test(dir)) {\n          const max = target.offsetHeight + (targetTop - selfTop);\n          this.setState({\n            maxHeight: max > Number(maxHeight) ? maxHeight : max,\n          });\n        }\n      }\n    } else {\n      this.setState({\n        maxWidth: this.props.maxWidth,\n        maxHeight: this.props.maxHeight,\n      });\n    }\n    if (this.props.onResizeStart) {\n      this.props.onResizeStart(e, dir, refToElement);\n    }\n  }\n\n  onResize(\n    e: MouseEvent | TouchEvent,\n    direction: ResizeDirection,\n    refToResizableElement: React.ElementRef<'div'>,\n    delta: { height: number, width: number },\n  ) {\n    let x;\n    let y;\n    if (/left/i.test(direction)) {\n      x = this.state.original.x - delta.width;\n      this.draggable.setState({ x });\n    }\n    if (/top/i.test(direction)) {\n      y = this.state.original.y - delta.height;\n      this.draggable.setState({ y });\n    }\n    if (this.props.onResize) {\n      this.props.onResize(e, direction, refToResizableElement, delta, {\n        x: x || this.draggable.state.x,\n        y: y || this.draggable.state.y,\n      });\n    }\n  }\n\n  onResizeStop(\n    e: MouseEvent | TouchEvent,\n    direction: ResizeDirection,\n    refToResizableElement: HTMLDivElement,\n    delta: { height: number, width: number },\n  ) {\n    const { maxWidth, maxHeight } = this.getMaxSizesFromProps();\n    this.setState({ maxWidth, maxHeight });\n    if (this.props.onResizeStop) {\n      const position: Position = {\n        x: this.draggable.state.x,\n        y: this.draggable.state.y,\n      };\n      this.props.onResizeStop(e, direction, refToResizableElement, delta, position);\n    }\n  }\n\n  updateSize(size: { width: number | string, height: number | string }) {\n    if (!this.resizable) return;\n    this.resizable.updateSize({ width: size.width, height: size.height });\n  }\n\n  updatePosition(position: Position) {\n    this.draggable.setState(position);\n  }\n\n  updateZIndex(z: number) {\n    this.setState({ z });\n  }\n\n  render(): React.Node {\n    const cursorStyle =\n      this.props.disableDragging || this.props.dragHandleClassName ? { cursor: 'normal' } : { cursor: 'move' };\n    const innerStyle = {\n      ...resizableStyle,\n      zIndex: this.state.z,\n      ...cursorStyle,\n      ...this.props.style,\n    };\n    // HACK: Wait for setting relative to parent element.\n    if (!this.state.isMounted) return <div>{this.props.children}</div>;\n    const maxHeight = this.props._freeBottomBounds ? 2147483647 : this.state.maxHeight; // eslint-disable-line\n    return (\n      <Draggable\n        ref={(c: Draggable) => {\n          this.draggable = c;\n        }}\n        handle={this.props.dragHandleClassName}\n        defaultPosition={this.props.default}\n        onStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onStop={this.onDragStop}\n        axis={this.props.dragAxis}\n        disabled={this.props.disableDragging}\n        grid={this.props.dragGrid}\n        bounds={this.props.bounds ? this.state.bounds : undefined}\n        position={this.props.position}\n        enableUserSelectHack={this.props.enableUserSelectHack}\n        cancel={this.props.cancel}\n      >\n        <Resizable\n          {...this.props.extendsProps}\n          className={this.props.className}\n          ref={(c: React$ElementRef<typeof Resizable> | null) => {\n            this.resizable = c;\n          }}\n          defaultSize={this.props.default}\n          size={this.props.size}\n          enable={this.props.enableResizing}\n          onResizeStart={this.onResizeStart}\n          onResize={this.onResize}\n          onResizeStop={this.onResizeStop}\n          style={innerStyle}\n          minWidth={this.props.minWidth}\n          minHeight={this.props.minHeight}\n          maxWidth={this.state.maxWidth}\n          maxHeight={maxHeight}\n          grid={this.props.resizeGrid}\n          handleWrapperClass={this.props.resizeHandleWrapperClass}\n          handleWrapperStyle={this.props.resizeHandleWrapperStyle}\n          lockAspectRatio={this.props.lockAspectRatio}\n          lockAspectRatioExtraWidth={this.props.lockAspectRatioExtraWidth}\n          lockAspectRatioExtraHeight={this.props.lockAspectRatioExtraHeight}\n          handleStyles={this.props.resizeHandleStyles}\n          handleClasses={this.props.resizeHandleClasses}\n        >\n          {this.props.children}\n        </Resizable>\n      </Draggable>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}