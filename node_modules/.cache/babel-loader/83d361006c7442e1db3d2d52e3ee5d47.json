{"ast":null,"code":"import { TableWidget } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Point, HelperMethods } from './editor-helper';\n/**\n * @private\n */\nvar TableResizer = /** @class */function () {\n  function TableResizer(node) {\n    this.resizeNode = 0;\n    this.resizerPosition = -1;\n    this.currentResizingTable = undefined;\n    this.owner = node;\n    this.documentHelper = this.owner.documentHelper;\n    this.startingPoint = new Point(0, 0);\n  }\n  Object.defineProperty(TableResizer.prototype, \"viewer\", {\n    get: function () {\n      return this.owner.viewer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TableResizer.prototype.getModuleName = function () {\n    return 'TableResizer';\n  };\n  TableResizer.prototype.updateResizingHistory = function (touchPoint) {\n    if (this.owner.editorHistoryModule) {\n      this.owner.editorHistoryModule.updateResizingHistory(touchPoint, this);\n    }\n    this.documentHelper.isRowOrCellResizing = false;\n    this.resizerPosition = -1;\n  };\n  TableResizer.prototype.handleResize = function (point) {\n    this.owner.documentHelper.isRowOrCellResizing = true;\n    this.startingPoint.x = point.x;\n    this.startingPoint.y = point.y;\n    //Initialize resizing history.\n    this.owner.editorHistoryModule.initResizingHistory(point, this);\n  };\n  //Table Resizing implementation starts\n  TableResizer.prototype.isInRowResizerArea = function (touchPoint) {\n    var position = this.getRowReSizerPosition(undefined, touchPoint);\n    if (position === -1) {\n      return false;\n    } else {\n      this.resizeNode = 1;\n      this.resizerPosition = position;\n      return true;\n    }\n  };\n  TableResizer.prototype.isInCellResizerArea = function (touchPoint) {\n    var position = this.getCellReSizerPosition(touchPoint);\n    if (position === -1) {\n      return false;\n    } else {\n      this.resizeNode = 0;\n      this.resizerPosition = position;\n      return true;\n    }\n  };\n  TableResizer.prototype.getCellReSizerPosition = function (touchPoint) {\n    var position = -1;\n    var resizerBoundaryWidth = 2;\n    var tableWidget = this.getTableWidget(touchPoint);\n    var cellWidget = this.getTableCellWidget(touchPoint);\n    var cellSpacing = isNullOrUndefined(tableWidget) ? 0 : tableWidget.tableFormat.cellSpacing;\n    if (tableWidget && cellSpacing > 0) {\n      this.currentResizingTable = tableWidget;\n      /* eslint-disable-next-line max-len */\n      if (this.documentHelper.isInsideRect(tableWidget.x - HelperMethods.convertPointToPixel(tableWidget.leftBorderWidth) - 0.25, tableWidget.y, HelperMethods.convertPointToPixel(tableWidget.leftBorderWidth) + 0.5, tableWidget.height, touchPoint)) {\n        return position = 0;\n      }\n      var startingPointX = tableWidget.x;\n      for (var i = 0; i < tableWidget.tableHolder.columns.length; i++) {\n        var preferredWidth = HelperMethods.convertPointToPixel(tableWidget.tableHolder.columns[parseInt(i.toString(), 10)].preferredWidth);\n        /* eslint-disable-next-line max-len */\n        if (this.documentHelper.isInsideRect(startingPointX - 1, tableWidget.y, tableWidget.leftBorderWidth + resizerBoundaryWidth, tableWidget.height, touchPoint)) {\n          return position = i > 0 ? i : 0;\n          /* eslint-disable-next-line max-len */\n        } else if (i > 0 && this.documentHelper.isInsideRect(startingPointX + preferredWidth - resizerBoundaryWidth / 2, tableWidget.y, resizerBoundaryWidth, tableWidget.height, touchPoint)) {\n          return position = i + 1;\n        }\n        startingPointX = startingPointX + preferredWidth;\n      }\n    } else {\n      if (!isNullOrUndefined(cellWidget)) {\n        this.currentResizingTable = cellWidget.ownerTable;\n        /* eslint-disable-next-line max-len */\n        if (this.documentHelper.isInsideRect(cellWidget.x - cellWidget.margin.left - resizerBoundaryWidth / 2, cellWidget.y - cellWidget.margin.top, resizerBoundaryWidth, cellWidget.height + cellWidget.margin.top + cellWidget.margin.bottom, touchPoint)) {\n          return position = cellWidget.columnIndex;\n        } else if (isNullOrUndefined(cellWidget.nextRenderedWidget)\n        /* eslint-disable-next-line max-len */ && this.documentHelper.isInsideRect(cellWidget.x + cellWidget.margin.right + cellWidget.width - resizerBoundaryWidth / 2, cellWidget.y - cellWidget.margin.top, resizerBoundaryWidth, cellWidget.height + cellWidget.margin.top + cellWidget.margin.bottom, touchPoint)) {\n          return position = cellWidget.columnIndex + cellWidget.cellFormat.columnSpan;\n        } else if (cellWidget.childWidgets.length > 0) {\n          return this.getCellReSizerPositionInternal(cellWidget, touchPoint); // Gets the nested table resizer position.\n        }\n      }\n    }\n    return position;\n  };\n  TableResizer.prototype.getCellReSizerPositionInternal = function (cellWidget, touchPoint) {\n    var position = -1;\n    var childTableWidget = this.getTableWidgetFromWidget(touchPoint, cellWidget);\n    var childCellWidget = undefined;\n    if (!isNullOrUndefined(childTableWidget) && childTableWidget.tableFormat.cellSpacing > 0) {\n      this.currentResizingTable = childTableWidget;\n      /* eslint-disable-next-line max-len */\n      if (this.documentHelper.isInsideRect(childTableWidget.x - childTableWidget.leftBorderWidth - 0.25, childTableWidget.y, childTableWidget.leftBorderWidth + 0.5, childTableWidget.height, touchPoint)) {\n        return position = 0;\n      }\n      var startingPointX = childTableWidget.x;\n      for (var i = 0; i < childTableWidget.tableHolder.columns.length; i++) {\n        var preferredWidth = HelperMethods.convertPointToPixel(childTableWidget.tableHolder.columns[parseInt(i.toString(), 10)].preferredWidth);\n        /* eslint-disable-next-line max-len */\n        if (this.documentHelper.isInsideRect(startingPointX - 1, childTableWidget.y, childTableWidget.leftBorderWidth + 2, childTableWidget.height, touchPoint)) {\n          return position = i > 0 ? i : 0;\n          /* eslint-disable-next-line max-len */\n        } else if (i > 0 && this.documentHelper.isInsideRect(startingPointX + preferredWidth - 1, childTableWidget.y, 2, childTableWidget.height, touchPoint)) {\n          return position = i + 1;\n        }\n        startingPointX = startingPointX + preferredWidth;\n      }\n    } else {\n      if (!isNullOrUndefined(childTableWidget)) {\n        childCellWidget = childTableWidget.getTableCellWidget(touchPoint);\n      }\n      if (!isNullOrUndefined(childCellWidget)) {\n        this.currentResizingTable = childCellWidget.ownerTable;\n        /* eslint-disable-next-line max-len */\n        if (this.documentHelper.isInsideRect(childCellWidget.x - childCellWidget.margin.left - 1, childCellWidget.y - childCellWidget.margin.top, 2, childCellWidget.height, touchPoint)) {\n          return position = childCellWidget.columnIndex;\n        } else if (isNullOrUndefined(childCellWidget.nextRenderedWidget)\n        /* eslint-disable-next-line max-len */ && this.documentHelper.isInsideRect(childCellWidget.x + childCellWidget.margin.right + childCellWidget.width - 1, childCellWidget.y - childCellWidget.margin.top, 2, childCellWidget.height, touchPoint)) {\n          return position = childCellWidget.columnIndex + childCellWidget.cellFormat.columnSpan;\n        } else if (childCellWidget.childWidgets.length > 0) {\n          return this.getCellReSizerPositionInternal(childCellWidget, touchPoint);\n        }\n      }\n    }\n    return position;\n  };\n  TableResizer.prototype.getRowReSizerPosition = function (widget, touchPoint) {\n    var tableWidget = undefined;\n    var cellWidget = undefined;\n    if (isNullOrUndefined(widget)) {\n      tableWidget = this.getTableWidget(touchPoint);\n      cellWidget = this.getTableCellWidget(touchPoint);\n    } else {\n      tableWidget = this.getTableWidgetFromWidget(touchPoint, widget);\n    }\n    var cellSpacing = isNullOrUndefined(tableWidget) ? 0 : tableWidget.tableFormat.cellSpacing;\n    if (tableWidget && cellSpacing > 0) {\n      this.currentResizingTable = tableWidget;\n      /* eslint-disable-next-line max-len */\n      if (this.owner.documentHelper.isInsideRect(tableWidget.x, tableWidget.y + tableWidget.height - cellSpacing, this.getActualWidth(tableWidget.lastChild), isNullOrUndefined(tableWidget.nextSplitWidget) ? tableWidget.bottomBorderWidth + cellSpacing : 0, touchPoint)) {\n        return tableWidget.lastChild.rowIndex;\n      }\n      for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n        //Need to consider for splitted widgets\n        var rowWidget = tableWidget.childWidgets[parseInt(i.toString(), 10)];\n        if (tableWidget.childWidgets.indexOf(rowWidget) > -1\n        /* eslint-disable-next-line max-len */ && this.owner.documentHelper.isInsideRect(rowWidget.x, rowWidget.y + rowWidget.height + cellSpacing / 2, this.getActualWidth(rowWidget), cellSpacing / 2, touchPoint)) {\n          return rowWidget.rowIndex;\n        }\n      }\n    } else {\n      if (tableWidget && cellWidget) {\n        cellWidget = this.getTableCellWidget(touchPoint);\n      }\n      if (cellWidget) {\n        var rowWidget = cellWidget.containerWidget;\n        var height = 0;\n        if (rowWidget.rowIndex === rowWidget.ownerTable.childWidgets.length - 1) {\n          height = rowWidget.bottomBorderWidth + 2;\n        } else {\n          height = rowWidget.nextRenderedWidget.topBorderWidth + 2;\n        }\n        /* eslint-disable-next-line max-len */\n        if (this.owner.documentHelper.isInsideRect(rowWidget.x, rowWidget.y + rowWidget.height - height, rowWidget.width, height * 2, touchPoint)) {\n          this.currentResizingTable = rowWidget.ownerTable;\n          return rowWidget.rowIndex;\n        } else {\n          if (cellWidget.childWidgets.length > 0) {\n            return this.getRowReSizerPosition(cellWidget, touchPoint);\n          }\n        }\n      }\n    }\n    return -1;\n  };\n  TableResizer.prototype.handleResizing = function (touchPoint, isTableMarkerDragging, dragValue) {\n    this.owner.isShiftingEnabled = true;\n    if (!isTableMarkerDragging) {\n      if (this.resizeNode === 0) {\n        dragValue = touchPoint.x - this.startingPoint.x;\n        this.resizeTableCellColumn(dragValue);\n      } else {\n        dragValue = touchPoint.y - this.startingPoint.y;\n        this.resizeTableRow(dragValue);\n      }\n    } else {\n      if (this.resizeNode === 0) {\n        this.resizeTableCellColumn(dragValue);\n      }\n    }\n  };\n  TableResizer.prototype.resizeTableRow = function (dragValue) {\n    var table = this.currentResizingTable;\n    if (isNullOrUndefined(table) || dragValue === 0 || this.resizerPosition === -1) {\n      return;\n    }\n    var selection = this.owner.selectionModule;\n    if (table.isInsideTable) {\n      this.owner.isLayoutEnabled = false; //Layouting is disabled to skip the child table layouting.\n    }\n    var row = undefined;\n    if (this.resizerPosition > -1) {\n      row = table.childWidgets[this.resizerPosition];\n      if (row) {\n        this.updateRowHeight(row, dragValue);\n      }\n      selection.selectPosition(selection.start, selection.end);\n    }\n    if (table.isInsideTable) {\n      var parentTable = this.owner.documentHelper.layout.getParentTable(table);\n      this.owner.isLayoutEnabled = true; //layouting is enabled to layout the parent table of the nested table.\n      table = parentTable;\n    }\n    this.startingPoint.y += HelperMethods.convertPointToPixel(dragValue);\n    this.owner.documentHelper.layout.reLayoutTable(table);\n    this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n    this.owner.editorModule.reLayout(this.owner.selectionModule);\n    this.owner.editorModule.isSkipOperationsBuild = false;\n    if (row) {\n      this.getRowReSizerPosition(undefined, this.startingPoint);\n    }\n    if (this.currentResizingTable && (this.currentResizingTable.childWidgets === undefined || this.currentResizingTable.childWidgets[this.resizerPosition] === undefined)) {\n      this.resizerPosition = -1;\n    }\n  };\n  TableResizer.prototype.getTableWidget = function (cursorPoint) {\n    var widget = undefined;\n    var currentPage = this.owner.documentHelper.currentPage;\n    if (!isNullOrUndefined(currentPage)) {\n      for (var i = 0; i < currentPage.bodyWidgets.length; i++) {\n        var bodyWidget = currentPage.bodyWidgets[parseInt(i.toString(), 10)];\n        widget = this.getTableWidgetFromWidget(cursorPoint, bodyWidget);\n        if (!isNullOrUndefined(widget)) {\n          break;\n        }\n        if (this.documentHelper.owner.layoutType === 'Pages') {\n          var body = currentPage.headerWidget;\n          widget = this.getTableWidgetFromWidget(cursorPoint, body);\n          if (!isNullOrUndefined(widget)) {\n            break;\n          }\n          var bodywid = currentPage.footerWidget;\n          widget = this.getTableWidgetFromWidget(cursorPoint, bodywid);\n          if (!isNullOrUndefined(widget)) {\n            break;\n          }\n        }\n      }\n    }\n    return widget;\n  };\n  TableResizer.prototype.getTableWidgetFromWidget = function (point, widget) {\n    for (var j = 0; j < widget.childWidgets.length; j++) {\n      if (widget.childWidgets[parseInt(j.toString(), 10)] instanceof TableWidget) {\n        var childWidget = widget.childWidgets[parseInt(j.toString(), 10)];\n        var tableWidth = 0;\n        if (childWidget.wrapTextAround) {\n          tableWidth = childWidget.getTableCellWidth();\n        }\n        if (!childWidget.wrapTextAround && childWidget.y <= point.y && childWidget.y + childWidget.height >= point.y) {\n          return childWidget;\n        }\n        if (childWidget.wrapTextAround && childWidget.x <= point.x && childWidget.x + tableWidth >= point.x && childWidget.y <= point.y && childWidget.y + childWidget.height >= point.y) {\n          return childWidget;\n        }\n      }\n    }\n    return undefined;\n  };\n  TableResizer.prototype.getTableCellWidget = function (cursorPoint) {\n    var widget = undefined;\n    var currentPage = this.owner.documentHelper.currentPage;\n    if (!isNullOrUndefined(currentPage)) {\n      for (var i = 0; i < currentPage.bodyWidgets.length; i++) {\n        var bodyWidget = currentPage.bodyWidgets[parseInt(i.toString(), 10)];\n        widget = bodyWidget.getTableCellWidget(cursorPoint);\n        if (!isNullOrUndefined(widget)) {\n          break;\n        }\n        if (this.documentHelper.owner.layoutType === 'Pages' && this.viewer.owner.enableHeaderAndFooter) {\n          var body = currentPage.headerWidget;\n          widget = body.getTableCellWidget(cursorPoint);\n          if (!isNullOrUndefined(widget)) {\n            break;\n          }\n          var bodywid = currentPage.footerWidget;\n          widget = bodywid.getTableCellWidget(cursorPoint);\n          if (!isNullOrUndefined(widget)) {\n            break;\n          }\n        }\n      }\n    }\n    return widget;\n  };\n  TableResizer.prototype.updateRowHeight = function (row, dragValue) {\n    var rowFormat = row.rowFormat;\n    if (rowFormat.heightType === 'Auto') {\n      rowFormat.heightType = 'AtLeast';\n      var row_1 = rowFormat.ownerBase;\n      var currentHeight = this.owner.documentHelper.layout.getRowHeight(row_1, [row_1]);\n      //the minimum height of the Row in MS word is 2.7 points which is equal to 3.6 pixel.\n      if (currentHeight + dragValue >= 2.7 && rowFormat.height !== currentHeight + dragValue) {\n        rowFormat.height = currentHeight + dragValue;\n      }\n    } else {\n      //the minimum height of the Row in MS word is 2.7 points which is equal to 3.6 pixel.\n      if (rowFormat.height + dragValue >= 2.7 && rowFormat.height !== rowFormat.height + dragValue) {\n        rowFormat.height = rowFormat.height + dragValue;\n      }\n    }\n  };\n  //Resize Table cell\n  TableResizer.prototype.resizeTableCellColumn = function (dragValue) {\n    var table = this.currentResizingTable;\n    if (isNullOrUndefined(table) || dragValue === 0 || isNullOrUndefined(table.childWidgets) || this.resizerPosition < 0) {\n      return;\n    }\n    var selectionFlag = true;\n    var selection = this.owner.selectionModule;\n    this.owner.editorModule.setOffsetValue(selection);\n    table = table.combineWidget(this.viewer);\n    this.owner.isLayoutEnabled = false;\n    // table.PreserveGrid = true;\n    this.setPreferredWidth(table);\n    var containerWidth = table.getOwnerWidth(true);\n    var newIndent = table.leftIndent;\n    var tableAlignment = table.tableFormat.tableAlignment;\n    if (!selection.isEmpty) {\n      selectionFlag = this.resizeColumnWithSelection(selection, table, dragValue);\n    }\n    if (!selectionFlag) {\n      this.updateGridValue(table, true);\n      return;\n    }\n    if (this.resizerPosition === 0) {\n      // Todo: need to handle the resizing of first column and table indent.\n      var columnIndex = this.resizerPosition;\n      var rightColumn = table.tableHolder.columns[parseInt(columnIndex.toString(), 10)];\n      var width = rightColumn.preferredWidth;\n      if (dragValue > 0) {\n        var prevDragValue = dragValue;\n        do {\n          var newWidth = HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n          if (newWidth >= rightColumn.minWidth) {\n            rightColumn.preferredWidth = newWidth;\n            newIndent = table.leftIndent + dragValue;\n            newIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n            break;\n          } else {\n            prevDragValue = dragValue;\n            dragValue += newWidth - rightColumn.minWidth;\n          }\n        } while (dragValue !== prevDragValue);\n      } else {\n        var prevDragValue = dragValue;\n        do {\n          var newWidth = HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n          if (newWidth <= 2112) {\n            rightColumn.preferredWidth = newWidth;\n            newIndent = table.leftIndent + dragValue;\n            newIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n            break;\n          } else {\n            prevDragValue = dragValue;\n            dragValue -= newWidth - 2112;\n          }\n        } while (dragValue !== prevDragValue);\n      }\n      var dragOffset = dragValue;\n      if (tableAlignment !== 'Left' && table.tableHolder.getTotalWidth(0) > containerWidth && table.tableFormat.preferredWidthType === 'Auto') {\n        if (table.tableHolder.isFitColumns(containerWidth, table.tableHolder.tableWidth, table.tableFormat.preferredWidthType === 'Auto')) {\n          table.tableHolder.fitColumns(containerWidth, table.tableHolder.tableWidth, table.tableFormat.preferredWidthType === 'Auto', table.tableFormat.allowAutoFit);\n        } else {\n          rightColumn.preferredWidth = width;\n        }\n        dragOffset = 0;\n      }\n      if (tableAlignment === 'Center' && (table.tableHolder.getTotalWidth(0) < containerWidth || table.tableFormat.preferredWidthType !== 'Auto')) {\n        dragOffset = dragOffset / 2;\n      }\n      table.tableFormat.leftIndent = tableAlignment === 'Left' ? newIndent : 0;\n      table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n      this.updateCellPreferredWidths(table);\n      if (table.tableFormat.preferredWidthType !== 'Auto') {\n        table.updateWidth(dragValue);\n      }\n      this.updateGridValue(table, true, dragOffset);\n    } else if (table !== null && this.resizerPosition === table.tableHolder.columns.length) {\n      // Todo: need to handle the resizing of last column and table width.\n      this.resizeColumnAtLastColumnIndex(table, dragValue, containerWidth);\n    } else {\n      if (this.resizerPosition === -1) {\n        this.owner.isLayoutEnabled = true;\n        return;\n      }\n      this.resizeCellAtMiddle(table, dragValue);\n    }\n    // table.PreserveGrid = false;\n    this.owner.isLayoutEnabled = true;\n    selection.selectPosition(selection.start, selection.end);\n  };\n  TableResizer.prototype.resizeColumnWithSelection = function (selection, table, dragValue) {\n    //const newIndent: number = table.leftIndent;\n    var cellwidget = this.getTableCellWidget(this.startingPoint);\n    if (cellwidget && (selection.selectedWidgets.containsKey(cellwidget) || cellwidget.previousWidget && selection.selectedWidgets.containsKey(cellwidget.previousWidget))) {\n      var selectedCells = selection.getSelectedCells();\n      if (this.resizerPosition === 0) {\n        this.resizeColumnAtStart(table, dragValue, selectedCells);\n      } else if (table !== null && this.resizerPosition === table.tableHolder.columns.length) {\n        var leftColumnCollection = this.getColumnCells(table, this.resizerPosition, true);\n        for (var i = 0; i < leftColumnCollection.length; i++) {\n          var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n          if (selectedCells.indexOf(cell) !== -1) {\n            this.increaseOrDecreaseWidth(cell, dragValue, true);\n          }\n        }\n        //Updates the grid after value for all the rows.\n        this.updateRowsGridAfterWidth(table);\n        table.updateWidth(dragValue);\n        table.tableFormat.allowAutoFit = false;\n        this.updateGridValue(table, true, dragValue);\n      } else {\n        if (this.resizerPosition === -1) {\n          return false;\n        }\n        var columnIndex = this.resizerPosition;\n        var leftColumnCollection = this.getColumnCells(table, columnIndex, true);\n        var rightColumnCollection = this.getColumnCells(table, columnIndex, false);\n        var isColumnResizing = this.isColumnSelected(table, columnIndex);\n        if (leftColumnCollection.length > 0 && !isColumnResizing) {\n          for (var i = 0; i < leftColumnCollection.length; i++) {\n            if (selectedCells.indexOf(leftColumnCollection[parseInt(i.toString(), 10)]) === -1) {\n              leftColumnCollection.splice(i, 1);\n              i--;\n            }\n          }\n        }\n        if (rightColumnCollection.length > 0 && !isColumnResizing) {\n          for (var i = 0; i < rightColumnCollection.length; i++) {\n            if (selectedCells.indexOf(rightColumnCollection[parseInt(i.toString(), 10)]) === -1) {\n              rightColumnCollection.splice(i, 1);\n              i--;\n            }\n          }\n        }\n        //Getting the adjacent cell collections for left side selected cells in the right column collection.\n        if (leftColumnCollection.length === 0 && rightColumnCollection.length > 0) {\n          for (var i = 0; i < rightColumnCollection.length; i++) {\n            var cell = rightColumnCollection[parseInt(i.toString(), 10)];\n            if (cell.previousWidget) {\n              leftColumnCollection.push(cell.previousWidget);\n            }\n          }\n        } else if (rightColumnCollection.length === 0 && leftColumnCollection.length > 0) {\n          for (var i = 0; i < leftColumnCollection.length; i++) {\n            var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n            if (cell.nextWidget) {\n              rightColumnCollection.push(cell.nextWidget);\n            }\n          }\n        }\n        this.changeWidthOfCells(table, leftColumnCollection, rightColumnCollection, dragValue);\n        if (table.tableFormat.allowAutoFit) {\n          table.updateWidth(dragValue);\n        }\n        table.tableFormat.allowAutoFit = false;\n        this.updateGridValue(table, true, dragValue);\n      }\n      selection.selectPosition(selection.start, selection.end);\n    }\n    return false;\n  };\n  TableResizer.prototype.resizeColumnAtStart = function (table, dragValue, selectedCells) {\n    var newIndent = table.leftIndent;\n    //const rightColumnCollection: TableCellWidget[] = this.getColumnCells(table, this.resizerPosition, false);\n    var offset = 0;\n    var selectedRow = selectedCells[0].ownerRow;\n    var rowFormat = selectedRow.rowFormat;\n    if (rowFormat.beforeWidth > 0) {\n      var newGridBefore = rowFormat.beforeWidth + dragValue;\n      if (newGridBefore > 0) {\n        this.updateGridBefore(selectedRow, dragValue);\n      } else {\n        var leastGridBefore = this.getLeastGridBefore(table, selectedRow);\n        if (newGridBefore < leastGridBefore && offset !== newGridBefore) {\n          newIndent = table.leftIndent + newGridBefore;\n          table.tableFormat.leftIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n          for (var i = 0; i < table.childWidgets.length; i++) {\n            var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n            if (selectedRow !== tableRow) {\n              this.updateGridBefore(tableRow, -newGridBefore);\n            }\n          }\n        }\n      }\n    } else {\n      if (dragValue < 0) {\n        newIndent = table.leftIndent + dragValue;\n        table.tableFormat.leftIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n        this.updateWidthForCells(table, selectedCells, dragValue);\n      } else {\n        var leastGridBefore = this.getLeastGridBefore(table, selectedRow);\n        var currentTableIndent = table.tableFormat.leftIndent;\n        if (currentTableIndent === 0) {\n          for (var i = 0; i < table.childWidgets.length; i++) {\n            var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n            if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n              this.updateGridBefore(tableRow, dragValue);\n              this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n            }\n          }\n        } else {\n          var difference = leastGridBefore - dragValue;\n          if (difference > 0) {\n            newIndent = table.leftIndent + dragValue;\n            table.tableFormat.leftIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n            this.updateWidthForCells(table, selectedCells, dragValue);\n          } else {\n            newIndent = table.leftIndent + leastGridBefore;\n            table.tableFormat.leftIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n            for (var i = 0; i < table.childWidgets.length; i++) {\n              var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n              if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n                this.updateGridBefore(tableRow, dragValue - leastGridBefore);\n              } else {\n                this.updateGridBefore(tableRow, -leastGridBefore);\n              }\n            }\n          }\n        }\n      }\n    }\n    table.tableFormat.allowAutoFit = false;\n    this.updateGridValue(table, true, dragValue);\n  };\n  TableResizer.prototype.updateWidthForCells = function (table, selectedCells, dragValue) {\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n      if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n        this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n      } else {\n        this.updateGridBefore(tableRow, -dragValue);\n      }\n    }\n  };\n  TableResizer.prototype.resizeColumnAtLastColumnIndex = function (table, dragValue, containerWidth) {\n    var tableAlignment = table.tableFormat.tableAlignment;\n    var preferredWidth = table.tableFormat.preferredWidth;\n    var hasTableWidth = preferredWidth;\n    var columnIndex = this.resizerPosition;\n    var leftColumn = table.tableHolder.columns[columnIndex - 1];\n    var prevDragValue = 0;\n    while (dragValue !== prevDragValue) {\n      var newWidth = HelperMethods.round(leftColumn.preferredWidth + dragValue, 1);\n      if (newWidth >= leftColumn.minWidth) {\n        leftColumn.preferredWidth = newWidth;\n        prevDragValue = dragValue;\n      } else {\n        prevDragValue = dragValue;\n        dragValue -= newWidth - leftColumn.minWidth;\n      }\n    }\n    this.updateCellPreferredWidths(table);\n    if (hasTableWidth || table.tableHolder.getTotalWidth(0) > containerWidth) {\n      table.tableFormat.allowAutoFit = false;\n      table.updateWidth(dragValue);\n      table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n    }\n    var dragOffset = dragValue;\n    if (tableAlignment === 'Right') {\n      dragOffset = 0;\n    } else if (tableAlignment === 'Center') {\n      dragOffset = dragOffset / 2;\n    }\n    this.updateGridValue(table, true, dragOffset);\n  };\n  TableResizer.prototype.resizeCellAtMiddle = function (table, dragValue) {\n    var columnIndex = this.resizerPosition;\n    var leftColumn = table.tableHolder.columns[columnIndex - 1];\n    var rightColumn = table.tableHolder.columns[parseInt(columnIndex.toString(), 10)];\n    if (dragValue > 0) {\n      var isContinue = true;\n      while (isContinue) {\n        var newWidth = HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n        if (newWidth >= rightColumn.minWidth) {\n          rightColumn.preferredWidth = newWidth;\n          leftColumn.preferredWidth = leftColumn.preferredWidth + dragValue;\n          isContinue = false;\n        } else {\n          dragValue += newWidth - rightColumn.minWidth;\n        }\n      }\n    } else {\n      var isContinue = true;\n      while (isContinue) {\n        var newWidth = HelperMethods.round(leftColumn.preferredWidth + dragValue, 1);\n        if (newWidth >= leftColumn.minWidth) {\n          leftColumn.preferredWidth = newWidth;\n          rightColumn.preferredWidth = rightColumn.preferredWidth - dragValue;\n          isContinue = false;\n        } else {\n          dragValue -= newWidth - leftColumn.minWidth;\n        }\n      }\n    }\n    // Update the cell widths based on the columns preferred width\n    this.updateCellPreferredWidths(table);\n    if (table.tableFormat.allowAutoFit) {\n      table.updateWidth(dragValue);\n    }\n    table.tableFormat.allowAutoFit = false;\n    table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n    this.updateGridValue(table, false, dragValue);\n  };\n  TableResizer.prototype.updateGridValue = function (table, isUpdate, dragValue) {\n    if (isUpdate) {\n      table.calculateGrid();\n      table.isGridUpdated = false;\n    }\n    table.buildTableColumns();\n    table.isGridUpdated = true;\n    this.viewer.owner.isLayoutEnabled = true;\n    if (table.isInsideTable) {\n      var parentTable = this.documentHelper.layout.getParentTable(table);\n      this.documentHelper.layout.reLayoutTable(parentTable); // Need to optmize this.\n    } else {\n      this.documentHelper.layout.reLayoutTable(table);\n    }\n    this.owner.editorModule.getOffsetValue(this.documentHelper.selection);\n    this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n    this.owner.editorModule.reLayout(this.owner.selectionModule);\n    this.owner.editorModule.isSkipOperationsBuild = false;\n    if (dragValue) {\n      this.startingPoint.x += HelperMethods.convertPointToPixel(dragValue);\n      this.resizerPosition = this.getCellReSizerPosition(this.startingPoint);\n    }\n  };\n  TableResizer.prototype.getColumnCells = function (table, columnIndex, isLeftSideCollection) {\n    var cells = [];\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[parseInt(i.toString(), 10)];\n      for (var j = 0; j < row.childWidgets.length; j++) {\n        var cell = row.childWidgets[parseInt(j.toString(), 10)];\n        if (isLeftSideCollection) {\n          if (cell.columnIndex + cell.cellFormat.columnSpan === columnIndex) {\n            cells.push(cell);\n          }\n        } else {\n          if (cell.columnIndex === columnIndex) {\n            cells.push(cell);\n          }\n        }\n      }\n    }\n    return cells;\n  };\n  TableResizer.prototype.updateGridBefore = function (row, offset) {\n    if (row.rowFormat.beforeWidth + offset !== row.rowFormat.beforeWidth) {\n      row.rowFormat.beforeWidth = row.rowFormat.beforeWidth + offset;\n      row.rowFormat.gridBeforeWidth = row.rowFormat.beforeWidth;\n    }\n  };\n  TableResizer.prototype.getLeastGridBefore = function (table, ignoreRow) {\n    var gridBefore = 0;\n    var flag = 0;\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[parseInt(i.toString(), 10)];\n      if (row !== ignoreRow) {\n        if (flag === 0) {\n          gridBefore = row.rowFormat.beforeWidth;\n          flag++;\n        }\n        if (row.rowFormat.beforeWidth <= gridBefore) {\n          gridBefore = row.rowFormat.beforeWidth;\n        }\n      }\n    }\n    return gridBefore;\n  };\n  TableResizer.prototype.increaseOrDecreaseWidth = function (cell, dragValue, isIncrease) {\n    var preferredWidth = cell.cellFormat.preferredWidth;\n    if (cell.cellFormat.preferredWidthType === 'Auto') {\n      preferredWidth = cell.cellFormat.cellWidth;\n      cell.cellFormat.preferredWidthType = 'Point';\n    }\n    var minimumWidth = cell.ownerColumn.minWidth;\n    if (cell.cellFormat.preferredWidthType === 'Percent') {\n      minimumWidth = cell.convertPointToPercent(minimumWidth);\n    }\n    // Margins properties usedd for internal purpose.\n    if (isIncrease) {\n      cell.cellFormat.preferredWidth = preferredWidth + dragValue > minimumWidth ? preferredWidth + dragValue : minimumWidth;\n    } else {\n      cell.cellFormat.preferredWidth = preferredWidth - dragValue > minimumWidth ? preferredWidth - dragValue : minimumWidth;\n    }\n  };\n  /* eslint-disable-next-line max-len */\n  TableResizer.prototype.changeWidthOfCells = function (table, leftColumnCollection, rightColumnCollection, dragValue) {\n    if (leftColumnCollection.length > 0) {\n      var flag = false;\n      for (var i = 0; i < leftColumnCollection.length; i++) {\n        var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n        this.increaseOrDecreaseWidth(cell, dragValue, true);\n        if (cell.cellIndex === cell.ownerRow.childWidgets.length - 1) {\n          flag = true;\n        }\n      }\n      if (flag) {\n        this.updateRowsGridAfterWidth(table);\n      }\n    }\n    if (rightColumnCollection.length > 0) {\n      var diff = 0;\n      for (var i = 0; i < rightColumnCollection.length; i++) {\n        var cell = rightColumnCollection[parseInt(i.toString(), 10)];\n        if (cell.cellIndex === 0) {\n          var newGridBefore = cell.ownerRow.rowFormat.beforeWidth + dragValue;\n          if (newGridBefore >= 0) {\n            this.updateGridBefore(cell.ownerRow, dragValue);\n          } else {\n            if (diff !== newGridBefore) {\n              diff = newGridBefore;\n            }\n            cell.ownerRow.rowFormat.gridBeforeWidth = 0;\n            cell.ownerRow.rowFormat.gridBeforeWidthType = 'Auto';\n          }\n        }\n        this.increaseOrDecreaseWidth(cell, dragValue, false);\n      }\n      if (diff !== 0) {\n        var newIndent = table.leftIndent + diff;\n        table.tableFormat.leftIndent = newIndent >= -1440 ? newIndent <= 1440 ? newIndent : 1440 : -1440;\n        for (var j = 0; j < table.childWidgets.length; j++) {\n          var row = table.childWidgets[parseInt(j.toString(), 10)];\n          if (rightColumnCollection.indexOf(row.childWidgets[0]) === -1) {\n            this.updateGridBefore(row, diff > 0 ? diff : -diff);\n          }\n        }\n      }\n    }\n  };\n  TableResizer.prototype.updateRowsGridAfterWidth = function (table) {\n    var maxRowWidth = this.getMaxRowWidth(table, true);\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[parseInt(i.toString(), 10)];\n      var currentRowWidth = this.getRowWidth(row, true);\n      if (maxRowWidth >= currentRowWidth && row.rowFormat.afterWidth !== maxRowWidth - currentRowWidth) {\n        var value = maxRowWidth - currentRowWidth;\n        row.rowFormat.gridAfterWidth = value;\n        row.rowFormat.afterWidth = value;\n      }\n    }\n  };\n  TableResizer.prototype.getRowWidth = function (row, toUpdateGridAfter) {\n    var rowWidth = 0;\n    if (toUpdateGridAfter) {\n      rowWidth = rowWidth + row.rowFormat.beforeWidth;\n    }\n    for (var i = 0; i < row.childWidgets.length; i++) {\n      var cell = row.childWidgets[parseInt(i.toString(), 10)];\n      rowWidth += cell.cellFormat.cellWidth;\n    }\n    return rowWidth;\n  };\n  TableResizer.prototype.getMaxRowWidth = function (table, toUpdateGridAfter) {\n    var width = 0;\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[parseInt(i.toString(), 10)];\n      var rowWidth = 0;\n      if (toUpdateGridAfter) {\n        rowWidth = rowWidth + row.rowFormat.beforeWidth;\n      }\n      for (var i_1 = 0; i_1 < row.childWidgets.length; i_1++) {\n        var cell = row.childWidgets[parseInt(i_1.toString(), 10)];\n        rowWidth += cell.cellFormat.cellWidth;\n      }\n      if (width < rowWidth) {\n        width = rowWidth;\n      }\n    }\n    return width;\n  };\n  TableResizer.prototype.isColumnSelected = function (table, columnIndex) {\n    var selection = this.owner.selectionModule;\n    var selectedCells = selection.getSelectedCells();\n    var leftColumnCells = this.getColumnCells(table, columnIndex, true);\n    var rightColumnCells = this.getColumnCells(table, columnIndex, false);\n    var isColumnSelected = false;\n    for (var i = 0; i < leftColumnCells.length; i++) {\n      var columnCell = leftColumnCells[parseInt(i.toString(), 10)];\n      isColumnSelected = selectedCells.indexOf(columnCell) !== -1 ? true : false;\n    }\n    if (!isColumnSelected) {\n      for (var i = 0; i < rightColumnCells.length; i++) {\n        var columnCell = rightColumnCells[parseInt(i.toString(), 10)];\n        isColumnSelected = selectedCells.indexOf(columnCell) !== -1 ? true : false;\n      }\n    }\n    return isColumnSelected;\n  };\n  TableResizer.prototype.applyProperties = function (table, tableHistoryInfo) {\n    if (isNullOrUndefined(tableHistoryInfo)) {\n      return;\n    }\n    // PreserveGrid = true;\n    if (tableHistoryInfo.tableHolder) {\n      table.tableHolder = tableHistoryInfo.tableHolder.clone();\n    }\n    if (tableHistoryInfo.tableFormat !== null) {\n      table.tableFormat.leftIndent = tableHistoryInfo.tableFormat.leftIndent;\n      table.tableFormat.preferredWidth = tableHistoryInfo.tableFormat.preferredWidth;\n      table.tableFormat.preferredWidthType = tableHistoryInfo.tableFormat.preferredWidthType;\n      table.tableFormat.allowAutoFit = tableHistoryInfo.tableFormat.allowAutoFit;\n    }\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[parseInt(i.toString(), 10)];\n      var rowFormat = tableHistoryInfo.rows[parseInt(i.toString(), 10)];\n      row.rowFormat.gridBefore = rowFormat.gridBefore;\n      row.rowFormat.gridBeforeWidth = rowFormat.gridBeforeWidth;\n      row.rowFormat.gridBeforeWidthType = rowFormat.gridBeforeWidthType;\n      row.rowFormat.gridAfter = rowFormat.gridAfter;\n      row.rowFormat.gridAfterWidth = rowFormat.gridAfterWidth;\n      row.rowFormat.gridAfterWidthType = rowFormat.gridAfterWidthType;\n      for (var j = 0; j < row.childWidgets.length; j++) {\n        var cell = row.childWidgets[parseInt(j.toString(), 10)];\n        var cellFormat = rowFormat.cells[parseInt(j.toString(), 10)];\n        cell.columnIndex = cellFormat.columnIndex;\n        cell.cellFormat.columnSpan = cellFormat.columnSpan;\n        cell.cellFormat.preferredWidth = cellFormat.preferredWidth;\n        cell.cellFormat.preferredWidthType = cellFormat.preferredWidthType;\n      }\n    }\n    var containerWidth = table.getOwnerWidth(true);\n    var tableWidth = table.getTableClientWidth(containerWidth);\n    //Sets the width to cells\n    table.setWidthToCells(tableWidth, table.tableFormat.preferredWidthType === 'Auto');\n    // PreserveGrid = false;\n  };\n  TableResizer.prototype.getActualWidth = function (row) {\n    var width = 0;\n    if (row.childWidgets.length > 0) {\n      for (var i = 0; i < row.childWidgets.length; i++) {\n        width += row.childWidgets[parseInt(i.toString(), 10)].cellFormat.cellWidth;\n      }\n    }\n    return width;\n  };\n  TableResizer.prototype.setPreferredWidth = function (table) {\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var rw = table.childWidgets[parseInt(i.toString(), 10)];\n      var rowFormat = rw.rowFormat;\n      if (rowFormat.gridBefore > 0) {\n        rowFormat.gridBeforeWidth = rowFormat.beforeWidth;\n        rowFormat.gridBeforeWidthType = 'Point';\n      }\n      for (var j = 0; j < rw.childWidgets.length; j++) {\n        var cell = rw.childWidgets[parseInt(j.toString(), 10)];\n        cell.cellFormat.preferredWidth = cell.cellFormat.cellWidth;\n        cell.cellFormat.preferredWidthType = 'Point';\n      }\n      if (rowFormat.gridAfter > 0) {\n        rowFormat.gridAfterWidth = rowFormat.afterWidth;\n        rowFormat.gridAfterWidthType = 'Point';\n      }\n    }\n  };\n  TableResizer.prototype.updateCellPreferredWidths = function (table) {\n    var tableWidth = table.tableHolder.tableWidth;\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[parseInt(i.toString(), 10)];\n      if (row.rowFormat.gridBefore > 0) {\n        var width = table.tableHolder.getCellWidth(0, row.rowFormat.gridBefore, tableWidth);\n        this.updateGridBeforeWidth(width, row);\n      }\n      for (var j = 0; j < row.childWidgets.length; j++) {\n        var cell = row.childWidgets[parseInt(j.toString(), 10)];\n        cell.updateWidth(table.tableHolder.getCellWidth(cell.columnIndex, cell.cellFormat.columnSpan, tableWidth));\n      }\n      if (row.rowFormat.gridAfter > 0) {\n        /* eslint-disable-next-line max-len */\n        this.updateGridAfterWidth(table.tableHolder.getCellWidth(row.childWidgets.length, row.rowFormat.gridAfter, tableWidth), row);\n      }\n    }\n  };\n  TableResizer.prototype.updateGridBeforeWidth = function (width, row) {\n    var rowFormat = row.rowFormat;\n    if (width !== rowFormat.beforeWidth) {\n      rowFormat.beforeWidth = width;\n      if (rowFormat.gridBeforeWidthType === 'Auto') {\n        rowFormat.gridBeforeWidthType = 'Point';\n      }\n      if (rowFormat.gridBeforeWidthType === 'Point') {\n        rowFormat.gridBeforeWidth = rowFormat.beforeWidth;\n      } else {\n        // The value is calculated from the pixel values hence, its converted to percent using method.\n        var ownerWidth = row.ownerTable.getTableClientWidth(row.ownerTable.getOwnerWidth(true));\n        var value = row.ownerTable.convertPointToPercent(rowFormat.beforeWidth, ownerWidth);\n        rowFormat.gridBeforeWidth = value;\n      }\n    }\n  };\n  TableResizer.prototype.updateGridAfterWidth = function (width, row) {\n    var rowFormat = row.rowFormat;\n    if (width !== rowFormat.afterWidth) {\n      rowFormat.afterWidth = width;\n    }\n    if (rowFormat.gridAfterWidthType === 'Auto') {\n      rowFormat.gridAfterWidthType = 'Point';\n    }\n    if (rowFormat.gridAfterWidthType === 'Point') {\n      rowFormat.gridAfterWidth = rowFormat.afterWidth;\n    } else {\n      // The value is calculated from the pixel values hence, its converted to percent using method.\n      var ownerWidth = row.ownerTable.getTableClientWidth(row.ownerTable.getOwnerWidth(true));\n      var value = row.ownerTable.convertPointToPercent(rowFormat.afterWidth, ownerWidth);\n      rowFormat.gridAfterWidth = value;\n    }\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  TableResizer.prototype.destroy = function () {\n    this.documentHelper = undefined;\n    this.owner = undefined;\n  };\n  return TableResizer;\n}();\nexport { TableResizer };","map":{"version":3,"names":["TableWidget","isNullOrUndefined","Point","HelperMethods","TableResizer","node","resizeNode","resizerPosition","currentResizingTable","undefined","owner","documentHelper","startingPoint","Object","defineProperty","prototype","get","viewer","enumerable","configurable","getModuleName","updateResizingHistory","touchPoint","editorHistoryModule","isRowOrCellResizing","handleResize","point","x","y","initResizingHistory","isInRowResizerArea","position","getRowReSizerPosition","isInCellResizerArea","getCellReSizerPosition","resizerBoundaryWidth","tableWidget","getTableWidget","cellWidget","getTableCellWidget","cellSpacing","tableFormat","isInsideRect","convertPointToPixel","leftBorderWidth","height","startingPointX","i","tableHolder","columns","length","preferredWidth","parseInt","toString","ownerTable","margin","left","top","bottom","columnIndex","nextRenderedWidget","right","width","cellFormat","columnSpan","childWidgets","getCellReSizerPositionInternal","childTableWidget","getTableWidgetFromWidget","childCellWidget","widget","getActualWidth","lastChild","nextSplitWidget","bottomBorderWidth","rowIndex","rowWidget","indexOf","containerWidget","topBorderWidth","handleResizing","isTableMarkerDragging","dragValue","isShiftingEnabled","resizeTableCellColumn","resizeTableRow","table","selection","selectionModule","isInsideTable","isLayoutEnabled","row","updateRowHeight","selectPosition","start","end","parentTable","layout","getParentTable","reLayoutTable","editorModule","isSkipOperationsBuild","enableCollaborativeEditing","reLayout","cursorPoint","currentPage","bodyWidgets","bodyWidget","layoutType","body","headerWidget","bodywid","footerWidget","j","childWidget","tableWidth","wrapTextAround","getTableCellWidth","enableHeaderAndFooter","rowFormat","heightType","row_1","ownerBase","currentHeight","getRowHeight","selectionFlag","setOffsetValue","combineWidget","setPreferredWidth","containerWidth","getOwnerWidth","newIndent","leftIndent","tableAlignment","isEmpty","resizeColumnWithSelection","updateGridValue","rightColumn","prevDragValue","newWidth","round","minWidth","dragOffset","getTotalWidth","preferredWidthType","isFitColumns","fitColumns","allowAutoFit","updateCellPreferredWidths","updateWidth","resizeColumnAtLastColumnIndex","resizeCellAtMiddle","cellwidget","selectedWidgets","containsKey","previousWidget","selectedCells","getSelectedCells","resizeColumnAtStart","leftColumnCollection","getColumnCells","cell","increaseOrDecreaseWidth","updateRowsGridAfterWidth","rightColumnCollection","isColumnResizing","isColumnSelected","splice","push","nextWidget","changeWidthOfCells","offset","selectedRow","ownerRow","beforeWidth","newGridBefore","updateGridBefore","leastGridBefore","getLeastGridBefore","tableRow","updateWidthForCells","currentTableIndent","difference","hasTableWidth","leftColumn","isContinue","isUpdate","calculateGrid","isGridUpdated","buildTableColumns","getOffsetValue","isLeftSideCollection","cells","gridBeforeWidth","ignoreRow","gridBefore","flag","isIncrease","cellWidth","minimumWidth","ownerColumn","convertPointToPercent","cellIndex","diff","gridBeforeWidthType","maxRowWidth","getMaxRowWidth","currentRowWidth","getRowWidth","afterWidth","value","gridAfterWidth","toUpdateGridAfter","rowWidth","i_1","leftColumnCells","rightColumnCells","columnCell","applyProperties","tableHistoryInfo","clone","rows","gridAfter","gridAfterWidthType","getTableClientWidth","setWidthToCells","rw","getCellWidth","updateGridBeforeWidth","updateGridAfterWidth","ownerWidth","destroy"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/table-resizer.js"],"sourcesContent":["import { TableWidget } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Point, HelperMethods } from './editor-helper';\n/**\n * @private\n */\nvar TableResizer = /** @class */ (function () {\n    function TableResizer(node) {\n        this.resizeNode = 0;\n        this.resizerPosition = -1;\n        this.currentResizingTable = undefined;\n        this.owner = node;\n        this.documentHelper = this.owner.documentHelper;\n        this.startingPoint = new Point(0, 0);\n    }\n    Object.defineProperty(TableResizer.prototype, \"viewer\", {\n        get: function () {\n            return this.owner.viewer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableResizer.prototype.getModuleName = function () {\n        return 'TableResizer';\n    };\n    TableResizer.prototype.updateResizingHistory = function (touchPoint) {\n        if (this.owner.editorHistoryModule) {\n            this.owner.editorHistoryModule.updateResizingHistory(touchPoint, this);\n        }\n        this.documentHelper.isRowOrCellResizing = false;\n        this.resizerPosition = -1;\n    };\n    TableResizer.prototype.handleResize = function (point) {\n        this.owner.documentHelper.isRowOrCellResizing = true;\n        this.startingPoint.x = point.x;\n        this.startingPoint.y = point.y;\n        //Initialize resizing history.\n        this.owner.editorHistoryModule.initResizingHistory(point, this);\n    };\n    //Table Resizing implementation starts\n    TableResizer.prototype.isInRowResizerArea = function (touchPoint) {\n        var position = this.getRowReSizerPosition(undefined, touchPoint);\n        if (position === -1) {\n            return false;\n        }\n        else {\n            this.resizeNode = 1;\n            this.resizerPosition = position;\n            return true;\n        }\n    };\n    TableResizer.prototype.isInCellResizerArea = function (touchPoint) {\n        var position = this.getCellReSizerPosition(touchPoint);\n        if (position === -1) {\n            return false;\n        }\n        else {\n            this.resizeNode = 0;\n            this.resizerPosition = position;\n            return true;\n        }\n    };\n    TableResizer.prototype.getCellReSizerPosition = function (touchPoint) {\n        var position = -1;\n        var resizerBoundaryWidth = 2;\n        var tableWidget = this.getTableWidget(touchPoint);\n        var cellWidget = this.getTableCellWidget(touchPoint);\n        var cellSpacing = isNullOrUndefined(tableWidget) ? 0 : tableWidget.tableFormat.cellSpacing;\n        if (tableWidget && cellSpacing > 0) {\n            this.currentResizingTable = tableWidget;\n            /* eslint-disable-next-line max-len */\n            if (this.documentHelper.isInsideRect(tableWidget.x - HelperMethods.convertPointToPixel(tableWidget.leftBorderWidth) - 0.25, tableWidget.y, HelperMethods.convertPointToPixel(tableWidget.leftBorderWidth) + 0.5, tableWidget.height, touchPoint)) {\n                return position = 0;\n            }\n            var startingPointX = tableWidget.x;\n            for (var i = 0; i < tableWidget.tableHolder.columns.length; i++) {\n                var preferredWidth = HelperMethods.convertPointToPixel(tableWidget.tableHolder.columns[parseInt(i.toString(), 10)].preferredWidth);\n                /* eslint-disable-next-line max-len */\n                if ((this.documentHelper.isInsideRect(startingPointX - 1, tableWidget.y, tableWidget.leftBorderWidth + resizerBoundaryWidth, tableWidget.height, touchPoint))) {\n                    return position = i > 0 ? i : 0;\n                    /* eslint-disable-next-line max-len */\n                }\n                else if (i > 0 && (this.documentHelper.isInsideRect(startingPointX + preferredWidth - resizerBoundaryWidth / 2, tableWidget.y, resizerBoundaryWidth, tableWidget.height, touchPoint))) {\n                    return position = (i + 1);\n                }\n                startingPointX = startingPointX + preferredWidth;\n            }\n        }\n        else {\n            if (!isNullOrUndefined(cellWidget)) {\n                this.currentResizingTable = cellWidget.ownerTable;\n                /* eslint-disable-next-line max-len */\n                if (this.documentHelper.isInsideRect(cellWidget.x - cellWidget.margin.left - resizerBoundaryWidth / 2, cellWidget.y - cellWidget.margin.top, resizerBoundaryWidth, cellWidget.height + cellWidget.margin.top + cellWidget.margin.bottom, touchPoint)) {\n                    return position = cellWidget.columnIndex;\n                }\n                else if (isNullOrUndefined(cellWidget.nextRenderedWidget)\n                    /* eslint-disable-next-line max-len */\n                    && this.documentHelper.isInsideRect(cellWidget.x + cellWidget.margin.right + cellWidget.width - resizerBoundaryWidth / 2, cellWidget.y - cellWidget.margin.top, resizerBoundaryWidth, cellWidget.height + cellWidget.margin.top + cellWidget.margin.bottom, touchPoint)) {\n                    return position = (cellWidget.columnIndex + cellWidget.cellFormat.columnSpan);\n                }\n                else if (cellWidget.childWidgets.length > 0) {\n                    return this.getCellReSizerPositionInternal(cellWidget, touchPoint); // Gets the nested table resizer position.\n                }\n            }\n        }\n        return position;\n    };\n    TableResizer.prototype.getCellReSizerPositionInternal = function (cellWidget, touchPoint) {\n        var position = -1;\n        var childTableWidget = this.getTableWidgetFromWidget(touchPoint, cellWidget);\n        var childCellWidget = undefined;\n        if (!isNullOrUndefined(childTableWidget) && childTableWidget.tableFormat.cellSpacing > 0) {\n            this.currentResizingTable = childTableWidget;\n            /* eslint-disable-next-line max-len */\n            if (this.documentHelper.isInsideRect(childTableWidget.x - childTableWidget.leftBorderWidth - 0.25, childTableWidget.y, childTableWidget.leftBorderWidth + 0.5, childTableWidget.height, touchPoint)) {\n                return position = 0;\n            }\n            var startingPointX = childTableWidget.x;\n            for (var i = 0; i < childTableWidget.tableHolder.columns.length; i++) {\n                var preferredWidth = HelperMethods.convertPointToPixel(childTableWidget.tableHolder.columns[parseInt(i.toString(), 10)].preferredWidth);\n                /* eslint-disable-next-line max-len */\n                if ((this.documentHelper.isInsideRect(startingPointX - 1, childTableWidget.y, childTableWidget.leftBorderWidth + 2, childTableWidget.height, touchPoint))) {\n                    return position = i > 0 ? i : 0;\n                    /* eslint-disable-next-line max-len */\n                }\n                else if (i > 0 && (this.documentHelper.isInsideRect(startingPointX + preferredWidth - 1, childTableWidget.y, 2, childTableWidget.height, touchPoint))) {\n                    return position = (i + 1);\n                }\n                startingPointX = startingPointX + preferredWidth;\n            }\n        }\n        else {\n            if (!isNullOrUndefined(childTableWidget)) {\n                childCellWidget = childTableWidget.getTableCellWidget(touchPoint);\n            }\n            if (!isNullOrUndefined(childCellWidget)) {\n                this.currentResizingTable = childCellWidget.ownerTable;\n                /* eslint-disable-next-line max-len */\n                if (this.documentHelper.isInsideRect(childCellWidget.x - childCellWidget.margin.left - 1, childCellWidget.y - childCellWidget.margin.top, 2, childCellWidget.height, touchPoint)) {\n                    return position = childCellWidget.columnIndex;\n                }\n                else if (isNullOrUndefined(childCellWidget.nextRenderedWidget)\n                    /* eslint-disable-next-line max-len */\n                    && this.documentHelper.isInsideRect(childCellWidget.x + childCellWidget.margin.right + childCellWidget.width - 1, childCellWidget.y - childCellWidget.margin.top, 2, childCellWidget.height, touchPoint)) {\n                    return position = (childCellWidget.columnIndex + childCellWidget.cellFormat.columnSpan);\n                }\n                else if (childCellWidget.childWidgets.length > 0) {\n                    return this.getCellReSizerPositionInternal(childCellWidget, touchPoint);\n                }\n            }\n        }\n        return position;\n    };\n    TableResizer.prototype.getRowReSizerPosition = function (widget, touchPoint) {\n        var tableWidget = undefined;\n        var cellWidget = undefined;\n        if (isNullOrUndefined(widget)) {\n            tableWidget = this.getTableWidget(touchPoint);\n            cellWidget = this.getTableCellWidget(touchPoint);\n        }\n        else {\n            tableWidget = this.getTableWidgetFromWidget(touchPoint, widget);\n        }\n        var cellSpacing = isNullOrUndefined(tableWidget) ? 0 : tableWidget.tableFormat.cellSpacing;\n        if (tableWidget && cellSpacing > 0) {\n            this.currentResizingTable = tableWidget;\n            /* eslint-disable-next-line max-len */\n            if (this.owner.documentHelper.isInsideRect(tableWidget.x, tableWidget.y + tableWidget.height - cellSpacing, this.getActualWidth(tableWidget.lastChild), (isNullOrUndefined(tableWidget.nextSplitWidget) ? tableWidget.bottomBorderWidth + cellSpacing : 0), touchPoint)) {\n                return tableWidget.lastChild.rowIndex;\n            }\n            for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n                //Need to consider for splitted widgets\n                var rowWidget = tableWidget.childWidgets[parseInt(i.toString(), 10)];\n                if (tableWidget.childWidgets.indexOf(rowWidget) > -1\n                    /* eslint-disable-next-line max-len */\n                    && (this.owner.documentHelper.isInsideRect(rowWidget.x, rowWidget.y + rowWidget.height + cellSpacing / 2, this.getActualWidth(rowWidget), cellSpacing / 2, touchPoint))) {\n                    return rowWidget.rowIndex;\n                }\n            }\n        }\n        else {\n            if (tableWidget && cellWidget) {\n                cellWidget = this.getTableCellWidget(touchPoint);\n            }\n            if (cellWidget) {\n                var rowWidget = cellWidget.containerWidget;\n                var height = 0;\n                if (rowWidget.rowIndex === rowWidget.ownerTable.childWidgets.length - 1) {\n                    height = rowWidget.bottomBorderWidth + 2;\n                }\n                else {\n                    height = rowWidget.nextRenderedWidget.topBorderWidth + 2;\n                }\n                /* eslint-disable-next-line max-len */\n                if (this.owner.documentHelper.isInsideRect(rowWidget.x, rowWidget.y + rowWidget.height - height, rowWidget.width, height * 2, touchPoint)) {\n                    this.currentResizingTable = rowWidget.ownerTable;\n                    return rowWidget.rowIndex;\n                }\n                else {\n                    if (cellWidget.childWidgets.length > 0) {\n                        return this.getRowReSizerPosition(cellWidget, touchPoint);\n                    }\n                }\n            }\n        }\n        return -1;\n    };\n    TableResizer.prototype.handleResizing = function (touchPoint, isTableMarkerDragging, dragValue) {\n        this.owner.isShiftingEnabled = true;\n        if (!isTableMarkerDragging) {\n            if (this.resizeNode === 0) {\n                dragValue = touchPoint.x - this.startingPoint.x;\n                this.resizeTableCellColumn(dragValue);\n            }\n            else {\n                dragValue = touchPoint.y - this.startingPoint.y;\n                this.resizeTableRow(dragValue);\n            }\n        }\n        else {\n            if (this.resizeNode === 0) {\n                this.resizeTableCellColumn(dragValue);\n            }\n        }\n    };\n    TableResizer.prototype.resizeTableRow = function (dragValue) {\n        var table = this.currentResizingTable;\n        if (isNullOrUndefined(table) || dragValue === 0 || this.resizerPosition === -1) {\n            return;\n        }\n        var selection = this.owner.selectionModule;\n        if (table.isInsideTable) {\n            this.owner.isLayoutEnabled = false; //Layouting is disabled to skip the child table layouting.\n        }\n        var row = undefined;\n        if (this.resizerPosition > -1) {\n            row = table.childWidgets[this.resizerPosition];\n            if (row) {\n                this.updateRowHeight(row, dragValue);\n            }\n            selection.selectPosition(selection.start, selection.end);\n        }\n        if (table.isInsideTable) {\n            var parentTable = this.owner.documentHelper.layout.getParentTable(table);\n            this.owner.isLayoutEnabled = true; //layouting is enabled to layout the parent table of the nested table.\n            table = parentTable;\n        }\n        this.startingPoint.y += HelperMethods.convertPointToPixel(dragValue);\n        this.owner.documentHelper.layout.reLayoutTable(table);\n        this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.owner.editorModule.reLayout(this.owner.selectionModule);\n        this.owner.editorModule.isSkipOperationsBuild = false;\n        if (row) {\n            this.getRowReSizerPosition(undefined, this.startingPoint);\n        }\n        if (this.currentResizingTable && (this.currentResizingTable.childWidgets === undefined\n            || this.currentResizingTable.childWidgets[this.resizerPosition] === undefined)) {\n            this.resizerPosition = -1;\n        }\n    };\n    TableResizer.prototype.getTableWidget = function (cursorPoint) {\n        var widget = undefined;\n        var currentPage = this.owner.documentHelper.currentPage;\n        if (!isNullOrUndefined(currentPage)) {\n            for (var i = 0; i < currentPage.bodyWidgets.length; i++) {\n                var bodyWidget = currentPage.bodyWidgets[parseInt(i.toString(), 10)];\n                widget = this.getTableWidgetFromWidget(cursorPoint, bodyWidget);\n                if (!isNullOrUndefined(widget)) {\n                    break;\n                }\n                if (this.documentHelper.owner.layoutType === 'Pages') {\n                    var body = currentPage.headerWidget;\n                    widget = this.getTableWidgetFromWidget(cursorPoint, body);\n                    if (!isNullOrUndefined(widget)) {\n                        break;\n                    }\n                    var bodywid = currentPage.footerWidget;\n                    widget = this.getTableWidgetFromWidget(cursorPoint, bodywid);\n                    if (!isNullOrUndefined(widget)) {\n                        break;\n                    }\n                }\n            }\n        }\n        return widget;\n    };\n    TableResizer.prototype.getTableWidgetFromWidget = function (point, widget) {\n        for (var j = 0; j < widget.childWidgets.length; j++) {\n            if (widget.childWidgets[parseInt(j.toString(), 10)] instanceof TableWidget) {\n                var childWidget = widget.childWidgets[parseInt(j.toString(), 10)];\n                var tableWidth = 0;\n                if (childWidget.wrapTextAround) {\n                    tableWidth = childWidget.getTableCellWidth();\n                }\n                if (!(childWidget.wrapTextAround) && childWidget.y <= point.y && (childWidget.y + childWidget.height) >= point.y) {\n                    return childWidget;\n                }\n                if ((childWidget.wrapTextAround &&\n                    (childWidget.x <= point.x && (childWidget.x + tableWidth) >= point.x &&\n                        childWidget.y <= point.y && (childWidget.y + childWidget.height) >= point.y))) {\n                    return childWidget;\n                }\n            }\n        }\n        return undefined;\n    };\n    TableResizer.prototype.getTableCellWidget = function (cursorPoint) {\n        var widget = undefined;\n        var currentPage = this.owner.documentHelper.currentPage;\n        if (!isNullOrUndefined(currentPage)) {\n            for (var i = 0; i < currentPage.bodyWidgets.length; i++) {\n                var bodyWidget = currentPage.bodyWidgets[parseInt(i.toString(), 10)];\n                widget = bodyWidget.getTableCellWidget(cursorPoint);\n                if (!isNullOrUndefined(widget)) {\n                    break;\n                }\n                if (this.documentHelper.owner.layoutType === 'Pages' && this.viewer.owner.enableHeaderAndFooter) {\n                    var body = currentPage.headerWidget;\n                    widget = body.getTableCellWidget(cursorPoint);\n                    if (!isNullOrUndefined(widget)) {\n                        break;\n                    }\n                    var bodywid = currentPage.footerWidget;\n                    widget = bodywid.getTableCellWidget(cursorPoint);\n                    if (!isNullOrUndefined(widget)) {\n                        break;\n                    }\n                }\n            }\n        }\n        return widget;\n    };\n    TableResizer.prototype.updateRowHeight = function (row, dragValue) {\n        var rowFormat = row.rowFormat;\n        if (rowFormat.heightType === 'Auto') {\n            rowFormat.heightType = 'AtLeast';\n            var row_1 = rowFormat.ownerBase;\n            var currentHeight = this.owner.documentHelper.layout.getRowHeight(row_1, [row_1]);\n            //the minimum height of the Row in MS word is 2.7 points which is equal to 3.6 pixel.\n            if (currentHeight + dragValue >= 2.7 && rowFormat.height !== currentHeight + dragValue) {\n                rowFormat.height = currentHeight + dragValue;\n            }\n        }\n        else {\n            //the minimum height of the Row in MS word is 2.7 points which is equal to 3.6 pixel.\n            if (rowFormat.height + dragValue >= 2.7 && rowFormat.height !== rowFormat.height + dragValue) {\n                rowFormat.height = rowFormat.height + dragValue;\n            }\n        }\n    };\n    //Resize Table cell\n    TableResizer.prototype.resizeTableCellColumn = function (dragValue) {\n        var table = this.currentResizingTable;\n        if (isNullOrUndefined(table) || dragValue === 0 || isNullOrUndefined(table.childWidgets) || this.resizerPosition < 0) {\n            return;\n        }\n        var selectionFlag = true;\n        var selection = this.owner.selectionModule;\n        this.owner.editorModule.setOffsetValue(selection);\n        table = table.combineWidget(this.viewer);\n        this.owner.isLayoutEnabled = false;\n        // table.PreserveGrid = true;\n        this.setPreferredWidth(table);\n        var containerWidth = table.getOwnerWidth(true);\n        var newIndent = table.leftIndent;\n        var tableAlignment = table.tableFormat.tableAlignment;\n        if (!selection.isEmpty) {\n            selectionFlag = this.resizeColumnWithSelection(selection, table, dragValue);\n        }\n        if (!selectionFlag) {\n            this.updateGridValue(table, true);\n            return;\n        }\n        if (this.resizerPosition === 0) {\n            // Todo: need to handle the resizing of first column and table indent.\n            var columnIndex = this.resizerPosition;\n            var rightColumn = table.tableHolder.columns[parseInt(columnIndex.toString(), 10)];\n            var width = rightColumn.preferredWidth;\n            if (dragValue > 0) {\n                var prevDragValue = dragValue;\n                do {\n                    var newWidth = HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n                    if (newWidth >= rightColumn.minWidth) {\n                        rightColumn.preferredWidth = newWidth;\n                        newIndent = table.leftIndent + dragValue;\n                        newIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        break;\n                    }\n                    else {\n                        prevDragValue = dragValue;\n                        dragValue += newWidth - rightColumn.minWidth;\n                    }\n                } while (dragValue !== prevDragValue);\n            }\n            else {\n                var prevDragValue = dragValue;\n                do {\n                    var newWidth = HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n                    if (newWidth <= 2112) {\n                        rightColumn.preferredWidth = newWidth;\n                        newIndent = table.leftIndent + dragValue;\n                        newIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        break;\n                    }\n                    else {\n                        prevDragValue = dragValue;\n                        dragValue -= newWidth - 2112;\n                    }\n                } while (dragValue !== prevDragValue);\n            }\n            var dragOffset = dragValue;\n            if (tableAlignment !== 'Left' && (table.tableHolder.getTotalWidth(0) > containerWidth) && table.tableFormat.preferredWidthType === 'Auto') {\n                if (table.tableHolder.isFitColumns(containerWidth, table.tableHolder.tableWidth, table.tableFormat.preferredWidthType === 'Auto')) {\n                    table.tableHolder.fitColumns(containerWidth, table.tableHolder.tableWidth, table.tableFormat.preferredWidthType === 'Auto', table.tableFormat.allowAutoFit);\n                }\n                else {\n                    rightColumn.preferredWidth = width;\n                }\n                dragOffset = 0;\n            }\n            if (tableAlignment === 'Center'\n                && (table.tableHolder.getTotalWidth(0) < containerWidth || table.tableFormat.preferredWidthType !== 'Auto')) {\n                dragOffset = dragOffset / 2;\n            }\n            table.tableFormat.leftIndent = tableAlignment === 'Left' ? newIndent : 0;\n            table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n            this.updateCellPreferredWidths(table);\n            if (table.tableFormat.preferredWidthType !== 'Auto') {\n                table.updateWidth(dragValue);\n            }\n            this.updateGridValue(table, true, dragOffset);\n        }\n        else if (table !== null && this.resizerPosition === table.tableHolder.columns.length) {\n            // Todo: need to handle the resizing of last column and table width.\n            this.resizeColumnAtLastColumnIndex(table, dragValue, containerWidth);\n        }\n        else {\n            if (this.resizerPosition === -1) {\n                this.owner.isLayoutEnabled = true;\n                return;\n            }\n            this.resizeCellAtMiddle(table, dragValue);\n        }\n        // table.PreserveGrid = false;\n        this.owner.isLayoutEnabled = true;\n        selection.selectPosition(selection.start, selection.end);\n    };\n    TableResizer.prototype.resizeColumnWithSelection = function (selection, table, dragValue) {\n        //const newIndent: number = table.leftIndent;\n        var cellwidget = this.getTableCellWidget(this.startingPoint);\n        if (cellwidget && (selection.selectedWidgets.containsKey(cellwidget) || (cellwidget.previousWidget\n            && selection.selectedWidgets.containsKey((cellwidget.previousWidget))))) {\n            var selectedCells = selection.getSelectedCells();\n            if (this.resizerPosition === 0) {\n                this.resizeColumnAtStart(table, dragValue, selectedCells);\n            }\n            else if (table !== null && this.resizerPosition === table.tableHolder.columns.length) {\n                var leftColumnCollection = this.getColumnCells(table, this.resizerPosition, true);\n                for (var i = 0; i < leftColumnCollection.length; i++) {\n                    var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n                    if (selectedCells.indexOf(cell) !== -1) {\n                        this.increaseOrDecreaseWidth(cell, dragValue, true);\n                    }\n                }\n                //Updates the grid after value for all the rows.\n                this.updateRowsGridAfterWidth(table);\n                table.updateWidth(dragValue);\n                table.tableFormat.allowAutoFit = false;\n                this.updateGridValue(table, true, dragValue);\n            }\n            else {\n                if (this.resizerPosition === -1) {\n                    return false;\n                }\n                var columnIndex = this.resizerPosition;\n                var leftColumnCollection = this.getColumnCells(table, columnIndex, true);\n                var rightColumnCollection = this.getColumnCells(table, columnIndex, false);\n                var isColumnResizing = this.isColumnSelected(table, columnIndex);\n                if (leftColumnCollection.length > 0 && !isColumnResizing) {\n                    for (var i = 0; i < leftColumnCollection.length; i++) {\n                        if (selectedCells.indexOf(leftColumnCollection[parseInt(i.toString(), 10)]) === -1) {\n                            leftColumnCollection.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n                if (rightColumnCollection.length > 0 && !isColumnResizing) {\n                    for (var i = 0; i < rightColumnCollection.length; i++) {\n                        if (selectedCells.indexOf(rightColumnCollection[parseInt(i.toString(), 10)]) === -1) {\n                            rightColumnCollection.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n                //Getting the adjacent cell collections for left side selected cells in the right column collection.\n                if (leftColumnCollection.length === 0 && rightColumnCollection.length > 0) {\n                    for (var i = 0; i < rightColumnCollection.length; i++) {\n                        var cell = rightColumnCollection[parseInt(i.toString(), 10)];\n                        if (cell.previousWidget) {\n                            leftColumnCollection.push(cell.previousWidget);\n                        }\n                    }\n                }\n                else if (rightColumnCollection.length === 0 && leftColumnCollection.length > 0) {\n                    for (var i = 0; i < leftColumnCollection.length; i++) {\n                        var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n                        if (cell.nextWidget) {\n                            rightColumnCollection.push(cell.nextWidget);\n                        }\n                    }\n                }\n                this.changeWidthOfCells(table, leftColumnCollection, rightColumnCollection, dragValue);\n                if (table.tableFormat.allowAutoFit) {\n                    table.updateWidth(dragValue);\n                }\n                table.tableFormat.allowAutoFit = false;\n                this.updateGridValue(table, true, dragValue);\n            }\n            selection.selectPosition(selection.start, selection.end);\n        }\n        return false;\n    };\n    TableResizer.prototype.resizeColumnAtStart = function (table, dragValue, selectedCells) {\n        var newIndent = table.leftIndent;\n        //const rightColumnCollection: TableCellWidget[] = this.getColumnCells(table, this.resizerPosition, false);\n        var offset = 0;\n        var selectedRow = selectedCells[0].ownerRow;\n        var rowFormat = selectedRow.rowFormat;\n        if (rowFormat.beforeWidth > 0) {\n            var newGridBefore = rowFormat.beforeWidth + dragValue;\n            if (newGridBefore > 0) {\n                this.updateGridBefore(selectedRow, dragValue);\n            }\n            else {\n                var leastGridBefore = this.getLeastGridBefore(table, selectedRow);\n                if (newGridBefore < leastGridBefore && offset !== newGridBefore) {\n                    newIndent = table.leftIndent + newGridBefore;\n                    table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                    for (var i = 0; i < table.childWidgets.length; i++) {\n                        var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n                        if (selectedRow !== tableRow) {\n                            this.updateGridBefore(tableRow, -newGridBefore);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (dragValue < 0) {\n                newIndent = table.leftIndent + dragValue;\n                table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                this.updateWidthForCells(table, selectedCells, dragValue);\n            }\n            else {\n                var leastGridBefore = this.getLeastGridBefore(table, selectedRow);\n                var currentTableIndent = table.tableFormat.leftIndent;\n                if (currentTableIndent === 0) {\n                    for (var i = 0; i < table.childWidgets.length; i++) {\n                        var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n                        if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                            this.updateGridBefore(tableRow, dragValue);\n                            this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n                        }\n                    }\n                }\n                else {\n                    var difference = leastGridBefore - dragValue;\n                    if (difference > 0) {\n                        newIndent = table.leftIndent + dragValue;\n                        table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        this.updateWidthForCells(table, selectedCells, dragValue);\n                    }\n                    else {\n                        newIndent = table.leftIndent + leastGridBefore;\n                        table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                        for (var i = 0; i < table.childWidgets.length; i++) {\n                            var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n                            if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                                this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n                                this.updateGridBefore(tableRow, dragValue - leastGridBefore);\n                            }\n                            else {\n                                this.updateGridBefore(tableRow, -leastGridBefore);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        table.tableFormat.allowAutoFit = false;\n        this.updateGridValue(table, true, dragValue);\n    };\n    TableResizer.prototype.updateWidthForCells = function (table, selectedCells, dragValue) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var tableRow = table.childWidgets[parseInt(i.toString(), 10)];\n            if (selectedCells.indexOf(tableRow.childWidgets[0]) !== -1) {\n                this.increaseOrDecreaseWidth(tableRow.childWidgets[0], dragValue, false);\n            }\n            else {\n                this.updateGridBefore(tableRow, -dragValue);\n            }\n        }\n    };\n    TableResizer.prototype.resizeColumnAtLastColumnIndex = function (table, dragValue, containerWidth) {\n        var tableAlignment = table.tableFormat.tableAlignment;\n        var preferredWidth = table.tableFormat.preferredWidth;\n        var hasTableWidth = preferredWidth;\n        var columnIndex = this.resizerPosition;\n        var leftColumn = table.tableHolder.columns[columnIndex - 1];\n        var prevDragValue = 0;\n        while (dragValue !== prevDragValue) {\n            var newWidth = HelperMethods.round(leftColumn.preferredWidth + dragValue, 1);\n            if (newWidth >= leftColumn.minWidth) {\n                leftColumn.preferredWidth = newWidth;\n                prevDragValue = dragValue;\n            }\n            else {\n                prevDragValue = dragValue;\n                dragValue -= newWidth - leftColumn.minWidth;\n            }\n        }\n        this.updateCellPreferredWidths(table);\n        if (hasTableWidth || table.tableHolder.getTotalWidth(0) > containerWidth) {\n            table.tableFormat.allowAutoFit = false;\n            table.updateWidth(dragValue);\n            table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n        }\n        var dragOffset = dragValue;\n        if (tableAlignment === 'Right') {\n            dragOffset = 0;\n        }\n        else if (tableAlignment === 'Center') {\n            dragOffset = dragOffset / 2;\n        }\n        this.updateGridValue(table, true, dragOffset);\n    };\n    TableResizer.prototype.resizeCellAtMiddle = function (table, dragValue) {\n        var columnIndex = this.resizerPosition;\n        var leftColumn = table.tableHolder.columns[columnIndex - 1];\n        var rightColumn = table.tableHolder.columns[parseInt(columnIndex.toString(), 10)];\n        if (dragValue > 0) {\n            var isContinue = true;\n            while (isContinue) {\n                var newWidth = HelperMethods.round(rightColumn.preferredWidth - dragValue, 1);\n                if (newWidth >= rightColumn.minWidth) {\n                    rightColumn.preferredWidth = newWidth;\n                    leftColumn.preferredWidth = leftColumn.preferredWidth + dragValue;\n                    isContinue = false;\n                }\n                else {\n                    dragValue += newWidth - rightColumn.minWidth;\n                }\n            }\n        }\n        else {\n            var isContinue = true;\n            while (isContinue) {\n                var newWidth = HelperMethods.round(leftColumn.preferredWidth + dragValue, 1);\n                if (newWidth >= leftColumn.minWidth) {\n                    leftColumn.preferredWidth = newWidth;\n                    rightColumn.preferredWidth = rightColumn.preferredWidth - dragValue;\n                    isContinue = false;\n                }\n                else {\n                    dragValue -= newWidth - leftColumn.minWidth;\n                }\n            }\n        }\n        // Update the cell widths based on the columns preferred width\n        this.updateCellPreferredWidths(table);\n        if (table.tableFormat.allowAutoFit) {\n            table.updateWidth(dragValue);\n        }\n        table.tableFormat.allowAutoFit = false;\n        table.tableHolder.tableWidth = table.tableHolder.getTotalWidth(0);\n        this.updateGridValue(table, false, dragValue);\n    };\n    TableResizer.prototype.updateGridValue = function (table, isUpdate, dragValue) {\n        if (isUpdate) {\n            table.calculateGrid();\n            table.isGridUpdated = false;\n        }\n        table.buildTableColumns();\n        table.isGridUpdated = true;\n        this.viewer.owner.isLayoutEnabled = true;\n        if (table.isInsideTable) {\n            var parentTable = this.documentHelper.layout.getParentTable(table);\n            this.documentHelper.layout.reLayoutTable(parentTable); // Need to optmize this.\n        }\n        else {\n            this.documentHelper.layout.reLayoutTable(table);\n        }\n        this.owner.editorModule.getOffsetValue(this.documentHelper.selection);\n        this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.owner.editorModule.reLayout(this.owner.selectionModule);\n        this.owner.editorModule.isSkipOperationsBuild = false;\n        if (dragValue) {\n            this.startingPoint.x += HelperMethods.convertPointToPixel(dragValue);\n            this.resizerPosition = this.getCellReSizerPosition(this.startingPoint);\n        }\n    };\n    TableResizer.prototype.getColumnCells = function (table, columnIndex, isLeftSideCollection) {\n        var cells = [];\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[parseInt(j.toString(), 10)];\n                if (isLeftSideCollection) {\n                    if (cell.columnIndex + cell.cellFormat.columnSpan === columnIndex) {\n                        cells.push(cell);\n                    }\n                }\n                else {\n                    if (cell.columnIndex === columnIndex) {\n                        cells.push(cell);\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    TableResizer.prototype.updateGridBefore = function (row, offset) {\n        if (row.rowFormat.beforeWidth + offset !== row.rowFormat.beforeWidth) {\n            row.rowFormat.beforeWidth = row.rowFormat.beforeWidth + offset;\n            row.rowFormat.gridBeforeWidth = row.rowFormat.beforeWidth;\n        }\n    };\n    TableResizer.prototype.getLeastGridBefore = function (table, ignoreRow) {\n        var gridBefore = 0;\n        var flag = 0;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            if (row !== ignoreRow) {\n                if (flag === 0) {\n                    gridBefore = row.rowFormat.beforeWidth;\n                    flag++;\n                }\n                if (row.rowFormat.beforeWidth <= gridBefore) {\n                    gridBefore = row.rowFormat.beforeWidth;\n                }\n            }\n        }\n        return gridBefore;\n    };\n    TableResizer.prototype.increaseOrDecreaseWidth = function (cell, dragValue, isIncrease) {\n        var preferredWidth = cell.cellFormat.preferredWidth;\n        if (cell.cellFormat.preferredWidthType === 'Auto') {\n            preferredWidth = cell.cellFormat.cellWidth;\n            cell.cellFormat.preferredWidthType = 'Point';\n        }\n        var minimumWidth = cell.ownerColumn.minWidth;\n        if (cell.cellFormat.preferredWidthType === 'Percent') {\n            minimumWidth = cell.convertPointToPercent(minimumWidth);\n        }\n        // Margins properties usedd for internal purpose.\n        if (isIncrease) {\n            cell.cellFormat.preferredWidth = preferredWidth + dragValue > minimumWidth ? preferredWidth + dragValue : minimumWidth;\n        }\n        else {\n            cell.cellFormat.preferredWidth = preferredWidth - dragValue > minimumWidth ? preferredWidth - dragValue : minimumWidth;\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    TableResizer.prototype.changeWidthOfCells = function (table, leftColumnCollection, rightColumnCollection, dragValue) {\n        if (leftColumnCollection.length > 0) {\n            var flag = false;\n            for (var i = 0; i < leftColumnCollection.length; i++) {\n                var cell = leftColumnCollection[parseInt(i.toString(), 10)];\n                this.increaseOrDecreaseWidth(cell, dragValue, true);\n                if (cell.cellIndex === cell.ownerRow.childWidgets.length - 1) {\n                    flag = true;\n                }\n            }\n            if (flag) {\n                this.updateRowsGridAfterWidth(table);\n            }\n        }\n        if (rightColumnCollection.length > 0) {\n            var diff = 0;\n            for (var i = 0; i < rightColumnCollection.length; i++) {\n                var cell = rightColumnCollection[parseInt(i.toString(), 10)];\n                if (cell.cellIndex === 0) {\n                    var newGridBefore = cell.ownerRow.rowFormat.beforeWidth + dragValue;\n                    if (newGridBefore >= 0) {\n                        this.updateGridBefore(cell.ownerRow, dragValue);\n                    }\n                    else {\n                        if (diff !== newGridBefore) {\n                            diff = newGridBefore;\n                        }\n                        cell.ownerRow.rowFormat.gridBeforeWidth = 0;\n                        cell.ownerRow.rowFormat.gridBeforeWidthType = 'Auto';\n                    }\n                }\n                this.increaseOrDecreaseWidth(cell, dragValue, false);\n            }\n            if (diff !== 0) {\n                var newIndent = table.leftIndent + diff;\n                table.tableFormat.leftIndent = newIndent >= -1440 ? (newIndent <= 1440 ? newIndent : 1440) : -1440;\n                for (var j = 0; j < table.childWidgets.length; j++) {\n                    var row = table.childWidgets[parseInt(j.toString(), 10)];\n                    if (rightColumnCollection.indexOf(row.childWidgets[0]) === -1) {\n                        this.updateGridBefore(row, diff > 0 ? diff : -diff);\n                    }\n                }\n            }\n        }\n    };\n    TableResizer.prototype.updateRowsGridAfterWidth = function (table) {\n        var maxRowWidth = this.getMaxRowWidth(table, true);\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            var currentRowWidth = this.getRowWidth(row, true);\n            if (maxRowWidth >= currentRowWidth && row.rowFormat.afterWidth !== maxRowWidth - currentRowWidth) {\n                var value = maxRowWidth - currentRowWidth;\n                row.rowFormat.gridAfterWidth = value;\n                row.rowFormat.afterWidth = value;\n            }\n        }\n    };\n    TableResizer.prototype.getRowWidth = function (row, toUpdateGridAfter) {\n        var rowWidth = 0;\n        if (toUpdateGridAfter) {\n            rowWidth = rowWidth + row.rowFormat.beforeWidth;\n        }\n        for (var i = 0; i < row.childWidgets.length; i++) {\n            var cell = row.childWidgets[parseInt(i.toString(), 10)];\n            rowWidth += cell.cellFormat.cellWidth;\n        }\n        return rowWidth;\n    };\n    TableResizer.prototype.getMaxRowWidth = function (table, toUpdateGridAfter) {\n        var width = 0;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            var rowWidth = 0;\n            if (toUpdateGridAfter) {\n                rowWidth = rowWidth + row.rowFormat.beforeWidth;\n            }\n            for (var i_1 = 0; i_1 < row.childWidgets.length; i_1++) {\n                var cell = row.childWidgets[parseInt(i_1.toString(), 10)];\n                rowWidth += cell.cellFormat.cellWidth;\n            }\n            if (width < rowWidth) {\n                width = rowWidth;\n            }\n        }\n        return width;\n    };\n    TableResizer.prototype.isColumnSelected = function (table, columnIndex) {\n        var selection = this.owner.selectionModule;\n        var selectedCells = selection.getSelectedCells();\n        var leftColumnCells = this.getColumnCells(table, columnIndex, true);\n        var rightColumnCells = this.getColumnCells(table, columnIndex, false);\n        var isColumnSelected = false;\n        for (var i = 0; i < leftColumnCells.length; i++) {\n            var columnCell = leftColumnCells[parseInt(i.toString(), 10)];\n            isColumnSelected = selectedCells.indexOf(columnCell) !== -1 ? true : false;\n        }\n        if (!isColumnSelected) {\n            for (var i = 0; i < rightColumnCells.length; i++) {\n                var columnCell = rightColumnCells[parseInt(i.toString(), 10)];\n                isColumnSelected = selectedCells.indexOf(columnCell) !== -1 ? true : false;\n            }\n        }\n        return isColumnSelected;\n    };\n    TableResizer.prototype.applyProperties = function (table, tableHistoryInfo) {\n        if (isNullOrUndefined(tableHistoryInfo)) {\n            return;\n        }\n        // PreserveGrid = true;\n        if (tableHistoryInfo.tableHolder) {\n            table.tableHolder = tableHistoryInfo.tableHolder.clone();\n        }\n        if (tableHistoryInfo.tableFormat !== null) {\n            table.tableFormat.leftIndent = tableHistoryInfo.tableFormat.leftIndent;\n            table.tableFormat.preferredWidth = tableHistoryInfo.tableFormat.preferredWidth;\n            table.tableFormat.preferredWidthType = tableHistoryInfo.tableFormat.preferredWidthType;\n            table.tableFormat.allowAutoFit = tableHistoryInfo.tableFormat.allowAutoFit;\n        }\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            var rowFormat = tableHistoryInfo.rows[parseInt(i.toString(), 10)];\n            row.rowFormat.gridBefore = rowFormat.gridBefore;\n            row.rowFormat.gridBeforeWidth = rowFormat.gridBeforeWidth;\n            row.rowFormat.gridBeforeWidthType = rowFormat.gridBeforeWidthType;\n            row.rowFormat.gridAfter = rowFormat.gridAfter;\n            row.rowFormat.gridAfterWidth = rowFormat.gridAfterWidth;\n            row.rowFormat.gridAfterWidthType = rowFormat.gridAfterWidthType;\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[parseInt(j.toString(), 10)];\n                var cellFormat = rowFormat.cells[parseInt(j.toString(), 10)];\n                cell.columnIndex = cellFormat.columnIndex;\n                cell.cellFormat.columnSpan = cellFormat.columnSpan;\n                cell.cellFormat.preferredWidth = cellFormat.preferredWidth;\n                cell.cellFormat.preferredWidthType = cellFormat.preferredWidthType;\n            }\n        }\n        var containerWidth = table.getOwnerWidth(true);\n        var tableWidth = table.getTableClientWidth(containerWidth);\n        //Sets the width to cells\n        table.setWidthToCells(tableWidth, table.tableFormat.preferredWidthType === 'Auto');\n        // PreserveGrid = false;\n    };\n    TableResizer.prototype.getActualWidth = function (row) {\n        var width = 0;\n        if (row.childWidgets.length > 0) {\n            for (var i = 0; i < row.childWidgets.length; i++) {\n                width += row.childWidgets[parseInt(i.toString(), 10)].cellFormat.cellWidth;\n            }\n        }\n        return width;\n    };\n    TableResizer.prototype.setPreferredWidth = function (table) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var rw = table.childWidgets[parseInt(i.toString(), 10)];\n            var rowFormat = rw.rowFormat;\n            if (rowFormat.gridBefore > 0) {\n                rowFormat.gridBeforeWidth = rowFormat.beforeWidth;\n                rowFormat.gridBeforeWidthType = 'Point';\n            }\n            for (var j = 0; j < rw.childWidgets.length; j++) {\n                var cell = rw.childWidgets[parseInt(j.toString(), 10)];\n                cell.cellFormat.preferredWidth = cell.cellFormat.cellWidth;\n                cell.cellFormat.preferredWidthType = 'Point';\n            }\n            if (rowFormat.gridAfter > 0) {\n                rowFormat.gridAfterWidth = rowFormat.afterWidth;\n                rowFormat.gridAfterWidthType = 'Point';\n            }\n        }\n    };\n    TableResizer.prototype.updateCellPreferredWidths = function (table) {\n        var tableWidth = table.tableHolder.tableWidth;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[parseInt(i.toString(), 10)];\n            if (row.rowFormat.gridBefore > 0) {\n                var width = table.tableHolder.getCellWidth(0, row.rowFormat.gridBefore, tableWidth);\n                this.updateGridBeforeWidth(width, row);\n            }\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[parseInt(j.toString(), 10)];\n                cell.updateWidth(table.tableHolder.getCellWidth(cell.columnIndex, cell.cellFormat.columnSpan, tableWidth));\n            }\n            if (row.rowFormat.gridAfter > 0) {\n                /* eslint-disable-next-line max-len */\n                this.updateGridAfterWidth(table.tableHolder.getCellWidth(row.childWidgets.length, row.rowFormat.gridAfter, tableWidth), row);\n            }\n        }\n    };\n    TableResizer.prototype.updateGridBeforeWidth = function (width, row) {\n        var rowFormat = row.rowFormat;\n        if (width !== rowFormat.beforeWidth) {\n            rowFormat.beforeWidth = width;\n            if (rowFormat.gridBeforeWidthType === 'Auto') {\n                rowFormat.gridBeforeWidthType = 'Point';\n            }\n            if (rowFormat.gridBeforeWidthType === 'Point') {\n                rowFormat.gridBeforeWidth = rowFormat.beforeWidth;\n            }\n            else {\n                // The value is calculated from the pixel values hence, its converted to percent using method.\n                var ownerWidth = row.ownerTable.getTableClientWidth(row.ownerTable.getOwnerWidth(true));\n                var value = row.ownerTable.convertPointToPercent(rowFormat.beforeWidth, ownerWidth);\n                rowFormat.gridBeforeWidth = value;\n            }\n        }\n    };\n    TableResizer.prototype.updateGridAfterWidth = function (width, row) {\n        var rowFormat = row.rowFormat;\n        if (width !== rowFormat.afterWidth) {\n            rowFormat.afterWidth = width;\n        }\n        if (rowFormat.gridAfterWidthType === 'Auto') {\n            rowFormat.gridAfterWidthType = 'Point';\n        }\n        if (rowFormat.gridAfterWidthType === 'Point') {\n            rowFormat.gridAfterWidth = rowFormat.afterWidth;\n        }\n        else {\n            // The value is calculated from the pixel values hence, its converted to percent using method.\n            var ownerWidth = row.ownerTable.getTableClientWidth(row.ownerTable.getOwnerWidth(true));\n            var value = row.ownerTable.convertPointToPercent(rowFormat.afterWidth, ownerWidth);\n            rowFormat.gridAfterWidth = value;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TableResizer.prototype.destroy = function () {\n        this.documentHelper = undefined;\n        this.owner = undefined;\n    };\n    return TableResizer;\n}());\nexport { TableResizer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}