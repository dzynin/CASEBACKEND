{"ast":null,"code":"import { WParagraphFormat } from '../format/paragraph-format';\nimport { WSectionFormat } from '../format/section-format';\nimport { WCharacterFormat } from '../format/character-format';\nimport { WListFormat } from '../format/list-format';\nimport { HistoryInfo } from '../index';\nimport { ModifiedLevel, RowHistoryFormat, TableHistoryInfo } from './history-helper';\nimport { BlockWidget, ParagraphWidget, BodyWidget, TableCellWidget, FieldElementBox, TableWidget, TableRowWidget, BookmarkElementBox, HeaderFooterWidget, CheckBoxFormField, TextFrame, TextElementBox, FootnoteElementBox, ImageElementBox } from '../viewer/page';\nimport { Dictionary } from '../../base/dictionary';\nimport { abstractListsProperty, listIdProperty, listsProperty, nsidProperty } from '../../index';\nimport { TextPosition, ImageSizeInfo } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ElementBox, CommentCharacterElementBox } from '../viewer/page';\nimport { WTableFormat, WRowFormat, WCellFormat, WParagraphStyle } from '../format/index';\nimport { HelperMethods } from '../editor/editor-helper';\nimport { CONTROL_CHARACTERS } from '../../base/types';\n// Code for Comparing the offset calculated using old approach and optimized approach\n// /**\n//  * @private\n//  */\n// export class MyError extends Error {\n//     constructor(message: string) {\n//         super(message);\n//     }\n// }\n// export function throwCustomError(condition: boolean, message: string) {\n//     if (condition) {\n//         throw new MyError(message);\n//     }\n// }\n/**\n * @private\n */\nvar BaseHistoryInfo = /** @class */function () {\n  function BaseHistoryInfo(node) {\n    this.cellOperation = [];\n    this.splittedRevisions = [];\n    this.isRemovedNodes = false;\n    this.modifiedFormatOperation = [];\n    this.revisionOperation = [];\n    /**\n     * @private\n     */\n    this.markerData = [];\n    this.ownerIn = node;\n    this.documentHelper = node.documentHelper;\n    this.modifiedPropertiesIn = [];\n    this.modifiedNodeLength = [];\n    this.removedNodesIn = [];\n    this.insertedNodes = [];\n  }\n  Object.defineProperty(BaseHistoryInfo.prototype, \"owner\", {\n    //Properties\n    //gets owner control\n    get: function () {\n      return this.ownerIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"editorHistory\", {\n    get: function () {\n      return this.owner.editorHistoryModule;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"action\", {\n    get: function () {\n      return this.actionIn;\n    },\n    set: function (value) {\n      this.actionIn = value;\n      if (this.owner.enableCollaborativeEditing && !this.editorHistory.isUndoing && this.cellOperation.length == 0) {\n        if (value === 'DeleteColumn' || value === 'DeleteCells' || value === 'ClearCells' || value === 'MergeCells') {\n          if (!(this.owner.selectionModule.isTableSelected(true) || this.owner.selectionModule.isRowSelect()) || value === 'ClearCells' || value === 'MergeCells') {\n            this.insertedText = CONTROL_CHARACTERS.Cell;\n            this.deleteColumnOperation(this.action);\n          }\n        } else if (value === 'Accept Change' || value === 'Reject Change') {\n          this.createAcceptRejectOperation(this.action);\n        } else if (value === 'SectionBreak') {\n          this.insertedText = CONTROL_CHARACTERS.Section_Break;\n          this.type = \"NewPage\";\n        } else if (value === 'SectionBreakContinuous') {\n          this.insertedText = CONTROL_CHARACTERS.Section_Break;\n          this.type = \"Continuous\";\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"modifiedProperties\", {\n    get: function () {\n      return this.modifiedPropertiesIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"removedNodes\", {\n    /* eslint-enable */\n    get: function () {\n      return this.removedNodesIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"selectionStart\", {\n    //gets or sets selection start\n    get: function () {\n      return this.selectionStartIn;\n    },\n    set: function (value) {\n      this.selectionStartIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"selectionEnd\", {\n    get: function () {\n      return this.selectionEndIn;\n    },\n    set: function (value) {\n      this.selectionEndIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"insertPosition\", {\n    get: function () {\n      return this.insertPositionIn;\n    },\n    set: function (value) {\n      this.insertPositionIn = value;\n      if (this.owner.enableCollaborativeEditing && !this.owner.editorModule.isRemoteAction && value !== '' && !isNullOrUndefined(value) && value.indexOf('C') === -1) {\n        //TODO: Insert position not needed in all the cases. Need to optimize it.\n        this.insertIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(value);\n        // Code for Comparing the offset calculated using old approach and optimized approach\n        // this.owner.selection.isNewApproach = true;\n        // this.newInsertIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(value);\n        // this.owner.selection.isNewApproach = false;\n        // throwCustomError(this.newInsertIndex !== this.insertIndex, \"New InsertIndex \" + this.newInsertIndex + \" and old insertIndex \" + this.insertIndex + \" doesnot match\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"endPosition\", {\n    get: function () {\n      return this.endPositionIn;\n    },\n    set: function (value) {\n      this.endPositionIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseHistoryInfo.prototype, \"viewer\", {\n    get: function () {\n      return this.ownerIn.viewer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BaseHistoryInfo.prototype.updateSelection = function () {\n    this.updateCollaborativeSelection(this.owner.selectionModule.start.clone(), this.owner.selectionModule.end.clone());\n    var blockInfo = this.owner.selectionModule.getParagraphInfo(this.owner.selectionModule.start);\n    this.selectionStart = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n    blockInfo = this.owner.selectionModule.getParagraphInfo(this.owner.selectionModule.end);\n    this.selectionEnd = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n  };\n  BaseHistoryInfo.prototype.updateCollaborativeSelection = function (start, end) {\n    if (this.owner.enableCollaborativeEditing && !this.owner.editorModule.isRemoteAction) {\n      //TODO: Need to consider formard and backward selection\n      if (this.action == 'RemoveEditRange') {\n        var startEdit = this.owner.selectionModule.getEditRangeStartElement();\n        var position = this.owner.selectionModule.getPosition(startEdit);\n        start = position.startPosition;\n        end = position.endPosition;\n      } else {\n        this.updateTableSelection(start, end);\n      }\n      this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(start);\n      // Code for Comparing the offset calculated using old approach and optimized approach\n      // this.owner.selection.isNewApproach = true;\n      // this.newStartIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(start);\n      // this.owner.selection.isNewApproach = false;\n      this.owner.selectionModule.isEndOffset = true;\n      this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(end);\n      // Code for Comparing the offset calculated using old approach and optimized approach\n      // this.owner.selection.isNewApproach = true;\n      // this.newEndIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(end);\n      // this.owner.selection.isNewApproach = false;\n      this.owner.selectionModule.isEndOffset = false;\n      var isForward = this.owner.selectionModule.isForward;\n      if (isForward) {\n        this.startIndex -= this.owner.selectionModule.getTableRelativeValue(start, end);\n      } else {\n        this.endIndex -= this.owner.selectionModule.getTableRelativeValue(end, start);\n      }\n      // if (this.action === 'BackSpace' || this.action === 'Delete') {\n      var isParagraphStart = isForward ? start.paragraph.equals(end.paragraph) && start.isAtParagraphStart : start.paragraph.equals(end.paragraph) && end.isAtParagraphStart;\n      if (isParagraphStart || !start.paragraph.equals(end.paragraph)) {\n        if (isForward) {\n          this.endIndex += this.paraInclude(end);\n        } else {\n          this.startIndex += this.paraInclude(start);\n        }\n      }\n      // }\n      if (!this.owner.enableTrackChanges) {\n        this.splitOperationForDelete(start, end);\n      }\n      // Code for Comparing the offset calculated using old approach and optimized approach\n      // throwCustomError(this.newStartIndex !== this.startIndex, \"New StartIndex \" + this.newStartIndex + \" and old StartIndex \" + this.startIndex + \" doesnot match\");\n      // throwCustomError(this.newEndIndex !== this.endIndex, \"New EndIndex \" + this.newEndIndex + \" and old EndIndex \" + this.endIndex + \" doesnot match\");\n    }\n  };\n  BaseHistoryInfo.prototype.paraInclude = function (position) {\n    var paragrapthInfo = this.owner.selectionModule.getParagraphInfo(position);\n    if (position.paragraph.getTotalLength() < paragrapthInfo.offset) {\n      if (!(position.paragraph.isInsideTable && position.paragraph.equals(position.paragraph.associatedCell.lastChild))) {\n        return 1;\n      }\n    }\n    return 0;\n  };\n  /**\n   * This method will set position when the multple cell selected.\n   */\n  BaseHistoryInfo.prototype.updateTableSelection = function (startPosition, endPosition) {\n    var start = startPosition;\n    var end = endPosition;\n    if (!this.owner.selectionModule.isForward) {\n      start = endPosition;\n      end = startPosition;\n    }\n    if (start.paragraph.isInsideTable) {\n      var firstPara = this.owner.selectionModule.getFirstParagraph(start.paragraph.associatedCell);\n      if (end.paragraph.isInsideTable) {\n        if (!start.paragraph.associatedCell.equals(end.paragraph.associatedCell)) {\n          var lastPara = this.owner.selectionModule.getLastParagraph(end.paragraph.associatedCell);\n          start.setPosition(firstPara.firstChild, true);\n          end.setPositionParagraph(lastPara.lastChild, lastPara.lastChild.getEndOffset() + 1);\n        }\n      } else {\n        start.setPosition(firstPara.firstChild, true);\n      }\n    } else if (end.paragraph.isInsideTable) {\n      var lastPara = this.owner.selectionModule.getLastParagraph(end.paragraph.associatedCell);\n      end.setPositionParagraph(lastPara.lastChild, lastPara.lastChild.getEndOffset() + 1);\n    }\n  };\n  /**\n   * start is para and end is in row.\n   */\n  BaseHistoryInfo.prototype.splitOperationForDelete = function (startPosition, endPosition) {\n    // when start is para and end is row. we are building the operation like: \n    // fisrt delete the end table from table start to selection end.\n    // second need to paste the content from the start para and need to paste it in the next row.\n    // third delete the start paragraph to before wiget of end table. \n    var start = startPosition;\n    var end = endPosition;\n    if (!this.owner.selectionModule.isForward) {\n      start = endPosition;\n      end = startPosition;\n    }\n    if (!start.paragraph.isInsideTable && end.paragraph.isInsideTable && (this.action === 'BackSpace' || this.action === 'Delete')) {\n      var lastParagraph = this.owner.selectionModule.getLastBlockInLastCell(end.paragraph.associatedCell.ownerTable);\n      if (!lastParagraph.associatedCell.equals(end.paragraph.associatedCell)) {\n        var PasteLength = this.startIndex;\n        var endLineWidget = start.currentWidget;\n        var endOffset = start.offset;\n        start.setPosition(start.paragraph.firstChild, true);\n        this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(start);\n        var startIndex = this.startIndex;\n        var table = this.owner.documentHelper.layout.getParentTable(end.paragraph.associatedCell.ownerTable);\n        var paragraphInfo = {\n          'paragraph': null,\n          'offset': 0\n        };\n        var tableStart = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n          position: 0,\n          done: false\n        }, table).position;\n        // Table start will get the offset for table. So adding plus one to row offset.\n        this.startIndex = tableStart + 1;\n        this.cellOperation.push(this.getDeleteOperation(this.action));\n        // This will add the paste content in first and first cell so adding plus 3. \n        this.startIndex = tableStart + 3;\n        if (endOffset !== 0) {\n          this.pasteContent = this.owner.sfdtExportModule.write(this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0, start.currentWidget, start.offset, endLineWidget, endOffset, false, true);\n          this.cellOperation.push(this.getPasteOpertion(this.pasteContent, PasteLength - startIndex));\n        }\n        this.endIndex = tableStart;\n        this.startIndex = startIndex;\n        this.cellOperation.push(this.getDeleteOperation(this.action));\n      }\n    }\n    if (this.action === 'PasteColumn' || this.action === 'PasteOverwrite' || this.action === 'PasteRow') {\n      //when inserting new colomn in paste. first deleting the table and inserting the whole table.\n      var table = startPosition.paragraph.associatedCell.ownerTable;\n      var paragraphInfo = {\n        'paragraph': null,\n        'offset': 0\n      };\n      this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n        position: 0,\n        done: false\n      }, table).position;\n      this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, table, 0, {\n        done: false\n      }, true, undefined, undefined);\n    }\n  };\n  BaseHistoryInfo.prototype.setBookmarkInfo = function (bookmark) {\n    this.removedNodes.push({\n      'bookmark': bookmark,\n      'startIndex': bookmark.indexInOwner,\n      'endIndex': bookmark.reference.indexInOwner\n    });\n  };\n  BaseHistoryInfo.prototype.setFormFieldInfo = function (field, value) {\n    this.removedNodes.push({\n      'formField': field,\n      'value': value\n    });\n  };\n  BaseHistoryInfo.prototype.setEditRangeInfo = function (editStart) {\n    this.removedNodes.push({\n      'editStart': editStart,\n      'startIndex': editStart.indexInOwner,\n      'endIndex': editStart.editRangeEnd.indexInOwner\n    });\n  };\n  BaseHistoryInfo.prototype.revertFormTextFormat = function () {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    var fieldInfo = this.removedNodes[0];\n    var text = fieldInfo.value;\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    var formField = fieldInfo.formField;\n    if (this.editorHistory.isUndoing) {\n      this.owner.editorModule.applyTextFormatInternal(formField, text);\n      this.editorHistory.recordChanges(this);\n    } else {\n      text = HelperMethods.formatText(formField.formFieldData.format, text);\n      this.owner.editorModule.applyTextFormatInternal(formField, text);\n      this.editorHistory.undoStack.push(this);\n    }\n  };\n  BaseHistoryInfo.prototype.revertFormField = function () {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    var fieldInfo = this.removedNodes[0];\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    var field = fieldInfo.formField;\n    if (field.formFieldData instanceof CheckBoxFormField) {\n      this.owner.editorModule.toggleCheckBoxFormField(field, true, fieldInfo.value);\n    } else {\n      this.owner.editorModule.updateFormField(field, fieldInfo.value);\n    }\n  };\n  BaseHistoryInfo.prototype.revertBookmark = function () {\n    var bookmarkInfo = this.removedNodes[0];\n    var bookmark = bookmarkInfo.bookmark;\n    if (this.editorHistory.isUndoing) {\n      var markerData = this.owner.editorModule.getMarkerData(bookmark);\n      this.documentHelper.bookmarks.add(bookmark.name, bookmark);\n      this.markerData.push(markerData);\n      bookmark.line.children.splice(bookmarkInfo.startIndex, 0, bookmark);\n      var previousNode = bookmark.previousNode;\n      if (previousNode instanceof FieldElementBox && !isNullOrUndefined(previousNode.formFieldData)) {\n        previousNode.formFieldData.name = bookmark.name;\n      }\n      this.markerData.push(markerData);\n      bookmark.reference.line.children.splice(bookmarkInfo.endIndex, 0, bookmark.reference);\n      this.editorHistory.recordChanges(this);\n      if (this.owner.documentEditorSettings.showBookmarks == true) {\n        this.viewer.updateScrollBars();\n      }\n      this.owner.editorModule.fireContentChange();\n    } else {\n      this.owner.editorModule.deleteBookmarkInternal(bookmark);\n      this.editorHistory.undoStack.push(this);\n    }\n  };\n  BaseHistoryInfo.prototype.revertComment = function () {\n    var editPosition = this.insertPosition;\n    var comment = this.removedNodes[0];\n    var insert = false;\n    if (this.action === 'ResolveComment') {\n      this.editorHistory.currentBaseHistoryInfo = this;\n      this.owner.editorModule.resolveOrReopenComment(comment, !comment.isResolved);\n      return;\n    }\n    if (this.action === 'EditComment') {\n      var modifiedCommentObject = this.modifiedProperties[0];\n      this.editorHistory.currentBaseHistoryInfo = this;\n      var commentView = this.owner.commentReviewPane.commentPane.comments.get(comment);\n      commentView.commentText.innerText = modifiedCommentObject.text;\n      modifiedCommentObject.text = comment.text;\n      comment.text = commentView.commentText.innerText;\n      this.owner.editorHistoryModule.updateHistory();\n      this.owner.fireContentChange();\n      return;\n    }\n    if (this.action === 'InsertCommentWidget') {\n      insert = this.editorHistory.isRedoing;\n    } else if (this.action === 'DeleteCommentWidget') {\n      insert = this.editorHistory.isUndoing;\n    }\n    if (insert) {\n      if (comment) {\n        this.insertedElement = comment.clone();\n        if (comment.isReply) {\n          this.owner.editorModule.addReplyComment(comment, this.insertPosition);\n        } else {\n          this.owner.editorModule.addCommentWidget(comment, false, true, true);\n        }\n      }\n    } else {\n      var commentElement = this.owner.editorModule.getCommentElementBox(editPosition);\n      this.owner.editorModule.deleteCommentWidget(commentElement);\n    }\n  };\n  BaseHistoryInfo.prototype.revertEditRangeRegion = function () {\n    var editRangeInfo = this.removedNodes[0];\n    var editStart = editRangeInfo.editStart;\n    if (this.editorHistory.isUndoing) {\n      var user = editStart.user === '' ? editStart.group : editStart.user;\n      this.owner.editorModule.updateRangeCollection(editStart, user);\n      this.markerData.push(this.owner.editorModule.getMarkerData(editStart));\n      this.markerData.push(this.owner.editorModule.getMarkerData(editStart.editRangeEnd));\n      editStart.line.children.splice(editRangeInfo.startIndex, 0, editStart);\n      editStart.editRangeEnd.line.children.splice(editRangeInfo.endIndex, 0, editStart.editRangeEnd);\n      this.editorHistory.recordChanges(this);\n    } else {\n      this.owner.editorModule.removeUserRestrictionsInternal(editStart);\n      this.editorHistory.undoStack.push(this);\n    }\n    this.owner.editorModule.fireContentChange();\n  };\n  /* eslint-disable  */\n  BaseHistoryInfo.prototype.revert = function () {\n    if (this.action === 'FormTextFormat') {\n      this.revertFormTextFormat();\n      return;\n    }\n    if (this.action === 'UpdateFormField') {\n      this.revertFormField();\n      return;\n    }\n    if (this.action === 'DeleteBookmark') {\n      this.revertBookmark();\n      return;\n    }\n    if (this.action === 'RemoveEditRange') {\n      this.revertEditRangeRegion();\n      return;\n    }\n    if (this.action === 'InsertCommentWidget' || this.action === 'DeleteCommentWidget' || this.action === 'ResolveComment' || this.action === 'EditComment') {\n      this.revertComment();\n      return;\n    }\n    if (this.action === 'ListFormat' && this.owner.editorModule.listNumberFormat !== '') {\n      var abstractList = this.documentHelper.lists[0].abstractList.levels[this.owner.editorModule.listLevelNumber];\n      var currentListLevelPattern = abstractList.listLevelPattern;\n      var currentNUmberFormat = abstractList.numberFormat;\n      abstractList.listLevelPattern = this.owner.editorModule.listLevelPattern;\n      abstractList.numberFormat = this.owner.editorModule.listNumberFormat;\n      this.owner.editorModule.listLevelPattern = currentListLevelPattern;\n      this.owner.editorModule.listNumberFormat = currentNUmberFormat;\n    }\n    this.owner.isShiftingEnabled = true;\n    var selectionStartTextPosition = undefined;\n    var selectionEndTextPosition = undefined;\n    var start = this.selectionStart;\n    var end = this.selectionEnd;\n    this.collabStart = this.selectionStart;\n    this.collabEnd = this.selectionEnd;\n    if (this.owner.enableCollaborativeEditing) {\n      if (!isNullOrUndefined(this.insertPosition)) {\n        this.insertIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.insertPosition);\n      }\n      this.startIndex = this.insertIndex;\n      if (!isNullOrUndefined(this.endPosition)) {\n        var startPosition = this.owner.selection.getTextPosBasedOnLogicalIndex(this.insertPosition);\n        var endPosition = this.owner.selection.getTextPosBasedOnLogicalIndex(this.endPosition);\n        this.updateCollaborativeSelection(startPosition, endPosition);\n      }\n      this.startIndex = this.insertIndex;\n    }\n    var isForwardSelection = TextPosition.isForwardSelection(start, end);\n    if (this.modifiedProperties.length > 0 || this.action === 'Selection' || this.action === 'ClearCharacterFormat' || this.action === 'ClearParagraphFormat') {\n      selectionStartTextPosition = !isNullOrUndefined(start) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start) : undefined;\n      selectionEndTextPosition = !isNullOrUndefined(end) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end) : undefined;\n      this.revertModifiedProperties(selectionStartTextPosition, selectionEndTextPosition);\n    } else {\n      var sel = this.owner.selectionModule;\n      var deletedNodes = this.removedNodes;\n      if (this.removedNodes.length > 0) {\n        if (this.action === 'InsertTable' && this.editorHistory.isRedoing) {\n          for (var i = 0; i < this.removedNodes.length; i++) {\n            this.insertedNodes.push(this.removedNodes[parseInt(i.toString(), 10)]);\n          }\n        }\n        this.isRemovedNodes = true;\n      } else {\n        this.isRemovedNodes = false;\n      }\n      this.removedNodesIn = [];\n      if (isNullOrUndefined(this.endPosition)) {\n        this.endPosition = this.insertPosition;\n      }\n      var isForward = TextPosition.isForwardSelection(this.insertPosition, this.endPosition);\n      var insertTextPosition = sel.getTextPosBasedOnLogicalIndex(isForward ? this.insertPosition : this.endPosition);\n      var endTextPosition = sel.getTextPosBasedOnLogicalIndex(isForward ? this.endPosition : this.insertPosition);\n      // Set the endRevisionLogicalIndex based on undo stack value when the selection contains a table with the above paragraph (undoing).\n      if (this.action === 'RemoveRowTrack' && this.editorHistory.isUndoing) {\n        this.owner.selectionModule.select(this.selectionEnd, this.selectionEnd);\n        if (this.owner.selectionModule.start.paragraph.isInsideTable) {\n          this.endRevisionLogicalIndex = this.selectionEnd;\n        }\n      }\n      if (this.editorHistory.isUndoing) {\n        if (this.lastElementRevision && isNullOrUndefined(this.isAcceptOrReject) && deletedNodes.length > 0 && deletedNodes[0] instanceof ParagraphWidget && deletedNodes[0].isEmpty()) {\n          this.endRevisionLogicalIndex = this.selectionEnd;\n        } else if (this.action === 'Delete' && this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action === 'RemoveHyperlink' && this.lastElementRevision instanceof FieldElementBox) {\n          // Bug 873011: Updated the selection for delete operation on \"RemoveHyperlink\" undo case.\n          this.endRevisionLogicalIndex = this.selectionEnd;\n        } else if (this.lastElementRevision && isNullOrUndefined(this.endRevisionLogicalIndex)) {\n          this.updateEndRevisionInfo();\n        } else if (this.action === 'RemoveRowTrack') {\n          this.endRevisionLogicalIndex = this.selectionEnd;\n        }\n      }\n      if (this.action === 'ClearRevisions') {\n        // Bug 873011: Handled the separate undo revision for field begin and field end for \"ClearRevisions\" action on hyperlink undo.\n        var fieldBegin = sel.getHyperlinkField();\n        if (this.isHyperlinkField && !isNullOrUndefined(fieldBegin)) {\n          var offset = fieldBegin.fieldSeparator.line.getOffset(fieldBegin.fieldSeparator, 1);\n          endTextPosition.setPositionParagraph(fieldBegin.fieldSeparator.line, offset);\n          this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n          var fieldEnd = fieldBegin.fieldEnd;\n          insertTextPosition.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 0));\n          endTextPosition.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 1));\n          this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n        } else {\n          this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n        }\n        this.removedNodes.push(deletedNodes[deletedNodes.length - 1]);\n        deletedNodes = [];\n      }\n      if (this.action === 'Uppercase') {\n        sel.selectPosition(insertTextPosition, endTextPosition);\n        this.editorHistory.currentBaseHistoryInfo = this;\n        var editModule = this.owner.editorModule;\n        editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n        editModule.reLayout(sel);\n        return;\n      }\n      if (this.action === 'Lowercase') {\n        sel.selectPosition(insertTextPosition, endTextPosition);\n        this.editorHistory.currentBaseHistoryInfo = this;\n        var editModule = this.owner.editorModule;\n        editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n        editModule.reLayout(sel);\n        return;\n      }\n      if (this.action === 'CapitalizeEachWord') {\n        sel.selectPosition(insertTextPosition, endTextPosition);\n        this.editorHistory.currentBaseHistoryInfo = this;\n        var editModule = this.owner.editorModule;\n        editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n        editModule.reLayout(sel);\n        return;\n      }\n      if (this.action === 'SentenceCase') {\n        sel.selectPosition(insertTextPosition, endTextPosition);\n        this.editorHistory.currentBaseHistoryInfo = this;\n        var editModule = this.owner.editorModule;\n        editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n        editModule.reLayout(sel);\n        return;\n      }\n      if (this.action === 'ToggleCase') {\n        sel.selectPosition(insertTextPosition, endTextPosition);\n        this.editorHistory.currentBaseHistoryInfo = this;\n        var editModule = this.owner.editorModule;\n        editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n        editModule.reLayout(sel);\n        return;\n      }\n      if (insertTextPosition.isAtSamePosition(endTextPosition)) {\n        sel.selectContent(insertTextPosition, true);\n      } else {\n        sel.selectPosition(insertTextPosition, endTextPosition);\n      }\n      if (this.action === 'InsertHyperlink' && this.editorHistory.isRedoing) {\n        var fieldBegin = this.owner.selectionModule.getHyperlinkField();\n        if (!isNullOrUndefined(fieldBegin)) {\n          var offset = fieldBegin.line.getOffset(fieldBegin, 0);\n          insertTextPosition.setPositionParagraph(fieldBegin.line, offset);\n          this.owner.selectionModule.start.setPositionInternal(insertTextPosition);\n          offset = fieldBegin.fieldEnd.line.getOffset(fieldBegin.fieldEnd, 1);\n          endTextPosition.setPositionParagraph(fieldBegin.fieldEnd.line, offset);\n        }\n      }\n      this.editorHistory.currentBaseHistoryInfo = this;\n      this.selectionStart = this.insertPosition;\n      this.insertPosition = undefined;\n      this.selectionEnd = this.endPosition;\n      this.endPosition = undefined;\n      // Use this property to skip deletion if already selected content deleted case.\n      var isRemoveContent = false;\n      // Use this property to delete table or cell based on history action.\n      var isDeletecell = false;\n      if (this.action === 'DeleteCells') {\n        isDeletecell = true;\n      }\n      if (this.endRevisionLogicalIndex && deletedNodes.length > 0) {\n        var currentPosition = sel.getTextPosBasedOnLogicalIndex(this.endRevisionLogicalIndex);\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && insertTextPosition.isAtSamePosition(endTextPosition)) {\n          sel.selectPosition(insertTextPosition, currentPosition);\n        }\n        this.collabEnd = this.endRevisionLogicalIndex;\n        if (this.owner.enableCollaborativeEditing) {\n          this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentPosition);\n          this.endIndex += this.paraInclude(currentPosition);\n        }\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && !this.owner.selectionModule.isEmpty && deletedNodes.length > 0) {\n          this.owner.editorModule.deleteSelectedContents(sel, true, isDeletecell);\n          isRemoveContent = true;\n        }\n      }\n      if (!insertTextPosition.isAtSamePosition(endTextPosition) && !isRemoveContent) {\n        isRemoveContent = this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'ClearCells' || this.action === 'DeleteCells';\n        var skipDelete = deletedNodes.length > 0 && this.action === 'ParaMarkTrack' || this.action === 'ClearRevisions' || this.action === 'AcceptTOC';\n        if (!isRemoveContent && this.action !== 'MergeCells' && this.action !== 'InsertRowAbove' && this.action !== 'InsertRowBelow' && this.action !== 'InsertColumnLeft' && this.action !== 'InsertColumnRight' && this.action !== 'Borders' && this.action !== 'DeleteTable' && this.action !== 'DeleteColumn' && this.action !== 'DeleteRow') {\n          sel.end.setPositionInternal(endTextPosition);\n          if (!this.owner.selectionModule.isEmpty && !skipDelete) {\n            if (this.editorHistory.isRedoing && this.action !== 'Accept Change' && this.action !== 'ParaMarkTrack' && this.action !== 'ParaMarkReject' && this.action !== 'RemoveRowTrack') {\n              this.owner.editorModule.removeSelectedContents(sel);\n            } else {\n              // Bug 873011: Handled the separate deletion for field begin and field end for \"Accept Change\" action on hyperlink redo.\n              var fieldBegin = sel.getHyperlinkField();\n              if (this.isHyperlinkField && !isNullOrUndefined(fieldBegin) && this.editorHistory.isRedoing && this.action === 'Accept Change') {\n                var fieldEnd = fieldBegin.fieldEnd;\n                sel.start.setPositionParagraph(fieldBegin.line, fieldBegin.line.getOffset(fieldBegin, 0));\n                sel.end.setPositionParagraph(fieldBegin.fieldSeparator.line, fieldBegin.fieldSeparator.line.getOffset(fieldBegin.fieldSeparator, 1));\n                this.owner.editorModule.deleteSelectedContents(sel, true);\n                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                  this.editorHistory.currentBaseHistoryInfo.removedNodes.reverse();\n                }\n                sel.start.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 0));\n                sel.end.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 1));\n                this.owner.editorModule.deleteSelectedContents(sel, true);\n                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                  this.editorHistory.currentBaseHistoryInfo.removedNodes.reverse();\n                }\n              } else {\n                this.owner.editorModule.deleteSelectedContents(sel, true);\n              }\n            }\n            if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo) && this.editorHistory.currentHistoryInfo.action === 'PageBreak' && this.documentHelper.blockToShift) {\n              this.documentHelper.layout.shiftLayoutedItems(false);\n            }\n          }\n        }\n      } else if (this.action === 'SectionBreakContinuous' && insertTextPosition && this.editorHistory.isUndoing) {\n        if (insertTextPosition.offset === 0 && !isNullOrUndefined(insertTextPosition.paragraph.previousRenderedWidget) && insertTextPosition.paragraph.previousRenderedWidget instanceof ParagraphWidget && insertTextPosition.paragraph.previousRenderedWidget.isEndsWithPageBreak && insertTextPosition.paragraph.containerWidget instanceof BodyWidget && insertTextPosition.currentWidget === insertTextPosition.currentWidget.paragraph.firstChild && insertTextPosition.paragraph.containerWidget.sectionFormat.breakCode === 'NoBreak') {\n          var section = insertTextPosition.paragraph.previousRenderedWidget.containerWidget;\n          this.owner.editorModule.combineSectionInternal(this.owner.selectionModule, section, insertTextPosition.paragraph.containerWidget);\n          this.owner.editorModule.layoutWholeDocument();\n        }\n      } else {\n        isRemoveContent = false;\n        if (!insertTextPosition.isAtSamePosition(endTextPosition)) {\n          isRemoveContent = this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'ClearCells' || this.action === 'DeleteCells';\n        }\n      }\n      var isRedoAction = this.editorHistory.isRedoing && !isRemoveContent;\n      isRemoveContent = this.lastElementRevision ? false : isRemoveContent;\n      this.revertModifiedNodes(deletedNodes, isRedoAction, isForwardSelection ? start : end, start === end, isForwardSelection ? end : start);\n      if (isRemoveContent) {\n        this.removeContent(insertTextPosition, endTextPosition, isDeletecell);\n      }\n      //this.owner.editorModule.reLayout(this.documentHelper.selection);\n    }\n    var isSelectionChanged = false;\n    var updateSelection = false;\n    if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo) && (this.editorHistory.currentHistoryInfo.action === 'Reject All' || this.editorHistory.currentHistoryInfo.action === 'Accept All' || this.editorHistory.currentHistoryInfo.action === 'Paste')) {\n      updateSelection = true;\n    }\n    if (this.action !== 'TrackingPageBreak' && ((this.editorHistory.isUndoing || this.endRevisionLogicalIndex || this.action === 'RemoveRowTrack' || updateSelection) && isNullOrUndefined(this.editorHistory.currentHistoryInfo) || updateSelection) || (this.action === 'InsertRowAbove' || this.action === 'Borders' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft' || this.action === 'InsertColumnRight' || this.action === 'Accept Change' || this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') && (this.editorHistory.isRedoing || this.editorHistory.currentHistoryInfo.action === 'Paste')) {\n      if (this.action === 'RemoveRowTrack' && this.editorHistory.isRedoing) {\n        selectionStartTextPosition = !isNullOrUndefined(this.selectionStart) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionStart) : undefined;\n        selectionEndTextPosition = !isNullOrUndefined(this.selectionEnd) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionEnd) : undefined;\n      } else {\n        selectionStartTextPosition = !isNullOrUndefined(start) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start) : undefined;\n        selectionEndTextPosition = !isNullOrUndefined(end) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end) : undefined;\n      }\n      if (this.action !== 'ModifyStyle') {\n        this.owner.selectionModule.selectRange(selectionStartTextPosition, selectionEndTextPosition);\n      }\n      this.documentHelper.updateFocus();\n      isSelectionChanged = true;\n    }\n    this.owner.trackChangesPane.isTrackingPageBreak = false;\n    var index = this.insertIndex;\n    // Updates insert position of history info instance.\n    this.insertPosition = start;\n    this.endPosition = end;\n    if (this.action === 'InsertHyperlink') {\n      this.insertIndex = index;\n    }\n    if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo) && (this.editorHistory.currentHistoryInfo.action === 'Accept All' || this.editorHistory.currentHistoryInfo.action === 'Reject All' || this.editorHistory.currentHistoryInfo.action === 'RemoveComment')) {\n      if (this.owner.documentHelper.blockToShift) {\n        this.owner.documentHelper.layout.shiftLayoutedItems(false);\n      }\n    }\n    this.owner.editorModule.reLayout(this.owner.selectionModule, this.owner.selectionModule.isEmpty);\n    if (this.editorHistory.isUndoing && this.action === 'SectionBreak') {\n      this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n      this.owner.editorModule.layoutWholeDocument();\n      this.owner.editorModule.isSkipOperationsBuild = false;\n    }\n    if (isSelectionChanged) {\n      this.documentHelper.scrollToPosition(this.owner.selectionModule.start, this.owner.selectionModule.end);\n    }\n    this.highlightListText();\n  };\n  BaseHistoryInfo.prototype.highlightListText = function () {\n    if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo)) {\n      if (this.action === 'ListCharacterFormat' || this.editorHistory.currentHistoryInfo.action === 'ListSelect' && this.action === 'ListFormat') {\n        var selectionStartTextPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionStart);\n        var widget = selectionStartTextPosition.currentWidget;\n        this.documentHelper.selection.highlightListText(widget);\n      }\n    }\n  };\n  BaseHistoryInfo.prototype.removeContent = function (insertTextPosition, endTextPosition, isDeletecell) {\n    //If the base parent of the insert text position and end text position is null \n    //then the paragraphs already removed.\n    //Example scenario: In table editing that is delete cells operation \n    // we will backed up the entire table ad it will be replaced on undo operation.\n    //At that time if the positions are in table \n    //which is already replaced in undo (revert modified nodes method) then the base parent of the paragraph will be null.\n    //So again, selecting the content and deleting is unnecessary\n    // and it will cause improper position updates and null reference exceptions. \n    if (!isNullOrUndefined(insertTextPosition.paragraph.containerWidget) && insertTextPosition.paragraph.containerWidget instanceof BodyWidget && !isNullOrUndefined(endTextPosition.paragraph.containerWidget) && endTextPosition.paragraph.containerWidget instanceof BodyWidget || !isNullOrUndefined(insertTextPosition.paragraph.containerWidget) && !isNullOrUndefined(endTextPosition.paragraph.containerWidget) && insertTextPosition.paragraph.containerWidget instanceof TableCellWidget && endTextPosition.paragraph.containerWidget instanceof TableCellWidget && !isNullOrUndefined(insertTextPosition.paragraph.bodyWidget) || !isNullOrUndefined(insertTextPosition.paragraph.containerWidget) && !isNullOrUndefined(endTextPosition.paragraph.containerWidget) && insertTextPosition.paragraph.containerWidget instanceof TextFrame && endTextPosition.paragraph.containerWidget instanceof TextFrame) {\n      //Removes if any empty paragraph is added while delete.\n      this.owner.selectionModule.selectRange(insertTextPosition, endTextPosition);\n      this.documentHelper.updateFocus();\n      var isDelete = false;\n      if (this.action === 'BackSpace' || this.action === 'Uppercase' || this.action === 'RemoveRowTrack') {\n        isDelete = true;\n      }\n      this.owner.editorModule.deleteSelectedContents(this.owner.selectionModule, isDelete, isDeletecell);\n    }\n  };\n  BaseHistoryInfo.prototype.updateEndRevisionInfo = function () {\n    this.lastElementRevision = this.checkAdjacentNodeForMarkedRevision(this.lastElementRevision);\n    var currentRevision = this.retrieveEndPosition(this.lastElementRevision);\n    var blockInfo = this.owner.selectionModule.getParagraphInfo(currentRevision);\n    var isLastChild = blockInfo.paragraph == this.owner.editor.getLastParaForBodywidgetCollection(blockInfo.paragraph);\n    if (blockInfo.paragraph.isInsideTable && blockInfo.paragraph == this.owner.selection.getLastParagraph(blockInfo.paragraph.associatedCell)) {\n      isLastChild = true;\n    }\n    if (blockInfo.paragraph.getLength() == blockInfo.offset && !isLastChild) {\n      blockInfo.offset++;\n    }\n    this.endRevisionLogicalIndex = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n    this.lastElementRevision.isMarkedForRevision = false;\n  };\n  BaseHistoryInfo.prototype.retrieveEndPosition = function (elementBox) {\n    var endPosition = new TextPosition(this.owner);\n    var offset = elementBox.line.getOffset(elementBox, 0) + elementBox.length;\n    endPosition.setPositionFromLine(elementBox.line, offset);\n    return endPosition;\n  };\n  /**\n   * Method to retrieve exact spitted node which is marked as last available element.\n   *\n   * @param {ElementBox} elementBox - Specifies the element box\n   * @returns {ElementBox} - Returns element box\n   */\n  BaseHistoryInfo.prototype.checkAdjacentNodeForMarkedRevision = function (elementBox) {\n    var nextItem = elementBox.nextNode;\n    var markedNode;\n    while (!isNullOrUndefined(nextItem) && nextItem.isMarkedForRevision) {\n      markedNode = nextItem;\n      nextItem = nextItem.nextNode;\n    }\n    return !isNullOrUndefined(markedNode) ? markedNode : elementBox;\n  };\n  BaseHistoryInfo.prototype.revertModifiedProperties = function (start, end) {\n    if (this.action === 'CellFormat' || this.action === 'CellOptions' || this.action === 'TableOptions') {\n      this.owner.isShiftingEnabled = false;\n    }\n    if (!isNullOrUndefined(start) && !isNullOrUndefined(end)) {\n      this.owner.selectionModule.selectRange(start, end);\n    }\n    this.documentHelper.updateFocus();\n    if (this.action === 'RowResizing' || this.action === 'CellResizing') {\n      this.revertResizing();\n    } else if (this.action === 'CellOptions' || this.action === 'TableOptions') {\n      this.revertTableDialogProperties(this.action);\n    } else if (this.action !== 'Selection') {\n      this.revertProperties();\n    }\n  };\n  // Redoes the Action\n  BaseHistoryInfo.prototype.redoAction = function () {\n    var editor = this.owner.editorModule;\n    this.action = this.action;\n    switch (this.action) {\n      case 'BackSpace':\n        editor.singleBackspace(this.owner.selectionModule, true);\n        break;\n      case 'Delete':\n        editor.singleDelete(this.owner.selectionModule, true);\n        break;\n      case 'DeleteTable':\n        editor.deleteTable();\n        break;\n      case 'DeleteColumn':\n        editor.deleteColumn();\n        break;\n      case 'DeleteRow':\n        editor.deleteRow();\n        break;\n      case 'MergeCells':\n        editor.mergeSelectedCellsInTable();\n        break;\n      case 'InsertRowAbove':\n        editor.insertRow(true);\n        break;\n      case 'InsertRowBelow':\n        editor.insertRow(false);\n        break;\n      case 'InsertColumnLeft':\n        editor.insertColumn(true);\n        break;\n      case 'InsertColumnRight':\n        editor.insertColumn(true);\n        break;\n      case 'SectionBreak':\n        editor.insertSection(this.owner.selectionModule, true);\n        break;\n      case 'SectionBreakContinuous':\n        editor.insertSection(this.owner.selectionModule, true, undefined, true);\n        break;\n      case 'TableAutoFitToContents':\n        editor.autoFitTable('FitToContents');\n        break;\n      case 'TableAutoFitToWindow':\n        editor.autoFitTable('FitToWindow');\n        break;\n      case 'TableFixedColumnWidth':\n        editor.autoFitTable('FixedColumnWidth');\n        break;\n      case 'RemoveRowTrack':\n        this.owner.selectionModule.handleAcceptReject(true);\n        break;\n    }\n  };\n  BaseHistoryInfo.prototype.revertModifiedNodes = function (deletedNodes, isRedoAction, start, isEmptySelection, end) {\n    if (isRedoAction && (this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'DeleteTable' || this.action === 'DeleteColumn' || this.action === 'DeleteRow' || this.action === 'InsertRowAbove' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft' || this.action === 'InsertColumnRight' || this.action === 'MergeCells' || this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous' || this.action === 'TableAutoFitToContents' || this.action === 'TableAutoFitToWindow' || this.action === 'TableFixedColumnWidth' || this.action === 'PasteColumn' || this.action === 'PasteOverwrite' || this.action === 'PasteNested')) {\n      this.redoAction();\n      if (this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous') {\n        return;\n      }\n    }\n    if (deletedNodes.length > 0) {\n      //tslint:disable-next-line:max-line-length\n      if (this.editorHistory.isUndoing && (this.action === 'RemoveRowTrack' || this.action === 'DeleteCells' || this.action === 'DeleteColumn' || this.action === 'DeleteRow' || this.action === 'MergeCells') || this.action === 'InsertRowAbove' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft'\n      //tslint:disable-next-line:max-line-length\n      || this.action === 'ClearCells' || this.action === 'InsertColumnRight' || this.action === 'Borders' || this.action === 'TableAutoFitToContents' || this.action === 'TableAutoFitToWindow' || this.action === 'TableFixedColumnWidth' || this.action === 'RemoveRowTrack' || this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') {\n        var insertIndex = this.selectionStart;\n        var block = this.owner.editorModule.getBlock({\n          index: insertIndex\n        }).node;\n        var lastNode = deletedNodes[deletedNodes.length - 1];\n        if ((block instanceof TableWidget || block.previousRenderedWidget instanceof TableWidget || block.isInsideTable) && lastNode instanceof TableWidget) {\n          if (block instanceof ParagraphWidget && !block.isInsideTable) {\n            block = block.previousRenderedWidget;\n          } else if (block instanceof ParagraphWidget && block.isInsideTable) {\n            block = block.associatedCell.ownerTable;\n          }\n          block = block.combineWidget(this.viewer);\n          if (this.owner.enableCollaborativeEditing) {\n            var paragraphInfo = {\n              'paragraph': null,\n              'offset': 0\n            };\n            this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n              position: 0,\n              done: false\n            }, block).position;\n            this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, block, 0, {\n              done: false\n            }, true, undefined, undefined);\n            var operation = this.getDeleteOperation('Delete');\n            if (this.owner.enableTrackChanges) {\n              if (isNullOrUndefined(operation.markerData)) {\n                operation.markerData = {};\n              }\n              operation.markerData.isSkipTracking = true;\n            }\n            this.cellOperation.push(operation);\n          }\n          this.owner.editorModule.insertTableInternal(block, lastNode, false);\n          if (this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') {\n            this.removedNodes.push(block);\n          } else {\n            deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n          }\n        } else if (lastNode instanceof TableWidget && !(this.action === 'RemoveRowTrack')) {\n          this.owner.editorModule.insertBlock(lastNode);\n        } else {\n          this.insertRemovedNodes(deletedNodes, deletedNodes[deletedNodes.length - 1]);\n        }\n      } else {\n        var initialStart = start;\n        var block = this.owner.editorModule.getBlock({\n          index: initialStart\n        }).node;\n        // initialStart = blockObj.position;\n        if (deletedNodes.length > 0 && (this.action === 'BackSpace' && isEmptySelection || !(block instanceof TableWidget) && !(block instanceof HeaderFooterWidget))) {\n          var lastNode = deletedNodes[0];\n          if (lastNode instanceof BodyWidget && !isNullOrUndefined(deletedNodes[1])) {\n            lastNode = deletedNodes[1];\n          }\n          if (this.action === 'TrackingPageBreak' || (this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous') && lastNode instanceof BodyWidget || !isNullOrUndefined(this.editorHistory.currentHistoryInfo) && this.editorHistory.currentHistoryInfo.action === 'PageBreak') {\n            lastNode = deletedNodes[1];\n          }\n          if (lastNode instanceof WCharacterFormat) {\n            var newParagraph = new ParagraphWidget();\n            newParagraph.characterFormat = lastNode;\n            this.owner.editorModule.insertNewParagraphWidget(newParagraph, true);\n            deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n            block = newParagraph;\n          }\n          var skipinsert = false;\n          if (!isNullOrUndefined(this.isAcceptOrReject)) {\n            skipinsert = true;\n            if (!isNullOrUndefined(this.owner.selectionModule.start.paragraph.nextRenderedWidget) && this.owner.selectionModule.start.paragraph.nextRenderedWidget instanceof TableWidget) {\n              skipinsert = false;\n            }\n          }\n          if (lastNode instanceof ParagraphWidget && this.owner.selectionModule.start.offset > 0 && !skipinsert) {\n            this.owner.editorModule.insertNewParagraphWidget(lastNode, true);\n            if (lastNode.characterFormat.removedIds.length > 0) {\n              this.owner.editorModule.constructRevisionFromID(lastNode.characterFormat, undefined);\n            }\n            deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n            if (isNullOrUndefined(block)) {\n              var nextBlock = this.documentHelper.selection.getNextParagraphBlock(lastNode.getSplitWidgets().pop());\n              this.owner.selectionModule.getNextRenderedBlock(lastNode);\n              var startParagraph = this.owner.selectionModule.start.paragraph;\n              if (nextBlock && startParagraph && startParagraph.bodyWidget instanceof BodyWidget && !startParagraph.isInsideTable && !this.owner.selectionModule.isinEndnote && !this.owner.selectionModule.isinFootnote && !startParagraph.bodyWidget.equals(nextBlock.bodyWidget)) {\n                nextBlock = undefined;\n              }\n              if (isNullOrUndefined(nextBlock)) {\n                //Sets the selection as starting of last paragraph.\n                this.owner.selectionModule.selectParagraphInternal(lastNode, true);\n              }\n            }\n          }\n          if (lastNode instanceof TableWidget && this.owner.selectionModule.start.offset > 0) {\n            var firstBlock = deletedNodes[deletedNodes.length - 1];\n            if (firstBlock instanceof ParagraphWidget) {\n              this.owner.editorModule.insertNewParagraphWidget(firstBlock, true);\n              deletedNodes.splice(deletedNodes.indexOf(firstBlock), 1);\n              if (isNullOrUndefined(block)) {\n                var nextBlock = this.documentHelper.selection.getNextParagraphBlock(firstBlock.getSplitWidgets().pop());\n                if (isNullOrUndefined(nextBlock)) {\n                  //Sets the selection as starting of last paragraph.\n                  this.owner.selectionModule.selectParagraphInternal(firstBlock, true);\n                }\n              }\n            }\n          }\n        }\n        if (deletedNodes.length > 0) {\n          var firstNode = deletedNodes[deletedNodes.length - 1];\n          if (block instanceof TableWidget) {\n            block = block.combineWidget(this.viewer);\n            if (firstNode instanceof TableWidget) {\n              if (this.owner.enableCollaborativeEditing) {\n                var paragraphInfo = {\n                  'paragraph': null,\n                  'offset': 0\n                };\n                var startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n                  position: 0,\n                  done: false\n                }, block).position;\n                var endIndex = startIndex + this.owner.selectionModule.getBlockLength(undefined, block, 0, {\n                  done: false\n                }, true, undefined, undefined);\n                var operation = this.getDeleteOperation('Delete');\n                operation.offset = startIndex;\n                operation.length = endIndex - startIndex;\n                this.cellOperation.push(operation);\n              }\n              this.owner.editorModule.insertTableInternal(block, firstNode, true);\n              deletedNodes.splice(deletedNodes.indexOf(firstNode), 1);\n              this.insertPosition = start;\n              var nextWidget = firstNode.getSplitWidgets().pop();\n              if (nextWidget.nextRenderedWidget instanceof TableWidget) {\n                block = nextWidget.nextRenderedWidget;\n              } else {\n                initialStart = start;\n                block = this.owner.editorModule.getBlock({\n                  index: initialStart\n                }).node;\n              }\n            }\n          }\n          //Checks if first node is paragraph and current insert position is paragraph end.\n          if (firstNode instanceof ParagraphWidget && this.owner.selectionModule.start.offset > 0 && this.owner.selectionModule.start.offset === this.owner.selectionModule.getLineLength(this.owner.selectionModule.start.paragraph.lastChild)) {\n            var editor = this.owner.editorModule;\n            editor.insertNewParagraphWidget(firstNode, false);\n            if (firstNode.characterFormat.removedIds.length > 0) {\n              this.owner.editorModule.constructRevisionFromID(firstNode.characterFormat, undefined);\n            }\n            deletedNodes.splice(deletedNodes.indexOf(firstNode), 1);\n            //Removes the intermediate empty paragraph instance.\n            if (this.action !== 'Paste') {\n              editor.removeBlock(this.owner.selectionModule.start.paragraph);\n            }\n            var paragraph = this.documentHelper.selection.getNextParagraphBlock(firstNode.getSplitWidgets().pop());\n            if (!isNullOrUndefined(paragraph)) {\n              this.owner.selectionModule.selectParagraphInternal(paragraph, true);\n            } else if (!isNullOrUndefined(firstNode)) {\n              this.owner.selectionModule.selectParagraphInternal(firstNode, false);\n            }\n          } else if (deletedNodes[0] instanceof TableWidget && deletedNodes.length !== 1) {\n            var nextNode = deletedNodes[1];\n            if (nextNode instanceof ParagraphWidget && nextNode.isEmpty()) {\n              deletedNodes.splice(deletedNodes.indexOf(nextNode), 1);\n            }\n          }\n        }\n        if (deletedNodes.length > 0) {\n          if (block instanceof TableWidget) {\n            block = block.combineWidget(this.viewer);\n          }\n          this.insertRemovedNodes(deletedNodes, block, end);\n        }\n      }\n    }\n  };\n  BaseHistoryInfo.prototype.insertRemovedNodes = function (deletedNodes, block, endIndex) {\n    // Use this property to relayout whole document (after complete all insertion intead of each section insertion) when insert section (this functionality already added in insertSection API).\n    var isRelayout = false;\n    for (var i = deletedNodes.length - 1, index = 0; i > -1; i--) {\n      var node = deletedNodes[i];\n      if (this.isHyperlinkField && !isNullOrUndefined(endIndex) && node instanceof FieldElementBox && node.fieldType === 1) {\n        // Bug 873011: Updated the selection for field end element insertion on \"Accept Change\" undo case.\n        this.owner.selectionModule.start.setPositionInternal(this.owner.selectionModule.getTextPosBasedOnLogicalIndex(endIndex));\n        this.owner.selectionModule.end.setPositionInternal(this.owner.selectionModule.start);\n      }\n      if (node instanceof ElementBox) {\n        this.owner.editorModule.insertInlineInSelection(this.owner.selectionModule, node);\n      } else if (node instanceof ParagraphWidget && node.childWidgets === undefined) {\n        this.owner.selection.moveToNextParagraph();\n      } else if (node instanceof BlockWidget) {\n        if (node instanceof TableRowWidget) {\n          if (block instanceof TableWidget) {\n            block.childWidgets.splice(index, 0, node);\n            this.owner.editorModule.updateNextBlocksIndex(node, true);\n            if (i === 0 || !(deletedNodes[i - 1] instanceof TableRowWidget)) {\n              this.documentHelper.layout.layoutBodyWidgetCollection(block.index, block.containerWidget, block, false);\n            }\n          }\n        } else if (block instanceof TableWidget && this.action !== 'RemoveRowTrack') {\n          this.owner.editorModule.insertBlockTable(this.owner.selectionModule, node, block);\n        } else {\n          if (node instanceof ParagraphWidget && !node.isInsideTable && this.action === 'RemoveRowTrack') {\n            this.owner.editorModule.insertNewParagraphWidget(node, false);\n          } else if (node instanceof TableWidget && this.action === 'RemoveRowTrack') {\n            this.owner.editorModule.insertTableInternal(node, node, false, true);\n            if (!isNullOrUndefined(deletedNodes[i - 1]) && !isNullOrUndefined(node.nextRenderedWidget) && node.nextRenderedWidget instanceof ParagraphWidget) {\n              this.owner.selectionModule.start.setPositionParagraph(node.nextRenderedWidget.firstChild, 0);\n              this.owner.selectionModule.end.setPositionParagraph(node.nextRenderedWidget.firstChild, 0);\n            }\n          } else {\n            this.owner.editorModule.insertBlock(node);\n          }\n        }\n      } else if (node instanceof WCharacterFormat) {\n        var insertIndex = this.selectionStart;\n        var wiget = this.owner.editorModule.getBlock({\n          index: insertIndex\n        }).node;\n        if (wiget instanceof ParagraphWidget) {\n          if (node.removedIds.length > 0) {\n            wiget.characterFormat.removedIds = node.removedIds.slice();\n            this.owner.editorModule.constructRevisionFromID(wiget.characterFormat, true);\n          } else if (wiget.characterFormat.revisions.length > 0) {\n            wiget.characterFormat = node.cloneFormat();\n          }\n        }\n      } else if (node instanceof BodyWidget) {\n        if (!isNullOrUndefined(node.removedHeaderFooters) && node.removedHeaderFooters.length !== 0) {\n          this.owner.documentHelper.headersFooters.splice(node.sectionIndex, 0, node.removedHeaderFooters[0]);\n          node.removedHeaderFooters = undefined;\n        }\n        isRelayout = true;\n        this.owner.editorModule.insertSection(this.owner.selectionModule, false, true, undefined, undefined, node.sectionFormat);\n      } else if (typeof node === 'string' && this.action === 'AcceptTOC') {\n        var insertIndex = this.selectionStart;\n        var widget = this.owner.editorModule.getBlock({\n          index: insertIndex\n        }).node;\n        var endWidget = this.owner.editorModule.getBlock({\n          index: this.selectionEnd\n        }).node;\n        var currentRevision = this.owner.documentHelper.revisionsInternal.get(node);\n        if (this.editorHistory.isUndoing) {\n          while (widget instanceof ParagraphWidget && widget !== endWidget) {\n            this.owner.editorModule.insertRevisionForBlock(widget, currentRevision.revisionType, true, currentRevision);\n            widget = this.documentHelper.selection.getNextParagraphBlock(widget.getSplitWidgets().pop());\n          }\n          this.owner.editorModule.insertRevisionForBlock(endWidget, currentRevision.revisionType, true, currentRevision);\n        } else {\n          while (currentRevision.range.length > 0) {\n            var item = currentRevision.range[0];\n            var revisionIndex = item.revisions.indexOf(currentRevision);\n            if (revisionIndex >= 0) {\n              item.revisions.splice(revisionIndex, 1);\n              var rangeIndex = currentRevision.range.indexOf(item);\n              currentRevision.range.splice(rangeIndex, 1);\n              this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n            }\n            if (currentRevision.range.length === 0) {\n              this.owner.revisions.remove(currentRevision);\n            }\n          }\n        }\n        this.owner.editorModule.addRemovedNodes(currentRevision.revisionID);\n      }\n    }\n    if (isRelayout) {\n      this.owner.editorModule.layoutWholeDocument(true);\n    }\n    deletedNodes = [];\n  };\n  BaseHistoryInfo.prototype.undoRevisionForElements = function (start, end, id) {\n    var currentPara = start.paragraph;\n    var endPara = end.paragraph;\n    var currentRevision = this.documentHelper.revisionsInternal.get(id);\n    var startoffset = this.owner.selectionModule.getParagraphInfo(start).offset;\n    var endoffset = this.owner.selectionModule.getParagraphInfo(end).offset;\n    var isSamePara = start.paragraph === end.paragraph;\n    var isSplittedWidget = false;\n    if (this.editorHistory.isUndoing) {\n      while (currentPara !== endPara) {\n        isSplittedWidget = false;\n        var endOffset = 0;\n        if (!isNullOrUndefined(currentPara.previousSplitWidget)) {\n          startoffset = currentPara.previousSplitWidget.getLength() + 1;\n          endOffset = currentPara.previousSplitWidget.getLength() + currentPara.getLength();\n        } else {\n          endOffset = currentPara.getLength();\n        }\n        this.owner.editorModule.applyRevisionForCurrentPara(currentPara, startoffset, endOffset, id, true);\n        //Correct the condition to get next widget instead of next widget of next splitted widget\n        currentPara = this.documentHelper.selection.getNextParagraphBlock(currentPara);\n        if (!isNullOrUndefined(currentPara) && !isNullOrUndefined(currentPara.previousRenderedWidget) && currentPara.previousRenderedWidget instanceof ParagraphWidget && currentPara.previousRenderedWidget.nextSplitWidget && currentPara === endPara) {\n          isSplittedWidget = true;\n        }\n        if (currentPara !== endPara) {\n          startoffset = 0;\n        }\n      }\n      if (currentPara === endPara) {\n        if (!isSamePara) {\n          startoffset = 0;\n        }\n        // Update the startoffset to the paragraph end if next paragraph is splitted widget\n        if (isSplittedWidget) {\n          startoffset = currentPara.previousRenderedWidget.getLength();\n        }\n        this.owner.editorModule.applyRevisionForCurrentPara(currentPara, startoffset, endoffset, id, false);\n      }\n    } else {\n      while (currentRevision.range.length > 0) {\n        var item = currentRevision.range[0];\n        var revisionIndex = item.revisions.indexOf(currentRevision);\n        if (revisionIndex >= 0) {\n          item.revisions.splice(revisionIndex, 1);\n          var rangeIndex = currentRevision.range.indexOf(item);\n          currentRevision.range.splice(rangeIndex, 1);\n          this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n        }\n        if (currentRevision.range.length === 0) {\n          this.owner.revisions.remove(currentRevision);\n        }\n        if (currentPara.characterFormat.revisions.length > 0 && this.editorHistory.isRedoing) {\n          for (var i = 0; i < currentPara.characterFormat.revisions.length; i++) {\n            var revision = currentPara.characterFormat.revisions[i];\n            if (revision.range.length === 0) {\n              currentPara.characterFormat.revisions.splice(i, 1);\n              i--;\n            }\n          }\n        }\n      }\n    }\n    this.removedNodes.push(id);\n  };\n  BaseHistoryInfo.prototype.revertResizing = function () {\n    this.editorHistory.currentBaseHistoryInfo = this;\n    if (this.action === 'RowResizing') {\n      if (this.modifiedProperties[0] instanceof RowHistoryFormat) {\n        var prevRowHistoryFormat = this.modifiedProperties[0];\n        var position = prevRowHistoryFormat.tableHierarchicalIndex;\n        var block = this.owner.editorModule.getBlock({\n          index: position\n        }).node;\n        if (block instanceof TableWidget) {\n          this.modifiedProperties[0].revertChanges(this.editorHistory.isRedoing, this.owner, block);\n        }\n      }\n    } else {\n      if (this.modifiedProperties[0] instanceof TableHistoryInfo) {\n        //selected cell resizing the condition checks done based on the selected widgets only. so need to highlight the selection.\n        if (this.owner.selectionModule.selectedWidgets.length === 0) {\n          this.owner.selectionModule.highlightSelection(true);\n        }\n        var prevTableHistoryInfo = this.modifiedProperties[0];\n        var position = prevTableHistoryInfo.tableHierarchicalIndex;\n        var block = this.owner.editorModule.getBlock({\n          index: position\n        }).node;\n        if (block instanceof TableWidget) {\n          var tableResize = this.owner.editorModule.tableResize;\n          this.owner.editorModule.setOffsetValue(this.owner.selectionModule);\n          block = block.combineWidget(this.owner.viewer);\n          tableResize.currentResizingTable = block;\n          this.modifiedProperties.splice(0, 1);\n          if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var tableHistoryInfoCurrent = new TableHistoryInfo(block, this.owner);\n            this.modifiedProperties.splice(0, 0, tableHistoryInfoCurrent);\n            this.owner.isLayoutEnabled = false;\n            tableResize.applyProperties(tableResize.currentResizingTable, prevTableHistoryInfo);\n            tableResize.currentResizingTable.isGridUpdated = true;\n            this.owner.isLayoutEnabled = true;\n            tableResize.updateGridValue(tableResize.currentResizingTable, false);\n            prevTableHistoryInfo.destroy();\n            prevTableHistoryInfo = undefined;\n          }\n        }\n      }\n    }\n  };\n  BaseHistoryInfo.prototype.revertTableDialogProperties = function (action) {\n    this.owner.isShiftingEnabled = false;\n    this.editorHistory.currentBaseHistoryInfo = this;\n    this.currentPropertyIndex = 0;\n    if (action === 'CellOptions') {\n      var selection = this.owner.selectionModule;\n      var cellFormat = this.modifiedProperties[0];\n      this.owner.editorModule.updateCellMargins(selection, cellFormat);\n    } else if (action === 'TableOptions') {\n      this.owner.tableOptionsDialogModule.applyTableOptionsHelper(this.modifiedProperties[0]);\n    }\n    this.currentPropertyIndex = 0;\n    this.owner.isShiftingEnabled = true;\n  };\n  BaseHistoryInfo.prototype.addModifiedPropertiesForSection = function (format, property, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var modifiedProperties = this.modifiedProperties;\n      var previousFormat = this.currentPropertyIndex < modifiedProperties.length ? modifiedProperties[this.currentPropertyIndex] : modifiedProperties[modifiedProperties.length - 1];\n      if (isNullOrUndefined(property)) {\n        value = previousFormat;\n        if (this.currentPropertyIndex < this.modifiedProperties.length) {\n          this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n        } else {\n          this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n        }\n      } else {\n        value = previousFormat.getPropertyValue(property);\n        previousFormat.copyFormat(format);\n      }\n      this.currentPropertyIndex++;\n    } else {\n      if (isNullOrUndefined(property)) {\n        this.modifiedProperties.push(format.cloneFormat());\n      } else {\n        var currentFormat = new WSectionFormat();\n        currentFormat.copyFormat(format);\n        this.modifiedProperties.push(currentFormat);\n      }\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.addModifiedProperties = function (format, property, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      var skipRemove = false;\n      if (format.ownerBase instanceof ElementBox) {\n        var prevLength = this.modifiedNodeLength[this.currentPropertyIndex];\n        if (format.ownerBase.length < prevLength) {\n          skipRemove = true;\n          this.modifiedNodeLength[this.currentPropertyIndex] = format.ownerBase.length;\n          this.modifiedNodeLength.splice(this.currentPropertyIndex + 1, 0, prevLength - format.ownerBase.length);\n          //Adds a copy of character format at next position for splitted inline.\n          var nextFormat = new WCharacterFormat(undefined);\n          nextFormat.copyFormat(previousFormat);\n          this.modifiedProperties.splice(this.currentPropertyIndex + 1, 0, nextFormat);\n        }\n      }\n      if (this.action === 'ClearCharacterFormat') {\n        if (this.editorHistory.isUndoing) {\n          value = previousFormat;\n          if (!skipRemove) {\n            this.modifiedProperties.splice(this.currentPropertyIndex, 1);\n            this.currentPropertyIndex--;\n          }\n        } else {\n          this.modifiedProperties.push(format.cloneFormat());\n        }\n      } else {\n        value = previousFormat;\n        if (this.currentPropertyIndex < this.modifiedProperties.length) {\n          this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n        } else {\n          this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n        }\n      }\n      this.currentPropertyIndex++;\n    } else {\n      if (isNullOrUndefined(property)) {\n        this.modifiedProperties.push(format.cloneFormat());\n      } else {\n        var currentFormat = new WCharacterFormat(undefined);\n        currentFormat.copyFormat(format);\n        this.modifiedProperties.push(currentFormat);\n      }\n      if (format.ownerBase instanceof ElementBox) {\n        this.modifiedNodeLength.push(format.ownerBase.length);\n      } else {\n        this.modifiedNodeLength.push(0);\n      }\n    }\n    return value;\n  };\n  /**\n   * build character Operation for undo/redo\n   *\n   * @private\n   * @returns {void}\n   */\n  BaseHistoryInfo.prototype.buildCharacterFormatOperation = function (widget, format) {\n    var position = this.owner.selectionModule.getElementPosition(widget, true).startPosition;\n    var start = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n    position.offset += widget.length;\n    var end = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n    var characterData = this.owner.sfdtExportModule.writeCharacterFormat(format, 0, true);\n    var operation = {\n      action: 'Format',\n      offset: start,\n      length: end - start,\n      format: JSON.stringify(characterData),\n      type: 'CharacterFormat'\n    };\n    this.modifiedFormatOperation.push(operation);\n  };\n  BaseHistoryInfo.prototype.addModifiedPropertiesForParagraphFormat = function (format, property, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      if (this.action === 'ClearParagraphFormat') {\n        if (this.editorHistory.isUndoing) {\n          value = previousFormat;\n          this.modifiedProperties.splice(this.currentPropertyIndex, 1);\n          this.currentPropertyIndex--;\n        } else {\n          this.modifiedProperties.push(format.cloneFormat());\n        }\n        this.currentPropertyIndex++;\n        return value;\n      }\n      if (isNullOrUndefined(property)) {\n        value = previousFormat;\n        if (this.currentPropertyIndex < this.modifiedProperties.length) {\n          this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n        } else {\n          this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n        }\n        this.currentPropertyIndex++;\n        return value;\n      }\n      if (property === 'listFormat') {\n        value = new WParagraphFormat(undefined);\n        value.copyFormat(previousFormat);\n        previousFormat.listFormat = new WListFormat(previousFormat);\n        previousFormat.listFormat.copyFormat(format.listFormat);\n        this.currentPropertyIndex++;\n        return value;\n      }\n      if (property === 'tabStop') {\n        value = [];\n        for (var i = 0; i < previousFormat.tabs.length; i++) {\n          value.push(previousFormat.tabs[i]);\n        }\n        var currentFormat = new WParagraphFormat(undefined);\n        currentFormat.copyFormat(format);\n        this.modifiedProperties[this.currentPropertyIndex] = currentFormat;\n        this.currentPropertyIndex++;\n        return value;\n      }\n      if (property === 'styleName') {\n        if (!isNullOrUndefined(previousFormat.baseStyle)) {\n          value = new WParagraphStyle();\n          value.copyStyle(previousFormat.baseStyle);\n          this.currentPropertyIndex++;\n          if (!isNullOrUndefined(format.baseStyle)) {\n            previousFormat.baseStyle = new WParagraphStyle();\n            previousFormat.baseStyle.copyStyle(format.baseStyle);\n          }\n          return value;\n        } else {\n          if (!isNullOrUndefined(format.baseStyle)) {\n            previousFormat.baseStyle = new WParagraphStyle();\n            previousFormat.baseStyle.copyStyle(format.baseStyle);\n          }\n          return undefined;\n        }\n      }\n      if (property === 'borders') {\n        value = previousFormat.borders.cloneFormat();\n      } else if (this.action.indexOf('Border') >= 0) {\n        value = previousFormat.borders.getBorder(property.replace('Border', ''));\n      } else {\n        value = previousFormat.getPropertyValue(property);\n      }\n      previousFormat.copyFormat(format);\n      this.currentPropertyIndex++;\n    } else {\n      if (isNullOrUndefined(property)) {\n        this.modifiedProperties.push(format.cloneFormat());\n      } else {\n        var currentFormat = new WParagraphFormat(undefined);\n        currentFormat.copyFormat(format);\n        this.modifiedProperties.push(currentFormat);\n      }\n    }\n    return value;\n  };\n  /**\n   * build paragraph Operation for undo/redo\n   *\n   * @private\n   * @returns {void}\n   */\n  BaseHistoryInfo.prototype.getParagraohFormatOperation = function (paragarph, format) {\n    var _a;\n    if ((this.modifiedProperties.length > 1 || this.modifiedFormatOperation.length > 0) && !isNullOrUndefined(paragarph)) {\n      var position = this.owner.selectionModule.setPositionForBlock(paragarph, true);\n      this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n      this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, paragarph, 0, {\n        done: false\n      }, true, undefined, undefined) - 1;\n      this.insertedFormat = format;\n      (_a = this.modifiedFormatOperation).push.apply(_a, this.getActionInfo(true));\n    }\n  };\n  BaseHistoryInfo.prototype.addModifiedPropertiesForContinueNumbering = function (paragraphFormat, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      value = previousFormat;\n      if (this.currentPropertyIndex < this.modifiedProperties.length) {\n        this.modifiedProperties[this.currentPropertyIndex] = paragraphFormat.cloneFormat();\n      } else {\n        this.modifiedProperties[this.modifiedProperties.length - 1] = paragraphFormat.cloneFormat();\n      }\n      this.currentPropertyIndex++;\n      return value;\n    } else {\n      var currentFormat = new WParagraphFormat();\n      currentFormat.copyFormat(paragraphFormat);\n      this.modifiedProperties.push(currentFormat);\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.addModifiedPropertiesForRestartNumbering = function (listFormat, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var listId = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      value = listId;\n      if (this.currentPropertyIndex < this.modifiedProperties.length) {\n        this.modifiedProperties[this.currentPropertyIndex] = listFormat.listId;\n      } else {\n        this.modifiedProperties[this.modifiedProperties.length - 1] = listFormat.listId;\n      }\n      this.currentPropertyIndex++;\n      return value;\n    } else {\n      this.modifiedProperties.push(listFormat.listId);\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.addModifiedPropertiesForList = function (listLevel) {\n    var value;\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousLevel = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      value = previousLevel;\n      previousLevel = new ModifiedLevel(listLevel, this.owner.editorModule.cloneListLevel(listLevel));\n      if (this.currentPropertyIndex < this.modifiedProperties.length) {\n        this.modifiedProperties[this.currentPropertyIndex] = previousLevel;\n      } else {\n        this.modifiedProperties[this.modifiedProperties.length - 1] = previousLevel;\n      }\n      this.currentPropertyIndex++;\n    } else {\n      this.modifiedProperties.push(new ModifiedLevel(listLevel, this.owner.editorModule.cloneListLevel(listLevel)));\n      value = listLevel;\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.revertProperties = function () {\n    this.editorHistory.currentBaseHistoryInfo = this;\n    this.currentPropertyIndex = 0;\n    var property = this.getProperty();\n    this.viewer.owner.editorModule.setOffsetValue(this.documentHelper.selection);\n    if (this.action === 'ClearCharacterFormat' || this.modifiedProperties[0] instanceof WCharacterFormat) {\n      if (this.action === 'ListCharacterFormat') {\n        this.owner.editorModule.updateListCharacterFormat(this.documentHelper.selection, property, undefined);\n        return;\n      }\n      this.owner.editorModule.updateSelectionCharacterFormatting(property, undefined, false);\n    } else if (this.action === 'ClearParagraphFormat' || this.modifiedProperties[0] instanceof WParagraphFormat) {\n      if (this.action === 'ContinueNumbering') {\n        this.owner.editorModule.revertContinueNumbering(this.owner.selectionModule, this.modifiedProperties[0]);\n        return;\n      }\n      if (this.action === 'StyleName' && this.modifiedProperties[0] instanceof WParagraphFormat) {\n        this.owner.editorModule.updateSelectionParagraphFormatting(property, this.modifiedProperties[0].baseStyle, false);\n        return;\n      }\n      this.owner.editorModule.setPreviousBlockToLayout();\n      this.owner.editorModule.updateSelectionParagraphFormatting(property, undefined, false);\n    } else if (this.action === 'LinkToPrevious' && this.modifiedProperties[0] instanceof WSectionFormat) {\n      var sectionIndex = parseInt(this.selectionStart.split(';')[0]);\n      this.owner.editorModule.updateHeaderFooters(property, undefined, sectionIndex, this.modifiedProperties[0].removedHeaderFooters[0]);\n    } else if (this.modifiedProperties[0] instanceof WSectionFormat) {\n      this.owner.editorModule.updateSectionFormat(property, undefined);\n    } else if (this.action === 'RestartNumbering') {\n      this.owner.editorModule.restartListAtInternal(this.owner.selectionModule, this.modifiedProperties[0]);\n      return;\n    } else if (this.modifiedProperties[0] instanceof ImageSizeInfo) {\n      this.owner.selectionModule.updateImageSize(this.modifiedProperties[0]);\n    } else if (this.modifiedProperties[0] instanceof ModifiedLevel) {\n      var modified = new Dictionary();\n      for (var i = 0; i < this.modifiedProperties.length; i++) {\n        var modifiedLevel = this.modifiedProperties[i];\n        // modified.modifiedLevels.add(modifiedLevel.ownerListLevel.levelNumber, modifiedLevel);\n        modified.add(i, modifiedLevel);\n      }\n      this.editorHistory.updateListChanges(modified);\n      modified.destroy();\n      modified = undefined;\n    } else if (this.modifiedProperties[0] instanceof WTableFormat) {\n      this.owner.editorModule.updateTableFormat(this.owner.selectionModule, property, undefined);\n    } else if (this.modifiedProperties[0] instanceof WCellFormat) {\n      this.owner.isShiftingEnabled = true;\n      this.owner.editorModule.updateCellFormat(this.owner.selectionModule, property, undefined);\n    } else if (this.modifiedProperties[0] instanceof WRowFormat) {\n      this.owner.editorModule.updateRowFormat(this.owner.selectionModule, property, undefined);\n    } else if (this.action === 'ModifyStyle') {\n      var styleObject = this.modifiedProperties.pop();\n      this.owner.editor.updateStyleObject(styleObject);\n    }\n    this.currentPropertyIndex = 0;\n    if (this.action === 'ClearCharacterFormat' || this.action === 'ClearParagraphFormat') {\n      this.owner.editorModule.getOffsetValue(this.documentHelper.selection);\n    }\n  };\n  BaseHistoryInfo.prototype.addModifiedCellOptions = function (applyFormat, format, table) {\n    var currentFormat;\n    if (isNullOrUndefined(applyFormat.bottomMargin) && isNullOrUndefined(applyFormat.topMargin) && isNullOrUndefined(applyFormat.rightMargin) && isNullOrUndefined(applyFormat.leftMargin)) {\n      currentFormat = this.copyCellOptions(table.tableFormat);\n    } else {\n      currentFormat = this.copyCellOptions(applyFormat);\n    }\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      format = previousFormat;\n      if (this.currentPropertyIndex < this.modifiedProperties.length) {\n        this.modifiedProperties[this.currentPropertyIndex] = this.copyCellOptions(applyFormat);\n      } else {\n        this.modifiedProperties[this.modifiedProperties.length - 1] = this.copyCellOptions(applyFormat);\n      }\n      this.currentPropertyIndex++;\n      return format;\n    } else {\n      this.modifiedProperties.push(currentFormat);\n    }\n    return format;\n  };\n  BaseHistoryInfo.prototype.copyCellOptions = function (format) {\n    var cellFormat = new WCellFormat();\n    cellFormat.topMargin = format.topMargin;\n    cellFormat.rightMargin = format.rightMargin;\n    cellFormat.bottomMargin = format.bottomMargin;\n    cellFormat.leftMargin = format.leftMargin;\n    return cellFormat;\n  };\n  BaseHistoryInfo.prototype.addModifiedTableOptions = function (format) {\n    var currentFormat = this.copyTableOptions(format);\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      if (this.currentPropertyIndex < this.modifiedProperties.length) {\n        this.modifiedProperties.splice(this.currentPropertyIndex, 1, currentFormat);\n      } else {\n        this.modifiedProperties.splice(this.modifiedProperties.length - 1, 1, currentFormat);\n      }\n      this.currentPropertyIndex++;\n    } else {\n      this.modifiedProperties.push(currentFormat);\n    }\n  };\n  BaseHistoryInfo.prototype.copyTableOptions = function (format) {\n    var tableFormat = new WTableFormat();\n    tableFormat.topMargin = format.topMargin;\n    tableFormat.rightMargin = format.rightMargin;\n    tableFormat.bottomMargin = format.bottomMargin;\n    tableFormat.leftMargin = format.leftMargin;\n    tableFormat.cellSpacing = format.cellSpacing;\n    return tableFormat;\n  };\n  BaseHistoryInfo.prototype.getProperty = function () {\n    switch (this.action) {\n      case 'Bold':\n        return 'bold';\n      case 'Italic':\n        return 'italic';\n      case 'FontColor':\n        return 'fontColor';\n      case 'FontFamily':\n        return 'fontFamily';\n      case 'FontSize':\n        return 'fontSize';\n      case 'HighlightColor':\n        return 'highlightColor';\n      case 'BaselineAlignment':\n        return 'baselineAlignment';\n      case 'Strikethrough':\n        return 'strikethrough';\n      case 'Underline':\n        return 'underline';\n      case 'AfterSpacing':\n        return 'afterSpacing';\n      case 'BeforeSpacing':\n        return 'beforeSpacing';\n      case 'LeftIndent':\n        return 'leftIndent';\n      case 'RightIndent':\n        return 'rightIndent';\n      case 'FirstLineIndent':\n        return 'firstLineIndent';\n      case 'LineSpacingType':\n        return 'lineSpacingType';\n      case 'LineSpacing':\n        return 'lineSpacing';\n      case 'TextAlignment':\n        return 'textAlignment';\n      case 'ListFormat':\n        return 'listFormat';\n      case 'PageHeight':\n        return 'pageHeight';\n      case 'PageWidth':\n        return 'pageWidth';\n      case 'DifferentOddAndEvenPages':\n        return 'differentOddAndEvenPages';\n      case 'TableAlignment':\n        return 'tableAlignment';\n      case 'TableLeftIndent':\n        return 'leftIndent';\n      case 'DefaultCellSpacing':\n        return 'cellSpacing';\n      case 'LeftMargin':\n      case 'CellLeftMargin':\n      case 'DefaultCellLeftMargin':\n        return 'leftMargin';\n      case 'RightMargin':\n      case 'CellRightMargin':\n      case 'DefaultCellRightMargin':\n        return 'rightMargin';\n      case 'TopMargin':\n      case 'CellTopMargin':\n      case 'DefaultCellTopMargin':\n        return 'topMargin';\n      case 'BottomMargin':\n      case 'CellBottomMargin':\n      case 'DefaultCellBottomMargin':\n        return 'bottomMargin';\n      case 'CellContentVerticalAlignment':\n        return 'verticalAlignment';\n      case 'RowHeight':\n        return 'height';\n      case 'RowHeightType':\n        return 'heightType';\n      case 'RowHeader':\n        return 'isHeader';\n      case 'AllowBreakAcrossPages':\n        return 'allowBreakAcrossPages';\n      case 'TablePreferredWidth':\n      case 'CellPreferredWidth':\n        return 'preferredWidth';\n      case 'TablePreferredWidthType':\n      case 'CellPreferredWidthType':\n        return 'preferredWidthType';\n      case 'Shading':\n        return 'shading';\n      case 'StyleName':\n        return 'styleName';\n      case 'ParagraphBidi':\n      case 'TableBidi':\n        return 'bidi';\n      case 'ContextualSpacing':\n        return 'contextualSpacing';\n      case 'LinkToPrevious':\n        return 'linkToPrevious';\n      case 'LeftBorder':\n      case 'TopBorder':\n      case 'RightBorder':\n      case 'BottomBorder':\n      case 'HorizontalBorder':\n      case 'VerticalBorder':\n      case 'Borders':\n        return this.action[0].toLowerCase() + this.action.slice(1);\n      case 'TabStop':\n        return 'tabStop';\n    }\n    return undefined;\n  };\n  BaseHistoryInfo.prototype.getCharacterPropertyValue = function (property, modifiedProperty) {\n    var value;\n    if (property === 'bold') {\n      value = modifiedProperty.bold;\n    } else if (property === 'italic') {\n      value = modifiedProperty.italic;\n    } else if (property === 'fontColor') {\n      value = modifiedProperty.fontColor;\n    } else if (property === 'fontFamily') {\n      value = modifiedProperty.fontFamily;\n    } else if (property === 'fontSize') {\n      value = modifiedProperty.fontSize;\n    } else if (property === 'highlightColor') {\n      value = modifiedProperty.highlightColor;\n    } else if (property === 'baselineAlignment') {\n      value = modifiedProperty.baselineAlignment;\n    } else if (property === 'strikethrough') {\n      value = modifiedProperty.strikethrough;\n    } else if (property === 'underline') {\n      value = modifiedProperty.underline;\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.addModifiedTableProperties = function (format, property, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousTableFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      if (isNullOrUndefined(property)) {\n        value = previousTableFormat;\n        if (this.currentPropertyIndex < this.modifiedProperties.length) {\n          this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n        } else {\n          this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n        }\n        this.currentPropertyIndex++;\n        return value;\n      }\n      if (property === 'shading') {\n        value = previousTableFormat.shading;\n      } else {\n        value = previousTableFormat.getPropertyValue(property);\n      }\n      previousTableFormat.copyFormat(format);\n      this.currentPropertyIndex++;\n    } else {\n      var currentFormat = new WTableFormat();\n      currentFormat.copyFormat(format);\n      this.modifiedProperties.push(currentFormat);\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.addModifiedRowProperties = function (rowFormat, property, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      if (this.owner.enableCollaborativeEditing && this.modifiedProperties.length > 1 && rowFormat.ownerBase) {\n        var paragraphInfo = {\n          'paragraph': null,\n          'offset': 0\n        };\n        var startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n          position: 0,\n          done: false\n        }, rowFormat.ownerBase).position;\n        var endIndex = startIndex + 1;\n        var rowData = {};\n        if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n          this.owner.sfdtExportModule.assignRowFormat(rowData, previousFormat, 0);\n        }\n        var operation = {\n          action: 'Format',\n          offset: startIndex,\n          length: endIndex - startIndex,\n          format: JSON.stringify(rowData),\n          type: 'RowFormat'\n        };\n        this.modifiedFormatOperation.push(operation);\n      }\n      if (isNullOrUndefined(property)) {\n        value = previousFormat;\n        if (this.currentPropertyIndex < this.modifiedProperties.length) {\n          this.modifiedProperties[this.currentPropertyIndex] = rowFormat.cloneFormat();\n        } else {\n          this.modifiedProperties[this.modifiedProperties.length - 1] = rowFormat.cloneFormat();\n        }\n        this.currentPropertyIndex++;\n        return value;\n      }\n      value = previousFormat.getPropertyValue(property);\n      previousFormat.copyFormat(rowFormat);\n      this.currentPropertyIndex++;\n    } else {\n      var currentFormat = new WRowFormat();\n      currentFormat.copyFormat(rowFormat);\n      this.modifiedProperties.push(currentFormat);\n    }\n    return value;\n  };\n  BaseHistoryInfo.prototype.addModifiedCellProperties = function (cellFormat, property, value) {\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      var previousFormat = this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1];\n      if (isNullOrUndefined(property)) {\n        value = previousFormat;\n        if (this.currentPropertyIndex < this.modifiedProperties.length) {\n          this.modifiedProperties[this.currentPropertyIndex] = cellFormat.cloneFormat();\n        } else {\n          this.modifiedProperties[this.modifiedProperties.length - 1] = cellFormat.cloneFormat();\n        }\n        this.currentPropertyIndex++;\n        return value;\n      }\n      if (property === 'shading') {\n        value = previousFormat.shading;\n      } else {\n        value = previousFormat.getPropertyValue(property);\n      }\n      previousFormat.copyFormat(cellFormat);\n      this.currentPropertyIndex++;\n    } else {\n      var currentFormat = new WCellFormat();\n      currentFormat.copyFormat(cellFormat);\n      this.modifiedProperties.push(currentFormat);\n    }\n    return value;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  BaseHistoryInfo.prototype.destroy = function () {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.insertPosition = undefined;\n    this.endPosition = undefined;\n    if (!isNullOrUndefined(this.modifiedNodeLength)) {\n      this.modifiedNodeLength = [];\n      this.modifiedNodeLength = undefined;\n    }\n    if (!isNullOrUndefined(this.modifiedProperties)) {\n      for (var i = 0; i < this.modifiedProperties.length; i++) {\n        var property = this.modifiedProperties[i];\n        if (property instanceof WCharacterFormat) {\n          property.destroy();\n        } else if (property instanceof WParagraphFormat) {\n          property.destroy();\n        } else if (property instanceof WSectionFormat) {\n          property.destroy();\n        } else if (property instanceof ModifiedLevel) {\n          property.destroy();\n        }\n        this.modifiedProperties.splice(this.modifiedProperties.indexOf(property), 1);\n        i--;\n      }\n      this.modifiedPropertiesIn = undefined;\n    }\n    if (!isNullOrUndefined(this.removedNodes)) {\n      for (var i = 0; i < this.removedNodes.length; i++) {\n        var node = this.removedNodes[i];\n        if (node instanceof ParagraphWidget) {\n          node.destroyInternal(this.viewer);\n        } else if (node instanceof ElementBox && !(node instanceof CommentCharacterElementBox)) {\n          node.destroy();\n        }\n        this.removedNodes.splice(this.removedNodes.indexOf(node), 1);\n        i--;\n      }\n      this.removedNodesIn = undefined;\n    }\n    if (!isNullOrUndefined(this.insertedNodes)) {\n      for (var i = 0; i < this.insertedNodes.length; i++) {\n        var node = this.insertedNodes[i];\n        if (node instanceof ParagraphWidget) {\n          node.destroyInternal(this.viewer);\n        } else if (node instanceof ElementBox && !(node instanceof CommentCharacterElementBox)) {\n          node.destroy();\n        }\n        this.insertedNodes.splice(this.insertedNodes.indexOf(node), 1);\n        i--;\n      }\n      this.insertedNodes = undefined;\n    }\n    this.ownerIn = undefined;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.recordInsertRevisionDeletetion = function (widget, startOffset, endOffset) {\n    if (this.startIndex > this.endIndex) {\n      var temp = this.startIndex;\n      this.startIndex = this.endIndex;\n      this.endIndex = temp;\n    }\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    if (widget instanceof TextElementBox || widget instanceof ImageElementBox || widget instanceof FieldElementBox || widget instanceof BookmarkElementBox) {\n      if (widget.revisions.length > 0) {\n        var currentStart = this.owner.selectionModule.getElementPosition(widget, true).startPosition;\n        startOffset = isNullOrUndefined(startOffset) ? 0 : startOffset;\n        endOffset = isNullOrUndefined(endOffset) ? widget.length : endOffset;\n        currentStart.setPositionParagraph(widget.line, startOffset + currentStart.offset);\n        this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentStart);\n        this.endIndex = this.startIndex + endOffset;\n        var revision = this.owner.editorModule.retrieveRevisionInOder(widget);\n        var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n        if (revision.revisionType === 'Insertion' && revision.author !== currentUser) {\n          this.revisionOperation.push(this.getFormatOperation());\n        } else if (revision.revisionType === 'Insertion') {\n          var operation = this.getDeleteOperation('Delete', undefined, undefined);\n          this.revisionOperation.push(operation);\n          endIndex -= operation.length;\n        } else if (revision.revisionType === 'Deletion') {\n          if (revision.author !== currentUser) {\n            var operation = this.getFormatOperation(widget);\n            if (widget.removedIds.length > 0) {\n              for (var i = 0; i < widget.removedIds.length; i++) {\n                if (!isNullOrUndefined(operation.markerData.removedIds)) {\n                  operation.markerData.removedIds = [];\n                }\n                operation.markerData.removedIds.push(widget.removedIds[i]);\n              }\n            }\n            this.revisionOperation.push(operation);\n          }\n        }\n      }\n    } else if (widget instanceof ParagraphWidget) {\n      var isAllRevision = true;\n      for (var i = 0; i < widget.childWidgets.length; i++) {\n        var line = widget.childWidgets[i];\n        if (line.children.length === 0) {\n          isAllRevision = false;\n        }\n        for (var j = 0; j < line.children.length; j++) {\n          var element = line.children[j];\n          if (element.revisions.length <= 0) {\n            isAllRevision = false;\n          } else if (element.revisions[0].revisionType !== 'Insertion') {\n            isAllRevision = false;\n          }\n        }\n      }\n      if (isAllRevision) {\n        var position = new TextPosition(this.owner);\n        position.setPositionParagraph(widget.childWidgets[0], 0);\n        this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n        var length_1 = this.owner.selectionModule.getBlockLength(undefined, widget, 0, {\n          done: false\n        }, true, undefined, undefined);\n        var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n        var revision = this.owner.editorModule.retrieveRevisionInOder(widget.childWidgets[0].children[0]);\n        if (currentUser === revision.author) {\n          this.endIndex = this.startIndex + length_1;\n          this.revisionOperation.push(this.getDeleteOperation(this.action, undefined, this.getRemovedText(widget)));\n          endIndex -= length_1;\n        }\n      } else {\n        for (var i = 0; i < widget.childWidgets.length; i++) {\n          for (var j = 0; j < widget.childWidgets[i].children.length; j++) {\n            this.recordInsertRevisionDeletetion(widget.childWidgets[i].children[j]);\n            startIndex = this.startIndex;\n            endIndex = this.endIndex;\n          }\n        }\n      }\n    }\n    this.startIndex = startIndex;\n    this.endIndex = endIndex;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.getDeleteOperationsForTrackChanges = function () {\n    var operations = [];\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    var insertIndex = this.insertIndex;\n    var isInsertRevision = false;\n    this.startIndex = startIndex;\n    this.endIndex = endIndex;\n    for (var i = 0; i < this.revisionOperation.length; i++) {\n      if (this.revisionOperation[i].action == 'Format' && isNullOrUndefined(this.revisionOperation[i].markerData)) {\n        this.revisionOperation[i].markerData = this.markerData.pop();\n      }\n      operations.push(this.revisionOperation[i]);\n    }\n    for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n      var element = this.removedNodes[i];\n      if (element instanceof TextElementBox || element instanceof ImageElementBox || element instanceof FieldElementBox || element instanceof BookmarkElementBox) {\n        if (element.removedIds.length === 0) {\n          var operation = this.getFormatOperation();\n          if (!isNullOrUndefined(operation.markerData)) {\n            for (var j = 0; j < this.markerData.length; j++) {\n              if (this.markerData[j].revisionType === 'Deletion') {\n                if (isNullOrUndefined(operation.markerData.splittedRevisions)) {\n                  operation.markerData.splittedRevisions = [];\n                }\n                if (this.checkValidRevision(this.markerData[j].revisionId)) {\n                  operation.markerData.splittedRevisions.push(this.markerData[j]);\n                }\n                this.markerData.splice(j, 1);\n                j--;\n              }\n            }\n          }\n          operations.push(operation);\n          break;\n        }\n      } else if (element instanceof ParagraphWidget) {\n        if (element.characterFormat.revisions.length > 0) {\n          operations.push(this.getDeleteOperation(this.action));\n        } else if (element.characterFormat.removedIds.length > 0) {\n          var operation = this.getDeleteOperation(this.action);\n          operation.markerData.isAcceptOrReject = this.isAcceptOrReject;\n          operations.push(operation);\n          var position = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.insertPosition);\n          if (!position.isAtParagraphStart) {\n            //When accept the delete revision if paragraph is not start then paragraph is combining.\n            var endIndex_1 = this.endIndex;\n            this.endIndex = this.startIndex;\n            operations.push(this.getDeleteOperation('Delete'));\n            this.endIndex = endIndex_1;\n          }\n          break;\n        } else if (element.characterFormat.revisions.length === 0) {\n          var operation = this.getFormatOperation();\n          for (var j = 0; j < this.markerData.length; j++) {\n            if (this.markerData[j].revisionType === 'Deletion') {\n              if (isNullOrUndefined(operation.markerData.splittedRevisions)) {\n                operation.markerData.splittedRevisions = [];\n              }\n              if (this.checkValidRevision(this.markerData[j].revisionId)) {\n                operation.markerData.splittedRevisions.push(this.markerData[j]);\n              }\n              this.markerData.splice(j, 1);\n              j--;\n            }\n          }\n          this.markerData = [];\n          operations.push(operation);\n          break;\n        }\n      }\n    }\n    return operations;\n  };\n  BaseHistoryInfo.prototype.checkValidRevision = function (revisionID) {\n    for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n      if (this.owner.revisions.changes[i].revisionID === revisionID) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.getDeleteOperationForTrackChanges = function (element) {\n    var operation;\n    if (element instanceof TextElementBox || element instanceof ImageElementBox || element instanceof FieldElementBox || element instanceof BookmarkElementBox) {\n      if (element.removedIds.length === 0) {\n        operation = this.getFormatOperation(element);\n      } else if (element.removedIds.length > 0) {\n        var revisionId = element.removedIds[0];\n        var revision = this.owner.editorModule.getRevision(revisionId);\n        var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n        if (revision.revisionType === 'Insertion' && revision.author !== currentUser) {\n          operation = this.getFormatOperation(element);\n        } else if (revision.revisionType === 'Insertion') {\n          operation = this.getDeleteOperation(this.action, undefined, this.getRemovedText(element));\n        } else if (revision.revisionType === 'Deletion') {\n          if (revision.author !== currentUser) {\n            operation = this.getFormatOperation(element);\n            if (element.removedIds.length > 0) {\n              for (var i = 0; i < element.removedIds.length; i++) {\n                if (!isNullOrUndefined(operation.markerData.removedIds)) {\n                  operation.markerData.removedIds = [];\n                }\n                operation.markerData.removedIds.push(element.removedIds[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (this.action !== 'Enter' && !(element instanceof ParagraphWidget) && (isNullOrUndefined(operation) || operation.action !== 'Delete')) {\n      this.startIndex += element.length;\n    }\n    return operation;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.getActionInfo = function (isInvertOperation) {\n    var action = this.action;\n    if (!isNullOrUndefined(this.isAcceptOrReject) && this.isAcceptOrReject === 'Reject') {\n      action = 'Reject Change';\n    }\n    var operations = [];\n    switch (action.toString()) {\n      case 'Insert':\n      case 'InsertTextParaReplace':\n      case 'Enter':\n      case 'InsertInline':\n      case 'SectionBreak':\n      case 'SectionBreakContinuous':\n        if (this.removedNodes.length > 0 && isNullOrUndefined(this.dropDownIndex)) {\n          if (this.owner.enableTrackChanges && !this.editorHistory.isUndoing) {\n            operations = this.getDeleteOperationsForTrackChanges();\n            if (action !== 'InsertInline') {\n              this.insertIndex = this.endIndex;\n            }\n          } else {\n            var deleteOperation = this.getDeleteOperation(action);\n            if (action === 'Enter' && this.owner.enableTrackChanges && this.editorHistory.isUndoing) {\n              deleteOperation.markerData = {\n                isSkipTracking: true\n              };\n            }\n            operations.push(deleteOperation);\n          }\n        }\n        if (action === 'Enter' || this.insertedText.length > 0) {\n          if (!this.editorHistory.isUndoing && (!this.editorHistory.isRedoing || action === 'Enter' || action === 'SectionBreak' || action === 'SectionBreakContinuous')) {\n            var operation = this.getInsertOperation(action);\n            if (this.owner.enableTrackChanges && this.action !== 'Enter') {\n              if (this.insertedElement instanceof FootnoteElementBox) {\n                operation.markerData = this.markerData[0];\n                this.markerData.splice(0, 1);\n                operation.text = CONTROL_CHARACTERS.Marker_Start;\n                operation.markerData.type = this.insertedElement.footnoteType;\n                operation.markerData.revisionForFootnoteEndnoteContent = this.markerData.pop();\n              }\n              operations.push(operation);\n              for (var i = 0; i < this.splittedRevisions.length; i++) {\n                if (isNullOrUndefined(operation.markerData)) {\n                  operation.markerData = {};\n                }\n                if (isNullOrUndefined(operation.markerData.splittedRevisions)) {\n                  operation.markerData.splittedRevisions = [];\n                }\n                operation.markerData.splittedRevisions.push(this.splittedRevisions[i]);\n              }\n            } else {\n              operations.push(operation);\n            }\n          } else if (this.isRemovedNodes) {\n            var operationCollection = this.getDeleteContent(action);\n            operations = operations.concat(operationCollection);\n          }\n        }\n        var operation2 = operations[operations.length - 1];\n        if (action === 'Insert' && !isNullOrUndefined(operation2.text)) {\n          operation2.length = operation2.text.length;\n        }\n        if (!isNullOrUndefined(this.dropDownIndex)) {\n          operation2.markerData = {\n            'type': 'Field',\n            'dropDownIndex': this.dropDownIndex\n          };\n          operation2.offset = this.getElementAbsolutePosition(this.fieldBegin);\n          operation2.type = 'DropDown';\n        }\n        break;\n      case 'InsertTable':\n      case 'InsertTableBelow':\n        if (this.removedNodes.length > 0) {\n          operations.push(this.getDeleteOperation(action));\n        }\n        if (this.editorHistory.isUndoing && this.isRemovedNodes) {\n          operations.push(this.getUndoRedoOperation(action));\n        } else {\n          var tableRowOperation = this.buildTableRowCellOperation(action);\n          for (var i = 0; i < tableRowOperation.length; i++) {\n            operations.push(tableRowOperation[i]);\n          }\n        }\n        break;\n      case 'InsertRowAbove':\n      case 'InsertRowBelow':\n      case 'InsertColumnLeft':\n      case 'InsertColumnRight':\n        if (this.editorHistory.isUndoing) {\n          for (var i = 0; i < this.cellOperation.length; i++) {\n            operations.push(this.cellOperation[i]);\n          }\n          var operation = this.getUndoRedoOperation(action, true);\n          if (this.owner.enableTrackChanges && isNullOrUndefined(operation.markerData)) {\n            operation.markerData = {\n              isSkipTracking: true\n            };\n          }\n          operations.push(operation);\n        } else {\n          var tableCellOperation = this.buildTableRowCellOperation(action);\n          if (action === 'InsertRowAbove' || action === 'InsertRowBelow') {\n            operations = tableCellOperation.slice();\n          } else {\n            operations = tableCellOperation.reverse().slice();\n          }\n        }\n        break;\n      case 'BackSpace':\n      case 'Delete':\n      case 'Cut':\n      case 'DeleteBookmark':\n      case 'RemoveEditRange':\n        if (this.editorHistory.isUndoing) {\n          if (action == \"DeleteBookmark\" || action == \"RemoveEditRange\") {\n            this.startIndex -= 1;\n            this.insertIndex = this.startIndex;\n            this.insertedText = CONTROL_CHARACTERS.Marker_Start;\n            operations.push(this.getInsertOperation(action));\n            this.insertedText = CONTROL_CHARACTERS.Marker_End;\n            operations.push(this.getInsertOperation(action, true));\n            if (action === 'RemoveEditRange') {\n              var operation = operations[operations.length - 1];\n              operation.offset -= 1;\n            }\n            this.startIndex += 1;\n          } else {\n            if (this.endRevisionLogicalIndex && this.editorHistory.isUndoing) {\n              if (this.removedNodes.length > 0) {\n                var deleteOperation = this.getDeleteOperation(action);\n                deleteOperation.markerData = {\n                  isSkipTracking: true\n                };\n                operations.push(deleteOperation);\n              }\n              if (this.isRemovedNodes) {\n                var operationCollection = this.getDeleteContent(action);\n                operations = operations.concat(operationCollection);\n              }\n            } else {\n              var operationCollection = this.getDeleteContent(action);\n              operations = operations.concat(operationCollection);\n            }\n          }\n        } else {\n          if (this.cellOperation.length > 0) {\n            operations = this.cellOperation;\n            this.cellOperation = [];\n          } else {\n            if (this.removedNodes.length > 0) {\n              if (this.owner.enableTrackChanges) {\n                if (this.editorHistory.isRedoing) {\n                  if (this.removedNodes.length > 0) {\n                    var deleteOperation = this.getDeleteOperation(action);\n                    deleteOperation.markerData = {\n                      isSkipTracking: true\n                    };\n                    operations.push(deleteOperation);\n                  }\n                  if (this.isRemovedNodes) {\n                    var operationCollection = this.getDeleteContent(action);\n                    operations = operations.concat(operationCollection);\n                  }\n                } else {\n                  operations = this.getDeleteOperationsForTrackChanges();\n                }\n              } else {\n                var deleteOperation = this.getDeleteOperation(action);\n                operations.push(deleteOperation);\n                for (var i = 0; i < this.removedNodes.length; i++) {\n                  var element = this.removedNodes[parseInt(i.toString(), 10)];\n                  if (element instanceof BodyWidget) {\n                    var headersFooters = element.removedHeaderFooters;\n                    for (var j = 0; j < headersFooters.length; j++) {\n                      var headerFooter = headersFooters[parseInt(j.toString(), 10)];\n                      var keysLength = Object.keys(headerFooter).length;\n                      if (keysLength > 0) {\n                        operations.push(this.getDeleteOperation('DeleteHeaderFooter', undefined));\n                        break;\n                      }\n                    }\n                  }\n                }\n                if (action === 'DeleteBookmark' || action === 'RemoveEditRange') {\n                  operations.push(this.getDeleteOperation(action, true));\n                  if (action === 'RemoveEditRange') {\n                    var operation = operations[operations.length - 1];\n                    operation.offset -= 1;\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.markerData = [];\n        break;\n      case 'ResolveComment':\n      case 'EditComment':\n        for (var i = 0; i < this.removedNodes.length; i++) {\n          var operation = this.getUpdateOperation();\n          operations.push(this.getCommentOperation(operation, action, this.removedNodes[i]));\n        }\n        break;\n      case 'ClearRevisions':\n      case 'TrackingPageBreak':\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n          if (this.removedNodes.length > 0) {\n            var deleteOperation = this.getDeleteOperation(action);\n            deleteOperation.markerData = {\n              isSkipTracking: true\n            };\n            operations.push(deleteOperation);\n          }\n          if (this.isRemovedNodes) {\n            var revision = void 0;\n            if (typeof this.removedNodes[0] === 'string') {\n              revision = this.owner.editorModule.getRevision(this.removedNodes[0]);\n            }\n            if (revision && revision.range[0] instanceof WCharacterFormat) {\n              operations.push(this.getInsertOperation('Enter'));\n            } else {\n              var operationCollection = this.getDeleteContent(action);\n              operations = operations.concat(operationCollection);\n            }\n          }\n        } else {\n          if (this.removedNodes.length > 0) {\n            var revision = this.owner.editorModule.getRevision(this.removedNodes[0]);\n            if (action === 'TrackingPageBreak') {\n              if (!(typeof this.removedNodes[0] === 'string')) {\n                var operation = this.getDeleteOperation(action);\n                operation.markerData.isAcceptOrReject = 'Reject';\n                operations.push(operation);\n                break;\n              }\n            }\n            operations.push(this.getRevisionOperation(revision));\n          }\n        }\n        break;\n      case 'Reject Change':\n        if (this.isRemovedNodes) {\n          var operationCollection = this.getDeleteContent(action);\n          operations = operations.concat(operationCollection);\n        } else {\n          var operation = this.getDeleteOperation(action);\n          operation.markerData.isAcceptOrReject = 'Reject';\n          operations.push(operation);\n        }\n        break;\n      case 'Accept Change':\n        if (this.isRemovedNodes) {\n          var operationCollection = this.getDeleteContent(action);\n          operations = operations.concat(operationCollection);\n        } else {\n          var deleteOperation = this.getDeleteOperation(action);\n          deleteOperation.markerData.isAcceptOrReject = 'Accept';\n          operations.push(deleteOperation);\n        }\n        break;\n      case 'Paste':\n      case 'PasteColumn':\n      case 'PasteOverwrite':\n      case 'PasteRow':\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n          var isTextRemoved = false;\n          if (this.removedNodes.length > 0) {\n            for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n              if (this.removedNodes[i] instanceof ParagraphWidget) {\n                isTextRemoved = true;\n              } else {\n                isTextRemoved = false;\n              }\n            }\n            operations.push(this.getDeleteOperation(action));\n            if (isTextRemoved) {\n              this.endIndex = this.startIndex;\n              operations.push(this.getDeleteOperation('Delete'));\n            }\n          }\n          if (this.isRemovedNodes) {\n            if (this.action === 'Paste') {\n              var operationCollection = this.getDeleteContent(action);\n              operations = operations.concat(operationCollection);\n            } else {\n              operations.push(this.getUndoRedoOperation(action, true));\n            }\n          }\n        } else {\n          if (this.removedNodes.length > 0) {\n            operations.push(this.getDeleteOperation('Delete'));\n          }\n          var length_2 = this.getPasteContentLength();\n          if (action !== 'Paste') {\n            if (this.owner.selectionModule.start.paragraph.isInsideTable) {\n              length_2 = this.owner.selectionModule.getBlockLength(undefined, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable, 0, {\n                done: false\n              }, true, undefined, undefined);\n            }\n          }\n          var pasteOperation = {\n            action: 'Insert',\n            offset: this.startIndex,\n            length: length_2,\n            pasteContent: JSON.stringify(this.pasteContent),\n            type: isNullOrUndefined(this.type) ? 'Paste' : this.type,\n            markerData: this.markerData.pop()\n          };\n          operations.push(pasteOperation);\n        }\n        break;\n      case 'InsertHyperlink':\n        if (isNullOrUndefined(this.fieldBegin)) {\n          operations.push(this.getDeleteOperation('BackSpace'));\n          if (this.isRemovedNodes) {\n            var operationCollection = this.getDeleteContent(action);\n            operations = operations.concat(operationCollection);\n          }\n        } else {\n          if (this.isEditHyperlink) {\n            operations = this.getEditHyperlinkOperation();\n          } else {\n            operations = this.getFieldOperation();\n          }\n        }\n        this.fieldBegin = undefined;\n        break;\n      case 'UpdateFormField':\n        this.insertedText = '';\n        var operation1 = this.getInsertOperation('UpdateFormField');\n        operation1.text = CONTROL_CHARACTERS.Marker_Start;\n        operation1.markerData = {\n          'type': 'Field',\n          'checkBoxValue': this.fieldBegin.formFieldData.checked\n        };\n        operation1.offset = this.getElementAbsolutePosition(this.fieldBegin);\n        operations.push(operation1);\n        break;\n      case 'DeleteRow':\n      case 'DeleteCells':\n      case 'DeleteColumn':\n      case 'DeleteTable':\n      case 'ClearCells':\n      case 'MergeCells':\n        if (this.editorHistory.isUndoing) {\n          if (action == 'DeleteTable') {\n            operations.push(this.getUndoRedoOperation(action));\n          } else {\n            operations = this.cellOperation.slice();\n            this.insertIndex = this.startIndex;\n            operations.push(this.getUndoRedoOperation(action, true));\n            this.cellOperation = [];\n          }\n        } else {\n          if (this.removedNodes.length > 0) {\n            if (this.cellOperation.length > 0) {\n              // For delete column and delete cell.\n              for (var i = 0; i < this.cellOperation.length; i++) {\n                operations.push(this.cellOperation[i]);\n              }\n              if (action === 'MergeCells') {\n                operations.push(this.getPasteMergeOperation());\n                operations.push(this.getFormatOperation());\n                this.type = undefined;\n              } else {\n                operations.reverse();\n              }\n            } else {\n              if (this.owner.enableTrackChanges) {\n                operations.push(this.getFormatOperation(undefined, action));\n              } else {\n                operations.push(this.getDeleteOperation(action));\n              }\n            }\n            this.cellOperation = [];\n          }\n        }\n        break;\n      case 'RemoveRowTrack':\n        if (this.editorHistory.isUndoing) {\n          if (this.isRemovedNodes && this.editorHistory.isUndoing) {\n            operations = this.cellOperation.slice();\n            var operationCollection = this.getDeleteContent(action);\n            if (isNullOrUndefined(operationCollection[0].markerData)) {\n              operationCollection[0].markerData = {\n                isSkipTracking: true\n              };\n            }\n            operations.push.apply(operations, operationCollection);\n          }\n        } else {\n          if (this.removedNodes.length > 0) {\n            if (this.cellOperation.length > 0) {\n              operations.push.apply(operations, this.cellOperation);\n            } else {\n              operations = this.revisionOperation.slice();\n              this.getTrackchangesOperation(operations);\n            }\n          }\n        }\n        break;\n      case 'RowResizing':\n      case 'CellResizing':\n        operations = this.getResizingOperation(action);\n        break;\n      case 'ImageResizing':\n        operations.push(this.getFormatOperation());\n        break;\n      case 'Bold':\n      case 'Italic':\n      case 'Underline':\n      case 'FontSize':\n      case 'Strikethrough':\n      case 'BaselineAlignment':\n      case 'HighlightColor':\n      case 'FontColor':\n      case 'FontFamily':\n      case 'Uppercase':\n      case 'Lowercase':\n      case 'CapitalizeEachWord':\n      case 'SentenceCase':\n      case 'ToggleCase':\n      case 'CharacterFormat':\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n          if (action === 'Uppercase') {\n            operations.push(this.getDeleteOperation(action));\n            if (this.removedNodes) {\n              var operationCollection = this.getDeleteContent(action);\n              operations = operations.concat(operationCollection);\n            }\n          } else {\n            operations = this.modifiedFormatOperation;\n            this.modifiedFormatOperation = [];\n          }\n        } else {\n          var charFormatOperation = this.buildFormatOperation(action, true);\n          operations = charFormatOperation.slice();\n        }\n        break;\n      case 'AfterSpacing':\n      case 'BeforeSpacing':\n      case 'RightIndent':\n      case 'LeftIndent':\n      case 'FirstLineIndent':\n      case 'LineSpacing':\n      case 'LineSpacingType':\n      case 'TextAlignment':\n      case 'Borders':\n      case 'TopBorder':\n      case 'BottomBorder':\n      case 'LeftBorder':\n      case 'RightBorder':\n      case 'HorizontalBorder':\n      case 'VerticalBorder':\n      case 'ListFormat':\n      case 'ParagraphFormat':\n      case 'StyleName':\n      case 'ClearParagraphFormat':\n      case 'SpaceBeforeAuto':\n      case 'SpaceAfterAuto':\n      case 'ParagraphBidi':\n      case 'ContextualSpacing':\n      case 'ContinueNumbering':\n      case 'List':\n        if (this.modifiedFormatOperation.length > 0 && !isInvertOperation) {\n          operations = this.modifiedFormatOperation;\n          this.modifiedFormatOperation = [];\n        } else {\n          if (isInvertOperation && this.editorHistory.isUndoing && (action === 'ListFormat' || action === 'ClearParagraphFormat')) {\n            action = 'ParagraphFormat';\n          }\n          if (action === 'ContinueNumbering') {\n            this.type = action.toString();\n          }\n          if (action === 'Borders' && this.removedNodes[this.removedNodes.length - 1] instanceof TableWidget) {\n            this.insertedText = CONTROL_CHARACTERS.Cell;\n            this.type = 'CellFormat';\n            this.createCellFormat(action);\n            operations = this.getSelectedCellOperation(action, undefined, true, false, true);\n            break;\n          }\n          var paraFormatOperation = this.buildFormatOperation(action, false);\n          operations = paraFormatOperation.slice();\n        }\n        break;\n      case 'TableAlignment':\n      case 'DefaultCellSpacing':\n      case 'TableLeftIndent':\n      case 'DefaultCellLeftMargin':\n      case 'DefaultCellRightMargin':\n      case 'DefaultCellTopMargin':\n      case 'DefaultCellBottomMargin':\n      case 'TablePreferredWidth':\n      case 'TablePreferredWidthType':\n      case 'TableBidi':\n        this.createTableFormat(action);\n        this.type = 'TableFormat';\n        operations.push(this.getFormatOperation());\n        this.format = undefined;\n        break;\n      case 'RestartNumbering':\n        this.type = action.toString();\n        var numberingOperation = this.getFormatOperation(undefined, action);\n        this.createListFormat(action, numberingOperation);\n        operations.push(numberingOperation);\n        break;\n      case 'Shading':\n        this.createCellFormat(action);\n        this.type = 'CellFormat';\n        operations = this.getSelectedCellOperation(action, undefined, undefined, true, true);\n        break;\n      case 'TableAutoFitToContents':\n      case 'TableAutoFitToWindow':\n      case 'TableFixedColumnWidth':\n        if (this.editorHistory.isUndoing) {\n          operations = this.getDeleteContent('Insert');\n        } else {\n          this.createTableFormat(action);\n          this.type = 'TableFormat';\n          this.insertedText = action.toString();\n          operations.push(this.getFormatOperation());\n          this.format = undefined;\n        }\n        break;\n      case 'SectionFormat':\n      case 'HeaderDistance':\n      case 'FooterDistance':\n      case 'DifferentFirstPage':\n      case 'DifferentOddAndEvenPages':\n      case 'PageWidth':\n      case 'PageHeight':\n      case 'LeftMargin':\n      case 'TopMargin':\n      case 'RightMargin':\n      case 'BottomMargin':\n      case 'RestartPageNumbering':\n      case 'PageStartingNumber':\n      case 'EndnoteNumberFormat':\n      case 'FootNoteNumberFormat':\n      case 'RestartIndexForEndnotes':\n      case 'RestartIndexForFootnotes':\n      case 'InitialFootNoteNumber':\n      case 'InitialEndNoteNumber':\n      case 'LineBetweenColumns':\n      case 'EqualWidth':\n      case 'BreakCode':\n      case 'LinkToPrevious':\n        this.createSectionFormat(action);\n        this.type = 'SectionFormat';\n        operations.push(this.getFormatOperation(undefined));\n        if (action === 'LinkToPrevious') {\n          var operation = operations[operations.length - 1];\n          operation.offset = this.insertIndex;\n        }\n        break;\n      case 'RowHeight':\n      case 'RowHeightType':\n      case 'AllowBreakAcrossPages':\n      case 'RowHeader':\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && this.modifiedProperties.length > 1) {\n          operations = this.modifiedFormatOperation;\n          this.modifiedFormatOperation = [];\n        } else {\n          this.createRowFormat(action);\n          this.type = 'RowFormat';\n          operations.push(this.getFormatOperation(undefined));\n          this.format = undefined;\n        }\n        break;\n      case 'CellContentVerticalAlignment':\n      case 'CellLeftMargin':\n      case 'CellRightMargin':\n      case 'CellBottomMargin':\n      case 'CellTopMargin':\n      case 'CellPreferredWidth':\n      case 'CellPreferredWidthType':\n        this.createCellFormat(action);\n        this.type = 'CellFormat';\n        operations = this.getSelectedCellOperation(action, false, false, false, true).slice();\n        this.format = undefined;\n        break;\n    }\n    this.cellOperation = [];\n    this.revisionOperation = [];\n    this.isRemovedNodes = false;\n    return operations;\n  };\n  BaseHistoryInfo.prototype.getTrackchangesOperation = function (operations) {\n    var markerInfo = this.markerData;\n    for (var i = markerInfo.length - 1; i >= 0; i--) {\n      if (!isNullOrUndefined(markerInfo[i].revisionId)) {\n        var revision = this.getRevision(markerInfo[i].revisionId);\n        if (revision && revision.range.length > 0) {\n          if (revision.range[0] instanceof WRowFormat) {\n            operations.push(this.buildRowOperationForTrackChanges(revision.range[0].ownerBase, 'RemoveRowTrack'));\n          } else {\n            var startPosition = new TextPosition(this.owner);\n            var endPosition = new TextPosition(this.owner);\n            this.owner.selection.selectRevision(revision, startPosition, endPosition);\n            this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(startPosition);\n            this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(endPosition);\n            operations.push(this.getFormatOperation(undefined));\n          }\n        } else {\n          this.owner.editorModule.removeMarkerInfoRevision(markerInfo[i].revisionId, markerInfo);\n        }\n      }\n    }\n  };\n  BaseHistoryInfo.prototype.getRevision = function (revisionId) {\n    for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n      var revision = this.owner.revisions.changes[i].revisionID;\n      if (revision === revisionId) {\n        return this.owner.revisions.changes[i];\n      }\n    }\n    return undefined;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.getElementAbsolutePosition = function (element) {\n    if (element) {\n      var position = this.owner.selectionModule.getElementPosition(element);\n      var startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position.startPosition);\n      return startIndex;\n    }\n    return undefined;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.getFieldOperation = function () {\n    var operations = [];\n    var element = this.fieldBegin;\n    var isFieldEnd = false;\n    var elementOffset = this.insertIndex;\n    if (!isNullOrUndefined(element)) {\n      do {\n        var insertedText = void 0;\n        var Data = void 0;\n        var elementLength = void 0;\n        var characterFormat = void 0;\n        var type = void 0;\n        if (!element.skipformFieldLength) {\n          if (element instanceof FieldElementBox) {\n            if (element.fieldType === 0 && this.getRemovedText() !== '') {\n              operations.push(this.getDeleteOperation('Delete'));\n              var operation_1 = operations[operations.length - 1];\n              operation_1.offset = elementOffset;\n              if (!isNullOrUndefined(operation_1.markerData) && this.owner.enableTrackChanges) {\n                operation_1.markerData.isSkipTracking = true;\n              }\n            }\n            insertedText = element.fieldType === 0 ? CONTROL_CHARACTERS.Marker_Start : element.fieldType === 1 ? CONTROL_CHARACTERS.Marker_End : element.fieldType === 2 ? CONTROL_CHARACTERS.Field_Separator : '';\n            if (element.fieldType === 0 && element.formFieldData) {\n              type = this.formFieldType;\n              if (element.revisions.length > 0) {\n                Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n              }\n              if (isNullOrUndefined(Data)) {\n                Data = {};\n              }\n              Data.type = 'Field';\n              Data.formFieldData = JSON.stringify(element.formFieldData);\n            } else {\n              if (element.revisions.length > 0) {\n                Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n              }\n              if (isNullOrUndefined(Data)) {\n                Data = {};\n              }\n              Data.type = 'Field';\n            }\n            elementLength = element.length;\n          } else if (this.fieldBegin.formFieldData && element instanceof BookmarkElementBox) {\n            insertedText = element.bookmarkType === 0 ? CONTROL_CHARACTERS.Marker_Start : CONTROL_CHARACTERS.Marker_End;\n            Data = {\n              'bookmarkName': element.name,\n              'type': 'Bookmark'\n            };\n            elementLength = element.length;\n          } else if (element instanceof TextElementBox) {\n            insertedText = element.text;\n            elementLength = element.length;\n            if (element.revisions.length > 0) {\n              Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n            }\n          }\n          if (!(element instanceof BookmarkElementBox)) {\n            var characterData = this.owner.sfdtExportModule.writeCharacterFormat(element.characterFormat, 0);\n            characterFormat = JSON.stringify(characterData);\n          }\n          var operation = {\n            action: 'Insert',\n            offset: elementOffset,\n            type: type,\n            text: insertedText,\n            length: elementLength,\n            markerData: Data,\n            format: characterFormat\n          };\n          operations.push(operation);\n          elementOffset += element.length;\n          Data = undefined;\n          type = undefined;\n          characterFormat = undefined;\n          if (element instanceof FieldElementBox && element.fieldType === 1) {\n            isFieldEnd = true;\n            if (this.fieldBegin.formFieldData && element.nextNode instanceof BookmarkElementBox) {\n              var elementBox = element.nextNode;\n              insertedText = elementBox.bookmarkType === 0 ? CONTROL_CHARACTERS.Marker_Start : CONTROL_CHARACTERS.Marker_End;\n              if (element.revisions.length > 0) {\n                Data = this.owner.editorModule.getRevisionMarkerData(Data, elementBox.revisions[0]);\n              }\n              if (isNullOrUndefined(Data)) {\n                Data = {};\n              }\n              Data.bookmarkName = elementBox.name;\n              Data.type = 'Bookmark';\n              elementLength = elementBox.length;\n              var operation_2 = {\n                action: 'Insert',\n                offset: elementOffset,\n                text: insertedText,\n                length: elementLength,\n                markerData: Data\n              };\n              operations.push(operation_2);\n            }\n          }\n        }\n        element = element.nextNode;\n      } while (!isFieldEnd && !isNullOrUndefined(element));\n    }\n    return operations;\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   * This method will build the operation for undo/Redo deleted content as paste action.\n   */\n  BaseHistoryInfo.prototype.getDeleteContent = function (action) {\n    var operations = [];\n    var startPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n    var endPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n    var paraEnd = endPosition.clone();\n    paraEnd.offset = endPosition.offset - 1;\n    var isParaSelected = startPosition.isAtParagraphStart && paraEnd.isAtParagraphEnd;\n    if (isParaSelected && !startPosition.currentWidget.paragraph.isInsideTable) {\n      operations.push(this.getInsertOperation('Enter', false, true));\n      operations.push(this.getUndoRedoOperation(action));\n    } else if (startPosition.paragraph == endPosition.paragraph) {\n      if (startPosition.isAtSamePosition(endPosition)) {\n        if (this.owner.selectionModule.isEmpty && action === 'BackSpace') {\n          this.insertIndex -= 1;\n        }\n        operations.push(this.getUndoRedoOperation(action, false, true));\n      } else {\n        operations.push(this.getUndoRedoOperation(action));\n      }\n    } else {\n      if (startPosition.currentWidget.paragraph.isInsideTable) {\n        operations = this.cellOperation.slice();\n        operations.push(this.getUndoRedoOperation(action, true));\n      } else {\n        operations.push(this.getUndoRedoOperation(action));\n        this.startIndex = this.endIndex + 1;\n        if (!(startPosition.isAtParagraphStart || paraEnd.isAtParagraphEnd)) {\n          var operation = this.getDeleteOperation('Delete');\n          if (this.owner.enableTrackChanges) {\n            operation.markerData = {\n              isSkipTracking: true\n            };\n          }\n          operations.push(operation);\n        }\n      }\n    }\n    return operations;\n  };\n  BaseHistoryInfo.prototype.getEditHyperlinkOperation = function () {\n    var operations = [];\n    var element = this.fieldBegin;\n    if (element) {\n      var startIndex = this.getElementAbsolutePosition(element);\n      operations.push(this.getDeleteOperation('Delete'));\n      var operation = operations[operations.length - 1];\n      operation.offset = startIndex;\n      var fieldCode = this.getRemovedFieldCode();\n      operation.length = fieldCode.length;\n      operation.text = fieldCode;\n      operations.push(this.getInsertOperation('InsertHyperlink'));\n      operation = operations[operations.length - 1];\n      operation.offset = startIndex;\n      fieldCode = this.owner.selectionModule.getFieldCode(element, true);\n      operation.text = fieldCode;\n      operation.length = fieldCode.length;\n    }\n    return operations;\n  };\n  BaseHistoryInfo.prototype.getPasteContentLength = function () {\n    var length = 0;\n    for (var i = 0; i < this.insertedNodes.length; i++) {\n      var block = this.insertedNodes[i];\n      if (block instanceof TextElementBox) {\n        length += block.length;\n      } else {\n        length += this.owner.selectionModule.getBlockLength(undefined, block, 0, {\n          done: false\n        }, true, undefined, undefined);\n      }\n    }\n    this.insertedNodes = [];\n    return length;\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.getUpdateOperation = function () {\n    var operation = {\n      action: 'Update'\n    };\n    return operation;\n  };\n  BaseHistoryInfo.prototype.getResizingOperation = function (action) {\n    var operations = [];\n    var tableResize = this.owner.editorModule.tableResize;\n    var table = tableResize.currentResizingTable;\n    if (!isNullOrUndefined(table.childWidgets)) {\n      table = table.combineWidget(this.owner.viewer);\n      var resizerPosition = tableResize.resizerPosition;\n      var paragraphInfo = {\n        'paragraph': null,\n        'offset': 0\n      };\n      if (action == 'RowResizing') {\n        var row = table.childWidgets[resizerPosition];\n        if (isNullOrUndefined(row)) {\n          row = this.modifiedProperties[0].rowFormat.ownerBase;\n        }\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n          position: 0,\n          done: false\n        }, row).position;\n        this.endIndex = this.startIndex + this.getRowLength(row);\n        var rowFormat = {};\n        if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n          this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n        }\n        this.format = JSON.stringify(rowFormat);\n        this.insertedText = CONTROL_CHARACTERS.Row;\n        operations.push(this.getFormatOperation());\n      } else {\n        var rightColumnIndex = resizerPosition;\n        var leftColumnIndex = resizerPosition - 1;\n        this.insertedText = CONTROL_CHARACTERS.Cell;\n        var isResize = false;\n        if (!this.owner.selectionModule.isEmpty) {\n          var cellwidget = tableResize.getTableCellWidget(tableResize.startingPoint);\n          if (cellwidget && (this.owner.selectionModule.selectedWidgets.containsKey(cellwidget) || cellwidget.previousWidget && this.owner.selectionModule.selectedWidgets.containsKey(cellwidget.previousWidget))) {\n            isResize = true;\n            var selectedCells = this.owner.selectionModule.getSelectedCells();\n            var startCell = selectedCells[0];\n            var endCell = selectedCells[selectedCells.length - 1];\n            var rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n            var count = table.childWidgets.indexOf(endCell.ownerRow);\n            var row = table.childWidgets[rowStartIndex];\n            while (row && row.index <= count) {\n              var cell = row.firstChild;\n              while (cell) {\n                if (cell.index == rightColumnIndex || cell.index == leftColumnIndex) {\n                  var cellFormat = {};\n                  if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                    cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                  }\n                  this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n                    position: 0,\n                    done: false\n                  }, cell).position;\n                  // Plus one for adding the cell index.\n                  this.endIndex = this.startIndex + this.owner.selectionModule.calculateCellLength(cell) + 1;\n                  this.type = \"CellFormat\";\n                  this.format = JSON.stringify(cellFormat);\n                  operations.push(this.getFormatOperation());\n                }\n                cell = cell.nextWidget;\n              }\n              var rowFormat = {};\n              if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n              }\n              this.format = JSON.stringify(rowFormat);\n              this.type = \"RowFormat\";\n              this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n                position: 0,\n                done: false\n              }, row).position;\n              this.endIndex = this.startIndex + this.getRowLength(row);\n              operations.push(this.getFormatOperation());\n              row = row.getSplitWidgets().pop().nextRenderedWidget;\n            }\n          }\n        } else {\n          isResize = true;\n          var row = table.firstChild;\n          while (row) {\n            var cell = row.firstChild;\n            while (cell) {\n              if (cell.index == rightColumnIndex || cell.index == leftColumnIndex) {\n                var cellFormat = {};\n                if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                  cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                }\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n                  position: 0,\n                  done: false\n                }, cell).position;\n                // Plus one for adding the cell index.\n                this.endIndex = this.startIndex + this.owner.selectionModule.calculateCellLength(cell) + 1;\n                this.type = \"CellFormat\";\n                this.format = JSON.stringify(cellFormat);\n                operations.push(this.getFormatOperation());\n              }\n              cell = cell.nextWidget;\n            }\n            var rowFormat = {};\n            if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n              this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n            }\n            this.format = JSON.stringify(rowFormat);\n            this.type = \"RowFormat\";\n            this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n              position: 0,\n              done: false\n            }, row).position;\n            this.endIndex = this.startIndex + this.getRowLength(row);\n            operations.push(this.getFormatOperation());\n            row = row.getSplitWidgets().pop().nextRenderedWidget;\n          }\n        }\n        if (isResize) {\n          var tableFormat = {};\n          tableFormat = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeTableFormat(table.tableFormat, 0) : {};\n          this.format = JSON.stringify(tableFormat);\n          this.type = \"TableFormat\";\n          this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n            position: 0,\n            done: false\n          }, table).position;\n          // this.startIndex will get the offset of table. So in get block length it will start from the table. So doing minus one.\n          this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, table, 0, {\n            done: false\n          }, true, undefined, undefined) - 1;\n          operations.push(this.getFormatOperation());\n        }\n      }\n      this.owner.documentHelper.layout.reLayoutTable(table);\n    }\n    this.format = undefined;\n    return operations;\n  };\n  BaseHistoryInfo.prototype.getRowLength = function (row) {\n    var length = 0;\n    for (var i = 0; i < row.childWidgets.length; i++) {\n      // for collab editing for row amd cell we are adding plus one index to the offset. So it will calculate the widgets inside the cell one. So adding plus one offset.\n      length += this.owner.selectionModule.calculateCellLength(row.childWidgets[i]) + 1;\n    }\n    return length;\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.getDeleteOperation = function (action, setEndIndex, text) {\n    if (this.startIndex > this.endIndex) {\n      var temp = this.startIndex;\n      this.startIndex = this.endIndex;\n      this.endIndex = temp;\n    }\n    // if (action === 'Delete' && this.endIndex === this.startIndex) {\n    //     this.startIndex++;\n    //     this.endIndex++;\n    // }\n    if (action === 'Delete' && this.endIndex < this.startIndex) {\n      var start = this.startIndex;\n      this.startIndex = this.endIndex;\n      this.endIndex = start;\n    }\n    if (this.endIndex === this.startIndex && action !== 'DeleteBookmark' && action !== 'RemoveEditRange' && this.action !== 'InsertHyperlink') {\n      if (action === 'BackSpace' || action === 'Insert' || action === 'Enter') {\n        this.startIndex--;\n      } else {\n        this.endIndex++;\n      }\n    }\n    if (action === 'DeleteHeaderFooter') {\n      this.startIndex = this.headerFooterStart;\n      this.endIndex = this.headerFooterEnd;\n    }\n    var selectionLength = !isNullOrUndefined(text) ? text.length : this.endIndex - this.startIndex;\n    var removedText;\n    if (action === 'DeleteBookmark' || action === 'RemoveEditRange') {\n      removedText = this.insertedText;\n      selectionLength = 1;\n    } else if (action === 'DeleteHeaderFooter') {\n      removedText === '';\n    } else if (action === 'DeleteTable' || action === 'DeleteRow' || action === 'DeleteColumn' || action === 'MergeCells' || action === 'RemoveRowTrack') {\n      removedText = this.insertedText;\n      if (action !== 'DeleteTable' && action !== 'DeleteRow') {\n        selectionLength = this.tableRelatedLength;\n      }\n    } else {\n      removedText = !isNullOrUndefined(text) ? text : this.getRemovedText();\n    }\n    if (action === 'Cut' && removedText[removedText.length - 1] === ' ' && selectionLength < removedText.length) {\n      selectionLength = removedText.length;\n    }\n    var operation = {\n      action: 'Delete',\n      offset: setEndIndex ? this.endIndex : this.startIndex,\n      text: removedText,\n      length: action === 'Paste' || selectionLength === 0 ? removedText.length : selectionLength,\n      skipOperation: action === 'DeleteHeaderFooter' ? true : undefined,\n      markerData: this.markerData[0]\n    };\n    if (this.removedNodes[0] instanceof FootnoteElementBox) {\n      if (this.editorHistory.isUndoing && operation.length >= 3) {\n        operation.length += 1;\n      } else {\n        var element = this.removedNodes[0];\n        var lastPara = element.bodyWidget.lastChild;\n        var positionInfo = {\n          position: 0,\n          done: false\n        };\n        var paragraphInfo = {\n          paragraph: lastPara,\n          offset: this.owner.selectionModule.getParagraphLength(lastPara) + 1\n        };\n        this.owner.selectionModule.getPositionInfoForBodyContent(paragraphInfo, positionInfo, element.bodyWidget.firstChild);\n        operation.length += positionInfo.position;\n      }\n    }\n    return operation;\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.getInsertOperation = function (action, setEndIndex, skipMarkerData) {\n    var insertedText = action === 'Enter' ? '\\n' : this.insertedText;\n    var length;\n    if (action === 'InsertTable' || action === 'InsertTableBelow' || action === 'InsertRowAbove' || action === 'InsertRowBelow' || action === 'InsertColumnLeft' || action === 'InsertColumnRight' || action === 'MergeCells' || action === 'RemoveRowTrack') {\n      length = this.tableRelatedLength;\n      if (this.action === 'InsertTable' || this.action === 'InsertTableBelow') {\n        this.insertIndex = this.startIndex;\n      }\n    } else {\n      if (!isNullOrUndefined(insertedText)) {\n        length = insertedText.length;\n      }\n    }\n    var operation = {\n      action: 'Insert',\n      offset: setEndIndex ? this.endIndex : this.insertIndex,\n      text: insertedText,\n      type: this.type,\n      length: length,\n      skipOperation: false,\n      imageData: this.insertedData,\n      format: this.format\n    };\n    if (!isNullOrUndefined(this.markerData) && !skipMarkerData) {\n      operation.markerData = this.markerData.pop();\n    }\n    if (this.insertedElement instanceof FootnoteElementBox) {\n      var lastPara = this.insertedElement.bodyWidget.lastChild;\n      var positionInfo = {\n        position: 0,\n        done: false\n      };\n      var paragraphInfo = {\n        paragraph: lastPara,\n        offset: this.owner.selectionModule.getParagraphLength(lastPara) + 1\n      };\n      this.owner.selectionModule.getPositionInfoForBodyContent(paragraphInfo, positionInfo, this.insertedElement.bodyWidget.firstChild);\n      operation.length += positionInfo.position;\n    }\n    return operation;\n  };\n  BaseHistoryInfo.prototype.getUndoRedoOperation = function (action, isTableInsert, issamePosition) {\n    var table;\n    var lastPara;\n    var startLine;\n    var lastLine;\n    var endoffset;\n    var startOffset;\n    var startPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n    var endPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n    var length = 0;\n    if (isTableInsert) {\n      if (action === 'BackSpace' || action === 'Delete' || action === 'Insert') {\n        table = startPosition.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n        var paragraphInfo = {\n          'paragraph': null,\n          'offset': 0\n        };\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n          position: 0,\n          done: false\n        }, table).position;\n        if (endPosition.currentWidget.paragraph.isInsideTable) {\n          lastPara = this.documentHelper.getLastParagraphBlock(endPosition.currentWidget.paragraph.associatedCell.ownerTable);\n          lastLine = lastPara.lastChild;\n          endoffset = lastPara.lastChild.getEndOffset();\n        } else {\n          lastLine = endPosition.currentWidget;\n          endoffset = endPosition.offset;\n        }\n      } else {\n        table = this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n        lastPara = this.documentHelper.getLastParagraphBlock(table);\n        lastLine = lastPara.lastChild;\n        endoffset = lastPara.lastChild.getEndOffset();\n      }\n      startLine = this.documentHelper.getFirstParagraphBlock(table).firstChild;\n      startOffset = 0;\n      length = this.owner.selectionModule.getBlockLength(undefined, table, 0, {\n        done: false\n      }, true, undefined, undefined);\n    } else {\n      startLine = startPosition.currentWidget;\n      lastLine = endPosition.currentWidget;\n      endoffset = issamePosition ? action == 'BackSpace' ? endPosition.offset : endPosition.offset + 1 : endPosition.offset;\n      startOffset = issamePosition ? action === 'BackSpace' ? startPosition.offset - 1 : startPosition.offset : startPosition.offset;\n      var startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.collabStart);\n      var endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.collabEnd);\n      length = endIndex - startIndex;\n    }\n    this.pasteContent = this.owner.sfdtExportModule.write(this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0, startLine, startOffset, lastLine, endoffset, false, true);\n    return this.getPasteOpertion(this.pasteContent, length);\n  };\n  BaseHistoryInfo.prototype.getPasteOpertion = function (pasteContent, length) {\n    var pasteOperation = {\n      action: 'Insert',\n      offset: this.startIndex,\n      length: length > 0 ? length : 1,\n      pasteContent: JSON.stringify(pasteContent),\n      type: 'Paste'\n    };\n    if (this.owner.enableTrackChanges) {\n      pasteOperation.markerData = {\n        isSkipTracking: true\n      };\n    }\n    return pasteOperation;\n  };\n  // Builds the Table and Row operation.\n  BaseHistoryInfo.prototype.buildTableRowCellOperation = function (action) {\n    var operations = [];\n    if (this.insertedNodes.length > 0) {\n      if (this.insertedNodes[0] instanceof TableRowWidget) {\n        var row = this.insertedNodes[0];\n        var paragraphInfo = {\n          'paragraph': null,\n          'offset': 0\n        };\n        this.insertIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n          position: 0,\n          done: false\n        }, this.insertedNodes[0]).position;\n        var length_3 = this.insertedNodes.length;\n        if (row.ownerTable.childWidgets.length === row.indexInOwner + length_3) {\n          this.insertIndex -= 1;\n        }\n      }\n      if (this.insertedNodes.length > 1 && action === 'InsertTable') {\n        var enterOperation = this.getInsertOperation('Enter', false, true);\n        if (isNullOrUndefined(enterOperation.markerData)) {\n          enterOperation.markerData = {};\n        }\n        enterOperation.markerData.isSkipTracking = true;\n        operations.push(enterOperation);\n      }\n      for (var i = 0; i < this.insertedNodes.length; i++) {\n        if (this.insertedNodes[i] instanceof TableWidget) {\n          var tableWidget = this.insertedNodes[i].combineWidget(this.owner.viewer);\n          this.tableRelatedLength = action === 'InsertTableBelow' ? 0 : 1;\n          this.insertedText = CONTROL_CHARACTERS.Table;\n          var tableFormat = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeTableFormat(tableWidget.tableFormat, 0) : {};\n          this.format = JSON.stringify(tableFormat);\n          operations.push(this.getInsertOperation(action, false, true));\n          for (var j = 0; j < tableWidget.childWidgets.length; j++) {\n            var row = tableWidget.childWidgets[j];\n            operations.push(this.buildRowOperation(row, action));\n            for (var k = 0; k < row.childWidgets.length; k++) {\n              var cell = row.childWidgets[k];\n              var cellOperations = this.buildCellOperation(cell, action, true);\n              for (var l = 0; l < cellOperations.length; l++) {\n                operations.push(cellOperations[l]);\n              }\n            }\n          }\n        } else if (this.insertedNodes[i] instanceof TableRowWidget) {\n          var row = this.insertedNodes[i];\n          operations.push(this.buildRowOperation(row, action));\n          for (var j = 0; j < row.childWidgets.length; j++) {\n            var cell = row.childWidgets[j];\n            var cellOperations = this.buildCellOperation(cell, action, true);\n            for (var l = 0; l < cellOperations.length; l++) {\n              operations.push(cellOperations[l]);\n            }\n          }\n        } else if (this.insertedNodes[i] instanceof TableCellWidget) {\n          var cell = this.insertedNodes[i];\n          var table = cell.ownerTable.combineWidget(this.owner.viewer);\n          var num = 0;\n          for (var j = 0; j < table.childWidgets.length; j++) {\n            i = this.insertedNodes.length;\n            var row = table.childWidgets[j];\n            for (var k = 0; k < row.childWidgets.length; k++) {\n              var cell_1 = row.childWidgets[k];\n              var paragraphInfo = {\n                'paragraph': null,\n                'offset': 0\n              };\n              if (this.insertedNodes.indexOf(cell_1) !== -1) {\n                var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n                  position: 0,\n                  done: false\n                }, cell_1).position;\n                this.insertIndex = offset - num;\n                if (cell_1.ownerTable.childWidgets.length === cell_1.ownerRow.indexInOwner + 1) {\n                  if (this.insertedNodes.indexOf(row.childWidgets[row.childWidgets.length - 1]) !== -1) {\n                    this.insertIndex -= 1;\n                  }\n                }\n                var cellOperations = this.buildCellOperation(cell_1, action, true);\n                for (var l = 0; l < cellOperations.length; l++) {\n                  operations.push(cellOperations[l]);\n                }\n                num += 2;\n              } else {\n                var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n                  position: 0,\n                  done: false\n                }, cell_1).position;\n                this.insertIndex = offset - num;\n                var cellOperations = this.buildCellOperation(cell_1, action, false);\n                for (var l = 0; l < cellOperations.length; l++) {\n                  operations.push(cellOperations[l]);\n                }\n              }\n            }\n          }\n        }\n      }\n      this.insertedNodes = [];\n    }\n    return operations;\n  };\n  BaseHistoryInfo.prototype.assignRevisionData = function (type, author, date, revisionId) {\n    var markerData = {\n      revisionType: type,\n      author: author,\n      date: date,\n      revisionId: revisionId\n    };\n    return markerData;\n  };\n  BaseHistoryInfo.prototype.createAcceptRejectOperation = function (action) {\n    var start = this.owner.selectionModule.start;\n    if (!start.paragraph.isInsideTable) {\n      return;\n    }\n    var row = start.paragraph.associatedCell.ownerRow;\n    var length = 0;\n    this.insertedText = CONTROL_CHARACTERS.Row;\n    if (row.rowFormat.revisions.length > 0) {\n      var revision = row.rowFormat.revisions[0];\n      var isAcceptOrReject = void 0;\n      if (action === 'Accept Change') {\n        isAcceptOrReject = 'Accept';\n      } else if (action === 'Reject Change') {\n        isAcceptOrReject = 'Reject';\n      }\n      this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, isAcceptOrReject));\n    }\n    var paragraphInfo = {\n      'paragraph': null,\n      'offset': 0\n    };\n    var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n      position: 0,\n      done: false\n    }, row).position;\n    if (row.rowFormat.revisions.length > 0) {\n      if (row.rowFormat.revisions[0].revisionType === 'Insertion') {\n        if (action === 'Accept Change') {\n          this.startIndex = offset;\n          this.tableRelatedLength = 1;\n          this.cellOperation.push(this.getFormatOperation(undefined, 'RemoveRowTrack'));\n        } else if (action === 'Reject Change') {\n          this.startIndex = offset;\n          for (var j = 0; j < row.childWidgets.length; j++) {\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n          }\n          this.tableRelatedLength = length;\n          this.cellOperation.push(this.getDeleteOperation('RemoveRowTrack'));\n        }\n      } else if (row.rowFormat.revisions[0].revisionType === 'Deletion') {\n        if (action === 'Accept Change') {\n          this.startIndex = offset;\n          // this.tableRelatedLength = 0;\n          for (var j = 0; j < row.childWidgets.length; j++) {\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n          }\n          this.tableRelatedLength = length;\n          this.cellOperation.push(this.getDeleteOperation('RemoveRowTrack'));\n        } else if (action === 'Reject Change') {\n          this.startIndex = offset;\n          for (var j = 0; j < row.childWidgets.length; j++) {\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n          }\n          this.tableRelatedLength = length;\n          this.cellOperation.push(this.getFormatOperation(undefined, 'RemoveRowTrack'));\n        }\n      }\n      this.markerData = [];\n    }\n  };\n  BaseHistoryInfo.prototype.buildRowOperation = function (row, action) {\n    this.insertedText = CONTROL_CHARACTERS.Row;\n    var rowFormat = {};\n    if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n      this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n    }\n    this.format = JSON.stringify(rowFormat);\n    if (action === 'InsertTable' && row.rowFormat.revisions.length > 0) {\n      var revision = row.rowFormat.revisions[row.rowFormat.revisions.length - 1];\n      var lastRevision = this.markerData[this.markerData.length - 1];\n      if (!(!isNullOrUndefined(lastRevision) && lastRevision.revisionId === revision.revisionID)) {\n        this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision));\n      }\n    }\n    this.tableRelatedLength = 1;\n    var operation = this.getInsertOperation(action);\n    this.format = undefined;\n    return operation;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.buildRowOperationForTrackChanges = function (row, action) {\n    var paragraphInfo = {\n      'paragraph': null,\n      'offset': 0\n    };\n    var length = 0;\n    var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n      position: 0,\n      done: false\n    }, row).position;\n    this.startIndex = offset;\n    for (var j = 0; j < row.childWidgets.length; j++) {\n      length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n    }\n    this.tableRelatedLength = length;\n    this.insertedText = CONTROL_CHARACTERS.Row;\n    var operation = this.getFormatOperation(undefined, action);\n    this.insertedText = '';\n    return operation;\n  };\n  BaseHistoryInfo.prototype.buildCellOperation = function (cell, action, isCellInserted) {\n    var operations = [];\n    this.tableRelatedLength = isCellInserted ? 1 : 0;\n    this.insertedText = CONTROL_CHARACTERS.Cell;\n    this.type = 'CellFormat';\n    var cellFormat = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0) : {};\n    this.format = JSON.stringify(cellFormat);\n    operations.push(this.getInsertOperation(action, false, true));\n    if (!isCellInserted) {\n      return operations;\n    }\n    this.tableRelatedLength = isCellInserted ? 1 : 0;\n    this.type = 'ParagraphFormat';\n    var paragraphFormat = this.owner.sfdtExportModule.writeParagraphFormat(cell.childWidgets[0].paragraphFormat, 0, true);\n    this.format = JSON.stringify(paragraphFormat);\n    operations.push(this.getInsertOperation(action, false, true));\n    this.tableRelatedLength = 0;\n    this.type = 'CharacterFormat';\n    var characterData = this.owner.sfdtExportModule.writeCharacterFormat(cell.childWidgets[0].characterFormat, 0, true);\n    this.format = JSON.stringify(characterData);\n    operations.push(this.getInsertOperation(action, false, true));\n    this.format = undefined;\n    this.type = undefined;\n    return operations;\n  };\n  BaseHistoryInfo.prototype.deleteColumnOperation = function (action) {\n    var startCell = this.owner.editorModule.getOwnerCell(this.owner.selectionModule.isForward);\n    var endCell = this.owner.editorModule.getOwnerCell(!this.owner.selectionModule.isForward);\n    var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n    var deleteCells = [];\n    var rowStartIndex = 0;\n    var count = 0;\n    if (action === 'DeleteColumn') {\n      deleteCells = table.getColumnCellsForSelection(startCell, endCell);\n    } else {\n      var start = this.owner.selectionModule.getCellLeft(startCell.ownerRow, startCell);\n      var end = start + startCell.cellFormat.cellWidth;\n      var endCellLeft = this.owner.selectionModule.getCellLeft(endCell.ownerRow, endCell);\n      var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n      var cellInfo = this.owner.editorModule.updateSelectedCellsInTable(start, end, endCellLeft, endCellRight);\n      start = cellInfo.start;\n      end = cellInfo.end;\n      count = table.childWidgets.indexOf(endCell.ownerRow);\n      rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n      for (var i = rowStartIndex; i <= count; i++) {\n        var row = table.childWidgets[i];\n        for (var j = 0; j < row.childWidgets.length; j++) {\n          var cell = row.childWidgets[j];\n          var cellStart = this.owner.selectionModule.getCellLeft(row, cell);\n          if (HelperMethods.round(start, 2) <= HelperMethods.round(cellStart, 2) && HelperMethods.round(cellStart, 2) < HelperMethods.round(end, 2)) {\n            deleteCells.push(cell);\n          }\n        }\n      }\n    }\n    var isRowSelect = this.owner.selectionModule.isRowSelect() && rowStartIndex != count;\n    for (var i = 0; i < deleteCells.length; i++) {\n      if (action === 'ClearCells') {\n        this.deleteCell(action, deleteCells[i], false);\n      } else if (action === 'MergeCells') {\n        if (i !== 0) {\n          var isRowOffset = isRowSelect && !deleteCells[0].ownerRow.equals(deleteCells[i].ownerRow) && deleteCells[i].index == 0;\n          this.deleteCell(action, deleteCells[i], isRowOffset);\n        }\n      } else {\n        this.deleteCell('DeleteColumn', deleteCells[i], false);\n      }\n    }\n    if (action === 'MergeCells') {\n      this.cellOperation.reverse();\n      this.deleteCell('ClearCells', deleteCells[0], false);\n    }\n  };\n  BaseHistoryInfo.prototype.getPasteMergeOperation = function () {\n    var cell = this.owner.selectionModule.start.paragraph.associatedCell;\n    var paragraphInfo = {\n      'paragraph': null,\n      'offset': 0\n    };\n    var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n      position: 0,\n      done: false\n    }, cell).position;\n    var length = this.owner.selectionModule.calculateCellLength(cell) - 1;\n    var firstParagraph = this.owner.selectionModule.getFirstParagraph(cell);\n    var lastParagraph = this.owner.selectionModule.getLastParagraph(cell);\n    var startline = firstParagraph.firstChild;\n    var lastLine = lastParagraph.lastChild;\n    this.pasteContent = this.owner.sfdtExportModule.write(this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0, startline, 0, lastLine, lastLine.getEndOffset(), false, true);\n    this.startIndex = offset + 1;\n    var pasteOperation = {\n      action: 'Insert',\n      offset: this.startIndex,\n      length: length,\n      pasteContent: JSON.stringify(this.pasteContent),\n      type: 'Paste'\n    };\n    this.insertedText = CONTROL_CHARACTERS.Cell;\n    this.type = 'CellFormat';\n    this.startIndex = offset;\n    this.endIndex = offset;\n    this.format = JSON.stringify(this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0));\n    return pasteOperation;\n  };\n  BaseHistoryInfo.prototype.deleteCell = function (action, cell, isRowDelete) {\n    this.tableRelatedLength = this.owner.selectionModule.calculateCellLength(cell) + 1;\n    var paragraphInfo = {\n      'paragraph': null,\n      'offset': 0\n    };\n    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n      position: 0,\n      done: false\n    }, cell).position;\n    this.startIndex -= isRowDelete ? 1 : 0;\n    this.tableRelatedLength += isRowDelete ? 1 : 0;\n    if (!this.owner.enableTrackChanges) {\n      if (action === 'ClearCells') {\n        var block = cell.childWidgets[0];\n        if (cell.childWidgets.length === 1 && block instanceof ParagraphWidget && block.isEmpty()) {\n          return;\n        }\n        this.endIndex = this.startIndex + this.tableRelatedLength - 1;\n        this.startIndex += 1;\n        this.cellOperation.push(this.getDeleteOperation('ClearCells'));\n      } else {\n        this.cellOperation.push(this.getDeleteOperation('DeleteColumn'));\n      }\n    }\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.getFormatOperation = function (element, action, skipIncrement) {\n    if (this.startIndex > this.endIndex) {\n      var temp = this.startIndex;\n      this.startIndex = this.endIndex;\n      this.endIndex = temp;\n    }\n    var length = 0;\n    if (this.endIndex === this.startIndex && !skipIncrement && this.action !== 'DeleteBookmark' && this.action !== 'RemoveEditRange' && this.action !== 'InsertHyperlink') {\n      if (this.action === 'BackSpace') {\n        this.startIndex--;\n      } else {\n        this.endIndex++;\n      }\n    }\n    if (action === 'RemoveRowTrack') {\n      length = this.tableRelatedLength;\n    } else if (action === 'RowResizing' || action === 'CellResizing' || action === 'ImageResizing') {\n      length = this.insertedText.length;\n    } else {\n      length = !isNullOrUndefined(element) ? element.length : this.endIndex - this.startIndex;\n    }\n    var formatOperation = {\n      action: 'Format',\n      offset: this.startIndex,\n      length: length,\n      markerData: this.markerData[this.markerData.length - 1],\n      imageData: this.insertedData,\n      text: this.insertedText,\n      format: this.format\n    };\n    this.markerData.pop();\n    if (!isNullOrUndefined(action)) {\n      formatOperation.type = action.toString();\n    } else {\n      formatOperation.type = this.type;\n    }\n    return formatOperation;\n  };\n  BaseHistoryInfo.prototype.getRemovedText = function (element) {\n    var text = '';\n    if (!isNullOrUndefined(element)) {\n      var node = element;\n      if (node instanceof ParagraphWidget) {\n        text += this.getParagraphText(node);\n      } else if (node instanceof ElementBox) {\n        if (node instanceof TextElementBox) {\n          text += node.text;\n        } else {\n          text += ElementBox.objectCharacter;\n        }\n      } else if (node instanceof TableWidget) {\n        text += this.getTableText(node);\n      } else if (node instanceof TableRowWidget) {\n        text += this.getRowText(node);\n      }\n    } else {\n      for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n        var node = this.removedNodes[i];\n        if (node instanceof ParagraphWidget) {\n          text += this.getParagraphText(node);\n        } else if (node instanceof ElementBox) {\n          if (node instanceof TextElementBox) {\n            text += node.text;\n          } else {\n            text += ElementBox.objectCharacter;\n          }\n        } else if (node instanceof TableWidget) {\n          text += this.getTableText(node);\n        } else if (node instanceof TableRowWidget) {\n          text += this.getRowText(node);\n        }\n      }\n    }\n    return text;\n  };\n  BaseHistoryInfo.prototype.getRevisionOperation = function (revision) {\n    if (revision.revisionType === 'Insertion') {\n      // Accept operation - Insertion\n      this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, 'Accept'));\n      return this.getFormatOperation();\n    } else if (revision.revisionType === 'Deletion') {\n      // Reject operation - Deletion\n      this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, 'Reject'));\n      return this.getFormatOperation();\n    }\n    return {};\n  };\n  BaseHistoryInfo.prototype.getRemovedFieldCode = function () {\n    var fieldCode = '';\n    var isStarted = false;\n    for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n      var node = this.removedNodes[i];\n      if (node instanceof ElementBox) {\n        if (node instanceof FieldElementBox && node.fieldType === 0) {\n          isStarted = true;\n        }\n        if (node && node instanceof TextElementBox) {\n          if (isStarted) {\n            fieldCode += node.text;\n          }\n        }\n        if (node instanceof FieldElementBox && (node.fieldType === 2 || node.fieldType === 1)) {\n          return fieldCode;\n        }\n      } else if (node instanceof ParagraphWidget) {\n        for (var i_1 = 0; i_1 < node.childWidgets.length; i_1++) {\n          var lineWidget = node.childWidgets[i_1];\n          for (var j = 0; j < lineWidget.children.length; j++) {\n            var element = lineWidget.children[j];\n            if (element instanceof FieldElementBox && element.fieldType === 0) {\n              isStarted = true;\n            }\n            if (element instanceof TextElementBox) {\n              if (isStarted) {\n                fieldCode += element.text;\n              }\n            }\n            if (element instanceof FieldElementBox && (element.fieldType === 2 || element.fieldType === 1)) {\n              return fieldCode;\n            }\n          }\n        }\n      }\n    }\n    return undefined;\n  };\n  //  Add for loop to iterate paragraph child elements and get text \n  BaseHistoryInfo.prototype.getParagraphText = function (paragraph) {\n    var text = '';\n    if (!isNullOrUndefined(paragraph) && !isNullOrUndefined(paragraph.childWidgets)) {\n      for (var i = 0; i < paragraph.childWidgets.length; i++) {\n        var line = paragraph.childWidgets[i];\n        for (var j = 0; j < line.children.length; j++) {\n          if (line.children[j] instanceof TextElementBox) {\n            text += line.children[j].text;\n          } else {\n            text += ElementBox.objectCharacter;\n          }\n        }\n      }\n      return text + '\\n';\n    }\n    return text;\n  };\n  //  Add for loop to iterate table child elements and get text\n  BaseHistoryInfo.prototype.getTableText = function (table) {\n    var text = '';\n    for (var i = 0; i < table.childWidgets.length; i++) {\n      var row = table.childWidgets[i];\n      text += this.getRowText(row);\n    }\n    return text;\n  };\n  // Add for loop to iterate table row child elements and get text\n  BaseHistoryInfo.prototype.getRowText = function (row) {\n    var text = '';\n    for (var j = 0; j < row.childWidgets.length; j++) {\n      var cell = row.childWidgets[j];\n      for (var k = 0; k < cell.childWidgets.length; k++) {\n        var block = cell.childWidgets[k];\n        if (block instanceof ParagraphWidget) {\n          text += this.getParagraphText(block);\n        } else {\n          text += this.getTableText(block);\n        }\n      }\n    }\n    return text;\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.getCommentOperation = function (operation, action, comment) {\n    if (action === 'InsertInline' || action === 'RemoveInline') {\n      var commentRangeElement = action === 'RemoveInline' ? this.removedNodes[0] : this.insertedElement;\n      var commentElement = commentRangeElement.comment;\n      operation.text = commentRangeElement.commentType === 0 ? CONTROL_CHARACTERS.Marker_Start : CONTROL_CHARACTERS.Marker_End;\n      operation.markerData = {\n        type: 'Comment',\n        commentId: commentRangeElement.commentId,\n        ownerCommentId: commentElement.isReply ? commentElement.ownerComment.commentId : undefined\n      };\n    } else if (action === 'InsertCommentWidget' || action === 'DeleteCommentWidget') {\n      if (isNullOrUndefined(comment)) {\n        comment = this.removedNodes[0];\n      }\n      operation.length = 1;\n      operation.action = 'Format';\n      operation.offset = undefined;\n      operation.text = CONTROL_CHARACTERS.Marker_Start + CONTROL_CHARACTERS.Marker_End;\n      operation.markerData = {\n        type: 'Comment',\n        commentId: comment.commentId,\n        author: comment.author,\n        date: comment.date,\n        commentIndex: comment.isReply ? comment.ownerComment.replyComments.indexOf(comment) : this.owner.documentHelper.comments.indexOf(comment),\n        initial: comment.initial,\n        done: comment.isResolved,\n        text: comment.text,\n        isReply: comment.isReply\n      };\n      if (!isNullOrUndefined(comment.ownerComment)) {\n        // Get the position of the comment owner offset\n        var position = this.owner.selection.getElementPosition(comment.ownerComment.commentEnd, true).startPosition;\n        operation.offset = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n      }\n      if (action === 'DeleteCommentWidget') {\n        operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n        // To get the offset of end comment element box we are seperating minus one to it. \n        operation.offset -= 1;\n        operation.markerData.commentAction = 'remove';\n      } else if (action === 'InsertCommentWidget') {\n        operation.markerData.commentAction = 'add';\n      }\n    } else if (action === 'ResolveComment') {\n      operation.action = 'Format';\n      operation.length = 1;\n      operation.text = CONTROL_CHARACTERS.Marker_Start + CONTROL_CHARACTERS.Marker_End;\n      operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n      // To get the offset of end comment element box we are seperating minus one to it.\n      operation.offset -= 1;\n      operation.markerData = {\n        type: 'Comment',\n        commentId: comment.commentId,\n        done: comment.isResolved\n      };\n    } else if (action === 'EditComment') {\n      operation.action = 'Format';\n      operation.length = 1;\n      operation.text = CONTROL_CHARACTERS.Marker_Start + CONTROL_CHARACTERS.Marker_End;\n      operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n      // To get the offset of end comment element box we are seperating minus one to it.\n      operation.offset -= 1;\n      operation.markerData = {\n        type: 'Comment',\n        text: comment.text\n      };\n    }\n    return operation;\n  };\n  /**\n   * @private\n   */\n  BaseHistoryInfo.prototype.getDeleteCommentOperation = function (modifiedActions, operations) {\n    for (var i = 0; i < modifiedActions.length; i++) {\n      var currentHistory = modifiedActions[i];\n      if (currentHistory instanceof HistoryInfo && currentHistory.action === 'DeleteComment') {\n        this.getDeleteCommentOperation(currentHistory.modifiedActions, operations);\n      } else {\n        var operation = currentHistory.getDeleteOperation(currentHistory.action);\n        currentHistory.getCommentOperation(operation, currentHistory.action);\n        if (currentHistory.action === 'DeleteCommentWidget' && !isNullOrUndefined(modifiedActions[i + 1])) {\n          // For update operation we need end offset. So taking the offset from end remove inline history.\n          var updateHistory = modifiedActions[i + 1];\n          operation.offset = updateHistory.startIndex < updateHistory.endIndex ? updateHistory.startIndex : updateHistory.endIndex;\n        }\n        operations.push(operation);\n      }\n    }\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.buildFormatOperation = function (action, ischarFormat) {\n    var operations = [];\n    if ((action === 'ApplyStyle' || action === 'StyleName') && this.insertedFormat instanceof WParagraphStyle) {\n      this.insertedFormat = this.insertedFormat.name;\n      this.type = 'ParagraphFormat';\n      this.createParagraphFormat(action);\n    } else {\n      if (action === 'ApplyStyle' || action === 'StyleName') {\n        this.insertedFormat = this.insertedFormat.name;\n      }\n      if (ischarFormat) {\n        this.type = 'CharacterFormat';\n        this.createCharacterFormat(action);\n      } else {\n        this.type = action == 'ContinueNumbering' ? 'ContinueNumbering' : 'ParagraphFormat';\n        this.createParagraphFormat(action);\n      }\n    }\n    operations = this.getSelectedCellOperation(action, ischarFormat);\n    this.format = undefined;\n    return operations;\n  };\n  /**\n   * @private\n   * @returns {Operation}\n   */\n  BaseHistoryInfo.prototype.getSelectedCellOperation = function (action, ischarFormat, isBorder, isShading, isCell) {\n    var operations = [];\n    var start = this.owner.selectionModule.start;\n    var end = this.owner.selectionModule.end;\n    if (start.paragraph.isInsideTable && end.paragraph.isInsideTable && start.paragraph.associatedCell.ownerTable.equals(end.paragraph.associatedCell.ownerTable) && this.owner.selectionModule.isCellSelected(start.paragraph.associatedCell, start, end)) {\n      var selectCells = this.owner.selectionModule.getSelectedCells();\n      for (var i = 0; i < selectCells.length; i++) {\n        var cell = selectCells[i];\n        var paragraphInfo = {\n          'paragraph': null,\n          'offset': 0\n        };\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n          position: 0,\n          done: false\n        }, cell).position;\n        // Plus one is for cell index\n        var length_4 = this.owner.selectionModule.calculateCellLength(cell) + 1;\n        this.endIndex = this.startIndex + length_4;\n        if (length_4 === 0 && ischarFormat) {\n          continue;\n        }\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n          if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n            var cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n            this.format = JSON.stringify(cellFormat);\n          }\n        } else {\n          this.writeBorderFormat(isBorder, isShading, cell);\n        }\n        var formatOperation = void 0;\n        if (action === 'ListFormat') {\n          formatOperation = this.getFormatOperation(undefined, undefined, true);\n          formatOperation.type = 'ListFormat';\n          this.createListFormat(action, formatOperation);\n        } else {\n          formatOperation = this.getFormatOperation(undefined, undefined, true);\n        }\n        operations.push(formatOperation);\n      }\n    } else {\n      var operation = void 0;\n      if (action === 'ListFormat') {\n        operation = this.getFormatOperation(undefined, undefined, true);\n        operation.type = 'ListFormat';\n        this.createListFormat(action, operation);\n      } else {\n        if (start.paragraph.isInsideTable && isCell) {\n          var paragraphInfo = {\n            'paragraph': null,\n            'offset': 0\n          };\n          this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n            position: 0,\n            done: false\n          }, start.paragraph.associatedCell).position;\n          var length_5 = this.owner.selectionModule.calculateCellLength(start.paragraph.associatedCell) + 1;\n          this.endIndex = this.startIndex + length_5;\n          this.writeBorderFormat(isBorder, isShading, start.paragraph.associatedCell);\n        }\n        operation = this.getFormatOperation(undefined, undefined, true);\n      }\n      operations.push(operation);\n    }\n    return operations;\n  };\n  BaseHistoryInfo.prototype.writeBorderFormat = function (isBorder, isShading, cell) {\n    var cellFormat = {};\n    if (isBorder) {\n      cellFormat['borders'] = HelperMethods.writeBorders(cell.cellFormat.borders, 0);\n      this.format = JSON.stringify(cellFormat);\n    }\n    if (isShading) {\n      cellFormat['shading'] = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeShading(cell.cellFormat.shading, 0) : {};\n      this.format = JSON.stringify(cellFormat);\n    }\n  };\n  BaseHistoryInfo.prototype.createListFormat = function (action, operation) {\n    var listId;\n    var nsid;\n    if (action === 'ListFormat') {\n      listId = this.insertedFormat.listId;\n      operation.text = action.toString().charAt(0).toLowerCase() + action.toString().slice(1);\n    } else {\n      listId = this.insertedFormat.listId;\n      nsid = this.insertedFormat.nsid;\n    }\n    if (listId > -1) {\n      var list = this.owner.documentHelper.getListById(listId);\n      var listData = {};\n      listData.optimizeSfdt = this.owner.documentEditorSettings.optimizeSfdt;\n      if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n        this.owner.sfdtExportModule.keywordIndex = this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0;\n        listData[listsProperty[this.owner.sfdtExportModule.keywordIndex]] = [];\n        listData[listsProperty[this.owner.sfdtExportModule.keywordIndex]].push(this.owner.sfdtExportModule.writeList(list));\n        listData[abstractListsProperty[this.owner.sfdtExportModule.keywordIndex]] = [];\n        if (!isNullOrUndefined(list)) {\n          listData[abstractListsProperty[this.owner.sfdtExportModule.keywordIndex]].push(this.owner.sfdtExportModule.writeAbstractList(list.abstractList));\n        }\n        if (action == 'RestartNumbering') {\n          listData[listIdProperty[this.owner.sfdtExportModule.keywordIndex]] = listId;\n          listData[nsidProperty] = nsid;\n        }\n      }\n      operation.listData = JSON.stringify(listData);\n    }\n  };\n  BaseHistoryInfo.prototype.createCharacterFormat = function (action) {\n    var characterFormat = {};\n    if (action === 'Uppercase') {\n      characterFormat.Uppercase = true;\n    } else if (action === 'Lowercase') {\n      characterFormat.Lowercase = true;\n    } else if (action === 'SentenceCase') {\n      characterFormat.SentenceCase = true;\n    } else if (action === 'ToggleCase') {\n      characterFormat.ToggleCase = true;\n    } else if (action === 'CapitalizeEachWord') {\n      characterFormat.CapitalizeEachWord = true;\n    } else if (action === 'ApplyStyle' || action === 'StyleName') {\n      characterFormat.styleName = this.insertedFormat;\n    } else if (action === 'CharacterFormat') {\n      var charFormat = this.insertedFormat;\n      characterFormat.bold = charFormat.hasValue('bold') ? charFormat.bold : characterFormat.bold;\n      characterFormat.italic = charFormat.hasValue('italic') ? charFormat.italic : characterFormat.italic;\n      characterFormat.fontSize = charFormat.hasValue('fontSize') ? charFormat.fontSize : characterFormat.fontSize;\n      characterFormat.underline = charFormat.hasValue('underline') ? charFormat.underline : characterFormat.underline;\n      characterFormat.strikethrough = charFormat.hasValue('strikethrough') ? charFormat.strikethrough : characterFormat.strikethrough;\n      characterFormat.baselineAlignment = charFormat.hasValue('baselineAlignment') ? charFormat.baselineAlignment : characterFormat.baselineAlignment;\n      characterFormat.highlightColor = charFormat.hasValue('highlightColor') ? charFormat.highlightColor : characterFormat.highlightColor;\n      characterFormat.fontColor = charFormat.hasValue('fontColor') ? charFormat.fontColor : characterFormat.fontColor;\n      characterFormat.fontFamily = charFormat.hasValue('fontFamily') ? charFormat.fontFamily : characterFormat.fontFamily;\n      characterFormat.allCaps = charFormat.hasValue('allCaps') ? charFormat.allCaps : characterFormat.allCaps;\n      characterFormat.LowerCase = charFormat.hasValue('Lowercase') ? charFormat.Lowercase : characterFormat.Lowercase;\n      characterFormat.Uppercase = charFormat.hasValue('Uppercase') ? charFormat.Lowercase : characterFormat.Uppercase;\n      characterFormat.CapitalizeEachWord = charFormat.hasValue('CapitalizeEachWord') ? charFormat.CapitalizeEachWord : characterFormat.CapitalizeEachWord;\n      characterFormat.SentenceCase = charFormat.hasValue('SentenceCase') ? charFormat.SentenceCase : characterFormat.SentenceCase;\n      characterFormat.ToggleCase = charFormat.hasValue('ToggleCase') ? charFormat.ToggleCase : characterFormat.ToggleCase;\n    } else {\n      if (this.insertedFormat === 'increment' || this.insertedFormat === 'decrement') {\n        this.type = this.insertedFormat;\n        characterFormat.fontSize = 0;\n      } else {\n        if (action !== 'ClearFormat') {\n          var text = action.toString().charAt(0).toLowerCase() + action.toString().slice(1);\n          if (this.insertedFormat instanceof WCharacterFormat && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n            this.insertedFormat = this.insertedFormat[text];\n          }\n          characterFormat[text] = this.insertedFormat;\n        }\n      }\n    }\n    this.format = JSON.stringify(characterFormat);\n  };\n  BaseHistoryInfo.prototype.createParagraphFormat = function (action) {\n    var paragraphFormat = {};\n    if (action === 'ParagraphFormat' || action === 'ContinueNumbering') {\n      var paraFormat = this.insertedFormat;\n      paragraphFormat.afterSpacing = paraFormat.hasValue('afterSpacing') ? paraFormat.afterSpacing : paragraphFormat.afterSpacing;\n      paragraphFormat.beforeSpacing = paraFormat.hasValue('beforeSpacing') ? paraFormat.beforeSpacing : paragraphFormat.beforeSpacing;\n      paragraphFormat.spaceAfterAuto = paraFormat.hasValue('spaceAfterAuto') ? paraFormat.spaceAfterAuto : paragraphFormat.spaceAfterAuto;\n      paragraphFormat.spaceBeforeAuto = paraFormat.hasValue('spaceBeforeAuto') ? paraFormat.spaceBeforeAuto : paragraphFormat.spaceBeforeAuto;\n      paragraphFormat.rightIndent = paraFormat.hasValue('rightIndent') ? paraFormat.rightIndent : paragraphFormat.rightIndent;\n      paragraphFormat.leftIndent = paraFormat.hasValue('leftIndent') ? paraFormat.leftIndent : paragraphFormat.leftIndent;\n      paragraphFormat.firstLineIndent = paraFormat.hasValue('firstLineIndent') ? paraFormat.firstLineIndent : paragraphFormat.firstLineIndent;\n      paragraphFormat.lineSpacing = paraFormat.hasValue('lineSpacing') ? paraFormat.lineSpacing : paragraphFormat.lineSpacing;\n      paragraphFormat.lineSpacingType = paraFormat.hasValue('lineSpacingType') ? paraFormat.lineSpacingType : paragraphFormat.lineSpacingType;\n      paragraphFormat.textAlignment = paraFormat.hasValue('textAlignment') ? paraFormat.textAlignment : paragraphFormat.textAlignment;\n      paragraphFormat.outlineLevel = paraFormat.hasValue('outlineLevel') ? paraFormat.outlineLevel : paragraphFormat.outlineLevel;\n      paragraphFormat.bidi = paraFormat.hasValue('bidi') ? paraFormat.bidi : paragraphFormat.bidi;\n      if (paragraphFormat.bidi) {\n        if (paragraphFormat.textAlignment === 'Right') {\n          paragraphFormat.textAlignment = 'Left';\n        } else if (paragraphFormat.textAlignment === 'Left') {\n          paragraphFormat.textAlignment = 'Right';\n        }\n      }\n      paragraphFormat.borders = paraFormat.hasValue('borders') ? paraFormat.borders : paragraphFormat.borders;\n      if (paraFormat.listFormat.listId !== -1) {\n        var listFormat = {};\n        listFormat.listId = paraFormat.listFormat.listId;\n        listFormat.listLevelNumber = paraFormat.listFormat.listLevelNumber;\n        listFormat.nsid = paraFormat.listFormat.nsid;\n        paragraphFormat.listFormat = listFormat;\n      }\n      paragraphFormat.styleName = paraFormat.hasValue('styleName') ? paragraphFormat.styleName.name : undefined;\n      paragraphFormat.contextualSpacing = paraFormat.hasValue('contextualSpacing') ? paraFormat.contextualSpacing : paragraphFormat.contextualSpacing;\n      paragraphFormat.keepWithNext = paraFormat.hasValue('keepWithNext') ? paraFormat.keepWithNext : paragraphFormat.keepWithNext;\n      paragraphFormat.keepLinesTogether = paraFormat.hasValue('keepLinesTogether') ? paraFormat.keepLinesTogether : paragraphFormat.keepLinesTogether;\n      paragraphFormat.widowControl = paraFormat.hasValue('contextualSpacing') ? paraFormat.widowControl : paragraphFormat.widowControl;\n    } else if (action === 'ListFormat') {\n      if (this.insertedFormat instanceof WParagraphFormat) {\n        this.insertedFormat = this.insertedFormat.listFormat;\n      }\n      var listFormat = {};\n      listFormat.listId = this.insertedFormat.listId;\n      listFormat.nsid = this.insertedFormat.nsid;\n      listFormat.listLevelNumber = this.insertedFormat.listLevelNumber;\n      paragraphFormat.listFormat = listFormat;\n    } else if (action === 'ApplyStyle' || action === 'StyleName') {\n      paragraphFormat.styleName = this.insertedFormat;\n    } else if (action === 'ParagraphBidi') {\n      paragraphFormat.bidi = this.insertedFormat;\n    } else if (action === 'Borders') {\n      paragraphFormat['borders'] = HelperMethods.writeBorders(this.insertedFormat, 0);\n    } else {\n      if (this.insertedFormat instanceof WParagraphFormat) {\n        var paraFormat = this.owner.sfdtExportModule.writeParagraphFormat(this.insertedFormat, 0);\n        paragraphFormat[action.toString().charAt(0).toLowerCase() + action.toString().slice(1)] = paraFormat;\n      } else if (action === 'List') {\n        paragraphFormat = this.insertedFormat;\n      } else {\n        paragraphFormat[action.toString().charAt(0).toLowerCase() + action.toString().slice(1)] = this.insertedFormat;\n      }\n    }\n    this.format = JSON.stringify(paragraphFormat);\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  BaseHistoryInfo.prototype.createTableFormat = function (action) {\n    var paragraphInfo = {\n      'paragraph': null,\n      'offset': 0\n    };\n    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, {\n      position: 0,\n      done: false\n    }, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable).position;\n    this.endIndex = this.startIndex;\n    this.endIndex += this.owner.selectionModule.getBlockLength(undefined, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer), 0, {\n      done: false\n    }, true, undefined, undefined) - 1;\n    var tableFormat = {};\n    if (action === 'TableFormat') {\n      var tabFormat = this.insertedFormat;\n      if (!isNullOrUndefined(tabFormat)) {\n        tableFormat.bidi = tabFormat.hasValue('bidi') ? tabFormat.bidi : undefined;\n        tableFormat.preferredWidth = tabFormat.hasValue('preferredWidth') ? tabFormat.preferredWidth : undefined;\n        tableFormat.preferredWidthType = tabFormat.hasValue('preferredWidthType') ? tabFormat.preferredWidthType : undefined;\n        tableFormat.tableAlignment = tabFormat.hasValue('tableAlignment') ? tabFormat.tableAlignment : undefined;\n        tableFormat.leftIndent = tabFormat.hasValue('leftIndent') ? tabFormat.leftIndent : undefined;\n      }\n    } else if (action === 'TableOptions') {\n      var tableOption = this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.tableFormat;\n      if (!isNullOrUndefined(tableOption)) {\n        tableFormat.cellSpacing = tableOption.hasValue('cellSpacing') ? tableOption.cellSpacing : undefined;\n        tableFormat.leftMargin = tableOption.hasValue('leftMargin') ? tableOption.leftMargin : undefined;\n        tableFormat.topMargin = tableOption.hasValue('topMargin') ? tableOption.topMargin : undefined;\n        tableFormat.rightMargin = tableOption.hasValue('rightMargin') ? tableOption.rightMargin : undefined;\n        tableFormat.bottomMargin = tableOption.hasValue('bottomMargin') ? tableOption.bottomMargin : undefined;\n      }\n    } else if (action === 'BordersAndShading') {\n      var tabBorderFormat = this.insertedFormat;\n      tableFormat = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeTableFormat(tabBorderFormat, 0) : {};\n    } else {\n      tableFormat[this.getTableFormatString(action)] = this.insertedFormat;\n    }\n    this.format = JSON.stringify(tableFormat);\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  BaseHistoryInfo.prototype.createRowFormat = function (action) {\n    var rowFormat = {};\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n        this.owner.sfdtExportModule.assignRowFormat(rowFormat, this.owner.selectionModule.start.paragraph.associatedCell.ownerRow.rowFormat, 0);\n      }\n    } else {\n      if (action === 'RowFormat') {\n        var rForamt = this.insertedFormat;\n        if (!isNullOrUndefined(rForamt)) {\n          rowFormat.height = rForamt.hasValue('height') ? rForamt.height : undefined;\n          rowFormat.heightType = rForamt.hasValue('heightType') ? rForamt.heightType : undefined;\n          rowFormat.isHeader = rForamt.hasValue('isHeader') ? rForamt.isHeader : undefined;\n          rowFormat.allowBreakAcrossPages = rForamt.hasValue('allowBreakAcrossPages') ? rForamt.allowBreakAcrossPages : undefined;\n        }\n      } else {\n        rowFormat[this.getRowString(action)] = this.insertedFormat;\n      }\n    }\n    this.format = JSON.stringify(rowFormat);\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  BaseHistoryInfo.prototype.createCellFormat = function (action) {\n    var cellFormat = {};\n    if (action === 'CellFormat') {\n      var cFormat = this.insertedFormat;\n      cellFormat.preferredWidth = cFormat.hasValue('preferredWidth') ? cFormat.preferredWidth : undefined;\n      cellFormat.preferredWidthType = cFormat.hasValue('preferredWidthType') ? cFormat.preferredWidthType : undefined;\n      cellFormat.verticalAlignment = cFormat.hasValue('verticalAlignment') ? cFormat.verticalAlignment : undefined;\n    } else if (action === 'CellOptions') {\n      var cellOption = this.insertedFormat;\n      cellFormat.leftMargin = cellOption.leftMargin;\n      cellFormat.rightMargin = cellOption.rightMargin;\n      cellFormat.bottomMargin = cellOption.bottomMargin;\n      cellFormat.topMargin = cellOption.topMargin;\n    } else if (action === 'Shading') {\n      cellFormat[this.getCellString(action)] = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeShading(this.insertedFormat, 0) : {};\n    } else if (action === 'Borders') {\n      cellFormat['borders'] = HelperMethods.writeBorders(this.insertedFormat, 0);\n    } else if (action === 'BordersAndShading') {\n      cellFormat['shading'] = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeShading(this.insertedFormat, 0) : {};\n      cellFormat['borders'] = HelperMethods.writeBorders(this.insertedFormat.borders, 0);\n    } else {\n      cellFormat[this.getCellString(action)] = this.insertedFormat;\n    }\n    this.format = JSON.stringify(cellFormat);\n  };\n  BaseHistoryInfo.prototype.getTableFormatString = function (property) {\n    switch (property) {\n      case 'TableAlignment':\n        return 'tableAlignment';\n      case 'TableLeftIndent':\n        return 'leftIndent';\n      case 'DefaultCellLeftMargin':\n        return 'leftMargin';\n      case 'DefaultCellRightMargin':\n        return 'rightMargin';\n      case 'DefaultCellBottomMargin':\n        return 'bottomMargin';\n      case 'DefaultCellTopMargin':\n        return 'topMargin';\n      case 'TablePreferredWidth':\n        return 'preferredWidth';\n      case 'TablePreferredWidthType':\n        return 'preferredWidthType';\n      case 'Shading':\n        return 'shading';\n      case 'TableBidi':\n        return 'bidi';\n      default:\n        return 'cellSpacing';\n    }\n  };\n  BaseHistoryInfo.prototype.createSectionFormat = function (action) {\n    var sectionFormat = {};\n    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n      if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n        this.owner.sfdtExportModule.writeSectionFormat(this.owner.selectionModule.start.paragraph.bodyWidget.sectionFormat, sectionFormat, 0);\n      }\n    } else {\n      if (action === 'LinkToPrevious') {\n        var headerFooterWidget = this.owner.selectionModule.start.paragraph.bodyWidget;\n        var sectionIndex = headerFooterWidget.sectionIndex;\n        var headerFooterType = headerFooterWidget.headerFooterType;\n        this.format = JSON.stringify({\n          linkToPrevious: this.insertedFormat,\n          sectionIndex: sectionIndex,\n          headerFooterType: headerFooterType\n        });\n        return;\n      } else if (action === 'SectionFormat') {\n        var secFormat = this.insertedFormat;\n        this.owner.sfdtExportModule.writeSectionFormat(secFormat, sectionFormat, 0);\n      } else {\n        sectionFormat[action[0].toLowerCase() + action.slice(1)] = this.insertedFormat;\n      }\n    }\n    this.format = JSON.stringify(sectionFormat);\n  };\n  BaseHistoryInfo.prototype.getRowString = function (property) {\n    switch (property) {\n      case 'RowHeight':\n        return 'height';\n      case 'RowHeightType':\n        return 'heightType';\n      case 'RowHeader':\n        return 'isHeader';\n      default:\n        return 'allowBreakAcrossPages';\n    }\n  };\n  BaseHistoryInfo.prototype.getCellString = function (property) {\n    switch (property) {\n      case 'CellContentVerticalAlignment':\n        return 'verticalAlignment';\n      case 'CellLeftMargin':\n        return 'leftMargin';\n      case 'CellRightMargin':\n        return 'rightMargin';\n      case 'CellBottomMargin':\n        return 'bottomMargin';\n      case 'CellTopMargin':\n        return 'topMargin';\n      case 'CellPreferredWidth':\n        return 'preferredWidth';\n      case 'Shading':\n        return 'shading';\n      default:\n        return 'cellPreferredWidthType';\n    }\n  };\n  return BaseHistoryInfo;\n}();\nexport { BaseHistoryInfo };","map":{"version":3,"names":["WParagraphFormat","WSectionFormat","WCharacterFormat","WListFormat","HistoryInfo","ModifiedLevel","RowHistoryFormat","TableHistoryInfo","BlockWidget","ParagraphWidget","BodyWidget","TableCellWidget","FieldElementBox","TableWidget","TableRowWidget","BookmarkElementBox","HeaderFooterWidget","CheckBoxFormField","TextFrame","TextElementBox","FootnoteElementBox","ImageElementBox","Dictionary","abstractListsProperty","listIdProperty","listsProperty","nsidProperty","TextPosition","ImageSizeInfo","isNullOrUndefined","ElementBox","CommentCharacterElementBox","WTableFormat","WRowFormat","WCellFormat","WParagraphStyle","HelperMethods","CONTROL_CHARACTERS","BaseHistoryInfo","node","cellOperation","splittedRevisions","isRemovedNodes","modifiedFormatOperation","revisionOperation","markerData","ownerIn","documentHelper","modifiedPropertiesIn","modifiedNodeLength","removedNodesIn","insertedNodes","Object","defineProperty","prototype","get","enumerable","configurable","owner","editorHistoryModule","actionIn","set","value","enableCollaborativeEditing","editorHistory","isUndoing","length","selectionModule","isTableSelected","isRowSelect","insertedText","Cell","deleteColumnOperation","action","createAcceptRejectOperation","Section_Break","type","selectionStartIn","selectionEndIn","insertPositionIn","editorModule","isRemoteAction","indexOf","insertIndex","getAbsolutePositionFromRelativePosition","endPositionIn","viewer","updateSelection","updateCollaborativeSelection","start","clone","end","blockInfo","getParagraphInfo","selectionStart","getHierarchicalIndex","paragraph","offset","toString","selectionEnd","startEdit","getEditRangeStartElement","position","getPosition","startPosition","endPosition","updateTableSelection","startIndex","isEndOffset","endIndex","isForward","getTableRelativeValue","isParagraphStart","equals","isAtParagraphStart","paraInclude","enableTrackChanges","splitOperationForDelete","paragrapthInfo","getTotalLength","isInsideTable","associatedCell","lastChild","firstPara","getFirstParagraph","lastPara","getLastParagraph","setPosition","firstChild","setPositionParagraph","getEndOffset","lastParagraph","getLastBlockInLastCell","ownerTable","PasteLength","endLineWidget","currentWidget","endOffset","table","layout","getParentTable","paragraphInfo","tableStart","getPositionInfoForHeaderFooter","done","push","getDeleteOperation","pasteContent","sfdtExportModule","write","documentEditorSettings","optimizeSfdt","getPasteOpertion","getBlockLength","undefined","setBookmarkInfo","bookmark","removedNodes","indexInOwner","reference","setFormFieldInfo","field","setEditRangeInfo","editStart","editRangeEnd","revertFormTextFormat","fieldInfo","text","formField","applyTextFormatInternal","recordChanges","formatText","formFieldData","format","undoStack","revertFormField","toggleCheckBoxFormField","updateFormField","revertBookmark","bookmarkInfo","getMarkerData","bookmarks","add","name","line","children","splice","previousNode","showBookmarks","updateScrollBars","fireContentChange","deleteBookmarkInternal","revertComment","editPosition","insertPosition","comment","insert","currentBaseHistoryInfo","resolveOrReopenComment","isResolved","modifiedCommentObject","modifiedProperties","commentView","commentReviewPane","commentPane","comments","commentText","innerText","updateHistory","isRedoing","insertedElement","isReply","addReplyComment","addCommentWidget","commentElement","getCommentElementBox","deleteCommentWidget","revertEditRangeRegion","editRangeInfo","user","group","updateRangeCollection","removeUserRestrictionsInternal","revert","listNumberFormat","abstractList","lists","levels","listLevelNumber","currentListLevelPattern","listLevelPattern","currentNUmberFormat","numberFormat","isShiftingEnabled","selectionStartTextPosition","selectionEndTextPosition","collabStart","collabEnd","selection","getTextPosBasedOnLogicalIndex","isForwardSelection","revertModifiedProperties","sel","deletedNodes","i","parseInt","insertTextPosition","endTextPosition","select","endRevisionLogicalIndex","lastElementRevision","isAcceptOrReject","isEmpty","currentHistoryInfo","updateEndRevisionInfo","fieldBegin","getHyperlinkField","isHyperlinkField","fieldSeparator","getOffset","undoRevisionForElements","fieldEnd","selectPosition","editModule","changeSelectedTextCase","reLayout","isAtSamePosition","selectContent","setPositionInternal","isRemoveContent","isDeletecell","currentPosition","deleteSelectedContents","skipDelete","removeSelectedContents","reverse","blockToShift","shiftLayoutedItems","previousRenderedWidget","isEndsWithPageBreak","containerWidget","sectionFormat","breakCode","section","combineSectionInternal","layoutWholeDocument","isRedoAction","revertModifiedNodes","removeContent","isSelectionChanged","selectRange","updateFocus","trackChangesPane","isTrackingPageBreak","index","isSkipOperationsBuild","scrollToPosition","highlightListText","widget","bodyWidget","isDelete","checkAdjacentNodeForMarkedRevision","currentRevision","retrieveEndPosition","isLastChild","editor","getLastParaForBodywidgetCollection","getLength","isMarkedForRevision","elementBox","setPositionFromLine","nextItem","nextNode","markedNode","revertResizing","revertTableDialogProperties","revertProperties","redoAction","singleBackspace","singleDelete","deleteTable","deleteColumn","deleteRow","mergeSelectedCellsInTable","insertRow","insertColumn","insertSection","autoFitTable","handleAcceptReject","isEmptySelection","block","getBlock","lastNode","combineWidget","operation","isSkipTracking","insertTableInternal","insertBlock","insertRemovedNodes","initialStart","newParagraph","characterFormat","insertNewParagraphWidget","skipinsert","nextRenderedWidget","removedIds","constructRevisionFromID","nextBlock","getNextParagraphBlock","getSplitWidgets","pop","getNextRenderedBlock","startParagraph","isinEndnote","isinFootnote","selectParagraphInternal","firstBlock","firstNode","nextWidget","getLineLength","removeBlock","isRelayout","fieldType","insertInlineInSelection","childWidgets","moveToNextParagraph","updateNextBlocksIndex","layoutBodyWidgetCollection","insertBlockTable","wiget","slice","revisions","cloneFormat","removedHeaderFooters","headersFooters","sectionIndex","endWidget","revisionsInternal","insertRevisionForBlock","revisionType","range","item","revisionIndex","rangeIndex","updateCurrentTrackChanges","remove","addRemovedNodes","revisionID","id","currentPara","endPara","startoffset","endoffset","isSamePara","isSplittedWidget","previousSplitWidget","applyRevisionForCurrentPara","nextSplitWidget","revision","prevRowHistoryFormat","tableHierarchicalIndex","revertChanges","selectedWidgets","highlightSelection","prevTableHistoryInfo","tableResize","setOffsetValue","currentResizingTable","tableHistoryInfoCurrent","isLayoutEnabled","applyProperties","isGridUpdated","updateGridValue","destroy","currentPropertyIndex","cellFormat","updateCellMargins","tableOptionsDialogModule","applyTableOptionsHelper","addModifiedPropertiesForSection","property","previousFormat","getPropertyValue","copyFormat","currentFormat","addModifiedProperties","skipRemove","ownerBase","prevLength","nextFormat","buildCharacterFormatOperation","getElementPosition","characterData","writeCharacterFormat","JSON","stringify","addModifiedPropertiesForParagraphFormat","listFormat","tabs","baseStyle","copyStyle","borders","getBorder","replace","getParagraohFormatOperation","paragarph","_a","setPositionForBlock","insertedFormat","apply","getActionInfo","addModifiedPropertiesForContinueNumbering","paragraphFormat","addModifiedPropertiesForRestartNumbering","listId","addModifiedPropertiesForList","listLevel","previousLevel","cloneListLevel","getProperty","updateListCharacterFormat","updateSelectionCharacterFormatting","revertContinueNumbering","updateSelectionParagraphFormatting","setPreviousBlockToLayout","split","updateHeaderFooters","updateSectionFormat","restartListAtInternal","updateImageSize","modified","modifiedLevel","updateListChanges","updateTableFormat","updateCellFormat","updateRowFormat","styleObject","updateStyleObject","getOffsetValue","addModifiedCellOptions","applyFormat","bottomMargin","topMargin","rightMargin","leftMargin","copyCellOptions","tableFormat","addModifiedTableOptions","copyTableOptions","cellSpacing","toLowerCase","getCharacterPropertyValue","modifiedProperty","bold","italic","fontColor","fontFamily","fontSize","highlightColor","baselineAlignment","strikethrough","underline","addModifiedTableProperties","previousTableFormat","shading","addModifiedRowProperties","rowFormat","rowData","assignRowFormat","addModifiedCellProperties","destroyInternal","recordInsertRevisionDeletetion","startOffset","temp","currentStart","retrieveRevisionInOder","currentUser","author","getFormatOperation","isAllRevision","j","element","length_1","getRemovedText","getDeleteOperationsForTrackChanges","operations","isInsertRevision","checkValidRevision","revisionId","endIndex_1","changes","getDeleteOperationForTrackChanges","getRevision","isInvertOperation","dropDownIndex","deleteOperation","getInsertOperation","Marker_Start","footnoteType","revisionForFootnoteEndnoteContent","operationCollection","getDeleteContent","concat","operation2","getElementAbsolutePosition","getUndoRedoOperation","tableRowOperation","buildTableRowCellOperation","tableCellOperation","Marker_End","headerFooter","keysLength","keys","getUpdateOperation","getCommentOperation","getRevisionOperation","isTextRemoved","length_2","getPasteContentLength","pasteOperation","isEditHyperlink","getEditHyperlinkOperation","getFieldOperation","operation1","checked","getPasteMergeOperation","getTrackchangesOperation","getResizingOperation","charFormatOperation","buildFormatOperation","createCellFormat","getSelectedCellOperation","paraFormatOperation","createTableFormat","numberingOperation","createListFormat","createSectionFormat","createRowFormat","markerInfo","buildRowOperationForTrackChanges","selectRevision","removeMarkerInfoRevision","isFieldEnd","elementOffset","Data","elementLength","skipformFieldLength","operation_1","Field_Separator","formFieldType","getRevisionMarkerData","bookmarkType","bookmarkName","operation_2","paraEnd","isParaSelected","isAtParagraphEnd","fieldCode","getRemovedFieldCode","getFieldCode","resizerPosition","row","getRowLength","Row","rightColumnIndex","leftColumnIndex","isResize","cellwidget","getTableCellWidget","startingPoint","containsKey","previousWidget","selectedCells","getSelectedCells","startCell","endCell","rowStartIndex","ownerRow","count","cell","writeCellFormat","calculateCellLength","writeTableFormat","reLayoutTable","setEndIndex","headerFooterStart","headerFooterEnd","selectionLength","removedText","tableRelatedLength","skipOperation","positionInfo","getParagraphLength","getPositionInfoForBodyContent","skipMarkerData","imageData","insertedData","isTableInsert","issamePosition","startLine","lastLine","getLastParagraphBlock","getFirstParagraphBlock","length_3","enterOperation","tableWidget","Table","buildRowOperation","k","cellOperations","buildCellOperation","l","num","cell_1","assignRevisionData","date","lastRevision","isCellInserted","writeParagraphFormat","getOwnerCell","deleteCells","getColumnCellsForSelection","getCellLeft","cellWidth","endCellLeft","endCellRight","cellInfo","updateSelectedCellsInTable","cellStart","round","deleteCell","isRowOffset","firstParagraph","startline","isRowDelete","skipIncrement","formatOperation","getParagraphText","objectCharacter","getTableText","getRowText","isStarted","i_1","lineWidget","commentRangeElement","commentType","commentId","ownerCommentId","ownerComment","commentIndex","replyComments","initial","commentEnd","commentAction","getDeleteCommentOperation","modifiedActions","currentHistory","ischarFormat","createParagraphFormat","createCharacterFormat","isBorder","isShading","isCell","isCellSelected","selectCells","length_4","writeBorderFormat","length_5","writeBorders","writeShading","nsid","charAt","list","getListById","listData","keywordIndex","writeList","writeAbstractList","Uppercase","Lowercase","SentenceCase","ToggleCase","CapitalizeEachWord","styleName","charFormat","hasValue","allCaps","LowerCase","paraFormat","afterSpacing","beforeSpacing","spaceAfterAuto","spaceBeforeAuto","rightIndent","leftIndent","firstLineIndent","lineSpacing","lineSpacingType","textAlignment","outlineLevel","bidi","contextualSpacing","keepWithNext","keepLinesTogether","widowControl","tabFormat","preferredWidth","preferredWidthType","tableAlignment","tableOption","tabBorderFormat","getTableFormatString","rForamt","height","heightType","isHeader","allowBreakAcrossPages","getRowString","cFormat","verticalAlignment","cellOption","getCellString","writeSectionFormat","headerFooterWidget","headerFooterType","linkToPrevious","secFormat"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/base-history-info.js"],"sourcesContent":["import { WParagraphFormat } from '../format/paragraph-format';\nimport { WSectionFormat } from '../format/section-format';\nimport { WCharacterFormat } from '../format/character-format';\nimport { WListFormat } from '../format/list-format';\nimport { HistoryInfo } from '../index';\nimport { ModifiedLevel, RowHistoryFormat, TableHistoryInfo } from './history-helper';\nimport { BlockWidget, ParagraphWidget, BodyWidget, TableCellWidget, FieldElementBox, TableWidget, TableRowWidget, BookmarkElementBox, HeaderFooterWidget, CheckBoxFormField, TextFrame, TextElementBox, FootnoteElementBox, ImageElementBox } from '../viewer/page';\nimport { Dictionary } from '../../base/dictionary';\nimport { abstractListsProperty, listIdProperty, listsProperty, nsidProperty } from '../../index';\nimport { TextPosition, ImageSizeInfo } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ElementBox, CommentCharacterElementBox } from '../viewer/page';\nimport { WTableFormat, WRowFormat, WCellFormat, WParagraphStyle } from '../format/index';\nimport { HelperMethods } from '../editor/editor-helper';\nimport { CONTROL_CHARACTERS } from '../../base/types';\n// Code for Comparing the offset calculated using old approach and optimized approach\n// /**\n//  * @private\n//  */\n// export class MyError extends Error {\n//     constructor(message: string) {\n//         super(message);\n//     }\n// }\n// export function throwCustomError(condition: boolean, message: string) {\n//     if (condition) {\n//         throw new MyError(message);\n//     }\n// }\n/**\n * @private\n */\nvar BaseHistoryInfo = /** @class */ (function () {\n    function BaseHistoryInfo(node) {\n        this.cellOperation = [];\n        this.splittedRevisions = [];\n        this.isRemovedNodes = false;\n        this.modifiedFormatOperation = [];\n        this.revisionOperation = [];\n        /**\n         * @private\n         */\n        this.markerData = [];\n        this.ownerIn = node;\n        this.documentHelper = node.documentHelper;\n        this.modifiedPropertiesIn = [];\n        this.modifiedNodeLength = [];\n        this.removedNodesIn = [];\n        this.insertedNodes = [];\n    }\n    Object.defineProperty(BaseHistoryInfo.prototype, \"owner\", {\n        //Properties\n        //gets owner control\n        get: function () {\n            return this.ownerIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"editorHistory\", {\n        get: function () {\n            return this.owner.editorHistoryModule;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"action\", {\n        get: function () {\n            return this.actionIn;\n        },\n        set: function (value) {\n            this.actionIn = value;\n            if (this.owner.enableCollaborativeEditing && !this.editorHistory.isUndoing && this.cellOperation.length == 0) {\n                if (value === 'DeleteColumn' || value === 'DeleteCells' || value === 'ClearCells' || value === 'MergeCells') {\n                    if (!(this.owner.selectionModule.isTableSelected(true) || this.owner.selectionModule.isRowSelect()) || value === 'ClearCells' || value === 'MergeCells') {\n                        this.insertedText = CONTROL_CHARACTERS.Cell;\n                        this.deleteColumnOperation(this.action);\n                    }\n                }\n                else if (value === 'Accept Change' || value === 'Reject Change') {\n                    this.createAcceptRejectOperation(this.action);\n                }\n                else if (value === 'SectionBreak') {\n                    this.insertedText = CONTROL_CHARACTERS.Section_Break;\n                    this.type = \"NewPage\";\n                }\n                else if (value === 'SectionBreakContinuous') {\n                    this.insertedText = CONTROL_CHARACTERS.Section_Break;\n                    this.type = \"Continuous\";\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"modifiedProperties\", {\n        get: function () {\n            return this.modifiedPropertiesIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"removedNodes\", {\n        /* eslint-enable */\n        get: function () {\n            return this.removedNodesIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"selectionStart\", {\n        //gets or sets selection start\n        get: function () {\n            return this.selectionStartIn;\n        },\n        set: function (value) {\n            this.selectionStartIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"selectionEnd\", {\n        get: function () {\n            return this.selectionEndIn;\n        },\n        set: function (value) {\n            this.selectionEndIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"insertPosition\", {\n        get: function () {\n            return this.insertPositionIn;\n        },\n        set: function (value) {\n            this.insertPositionIn = value;\n            if (this.owner.enableCollaborativeEditing && !this.owner.editorModule.isRemoteAction && value !== '' && !isNullOrUndefined(value) && value.indexOf('C') === -1) {\n                //TODO: Insert position not needed in all the cases. Need to optimize it.\n                this.insertIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(value);\n                // Code for Comparing the offset calculated using old approach and optimized approach\n                // this.owner.selection.isNewApproach = true;\n                // this.newInsertIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(value);\n                // this.owner.selection.isNewApproach = false;\n                // throwCustomError(this.newInsertIndex !== this.insertIndex, \"New InsertIndex \" + this.newInsertIndex + \" and old insertIndex \" + this.insertIndex + \" doesnot match\");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"endPosition\", {\n        get: function () {\n            return this.endPositionIn;\n        },\n        set: function (value) {\n            this.endPositionIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseHistoryInfo.prototype, \"viewer\", {\n        get: function () {\n            return this.ownerIn.viewer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BaseHistoryInfo.prototype.updateSelection = function () {\n        this.updateCollaborativeSelection(this.owner.selectionModule.start.clone(), this.owner.selectionModule.end.clone());\n        var blockInfo = this.owner.selectionModule.getParagraphInfo(this.owner.selectionModule.start);\n        this.selectionStart = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        blockInfo = this.owner.selectionModule.getParagraphInfo(this.owner.selectionModule.end);\n        this.selectionEnd = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n    };\n    BaseHistoryInfo.prototype.updateCollaborativeSelection = function (start, end) {\n        if (this.owner.enableCollaborativeEditing && !this.owner.editorModule.isRemoteAction) {\n            //TODO: Need to consider formard and backward selection\n            if (this.action == 'RemoveEditRange') {\n                var startEdit = this.owner.selectionModule.getEditRangeStartElement();\n                var position = this.owner.selectionModule.getPosition(startEdit);\n                start = position.startPosition;\n                end = position.endPosition;\n            }\n            else {\n                this.updateTableSelection(start, end);\n            }\n            this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(start);\n            // Code for Comparing the offset calculated using old approach and optimized approach\n            // this.owner.selection.isNewApproach = true;\n            // this.newStartIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(start);\n            // this.owner.selection.isNewApproach = false;\n            this.owner.selectionModule.isEndOffset = true;\n            this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(end);\n            // Code for Comparing the offset calculated using old approach and optimized approach\n            // this.owner.selection.isNewApproach = true;\n            // this.newEndIndex = this.owner.selection.getAbsolutePositionFromRelativePosition(end);\n            // this.owner.selection.isNewApproach = false;\n            this.owner.selectionModule.isEndOffset = false;\n            var isForward = this.owner.selectionModule.isForward;\n            if (isForward) {\n                this.startIndex -= this.owner.selectionModule.getTableRelativeValue(start, end);\n            }\n            else {\n                this.endIndex -= this.owner.selectionModule.getTableRelativeValue(end, start);\n            }\n            // if (this.action === 'BackSpace' || this.action === 'Delete') {\n            var isParagraphStart = isForward ? (start.paragraph.equals(end.paragraph) && start.isAtParagraphStart) : (start.paragraph.equals(end.paragraph) && end.isAtParagraphStart);\n            if ((isParagraphStart || !start.paragraph.equals(end.paragraph))) {\n                if (isForward) {\n                    this.endIndex += this.paraInclude(end);\n                }\n                else {\n                    this.startIndex += this.paraInclude(start);\n                }\n            }\n            // }\n            if (!this.owner.enableTrackChanges) {\n                this.splitOperationForDelete(start, end);\n            }\n            // Code for Comparing the offset calculated using old approach and optimized approach\n            // throwCustomError(this.newStartIndex !== this.startIndex, \"New StartIndex \" + this.newStartIndex + \" and old StartIndex \" + this.startIndex + \" doesnot match\");\n            // throwCustomError(this.newEndIndex !== this.endIndex, \"New EndIndex \" + this.newEndIndex + \" and old EndIndex \" + this.endIndex + \" doesnot match\");\n        }\n    };\n    BaseHistoryInfo.prototype.paraInclude = function (position) {\n        var paragrapthInfo = this.owner.selectionModule.getParagraphInfo(position);\n        if (position.paragraph.getTotalLength() < paragrapthInfo.offset) {\n            if (!(position.paragraph.isInsideTable && position.paragraph.equals(position.paragraph.associatedCell.lastChild))) {\n                return 1;\n            }\n        }\n        return 0;\n    };\n    /**\n     * This method will set position when the multple cell selected.\n     */\n    BaseHistoryInfo.prototype.updateTableSelection = function (startPosition, endPosition) {\n        var start = startPosition;\n        var end = endPosition;\n        if (!this.owner.selectionModule.isForward) {\n            start = endPosition;\n            end = startPosition;\n        }\n        if (start.paragraph.isInsideTable) {\n            var firstPara = this.owner.selectionModule.getFirstParagraph(start.paragraph.associatedCell);\n            if (end.paragraph.isInsideTable) {\n                if (!start.paragraph.associatedCell.equals(end.paragraph.associatedCell)) {\n                    var lastPara = this.owner.selectionModule.getLastParagraph(end.paragraph.associatedCell);\n                    start.setPosition(firstPara.firstChild, true);\n                    end.setPositionParagraph(lastPara.lastChild, lastPara.lastChild.getEndOffset() + 1);\n                }\n            }\n            else {\n                start.setPosition(firstPara.firstChild, true);\n            }\n        }\n        else if (end.paragraph.isInsideTable) {\n            var lastPara = this.owner.selectionModule.getLastParagraph(end.paragraph.associatedCell);\n            end.setPositionParagraph(lastPara.lastChild, lastPara.lastChild.getEndOffset() + 1);\n        }\n    };\n    /**\n     * start is para and end is in row.\n     */\n    BaseHistoryInfo.prototype.splitOperationForDelete = function (startPosition, endPosition) {\n        // when start is para and end is row. we are building the operation like: \n        // fisrt delete the end table from table start to selection end.\n        // second need to paste the content from the start para and need to paste it in the next row.\n        // third delete the start paragraph to before wiget of end table. \n        var start = startPosition;\n        var end = endPosition;\n        if (!this.owner.selectionModule.isForward) {\n            start = endPosition;\n            end = startPosition;\n        }\n        if (!start.paragraph.isInsideTable && end.paragraph.isInsideTable && (this.action === 'BackSpace' || this.action === 'Delete')) {\n            var lastParagraph = this.owner.selectionModule.getLastBlockInLastCell(end.paragraph.associatedCell.ownerTable);\n            if (!lastParagraph.associatedCell.equals(end.paragraph.associatedCell)) {\n                var PasteLength = this.startIndex;\n                var endLineWidget = start.currentWidget;\n                var endOffset = start.offset;\n                start.setPosition(start.paragraph.firstChild, true);\n                this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(start);\n                var startIndex = this.startIndex;\n                var table = this.owner.documentHelper.layout.getParentTable(end.paragraph.associatedCell.ownerTable);\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                var tableStart = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n                // Table start will get the offset for table. So adding plus one to row offset.\n                this.startIndex = tableStart + 1;\n                this.cellOperation.push(this.getDeleteOperation(this.action));\n                // This will add the paste content in first and first cell so adding plus 3. \n                this.startIndex = tableStart + 3;\n                if (endOffset !== 0) {\n                    this.pasteContent = this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), start.currentWidget, start.offset, endLineWidget, endOffset, false, true);\n                    this.cellOperation.push(this.getPasteOpertion(this.pasteContent, PasteLength - startIndex));\n                }\n                this.endIndex = tableStart;\n                this.startIndex = startIndex;\n                this.cellOperation.push(this.getDeleteOperation(this.action));\n            }\n        }\n        if (this.action === 'PasteColumn' || this.action === 'PasteOverwrite' || this.action === 'PasteRow') {\n            //when inserting new colomn in paste. first deleting the table and inserting the whole table.\n            var table = startPosition.paragraph.associatedCell.ownerTable;\n            var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n            this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n            this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, table, 0, { done: false }, true, undefined, undefined);\n        }\n    };\n    BaseHistoryInfo.prototype.setBookmarkInfo = function (bookmark) {\n        this.removedNodes.push({ 'bookmark': bookmark, 'startIndex': bookmark.indexInOwner, 'endIndex': bookmark.reference.indexInOwner });\n    };\n    BaseHistoryInfo.prototype.setFormFieldInfo = function (field, value) {\n        this.removedNodes.push({ 'formField': field, 'value': value });\n    };\n    BaseHistoryInfo.prototype.setEditRangeInfo = function (editStart) {\n        this.removedNodes.push({ 'editStart': editStart, 'startIndex': editStart.indexInOwner, 'endIndex': editStart.editRangeEnd.indexInOwner });\n    };\n    BaseHistoryInfo.prototype.revertFormTextFormat = function () {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        var fieldInfo = this.removedNodes[0];\n        var text = fieldInfo.value;\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n        var formField = fieldInfo.formField;\n        if (this.editorHistory.isUndoing) {\n            this.owner.editorModule.applyTextFormatInternal(formField, text);\n            this.editorHistory.recordChanges(this);\n        }\n        else {\n            text = HelperMethods.formatText(formField.formFieldData.format, text);\n            this.owner.editorModule.applyTextFormatInternal(formField, text);\n            this.editorHistory.undoStack.push(this);\n        }\n    };\n    BaseHistoryInfo.prototype.revertFormField = function () {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        var fieldInfo = this.removedNodes[0];\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n        var field = fieldInfo.formField;\n        if (field.formFieldData instanceof CheckBoxFormField) {\n            this.owner.editorModule.toggleCheckBoxFormField(field, true, fieldInfo.value);\n        }\n        else {\n            this.owner.editorModule.updateFormField(field, fieldInfo.value);\n        }\n    };\n    BaseHistoryInfo.prototype.revertBookmark = function () {\n        var bookmarkInfo = this.removedNodes[0];\n        var bookmark = bookmarkInfo.bookmark;\n        if (this.editorHistory.isUndoing) {\n            var markerData = this.owner.editorModule.getMarkerData(bookmark);\n            this.documentHelper.bookmarks.add(bookmark.name, bookmark);\n            this.markerData.push(markerData);\n            bookmark.line.children.splice(bookmarkInfo.startIndex, 0, bookmark);\n            var previousNode = bookmark.previousNode;\n            if (previousNode instanceof FieldElementBox && !isNullOrUndefined(previousNode.formFieldData)) {\n                previousNode.formFieldData.name = bookmark.name;\n            }\n            this.markerData.push(markerData);\n            bookmark.reference.line.children.splice(bookmarkInfo.endIndex, 0, bookmark.reference);\n            this.editorHistory.recordChanges(this);\n            if (this.owner.documentEditorSettings.showBookmarks == true) {\n                this.viewer.updateScrollBars();\n            }\n            this.owner.editorModule.fireContentChange();\n        }\n        else {\n            this.owner.editorModule.deleteBookmarkInternal(bookmark);\n            this.editorHistory.undoStack.push(this);\n        }\n    };\n    BaseHistoryInfo.prototype.revertComment = function () {\n        var editPosition = this.insertPosition;\n        var comment = this.removedNodes[0];\n        var insert = false;\n        if (this.action === 'ResolveComment') {\n            this.editorHistory.currentBaseHistoryInfo = this;\n            this.owner.editorModule.resolveOrReopenComment(comment, !comment.isResolved);\n            return;\n        }\n        if (this.action === 'EditComment') {\n            var modifiedCommentObject = this.modifiedProperties[0];\n            this.editorHistory.currentBaseHistoryInfo = this;\n            var commentView = this.owner.commentReviewPane.commentPane.comments.get(comment);\n            commentView.commentText.innerText = modifiedCommentObject.text;\n            modifiedCommentObject.text = comment.text;\n            comment.text = commentView.commentText.innerText;\n            this.owner.editorHistoryModule.updateHistory();\n            this.owner.fireContentChange();\n            return;\n        }\n        if (this.action === 'InsertCommentWidget') {\n            insert = (this.editorHistory.isRedoing);\n        }\n        else if (this.action === 'DeleteCommentWidget') {\n            insert = (this.editorHistory.isUndoing);\n        }\n        if (insert) {\n            if (comment) {\n                this.insertedElement = comment.clone();\n                if (comment.isReply) {\n                    this.owner.editorModule.addReplyComment(comment, this.insertPosition);\n                }\n                else {\n                    this.owner.editorModule.addCommentWidget(comment, false, true, true);\n                }\n            }\n        }\n        else {\n            var commentElement = this.owner.editorModule.getCommentElementBox(editPosition);\n            this.owner.editorModule.deleteCommentWidget(commentElement);\n        }\n    };\n    BaseHistoryInfo.prototype.revertEditRangeRegion = function () {\n        var editRangeInfo = this.removedNodes[0];\n        var editStart = editRangeInfo.editStart;\n        if (this.editorHistory.isUndoing) {\n            var user = editStart.user === '' ? editStart.group : editStart.user;\n            this.owner.editorModule.updateRangeCollection(editStart, user);\n            this.markerData.push(this.owner.editorModule.getMarkerData(editStart));\n            this.markerData.push(this.owner.editorModule.getMarkerData(editStart.editRangeEnd));\n            editStart.line.children.splice(editRangeInfo.startIndex, 0, editStart);\n            editStart.editRangeEnd.line.children.splice(editRangeInfo.endIndex, 0, editStart.editRangeEnd);\n            this.editorHistory.recordChanges(this);\n        }\n        else {\n            this.owner.editorModule.removeUserRestrictionsInternal(editStart);\n            this.editorHistory.undoStack.push(this);\n        }\n        this.owner.editorModule.fireContentChange();\n    };\n    /* eslint-disable  */\n    BaseHistoryInfo.prototype.revert = function () {\n        if (this.action === 'FormTextFormat') {\n            this.revertFormTextFormat();\n            return;\n        }\n        if (this.action === 'UpdateFormField') {\n            this.revertFormField();\n            return;\n        }\n        if (this.action === 'DeleteBookmark') {\n            this.revertBookmark();\n            return;\n        }\n        if (this.action === 'RemoveEditRange') {\n            this.revertEditRangeRegion();\n            return;\n        }\n        if (this.action === 'InsertCommentWidget' || this.action === 'DeleteCommentWidget' || this.action === 'ResolveComment' || this.action === 'EditComment') {\n            this.revertComment();\n            return;\n        }\n        if (this.action === 'ListFormat' && this.owner.editorModule.listNumberFormat !== '') {\n            var abstractList = this.documentHelper.lists[0].abstractList.levels[this.owner.editorModule.listLevelNumber];\n            var currentListLevelPattern = abstractList.listLevelPattern;\n            var currentNUmberFormat = abstractList.numberFormat;\n            abstractList.listLevelPattern = this.owner.editorModule.listLevelPattern;\n            abstractList.numberFormat = this.owner.editorModule.listNumberFormat;\n            this.owner.editorModule.listLevelPattern = currentListLevelPattern;\n            this.owner.editorModule.listNumberFormat = currentNUmberFormat;\n        }\n        this.owner.isShiftingEnabled = true;\n        var selectionStartTextPosition = undefined;\n        var selectionEndTextPosition = undefined;\n        var start = this.selectionStart;\n        var end = this.selectionEnd;\n        this.collabStart = this.selectionStart;\n        this.collabEnd = this.selectionEnd;\n        if (this.owner.enableCollaborativeEditing) {\n            if (!isNullOrUndefined(this.insertPosition)) {\n                this.insertIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.insertPosition);\n            }\n            this.startIndex = this.insertIndex;\n            if (!isNullOrUndefined(this.endPosition)) {\n                var startPosition = this.owner.selection.getTextPosBasedOnLogicalIndex(this.insertPosition);\n                var endPosition = this.owner.selection.getTextPosBasedOnLogicalIndex(this.endPosition);\n                this.updateCollaborativeSelection(startPosition, endPosition);\n            }\n            this.startIndex = this.insertIndex;\n        }\n        var isForwardSelection = TextPosition.isForwardSelection(start, end);\n        if (this.modifiedProperties.length > 0 || this.action === 'Selection'\n            || this.action === 'ClearCharacterFormat' || this.action === 'ClearParagraphFormat') {\n            selectionStartTextPosition = !isNullOrUndefined(start) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start) : undefined;\n            selectionEndTextPosition = !isNullOrUndefined(end) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end) : undefined;\n            this.revertModifiedProperties(selectionStartTextPosition, selectionEndTextPosition);\n        }\n        else {\n            var sel = this.owner.selectionModule;\n            var deletedNodes = this.removedNodes;\n            if (this.removedNodes.length > 0) {\n                if (this.action === 'InsertTable' && this.editorHistory.isRedoing) {\n                    for (var i = 0; i < this.removedNodes.length; i++) {\n                        this.insertedNodes.push(this.removedNodes[parseInt(i.toString(), 10)]);\n                    }\n                }\n                this.isRemovedNodes = true;\n            }\n            else {\n                this.isRemovedNodes = false;\n            }\n            this.removedNodesIn = [];\n            if (isNullOrUndefined(this.endPosition)) {\n                this.endPosition = this.insertPosition;\n            }\n            var isForward = TextPosition.isForwardSelection(this.insertPosition, this.endPosition);\n            var insertTextPosition = sel.getTextPosBasedOnLogicalIndex(isForward ? this.insertPosition : this.endPosition);\n            var endTextPosition = sel.getTextPosBasedOnLogicalIndex(isForward ? this.endPosition : this.insertPosition);\n            // Set the endRevisionLogicalIndex based on undo stack value when the selection contains a table with the above paragraph (undoing).\n            if (this.action === 'RemoveRowTrack' && this.editorHistory.isUndoing) {\n                this.owner.selectionModule.select(this.selectionEnd, this.selectionEnd);\n                if (this.owner.selectionModule.start.paragraph.isInsideTable) {\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n            }\n            if (this.editorHistory.isUndoing) {\n                if (this.lastElementRevision && isNullOrUndefined(this.isAcceptOrReject) && deletedNodes.length > 0 && deletedNodes[0] instanceof ParagraphWidget && deletedNodes[0].isEmpty()) {\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n                else if (this.action === 'Delete' && this.editorHistory.currentHistoryInfo\n                    && this.editorHistory.currentHistoryInfo.action === 'RemoveHyperlink'\n                    && this.lastElementRevision instanceof FieldElementBox) {\n                    // Bug 873011: Updated the selection for delete operation on \"RemoveHyperlink\" undo case.\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n                else if (this.lastElementRevision && isNullOrUndefined(this.endRevisionLogicalIndex)) {\n                    this.updateEndRevisionInfo();\n                }\n                else if (this.action === 'RemoveRowTrack') {\n                    this.endRevisionLogicalIndex = this.selectionEnd;\n                }\n            }\n            if (this.action === 'ClearRevisions') {\n                // Bug 873011: Handled the separate undo revision for field begin and field end for \"ClearRevisions\" action on hyperlink undo.\n                var fieldBegin = sel.getHyperlinkField();\n                if (this.isHyperlinkField && !isNullOrUndefined(fieldBegin)) {\n                    var offset = fieldBegin.fieldSeparator.line.getOffset(fieldBegin.fieldSeparator, 1);\n                    endTextPosition.setPositionParagraph(fieldBegin.fieldSeparator.line, offset);\n                    this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n                    var fieldEnd = fieldBegin.fieldEnd;\n                    insertTextPosition.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 0));\n                    endTextPosition.setPositionParagraph(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, 1));\n                    this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n                }\n                else {\n                    this.undoRevisionForElements(insertTextPosition, endTextPosition, deletedNodes[deletedNodes.length - 1]);\n                }\n                this.removedNodes.push(deletedNodes[deletedNodes.length - 1]);\n                deletedNodes = [];\n            }\n            if (this.action === 'Uppercase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'Lowercase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'CapitalizeEachWord') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'SentenceCase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (this.action === 'ToggleCase') {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n                this.editorHistory.currentBaseHistoryInfo = this;\n                var editModule = this.owner.editorModule;\n                editModule.changeSelectedTextCase(sel, insertTextPosition, endTextPosition, this.action.toString(), deletedNodes);\n                editModule.reLayout(sel);\n                return;\n            }\n            if (insertTextPosition.isAtSamePosition(endTextPosition)) {\n                sel.selectContent(insertTextPosition, true);\n            }\n            else {\n                sel.selectPosition(insertTextPosition, endTextPosition);\n            }\n            if (this.action === 'InsertHyperlink' && this.editorHistory.isRedoing) {\n                var fieldBegin = this.owner.selectionModule.getHyperlinkField();\n                if (!isNullOrUndefined(fieldBegin)) {\n                    var offset = (fieldBegin.line).getOffset(fieldBegin, 0);\n                    insertTextPosition.setPositionParagraph(fieldBegin.line, offset);\n                    this.owner.selectionModule.start.setPositionInternal(insertTextPosition);\n                    offset = fieldBegin.fieldEnd.line.getOffset(fieldBegin.fieldEnd, 1);\n                    endTextPosition.setPositionParagraph(fieldBegin.fieldEnd.line, offset);\n                }\n            }\n            this.editorHistory.currentBaseHistoryInfo = this;\n            this.selectionStart = this.insertPosition;\n            this.insertPosition = undefined;\n            this.selectionEnd = this.endPosition;\n            this.endPosition = undefined;\n            // Use this property to skip deletion if already selected content deleted case.\n            var isRemoveContent = false;\n            // Use this property to delete table or cell based on history action.\n            var isDeletecell = false;\n            if (this.action === 'DeleteCells') {\n                isDeletecell = true;\n            }\n            if (this.endRevisionLogicalIndex && deletedNodes.length > 0) {\n                var currentPosition = sel.getTextPosBasedOnLogicalIndex(this.endRevisionLogicalIndex);\n                if (this.editorHistory.isUndoing || (this.editorHistory.isRedoing && insertTextPosition.isAtSamePosition(endTextPosition))) {\n                    sel.selectPosition(insertTextPosition, currentPosition);\n                }\n                this.collabEnd = this.endRevisionLogicalIndex;\n                if (this.owner.enableCollaborativeEditing) {\n                    this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentPosition);\n                    this.endIndex += this.paraInclude(currentPosition);\n                }\n                if (this.editorHistory.isUndoing || (this.editorHistory.isRedoing && !this.owner.selectionModule.isEmpty && deletedNodes.length > 0)) {\n                    this.owner.editorModule.deleteSelectedContents(sel, true, isDeletecell);\n                    isRemoveContent = true;\n                }\n            }\n            if (!insertTextPosition.isAtSamePosition(endTextPosition) && !isRemoveContent) {\n                isRemoveContent = this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'ClearCells'\n                    || this.action === 'DeleteCells';\n                var skipDelete = (deletedNodes.length > 0 && this.action === 'ParaMarkTrack') || this.action === 'ClearRevisions' || this.action === 'AcceptTOC';\n                if (!(isRemoveContent) && this.action !== 'MergeCells' && this.action !== 'InsertRowAbove'\n                    && this.action !== 'InsertRowBelow' && this.action !== 'InsertColumnLeft'\n                    && this.action !== 'InsertColumnRight' && this.action !== 'Borders'\n                    && this.action !== 'DeleteTable' && this.action !== 'DeleteColumn' && this.action !== 'DeleteRow') {\n                    sel.end.setPositionInternal(endTextPosition);\n                    if (!this.owner.selectionModule.isEmpty && !skipDelete) {\n                        if (this.editorHistory.isRedoing && this.action !== 'Accept Change' && this.action !== 'ParaMarkTrack' &&\n                            this.action !== 'ParaMarkReject' && this.action !== 'RemoveRowTrack') {\n                            this.owner.editorModule.removeSelectedContents(sel);\n                        }\n                        else {\n                            // Bug 873011: Handled the separate deletion for field begin and field end for \"Accept Change\" action on hyperlink redo.\n                            var fieldBegin = sel.getHyperlinkField();\n                            if (this.isHyperlinkField && !isNullOrUndefined(fieldBegin)\n                                && this.editorHistory.isRedoing && this.action === 'Accept Change') {\n                                var fieldEnd = fieldBegin.fieldEnd;\n                                sel.start.setPositionParagraph(fieldBegin.line, (fieldBegin.line).getOffset(fieldBegin, 0));\n                                sel.end.setPositionParagraph(fieldBegin.fieldSeparator.line, (fieldBegin.fieldSeparator.line).getOffset(fieldBegin.fieldSeparator, 1));\n                                this.owner.editorModule.deleteSelectedContents(sel, true);\n                                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                                    this.editorHistory.currentBaseHistoryInfo.removedNodes.reverse();\n                                }\n                                sel.start.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 0));\n                                sel.end.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 1));\n                                this.owner.editorModule.deleteSelectedContents(sel, true);\n                                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                                    this.editorHistory.currentBaseHistoryInfo.removedNodes.reverse();\n                                }\n                            }\n                            else {\n                                this.owner.editorModule.deleteSelectedContents(sel, true);\n                            }\n                        }\n                        if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo) &&\n                            this.editorHistory.currentHistoryInfo.action === 'PageBreak' && this.documentHelper.blockToShift) {\n                            this.documentHelper.layout.shiftLayoutedItems(false);\n                        }\n                    }\n                }\n            }\n            else if (this.action === 'SectionBreakContinuous' && insertTextPosition && this.editorHistory.isUndoing) {\n                if (insertTextPosition.offset === 0 && !isNullOrUndefined(insertTextPosition.paragraph.previousRenderedWidget) && insertTextPosition.paragraph.previousRenderedWidget instanceof ParagraphWidget && insertTextPosition.paragraph.previousRenderedWidget.isEndsWithPageBreak && insertTextPosition.paragraph.containerWidget instanceof BodyWidget && insertTextPosition.currentWidget === insertTextPosition.currentWidget.paragraph.firstChild && insertTextPosition.paragraph.containerWidget.sectionFormat.breakCode === 'NoBreak') {\n                    var section = insertTextPosition.paragraph.previousRenderedWidget.containerWidget;\n                    this.owner.editorModule.combineSectionInternal(this.owner.selectionModule, section, insertTextPosition.paragraph.containerWidget);\n                    this.owner.editorModule.layoutWholeDocument();\n                }\n            }\n            else {\n                isRemoveContent = false;\n                if (!insertTextPosition.isAtSamePosition(endTextPosition)) {\n                    isRemoveContent = this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'ClearCells'\n                        || this.action === 'DeleteCells';\n                }\n            }\n            var isRedoAction = (this.editorHistory.isRedoing && !isRemoveContent);\n            isRemoveContent = this.lastElementRevision ? false : isRemoveContent;\n            this.revertModifiedNodes(deletedNodes, isRedoAction, isForwardSelection ? start : end, start === end, isForwardSelection ? end : start);\n            if (isRemoveContent) {\n                this.removeContent(insertTextPosition, endTextPosition, isDeletecell);\n            }\n            //this.owner.editorModule.reLayout(this.documentHelper.selection);\n        }\n        var isSelectionChanged = false;\n        var updateSelection = false;\n        if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo) && (this.editorHistory.currentHistoryInfo.action === 'Reject All' || this.editorHistory.currentHistoryInfo.action === 'Accept All' || this.editorHistory.currentHistoryInfo.action === 'Paste')) {\n            updateSelection = true;\n        }\n        if (this.action !== 'TrackingPageBreak' && ((this.editorHistory.isUndoing || this.endRevisionLogicalIndex || this.action === 'RemoveRowTrack' || updateSelection) && isNullOrUndefined(this.editorHistory.currentHistoryInfo) || updateSelection) ||\n            ((this.action === 'InsertRowAbove' || this.action === 'Borders' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft' || this.action === 'InsertColumnRight' || this.action === 'Accept Change' || this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') && (this.editorHistory.isRedoing\n                || this.editorHistory.currentHistoryInfo.action === 'Paste'))) {\n            if (this.action === 'RemoveRowTrack' && this.editorHistory.isRedoing) {\n                selectionStartTextPosition = !isNullOrUndefined(this.selectionStart) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionStart) : undefined;\n                selectionEndTextPosition = !isNullOrUndefined(this.selectionEnd) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionEnd) : undefined;\n            }\n            else {\n                selectionStartTextPosition = !isNullOrUndefined(start) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(start) : undefined;\n                selectionEndTextPosition = !isNullOrUndefined(end) ? this.owner.selectionModule.getTextPosBasedOnLogicalIndex(end) : undefined;\n            }\n            if (this.action !== 'ModifyStyle') {\n                this.owner.selectionModule.selectRange(selectionStartTextPosition, selectionEndTextPosition);\n            }\n            this.documentHelper.updateFocus();\n            isSelectionChanged = true;\n        }\n        this.owner.trackChangesPane.isTrackingPageBreak = false;\n        var index = this.insertIndex;\n        // Updates insert position of history info instance.\n        this.insertPosition = start;\n        this.endPosition = end;\n        if (this.action === 'InsertHyperlink') {\n            this.insertIndex = index;\n        }\n        if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo) &&\n            (this.editorHistory.currentHistoryInfo.action === 'Accept All'\n                || this.editorHistory.currentHistoryInfo.action === 'Reject All' || this.editorHistory.currentHistoryInfo.action === 'RemoveComment')) {\n            if (this.owner.documentHelper.blockToShift) {\n                this.owner.documentHelper.layout.shiftLayoutedItems(false);\n            }\n        }\n        this.owner.editorModule.reLayout(this.owner.selectionModule, this.owner.selectionModule.isEmpty);\n        if (this.editorHistory.isUndoing && this.action === 'SectionBreak') {\n            this.owner.editorModule.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.owner.editorModule.layoutWholeDocument();\n            this.owner.editorModule.isSkipOperationsBuild = false;\n        }\n        if (isSelectionChanged) {\n            this.documentHelper.scrollToPosition(this.owner.selectionModule.start, this.owner.selectionModule.end);\n        }\n        this.highlightListText();\n    };\n    BaseHistoryInfo.prototype.highlightListText = function () {\n        if (!isNullOrUndefined(this.editorHistory.currentHistoryInfo)) {\n            if (this.action === 'ListCharacterFormat' || (this.editorHistory.currentHistoryInfo.action === 'ListSelect' && this.action === 'ListFormat')) {\n                var selectionStartTextPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.selectionStart);\n                var widget = selectionStartTextPosition.currentWidget;\n                this.documentHelper.selection.highlightListText(widget);\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.removeContent = function (insertTextPosition, endTextPosition, isDeletecell) {\n        //If the base parent of the insert text position and end text position is null \n        //then the paragraphs already removed.\n        //Example scenario: In table editing that is delete cells operation \n        // we will backed up the entire table ad it will be replaced on undo operation.\n        //At that time if the positions are in table \n        //which is already replaced in undo (revert modified nodes method) then the base parent of the paragraph will be null.\n        //So again, selecting the content and deleting is unnecessary\n        // and it will cause improper position updates and null reference exceptions. \n        if ((!isNullOrUndefined(insertTextPosition.paragraph.containerWidget) &&\n            insertTextPosition.paragraph.containerWidget instanceof BodyWidget &&\n            (!isNullOrUndefined(endTextPosition.paragraph.containerWidget)\n                && endTextPosition.paragraph.containerWidget instanceof BodyWidget))\n            || (!isNullOrUndefined(insertTextPosition.paragraph.containerWidget)\n                && !isNullOrUndefined(endTextPosition.paragraph.containerWidget)\n                && insertTextPosition.paragraph.containerWidget instanceof TableCellWidget\n                && endTextPosition.paragraph.containerWidget instanceof TableCellWidget\n                && !isNullOrUndefined(insertTextPosition.paragraph.bodyWidget)) ||\n            (!isNullOrUndefined(insertTextPosition.paragraph.containerWidget)\n                && !isNullOrUndefined(endTextPosition.paragraph.containerWidget)\n                && insertTextPosition.paragraph.containerWidget instanceof TextFrame\n                && endTextPosition.paragraph.containerWidget instanceof TextFrame)) {\n            //Removes if any empty paragraph is added while delete.\n            this.owner.selectionModule.selectRange(insertTextPosition, endTextPosition);\n            this.documentHelper.updateFocus();\n            var isDelete = false;\n            if (this.action === 'BackSpace' || this.action === 'Uppercase' || this.action === 'RemoveRowTrack') {\n                isDelete = true;\n            }\n            this.owner.editorModule.deleteSelectedContents(this.owner.selectionModule, isDelete, isDeletecell);\n        }\n    };\n    BaseHistoryInfo.prototype.updateEndRevisionInfo = function () {\n        this.lastElementRevision = this.checkAdjacentNodeForMarkedRevision(this.lastElementRevision);\n        var currentRevision = this.retrieveEndPosition(this.lastElementRevision);\n        var blockInfo = this.owner.selectionModule.getParagraphInfo(currentRevision);\n        var isLastChild = (blockInfo.paragraph == this.owner.editor.getLastParaForBodywidgetCollection(blockInfo.paragraph));\n        if (blockInfo.paragraph.isInsideTable && blockInfo.paragraph == this.owner.selection.getLastParagraph(blockInfo.paragraph.associatedCell)) {\n            isLastChild = true;\n        }\n        if (blockInfo.paragraph.getLength() == blockInfo.offset && !isLastChild) {\n            blockInfo.offset++;\n        }\n        this.endRevisionLogicalIndex = this.owner.selectionModule.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        this.lastElementRevision.isMarkedForRevision = false;\n    };\n    BaseHistoryInfo.prototype.retrieveEndPosition = function (elementBox) {\n        var endPosition = new TextPosition(this.owner);\n        var offset = elementBox.line.getOffset(elementBox, 0) + elementBox.length;\n        endPosition.setPositionFromLine(elementBox.line, offset);\n        return endPosition;\n    };\n    /**\n     * Method to retrieve exact spitted node which is marked as last available element.\n     *\n     * @param {ElementBox} elementBox - Specifies the element box\n     * @returns {ElementBox} - Returns element box\n     */\n    BaseHistoryInfo.prototype.checkAdjacentNodeForMarkedRevision = function (elementBox) {\n        var nextItem = elementBox.nextNode;\n        var markedNode;\n        while (!isNullOrUndefined(nextItem) && nextItem.isMarkedForRevision) {\n            markedNode = nextItem;\n            nextItem = nextItem.nextNode;\n        }\n        return !isNullOrUndefined(markedNode) ? markedNode : elementBox;\n    };\n    BaseHistoryInfo.prototype.revertModifiedProperties = function (start, end) {\n        if (this.action === 'CellFormat' || this.action === 'CellOptions' || this.action === 'TableOptions') {\n            this.owner.isShiftingEnabled = false;\n        }\n        if (!isNullOrUndefined(start) && !isNullOrUndefined(end)) {\n            this.owner.selectionModule.selectRange(start, end);\n        }\n        this.documentHelper.updateFocus();\n        if (this.action === 'RowResizing' || this.action === 'CellResizing') {\n            this.revertResizing();\n        }\n        else if (this.action === 'CellOptions' || this.action === 'TableOptions') {\n            this.revertTableDialogProperties(this.action);\n        }\n        else if (this.action !== 'Selection') {\n            this.revertProperties();\n        }\n    };\n    // Redoes the Action\n    BaseHistoryInfo.prototype.redoAction = function () {\n        var editor = this.owner.editorModule;\n        this.action = this.action;\n        switch (this.action) {\n            case 'BackSpace':\n                editor.singleBackspace(this.owner.selectionModule, true);\n                break;\n            case 'Delete':\n                editor.singleDelete(this.owner.selectionModule, true);\n                break;\n            case 'DeleteTable':\n                editor.deleteTable();\n                break;\n            case 'DeleteColumn':\n                editor.deleteColumn();\n                break;\n            case 'DeleteRow':\n                editor.deleteRow();\n                break;\n            case 'MergeCells':\n                editor.mergeSelectedCellsInTable();\n                break;\n            case 'InsertRowAbove':\n                editor.insertRow(true);\n                break;\n            case 'InsertRowBelow':\n                editor.insertRow(false);\n                break;\n            case 'InsertColumnLeft':\n                editor.insertColumn(true);\n                break;\n            case 'InsertColumnRight':\n                editor.insertColumn(true);\n                break;\n            case 'SectionBreak':\n                editor.insertSection(this.owner.selectionModule, true);\n                break;\n            case 'SectionBreakContinuous':\n                editor.insertSection(this.owner.selectionModule, true, undefined, true);\n                break;\n            case 'TableAutoFitToContents':\n                editor.autoFitTable('FitToContents');\n                break;\n            case 'TableAutoFitToWindow':\n                editor.autoFitTable('FitToWindow');\n                break;\n            case 'TableFixedColumnWidth':\n                editor.autoFitTable('FixedColumnWidth');\n                break;\n            case 'RemoveRowTrack':\n                this.owner.selectionModule.handleAcceptReject(true);\n                break;\n        }\n    };\n    BaseHistoryInfo.prototype.revertModifiedNodes = function (deletedNodes, isRedoAction, start, isEmptySelection, end) {\n        if (isRedoAction && (this.action === 'BackSpace' || this.action === 'Delete' || this.action === 'DeleteTable'\n            || this.action === 'DeleteColumn' || this.action === 'DeleteRow' || this.action === 'InsertRowAbove' ||\n            this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft' || this.action === 'InsertColumnRight'\n            || this.action === 'MergeCells' || this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous' || this.action === 'TableAutoFitToContents' ||\n            this.action === 'TableAutoFitToWindow' || this.action === 'TableFixedColumnWidth' || this.action === 'PasteColumn' || this.action === 'PasteOverwrite' || this.action === 'PasteNested')) {\n            this.redoAction();\n            if (this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous') {\n                return;\n            }\n        }\n        if (deletedNodes.length > 0) {\n            //tslint:disable-next-line:max-line-length\n            if ((this.editorHistory.isUndoing && (this.action === 'RemoveRowTrack' || this.action === 'DeleteCells' ||\n                this.action === 'DeleteColumn' || this.action === 'DeleteRow' || this.action === 'MergeCells'))\n                || (this.action === 'InsertRowAbove' || this.action === 'InsertRowBelow' || this.action === 'InsertColumnLeft'\n                    //tslint:disable-next-line:max-line-length\n                    || this.action === 'ClearCells' || this.action === 'InsertColumnRight' || this.action === 'Borders' || this.action === 'TableAutoFitToContents' || this.action === 'TableAutoFitToWindow' ||\n                    this.action === 'TableFixedColumnWidth' || this.action === 'RemoveRowTrack' || this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested')) {\n                var insertIndex = this.selectionStart;\n                var block = this.owner.editorModule.getBlock({ index: insertIndex }).node;\n                var lastNode = deletedNodes[deletedNodes.length - 1];\n                if ((block instanceof TableWidget || block.previousRenderedWidget instanceof TableWidget || block.isInsideTable)\n                    && lastNode instanceof TableWidget) {\n                    if (block instanceof ParagraphWidget && !block.isInsideTable) {\n                        block = block.previousRenderedWidget;\n                    }\n                    else if (block instanceof ParagraphWidget && block.isInsideTable) {\n                        block = block.associatedCell.ownerTable;\n                    }\n                    block = block.combineWidget(this.viewer);\n                    if (this.owner.enableCollaborativeEditing) {\n                        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, block).position;\n                        this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, block, 0, { done: false }, true, undefined, undefined);\n                        var operation = this.getDeleteOperation('Delete');\n                        if (this.owner.enableTrackChanges) {\n                            if (isNullOrUndefined(operation.markerData)) {\n                                operation.markerData = {};\n                            }\n                            operation.markerData.isSkipTracking = true;\n                        }\n                        this.cellOperation.push(operation);\n                    }\n                    this.owner.editorModule.insertTableInternal(block, lastNode, false);\n                    if (this.action === 'PasteColumn' || this.action === 'PasteRow' || this.action === 'PasteOverwrite' || this.action === 'PasteNested') {\n                        this.removedNodes.push(block);\n                    }\n                    else {\n                        deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n                    }\n                }\n                else if (lastNode instanceof TableWidget && !(this.action === 'RemoveRowTrack')) {\n                    this.owner.editorModule.insertBlock(lastNode);\n                }\n                else {\n                    this.insertRemovedNodes(deletedNodes, deletedNodes[deletedNodes.length - 1]);\n                }\n            }\n            else {\n                var initialStart = start;\n                var block = this.owner.editorModule.getBlock({ index: initialStart }).node;\n                // initialStart = blockObj.position;\n                if (deletedNodes.length > 0 && (this.action === 'BackSpace' && isEmptySelection\n                    || (!(block instanceof TableWidget) && !(block instanceof HeaderFooterWidget)))) {\n                    var lastNode = deletedNodes[0];\n                    if (lastNode instanceof BodyWidget && !isNullOrUndefined(deletedNodes[1])) {\n                        lastNode = deletedNodes[1];\n                    }\n                    if (this.action === 'TrackingPageBreak' || ((this.action === 'SectionBreak' || this.action === 'SectionBreakContinuous') && lastNode instanceof BodyWidget ||\n                        !isNullOrUndefined(this.editorHistory.currentHistoryInfo) &&\n                            this.editorHistory.currentHistoryInfo.action === 'PageBreak')) {\n                        lastNode = deletedNodes[1];\n                    }\n                    if (lastNode instanceof WCharacterFormat) {\n                        var newParagraph = new ParagraphWidget();\n                        newParagraph.characterFormat = lastNode;\n                        this.owner.editorModule.insertNewParagraphWidget(newParagraph, true);\n                        deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n                        block = newParagraph;\n                    }\n                    var skipinsert = false;\n                    if (!isNullOrUndefined(this.isAcceptOrReject)) {\n                        skipinsert = true;\n                        if (!isNullOrUndefined(this.owner.selectionModule.start.paragraph.nextRenderedWidget) && this.owner.selectionModule.start.paragraph.nextRenderedWidget instanceof TableWidget) {\n                            skipinsert = false;\n                        }\n                    }\n                    if (lastNode instanceof ParagraphWidget && this.owner.selectionModule.start.offset > 0 && !skipinsert) {\n                        this.owner.editorModule.insertNewParagraphWidget(lastNode, true);\n                        if (lastNode.characterFormat.removedIds.length > 0) {\n                            this.owner.editorModule.constructRevisionFromID(lastNode.characterFormat, undefined);\n                        }\n                        deletedNodes.splice(deletedNodes.indexOf(lastNode), 1);\n                        if (isNullOrUndefined(block)) {\n                            var nextBlock = this.documentHelper.selection.getNextParagraphBlock(lastNode.getSplitWidgets().pop());\n                            this.owner.selectionModule.getNextRenderedBlock(lastNode);\n                            var startParagraph = this.owner.selectionModule.start.paragraph;\n                            if (nextBlock && startParagraph && startParagraph.bodyWidget instanceof BodyWidget\n                                && !startParagraph.isInsideTable && !this.owner.selectionModule.isinEndnote && !this.owner.selectionModule.isinFootnote\n                                && !startParagraph.bodyWidget.equals(nextBlock.bodyWidget)) {\n                                nextBlock = undefined;\n                            }\n                            if (isNullOrUndefined(nextBlock)) {\n                                //Sets the selection as starting of last paragraph.\n                                this.owner.selectionModule.selectParagraphInternal(lastNode, true);\n                            }\n                        }\n                    }\n                    if (lastNode instanceof TableWidget && this.owner.selectionModule.start.offset > 0) {\n                        var firstBlock = deletedNodes[deletedNodes.length - 1];\n                        if (firstBlock instanceof ParagraphWidget) {\n                            this.owner.editorModule.insertNewParagraphWidget(firstBlock, true);\n                            deletedNodes.splice(deletedNodes.indexOf(firstBlock), 1);\n                            if (isNullOrUndefined(block)) {\n                                var nextBlock = this.documentHelper.selection.getNextParagraphBlock(firstBlock.getSplitWidgets().pop());\n                                if (isNullOrUndefined(nextBlock)) {\n                                    //Sets the selection as starting of last paragraph.\n                                    this.owner.selectionModule.selectParagraphInternal(firstBlock, true);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (deletedNodes.length > 0) {\n                    var firstNode = deletedNodes[deletedNodes.length - 1];\n                    if (block instanceof TableWidget) {\n                        block = block.combineWidget(this.viewer);\n                        if (firstNode instanceof TableWidget) {\n                            if (this.owner.enableCollaborativeEditing) {\n                                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                                var startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, block).position;\n                                var endIndex = startIndex + this.owner.selectionModule.getBlockLength(undefined, block, 0, { done: false }, true, undefined, undefined);\n                                var operation = this.getDeleteOperation('Delete');\n                                operation.offset = startIndex;\n                                operation.length = endIndex - startIndex;\n                                this.cellOperation.push(operation);\n                            }\n                            this.owner.editorModule.insertTableInternal(block, firstNode, true);\n                            deletedNodes.splice(deletedNodes.indexOf(firstNode), 1);\n                            this.insertPosition = start;\n                            var nextWidget = firstNode.getSplitWidgets().pop();\n                            if (nextWidget.nextRenderedWidget instanceof TableWidget) {\n                                block = nextWidget.nextRenderedWidget;\n                            }\n                            else {\n                                initialStart = start;\n                                block = this.owner.editorModule.getBlock({ index: initialStart }).node;\n                            }\n                        }\n                    }\n                    //Checks if first node is paragraph and current insert position is paragraph end.\n                    if (firstNode instanceof ParagraphWidget && this.owner.selectionModule.start.offset > 0\n                        && this.owner.selectionModule.start.offset === this.owner.selectionModule.getLineLength(this.owner.selectionModule.start.paragraph.lastChild)) {\n                        var editor = this.owner.editorModule;\n                        editor.insertNewParagraphWidget(firstNode, false);\n                        if (firstNode.characterFormat.removedIds.length > 0) {\n                            this.owner.editorModule.constructRevisionFromID(firstNode.characterFormat, undefined);\n                        }\n                        deletedNodes.splice(deletedNodes.indexOf(firstNode), 1);\n                        //Removes the intermediate empty paragraph instance.\n                        if (this.action !== 'Paste') {\n                            editor.removeBlock(this.owner.selectionModule.start.paragraph);\n                        }\n                        var paragraph = this.documentHelper.selection.getNextParagraphBlock(firstNode.getSplitWidgets().pop());\n                        if (!isNullOrUndefined(paragraph)) {\n                            this.owner.selectionModule.selectParagraphInternal(paragraph, true);\n                        }\n                        else if (!isNullOrUndefined(firstNode)) {\n                            this.owner.selectionModule.selectParagraphInternal(firstNode, false);\n                        }\n                    }\n                    else if (deletedNodes[0] instanceof TableWidget && deletedNodes.length !== 1) {\n                        var nextNode = deletedNodes[1];\n                        if (nextNode instanceof ParagraphWidget && nextNode.isEmpty()) {\n                            deletedNodes.splice(deletedNodes.indexOf(nextNode), 1);\n                        }\n                    }\n                }\n                if (deletedNodes.length > 0) {\n                    if (block instanceof TableWidget) {\n                        block = block.combineWidget(this.viewer);\n                    }\n                    this.insertRemovedNodes(deletedNodes, block, end);\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.insertRemovedNodes = function (deletedNodes, block, endIndex) {\n        // Use this property to relayout whole document (after complete all insertion intead of each section insertion) when insert section (this functionality already added in insertSection API).\n        var isRelayout = false;\n        for (var i = deletedNodes.length - 1, index = 0; i > -1; i--) {\n            var node = deletedNodes[i];\n            if (this.isHyperlinkField && !isNullOrUndefined(endIndex) && node instanceof FieldElementBox && node.fieldType === 1) {\n                // Bug 873011: Updated the selection for field end element insertion on \"Accept Change\" undo case.\n                this.owner.selectionModule.start.setPositionInternal(this.owner.selectionModule.getTextPosBasedOnLogicalIndex(endIndex));\n                this.owner.selectionModule.end.setPositionInternal(this.owner.selectionModule.start);\n            }\n            if (node instanceof ElementBox) {\n                this.owner.editorModule.insertInlineInSelection(this.owner.selectionModule, node);\n            }\n            else if (node instanceof ParagraphWidget && node.childWidgets === undefined) {\n                this.owner.selection.moveToNextParagraph();\n            }\n            else if (node instanceof BlockWidget) {\n                if (node instanceof TableRowWidget) {\n                    if (block instanceof TableWidget) {\n                        block.childWidgets.splice(index, 0, node);\n                        this.owner.editorModule.updateNextBlocksIndex(node, true);\n                        if (i === 0 || !(deletedNodes[i - 1] instanceof TableRowWidget)) {\n                            this.documentHelper.layout.layoutBodyWidgetCollection(block.index, block.containerWidget, block, false);\n                        }\n                    }\n                }\n                else if (block instanceof TableWidget && this.action !== 'RemoveRowTrack') {\n                    this.owner.editorModule.insertBlockTable(this.owner.selectionModule, node, block);\n                }\n                else {\n                    if (node instanceof ParagraphWidget && !node.isInsideTable && this.action === 'RemoveRowTrack') {\n                        this.owner.editorModule.insertNewParagraphWidget(node, false);\n                    }\n                    else if (node instanceof TableWidget && this.action === 'RemoveRowTrack') {\n                        this.owner.editorModule.insertTableInternal(node, node, false, true);\n                        if (!isNullOrUndefined(deletedNodes[i - 1]) && !isNullOrUndefined(node.nextRenderedWidget) && node.nextRenderedWidget instanceof ParagraphWidget) {\n                            this.owner.selectionModule.start.setPositionParagraph(node.nextRenderedWidget.firstChild, 0);\n                            this.owner.selectionModule.end.setPositionParagraph(node.nextRenderedWidget.firstChild, 0);\n                        }\n                    }\n                    else {\n                        this.owner.editorModule.insertBlock(node);\n                    }\n                }\n            }\n            else if (node instanceof WCharacterFormat) {\n                var insertIndex = this.selectionStart;\n                var wiget = this.owner.editorModule.getBlock({ index: insertIndex }).node;\n                if (wiget instanceof ParagraphWidget) {\n                    if (node.removedIds.length > 0) {\n                        wiget.characterFormat.removedIds = node.removedIds.slice();\n                        this.owner.editorModule.constructRevisionFromID(wiget.characterFormat, true);\n                    }\n                    else if (wiget.characterFormat.revisions.length > 0) {\n                        wiget.characterFormat = node.cloneFormat();\n                    }\n                }\n            }\n            else if (node instanceof BodyWidget) {\n                if (!isNullOrUndefined(node.removedHeaderFooters) && node.removedHeaderFooters.length !== 0) {\n                    this.owner.documentHelper.headersFooters.splice(node.sectionIndex, 0, node.removedHeaderFooters[0]);\n                    node.removedHeaderFooters = undefined;\n                }\n                isRelayout = true;\n                this.owner.editorModule.insertSection(this.owner.selectionModule, false, true, undefined, undefined, node.sectionFormat);\n            }\n            else if (typeof (node) === 'string' && this.action === 'AcceptTOC') {\n                var insertIndex = this.selectionStart;\n                var widget = this.owner.editorModule.getBlock({ index: insertIndex }).node;\n                var endWidget = this.owner.editorModule.getBlock({ index: this.selectionEnd }).node;\n                var currentRevision = this.owner.documentHelper.revisionsInternal.get(node);\n                if (this.editorHistory.isUndoing) {\n                    while (widget instanceof ParagraphWidget && widget !== endWidget) {\n                        this.owner.editorModule.insertRevisionForBlock(widget, currentRevision.revisionType, true, currentRevision);\n                        widget = this.documentHelper.selection.getNextParagraphBlock(widget.getSplitWidgets().pop());\n                    }\n                    this.owner.editorModule.insertRevisionForBlock(endWidget, currentRevision.revisionType, true, currentRevision);\n                }\n                else {\n                    while (currentRevision.range.length > 0) {\n                        var item = currentRevision.range[0];\n                        var revisionIndex = item.revisions.indexOf(currentRevision);\n                        if (revisionIndex >= 0) {\n                            item.revisions.splice(revisionIndex, 1);\n                            var rangeIndex = currentRevision.range.indexOf(item);\n                            currentRevision.range.splice(rangeIndex, 1);\n                            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                        }\n                        if (currentRevision.range.length === 0) {\n                            this.owner.revisions.remove(currentRevision);\n                        }\n                    }\n                }\n                this.owner.editorModule.addRemovedNodes(currentRevision.revisionID);\n            }\n        }\n        if (isRelayout) {\n            this.owner.editorModule.layoutWholeDocument(true);\n        }\n        deletedNodes = [];\n    };\n    BaseHistoryInfo.prototype.undoRevisionForElements = function (start, end, id) {\n        var currentPara = start.paragraph;\n        var endPara = end.paragraph;\n        var currentRevision = this.documentHelper.revisionsInternal.get(id);\n        var startoffset = this.owner.selectionModule.getParagraphInfo(start).offset;\n        var endoffset = this.owner.selectionModule.getParagraphInfo(end).offset;\n        var isSamePara = start.paragraph === end.paragraph;\n        var isSplittedWidget = false;\n        if (this.editorHistory.isUndoing) {\n            while (currentPara !== endPara) {\n                isSplittedWidget = false;\n                var endOffset = 0;\n                if (!isNullOrUndefined(currentPara.previousSplitWidget)) {\n                    startoffset = currentPara.previousSplitWidget.getLength() + 1;\n                    endOffset = currentPara.previousSplitWidget.getLength() + currentPara.getLength();\n                }\n                else {\n                    endOffset = currentPara.getLength();\n                }\n                this.owner.editorModule.applyRevisionForCurrentPara(currentPara, startoffset, endOffset, id, true);\n                //Correct the condition to get next widget instead of next widget of next splitted widget\n                currentPara = this.documentHelper.selection.getNextParagraphBlock(currentPara);\n                if (!isNullOrUndefined(currentPara) && !isNullOrUndefined(currentPara.previousRenderedWidget) && currentPara.previousRenderedWidget instanceof ParagraphWidget && currentPara.previousRenderedWidget.nextSplitWidget && currentPara === endPara) {\n                    isSplittedWidget = true;\n                }\n                if (currentPara !== endPara) {\n                    startoffset = 0;\n                }\n            }\n            if (currentPara === endPara) {\n                if (!isSamePara) {\n                    startoffset = 0;\n                }\n                // Update the startoffset to the paragraph end if next paragraph is splitted widget\n                if (isSplittedWidget) {\n                    startoffset = currentPara.previousRenderedWidget.getLength();\n                }\n                this.owner.editorModule.applyRevisionForCurrentPara(currentPara, startoffset, endoffset, id, false);\n            }\n        }\n        else {\n            while (currentRevision.range.length > 0) {\n                var item = currentRevision.range[0];\n                var revisionIndex = item.revisions.indexOf(currentRevision);\n                if (revisionIndex >= 0) {\n                    item.revisions.splice(revisionIndex, 1);\n                    var rangeIndex = currentRevision.range.indexOf(item);\n                    currentRevision.range.splice(rangeIndex, 1);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                }\n                if (currentRevision.range.length === 0) {\n                    this.owner.revisions.remove(currentRevision);\n                }\n                if (currentPara.characterFormat.revisions.length > 0 && this.editorHistory.isRedoing) {\n                    for (var i = 0; i < currentPara.characterFormat.revisions.length; i++) {\n                        var revision = currentPara.characterFormat.revisions[i];\n                        if (revision.range.length === 0) {\n                            currentPara.characterFormat.revisions.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n            }\n        }\n        this.removedNodes.push(id);\n    };\n    BaseHistoryInfo.prototype.revertResizing = function () {\n        this.editorHistory.currentBaseHistoryInfo = this;\n        if (this.action === 'RowResizing') {\n            if (this.modifiedProperties[0] instanceof RowHistoryFormat) {\n                var prevRowHistoryFormat = this.modifiedProperties[0];\n                var position = prevRowHistoryFormat.tableHierarchicalIndex;\n                var block = this.owner.editorModule.getBlock({ index: position }).node;\n                if (block instanceof TableWidget) {\n                    this.modifiedProperties[0].revertChanges(this.editorHistory.isRedoing, this.owner, block);\n                }\n            }\n        }\n        else {\n            if (this.modifiedProperties[0] instanceof TableHistoryInfo) {\n                //selected cell resizing the condition checks done based on the selected widgets only. so need to highlight the selection.\n                if (this.owner.selectionModule.selectedWidgets.length === 0) {\n                    this.owner.selectionModule.highlightSelection(true);\n                }\n                var prevTableHistoryInfo = this.modifiedProperties[0];\n                var position = prevTableHistoryInfo.tableHierarchicalIndex;\n                var block = this.owner.editorModule.getBlock({ index: position }).node;\n                if (block instanceof TableWidget) {\n                    var tableResize = this.owner.editorModule.tableResize;\n                    this.owner.editorModule.setOffsetValue(this.owner.selectionModule);\n                    block = block.combineWidget(this.owner.viewer);\n                    tableResize.currentResizingTable = block;\n                    this.modifiedProperties.splice(0, 1);\n                    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                        var tableHistoryInfoCurrent = new TableHistoryInfo(block, this.owner);\n                        this.modifiedProperties.splice(0, 0, tableHistoryInfoCurrent);\n                        this.owner.isLayoutEnabled = false;\n                        tableResize.applyProperties(tableResize.currentResizingTable, prevTableHistoryInfo);\n                        tableResize.currentResizingTable.isGridUpdated = true;\n                        this.owner.isLayoutEnabled = true;\n                        tableResize.updateGridValue(tableResize.currentResizingTable, false);\n                        prevTableHistoryInfo.destroy();\n                        prevTableHistoryInfo = undefined;\n                    }\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.revertTableDialogProperties = function (action) {\n        this.owner.isShiftingEnabled = false;\n        this.editorHistory.currentBaseHistoryInfo = this;\n        this.currentPropertyIndex = 0;\n        if (action === 'CellOptions') {\n            var selection = this.owner.selectionModule;\n            var cellFormat = this.modifiedProperties[0];\n            this.owner.editorModule.updateCellMargins(selection, cellFormat);\n        }\n        else if (action === 'TableOptions') {\n            this.owner.tableOptionsDialogModule.applyTableOptionsHelper(this.modifiedProperties[0]);\n        }\n        this.currentPropertyIndex = 0;\n        this.owner.isShiftingEnabled = true;\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForSection = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var modifiedProperties = this.modifiedProperties;\n            var previousFormat = (this.currentPropertyIndex < modifiedProperties.length ?\n                modifiedProperties[this.currentPropertyIndex] : modifiedProperties[modifiedProperties.length - 1]);\n            if (isNullOrUndefined(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n            }\n            else {\n                value = previousFormat.getPropertyValue(property);\n                previousFormat.copyFormat(format);\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            if (isNullOrUndefined(property)) {\n                this.modifiedProperties.push(format.cloneFormat());\n            }\n            else {\n                var currentFormat = new WSectionFormat();\n                currentFormat.copyFormat(format);\n                this.modifiedProperties.push(currentFormat);\n            }\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedProperties = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            var skipRemove = false;\n            if (format.ownerBase instanceof ElementBox) {\n                var prevLength = this.modifiedNodeLength[this.currentPropertyIndex];\n                if (format.ownerBase.length < prevLength) {\n                    skipRemove = true;\n                    this.modifiedNodeLength[this.currentPropertyIndex] = format.ownerBase.length;\n                    this.modifiedNodeLength.splice(this.currentPropertyIndex + 1, 0, prevLength - format.ownerBase.length);\n                    //Adds a copy of character format at next position for splitted inline.\n                    var nextFormat = new WCharacterFormat(undefined);\n                    nextFormat.copyFormat(previousFormat);\n                    this.modifiedProperties.splice(this.currentPropertyIndex + 1, 0, nextFormat);\n                }\n            }\n            if (this.action === 'ClearCharacterFormat') {\n                if (this.editorHistory.isUndoing) {\n                    value = previousFormat;\n                    if (!skipRemove) {\n                        this.modifiedProperties.splice(this.currentPropertyIndex, 1);\n                        this.currentPropertyIndex--;\n                    }\n                }\n                else {\n                    this.modifiedProperties.push(format.cloneFormat());\n                }\n            }\n            else {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            if (isNullOrUndefined(property)) {\n                this.modifiedProperties.push(format.cloneFormat());\n            }\n            else {\n                var currentFormat = new WCharacterFormat(undefined);\n                currentFormat.copyFormat(format);\n                this.modifiedProperties.push(currentFormat);\n            }\n            if (format.ownerBase instanceof ElementBox) {\n                this.modifiedNodeLength.push(format.ownerBase.length);\n            }\n            else {\n                this.modifiedNodeLength.push(0);\n            }\n        }\n        return value;\n    };\n    /**\n     * build character Operation for undo/redo\n     *\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.buildCharacterFormatOperation = function (widget, format) {\n        var position = this.owner.selectionModule.getElementPosition(widget, true).startPosition;\n        var start = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n        position.offset += widget.length;\n        var end = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n        var characterData = this.owner.sfdtExportModule.writeCharacterFormat(format, 0, true);\n        var operation = {\n            action: 'Format',\n            offset: start,\n            length: end - start,\n            format: JSON.stringify(characterData),\n            type: 'CharacterFormat',\n        };\n        this.modifiedFormatOperation.push(operation);\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForParagraphFormat = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (this.action === 'ClearParagraphFormat') {\n                if (this.editorHistory.isUndoing) {\n                    value = previousFormat;\n                    this.modifiedProperties.splice(this.currentPropertyIndex, 1);\n                    this.currentPropertyIndex--;\n                }\n                else {\n                    this.modifiedProperties.push(format.cloneFormat());\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (isNullOrUndefined(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'listFormat') {\n                value = new WParagraphFormat(undefined);\n                value.copyFormat(previousFormat);\n                previousFormat.listFormat = new WListFormat(previousFormat);\n                previousFormat.listFormat.copyFormat(format.listFormat);\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'tabStop') {\n                value = [];\n                for (var i = 0; i < previousFormat.tabs.length; i++) {\n                    value.push(previousFormat.tabs[i]);\n                }\n                var currentFormat = new WParagraphFormat(undefined);\n                currentFormat.copyFormat(format);\n                this.modifiedProperties[this.currentPropertyIndex] = currentFormat;\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'styleName') {\n                if (!isNullOrUndefined(previousFormat.baseStyle)) {\n                    value = new WParagraphStyle();\n                    value.copyStyle(previousFormat.baseStyle);\n                    this.currentPropertyIndex++;\n                    if (!isNullOrUndefined(format.baseStyle)) {\n                        previousFormat.baseStyle = new WParagraphStyle();\n                        previousFormat.baseStyle.copyStyle(format.baseStyle);\n                    }\n                    return value;\n                }\n                else {\n                    if (!isNullOrUndefined(format.baseStyle)) {\n                        previousFormat.baseStyle = new WParagraphStyle();\n                        previousFormat.baseStyle.copyStyle(format.baseStyle);\n                    }\n                    return undefined;\n                }\n            }\n            if (property === 'borders') {\n                value = previousFormat.borders.cloneFormat();\n            }\n            else if (this.action.indexOf('Border') >= 0) {\n                value = previousFormat.borders.getBorder(property.replace('Border', ''));\n            }\n            else {\n                value = previousFormat.getPropertyValue(property);\n            }\n            previousFormat.copyFormat(format);\n            this.currentPropertyIndex++;\n        }\n        else {\n            if (isNullOrUndefined(property)) {\n                this.modifiedProperties.push(format.cloneFormat());\n            }\n            else {\n                var currentFormat = new WParagraphFormat(undefined);\n                currentFormat.copyFormat(format);\n                this.modifiedProperties.push(currentFormat);\n            }\n        }\n        return value;\n    };\n    /**\n     * build paragraph Operation for undo/redo\n     *\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.getParagraohFormatOperation = function (paragarph, format) {\n        var _a;\n        if ((this.modifiedProperties.length > 1 || this.modifiedFormatOperation.length > 0) && !isNullOrUndefined(paragarph)) {\n            var position = this.owner.selectionModule.setPositionForBlock(paragarph, true);\n            this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n            this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, paragarph, 0, { done: false }, true, undefined, undefined) - 1;\n            this.insertedFormat = format;\n            (_a = this.modifiedFormatOperation).push.apply(_a, this.getActionInfo(true));\n        }\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForContinueNumbering = function (paragraphFormat, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            value = previousFormat;\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = paragraphFormat.cloneFormat();\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = paragraphFormat.cloneFormat();\n            }\n            this.currentPropertyIndex++;\n            return value;\n        }\n        else {\n            var currentFormat = new WParagraphFormat();\n            currentFormat.copyFormat(paragraphFormat);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForRestartNumbering = function (listFormat, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var listId = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            value = listId;\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = listFormat.listId;\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = listFormat.listId;\n            }\n            this.currentPropertyIndex++;\n            return value;\n        }\n        else {\n            this.modifiedProperties.push(listFormat.listId);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedPropertiesForList = function (listLevel) {\n        var value;\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousLevel = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            value = previousLevel;\n            previousLevel = new ModifiedLevel(listLevel, this.owner.editorModule.cloneListLevel(listLevel));\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = previousLevel;\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = previousLevel;\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            this.modifiedProperties.push(new ModifiedLevel(listLevel, this.owner.editorModule.cloneListLevel(listLevel)));\n            value = listLevel;\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.revertProperties = function () {\n        this.editorHistory.currentBaseHistoryInfo = this;\n        this.currentPropertyIndex = 0;\n        var property = this.getProperty();\n        this.viewer.owner.editorModule.setOffsetValue(this.documentHelper.selection);\n        if (this.action === 'ClearCharacterFormat' || this.modifiedProperties[0] instanceof WCharacterFormat) {\n            if (this.action === 'ListCharacterFormat') {\n                this.owner.editorModule.updateListCharacterFormat(this.documentHelper.selection, property, undefined);\n                return;\n            }\n            this.owner.editorModule.updateSelectionCharacterFormatting(property, undefined, false);\n        }\n        else if (this.action === 'ClearParagraphFormat' || this.modifiedProperties[0] instanceof WParagraphFormat) {\n            if (this.action === 'ContinueNumbering') {\n                this.owner.editorModule.revertContinueNumbering(this.owner.selectionModule, this.modifiedProperties[0]);\n                return;\n            }\n            if (this.action === 'StyleName' && this.modifiedProperties[0] instanceof WParagraphFormat) {\n                this.owner.editorModule.updateSelectionParagraphFormatting(property, this.modifiedProperties[0].baseStyle, false);\n                return;\n            }\n            this.owner.editorModule.setPreviousBlockToLayout();\n            this.owner.editorModule.updateSelectionParagraphFormatting(property, undefined, false);\n        }\n        else if (this.action === 'LinkToPrevious' && this.modifiedProperties[0] instanceof WSectionFormat) {\n            var sectionIndex = parseInt(this.selectionStart.split(';')[0]);\n            this.owner.editorModule.updateHeaderFooters(property, undefined, sectionIndex, this.modifiedProperties[0].removedHeaderFooters[0]);\n        }\n        else if (this.modifiedProperties[0] instanceof WSectionFormat) {\n            this.owner.editorModule.updateSectionFormat(property, undefined);\n        }\n        else if (this.action === 'RestartNumbering') {\n            this.owner.editorModule.restartListAtInternal(this.owner.selectionModule, this.modifiedProperties[0]);\n            return;\n        }\n        else if (this.modifiedProperties[0] instanceof ImageSizeInfo) {\n            this.owner.selectionModule.updateImageSize(this.modifiedProperties[0]);\n        }\n        else if (this.modifiedProperties[0] instanceof ModifiedLevel) {\n            var modified = new Dictionary();\n            for (var i = 0; i < this.modifiedProperties.length; i++) {\n                var modifiedLevel = this.modifiedProperties[i];\n                // modified.modifiedLevels.add(modifiedLevel.ownerListLevel.levelNumber, modifiedLevel);\n                modified.add(i, modifiedLevel);\n            }\n            this.editorHistory.updateListChanges(modified);\n            modified.destroy();\n            modified = undefined;\n        }\n        else if (this.modifiedProperties[0] instanceof WTableFormat) {\n            this.owner.editorModule.updateTableFormat(this.owner.selectionModule, property, undefined);\n        }\n        else if (this.modifiedProperties[0] instanceof WCellFormat) {\n            this.owner.isShiftingEnabled = true;\n            this.owner.editorModule.updateCellFormat(this.owner.selectionModule, property, undefined);\n        }\n        else if (this.modifiedProperties[0] instanceof WRowFormat) {\n            this.owner.editorModule.updateRowFormat(this.owner.selectionModule, property, undefined);\n        }\n        else if (this.action === 'ModifyStyle') {\n            var styleObject = this.modifiedProperties.pop();\n            this.owner.editor.updateStyleObject(styleObject);\n        }\n        this.currentPropertyIndex = 0;\n        if (this.action === 'ClearCharacterFormat' || this.action === 'ClearParagraphFormat') {\n            this.owner.editorModule.getOffsetValue(this.documentHelper.selection);\n        }\n    };\n    BaseHistoryInfo.prototype.addModifiedCellOptions = function (applyFormat, format, table) {\n        var currentFormat;\n        if (isNullOrUndefined(applyFormat.bottomMargin) && isNullOrUndefined(applyFormat.topMargin)\n            && isNullOrUndefined(applyFormat.rightMargin) && isNullOrUndefined(applyFormat.leftMargin)) {\n            currentFormat = this.copyCellOptions(table.tableFormat);\n        }\n        else {\n            currentFormat = this.copyCellOptions(applyFormat);\n        }\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            format = previousFormat;\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties[this.currentPropertyIndex] = this.copyCellOptions(applyFormat);\n            }\n            else {\n                this.modifiedProperties[this.modifiedProperties.length - 1] = this.copyCellOptions(applyFormat);\n            }\n            this.currentPropertyIndex++;\n            return format;\n        }\n        else {\n            this.modifiedProperties.push(currentFormat);\n        }\n        return format;\n    };\n    BaseHistoryInfo.prototype.copyCellOptions = function (format) {\n        var cellFormat = new WCellFormat();\n        cellFormat.topMargin = format.topMargin;\n        cellFormat.rightMargin = format.rightMargin;\n        cellFormat.bottomMargin = format.bottomMargin;\n        cellFormat.leftMargin = format.leftMargin;\n        return cellFormat;\n    };\n    BaseHistoryInfo.prototype.addModifiedTableOptions = function (format) {\n        var currentFormat = this.copyTableOptions(format);\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                this.modifiedProperties.splice(this.currentPropertyIndex, 1, currentFormat);\n            }\n            else {\n                this.modifiedProperties.splice(this.modifiedProperties.length - 1, 1, currentFormat);\n            }\n            this.currentPropertyIndex++;\n        }\n        else {\n            this.modifiedProperties.push(currentFormat);\n        }\n    };\n    BaseHistoryInfo.prototype.copyTableOptions = function (format) {\n        var tableFormat = new WTableFormat();\n        tableFormat.topMargin = format.topMargin;\n        tableFormat.rightMargin = format.rightMargin;\n        tableFormat.bottomMargin = format.bottomMargin;\n        tableFormat.leftMargin = format.leftMargin;\n        tableFormat.cellSpacing = format.cellSpacing;\n        return tableFormat;\n    };\n    BaseHistoryInfo.prototype.getProperty = function () {\n        switch (this.action) {\n            case 'Bold':\n                return 'bold';\n            case 'Italic':\n                return 'italic';\n            case 'FontColor':\n                return 'fontColor';\n            case 'FontFamily':\n                return 'fontFamily';\n            case 'FontSize':\n                return 'fontSize';\n            case 'HighlightColor':\n                return 'highlightColor';\n            case 'BaselineAlignment':\n                return 'baselineAlignment';\n            case 'Strikethrough':\n                return 'strikethrough';\n            case 'Underline':\n                return 'underline';\n            case 'AfterSpacing':\n                return 'afterSpacing';\n            case 'BeforeSpacing':\n                return 'beforeSpacing';\n            case 'LeftIndent':\n                return 'leftIndent';\n            case 'RightIndent':\n                return 'rightIndent';\n            case 'FirstLineIndent':\n                return 'firstLineIndent';\n            case 'LineSpacingType':\n                return 'lineSpacingType';\n            case 'LineSpacing':\n                return 'lineSpacing';\n            case 'TextAlignment':\n                return 'textAlignment';\n            case 'ListFormat':\n                return 'listFormat';\n            case 'PageHeight':\n                return 'pageHeight';\n            case 'PageWidth':\n                return 'pageWidth';\n            case 'DifferentOddAndEvenPages':\n                return 'differentOddAndEvenPages';\n            case 'TableAlignment':\n                return 'tableAlignment';\n            case 'TableLeftIndent':\n                return 'leftIndent';\n            case 'DefaultCellSpacing':\n                return 'cellSpacing';\n            case 'LeftMargin':\n            case 'CellLeftMargin':\n            case 'DefaultCellLeftMargin':\n                return 'leftMargin';\n            case 'RightMargin':\n            case 'CellRightMargin':\n            case 'DefaultCellRightMargin':\n                return 'rightMargin';\n            case 'TopMargin':\n            case 'CellTopMargin':\n            case 'DefaultCellTopMargin':\n                return 'topMargin';\n            case 'BottomMargin':\n            case 'CellBottomMargin':\n            case 'DefaultCellBottomMargin':\n                return 'bottomMargin';\n            case 'CellContentVerticalAlignment':\n                return 'verticalAlignment';\n            case 'RowHeight':\n                return 'height';\n            case 'RowHeightType':\n                return 'heightType';\n            case 'RowHeader':\n                return 'isHeader';\n            case 'AllowBreakAcrossPages':\n                return 'allowBreakAcrossPages';\n            case 'TablePreferredWidth':\n            case 'CellPreferredWidth':\n                return 'preferredWidth';\n            case 'TablePreferredWidthType':\n            case 'CellPreferredWidthType':\n                return 'preferredWidthType';\n            case 'Shading':\n                return 'shading';\n            case 'StyleName':\n                return 'styleName';\n            case 'ParagraphBidi':\n            case 'TableBidi':\n                return 'bidi';\n            case 'ContextualSpacing':\n                return 'contextualSpacing';\n            case 'LinkToPrevious':\n                return 'linkToPrevious';\n            case 'LeftBorder':\n            case 'TopBorder':\n            case 'RightBorder':\n            case 'BottomBorder':\n            case 'HorizontalBorder':\n            case 'VerticalBorder':\n            case 'Borders':\n                return (this.action[0].toLowerCase() + this.action.slice(1));\n            case 'TabStop':\n                return 'tabStop';\n        }\n        return undefined;\n    };\n    BaseHistoryInfo.prototype.getCharacterPropertyValue = function (property, modifiedProperty) {\n        var value;\n        if (property === 'bold') {\n            value = modifiedProperty.bold;\n        }\n        else if (property === 'italic') {\n            value = modifiedProperty.italic;\n        }\n        else if (property === 'fontColor') {\n            value = modifiedProperty.fontColor;\n        }\n        else if (property === 'fontFamily') {\n            value = modifiedProperty.fontFamily;\n        }\n        else if (property === 'fontSize') {\n            value = modifiedProperty.fontSize;\n        }\n        else if (property === 'highlightColor') {\n            value = modifiedProperty.highlightColor;\n        }\n        else if (property === 'baselineAlignment') {\n            value = modifiedProperty.baselineAlignment;\n        }\n        else if (property === 'strikethrough') {\n            value = modifiedProperty.strikethrough;\n        }\n        else if (property === 'underline') {\n            value = modifiedProperty.underline;\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedTableProperties = function (format, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousTableFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (isNullOrUndefined(property)) {\n                value = previousTableFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = format.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = format.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'shading') {\n                value = previousTableFormat.shading;\n            }\n            else {\n                value = previousTableFormat.getPropertyValue(property);\n            }\n            previousTableFormat.copyFormat(format);\n            this.currentPropertyIndex++;\n        }\n        else {\n            var currentFormat = new WTableFormat();\n            currentFormat.copyFormat(format);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedRowProperties = function (rowFormat, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (this.owner.enableCollaborativeEditing && this.modifiedProperties.length > 1 && rowFormat.ownerBase) {\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                var startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, rowFormat.ownerBase).position;\n                var endIndex = startIndex + 1;\n                var rowData = {};\n                if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                    this.owner.sfdtExportModule.assignRowFormat(rowData, previousFormat, 0);\n                }\n                var operation = {\n                    action: 'Format',\n                    offset: startIndex,\n                    length: endIndex - startIndex,\n                    format: JSON.stringify(rowData),\n                    type: 'RowFormat',\n                };\n                this.modifiedFormatOperation.push(operation);\n            }\n            if (isNullOrUndefined(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = rowFormat.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = rowFormat.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            value = previousFormat.getPropertyValue(property);\n            previousFormat.copyFormat(rowFormat);\n            this.currentPropertyIndex++;\n        }\n        else {\n            var currentFormat = new WRowFormat();\n            currentFormat.copyFormat(rowFormat);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    BaseHistoryInfo.prototype.addModifiedCellProperties = function (cellFormat, property, value) {\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            var previousFormat = (this.currentPropertyIndex < this.modifiedProperties.length ? this.modifiedProperties[this.currentPropertyIndex] : this.modifiedProperties[this.modifiedProperties.length - 1]);\n            if (isNullOrUndefined(property)) {\n                value = previousFormat;\n                if (this.currentPropertyIndex < this.modifiedProperties.length) {\n                    this.modifiedProperties[this.currentPropertyIndex] = cellFormat.cloneFormat();\n                }\n                else {\n                    this.modifiedProperties[this.modifiedProperties.length - 1] = cellFormat.cloneFormat();\n                }\n                this.currentPropertyIndex++;\n                return value;\n            }\n            if (property === 'shading') {\n                value = previousFormat.shading;\n            }\n            else {\n                value = previousFormat.getPropertyValue(property);\n            }\n            previousFormat.copyFormat(cellFormat);\n            this.currentPropertyIndex++;\n        }\n        else {\n            var currentFormat = new WCellFormat();\n            currentFormat.copyFormat(cellFormat);\n            this.modifiedProperties.push(currentFormat);\n        }\n        return value;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.destroy = function () {\n        this.selectionStart = undefined;\n        this.selectionEnd = undefined;\n        this.insertPosition = undefined;\n        this.endPosition = undefined;\n        if (!isNullOrUndefined(this.modifiedNodeLength)) {\n            this.modifiedNodeLength = [];\n            this.modifiedNodeLength = undefined;\n        }\n        if (!isNullOrUndefined(this.modifiedProperties)) {\n            for (var i = 0; i < this.modifiedProperties.length; i++) {\n                var property = this.modifiedProperties[i];\n                if (property instanceof WCharacterFormat) {\n                    property.destroy();\n                }\n                else if (property instanceof WParagraphFormat) {\n                    property.destroy();\n                }\n                else if (property instanceof WSectionFormat) {\n                    property.destroy();\n                }\n                else if (property instanceof ModifiedLevel) {\n                    property.destroy();\n                }\n                this.modifiedProperties.splice(this.modifiedProperties.indexOf(property), 1);\n                i--;\n            }\n            this.modifiedPropertiesIn = undefined;\n        }\n        if (!isNullOrUndefined(this.removedNodes)) {\n            for (var i = 0; i < this.removedNodes.length; i++) {\n                var node = this.removedNodes[i];\n                if (node instanceof ParagraphWidget) {\n                    node.destroyInternal(this.viewer);\n                }\n                else if (node instanceof ElementBox && !(node instanceof CommentCharacterElementBox)) {\n                    node.destroy();\n                }\n                this.removedNodes.splice(this.removedNodes.indexOf(node), 1);\n                i--;\n            }\n            this.removedNodesIn = undefined;\n        }\n        if (!isNullOrUndefined(this.insertedNodes)) {\n            for (var i = 0; i < this.insertedNodes.length; i++) {\n                var node = this.insertedNodes[i];\n                if (node instanceof ParagraphWidget) {\n                    node.destroyInternal(this.viewer);\n                }\n                else if (node instanceof ElementBox && !(node instanceof CommentCharacterElementBox)) {\n                    node.destroy();\n                }\n                this.insertedNodes.splice(this.insertedNodes.indexOf(node), 1);\n                i--;\n            }\n            this.insertedNodes = undefined;\n        }\n        this.ownerIn = undefined;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.recordInsertRevisionDeletetion = function (widget, startOffset, endOffset) {\n        if (this.startIndex > this.endIndex) {\n            var temp = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = temp;\n        }\n        var startIndex = this.startIndex;\n        var endIndex = this.endIndex;\n        if (widget instanceof TextElementBox || widget instanceof ImageElementBox || widget instanceof FieldElementBox || widget instanceof BookmarkElementBox) {\n            if (widget.revisions.length > 0) {\n                var currentStart = this.owner.selectionModule.getElementPosition(widget, true).startPosition;\n                startOffset = isNullOrUndefined(startOffset) ? 0 : startOffset;\n                endOffset = isNullOrUndefined(endOffset) ? widget.length : endOffset;\n                currentStart.setPositionParagraph(widget.line, startOffset + currentStart.offset);\n                this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(currentStart);\n                this.endIndex = this.startIndex + endOffset;\n                var revision = this.owner.editorModule.retrieveRevisionInOder(widget);\n                var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n                if (revision.revisionType === 'Insertion' && revision.author !== currentUser) {\n                    this.revisionOperation.push(this.getFormatOperation());\n                }\n                else if (revision.revisionType === 'Insertion') {\n                    var operation = this.getDeleteOperation('Delete', undefined, undefined);\n                    this.revisionOperation.push(operation);\n                    endIndex -= operation.length;\n                }\n                else if (revision.revisionType === 'Deletion') {\n                    if (revision.author !== currentUser) {\n                        var operation = this.getFormatOperation(widget);\n                        if (widget.removedIds.length > 0) {\n                            for (var i = 0; i < widget.removedIds.length; i++) {\n                                if (!isNullOrUndefined(operation.markerData.removedIds)) {\n                                    operation.markerData.removedIds = [];\n                                }\n                                operation.markerData.removedIds.push(widget.removedIds[i]);\n                            }\n                        }\n                        this.revisionOperation.push(operation);\n                    }\n                }\n            }\n        }\n        else if (widget instanceof ParagraphWidget) {\n            var isAllRevision = true;\n            for (var i = 0; i < widget.childWidgets.length; i++) {\n                var line = widget.childWidgets[i];\n                if (line.children.length === 0) {\n                    isAllRevision = false;\n                }\n                for (var j = 0; j < line.children.length; j++) {\n                    var element = line.children[j];\n                    if (element.revisions.length <= 0) {\n                        isAllRevision = false;\n                    }\n                    else if (element.revisions[0].revisionType !== 'Insertion') {\n                        isAllRevision = false;\n                    }\n                }\n            }\n            if (isAllRevision) {\n                var position = new TextPosition(this.owner);\n                position.setPositionParagraph(widget.childWidgets[0], 0);\n                this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n                var length_1 = this.owner.selectionModule.getBlockLength(undefined, widget, 0, { done: false }, true, undefined, undefined);\n                var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n                var revision = this.owner.editorModule.retrieveRevisionInOder(widget.childWidgets[0].children[0]);\n                if (currentUser === revision.author) {\n                    this.endIndex = this.startIndex + length_1;\n                    this.revisionOperation.push(this.getDeleteOperation(this.action, undefined, this.getRemovedText(widget)));\n                    endIndex -= length_1;\n                }\n            }\n            else {\n                for (var i = 0; i < widget.childWidgets.length; i++) {\n                    for (var j = 0; j < widget.childWidgets[i].children.length; j++) {\n                        this.recordInsertRevisionDeletetion(widget.childWidgets[i].children[j]);\n                        startIndex = this.startIndex;\n                        endIndex = this.endIndex;\n                    }\n                }\n            }\n        }\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getDeleteOperationsForTrackChanges = function () {\n        var operations = [];\n        var startIndex = this.startIndex;\n        var endIndex = this.endIndex;\n        var insertIndex = this.insertIndex;\n        var isInsertRevision = false;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        for (var i = 0; i < this.revisionOperation.length; i++) {\n            if (this.revisionOperation[i].action == 'Format' && isNullOrUndefined(this.revisionOperation[i].markerData)) {\n                this.revisionOperation[i].markerData = this.markerData.pop();\n            }\n            operations.push(this.revisionOperation[i]);\n        }\n        for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n            var element = this.removedNodes[i];\n            if (element instanceof TextElementBox || element instanceof ImageElementBox || element instanceof FieldElementBox || element instanceof BookmarkElementBox) {\n                if (element.removedIds.length === 0) {\n                    var operation = this.getFormatOperation();\n                    if (!isNullOrUndefined(operation.markerData)) {\n                        for (var j = 0; j < this.markerData.length; j++) {\n                            if (this.markerData[j].revisionType === 'Deletion') {\n                                if (isNullOrUndefined(operation.markerData.splittedRevisions)) {\n                                    operation.markerData.splittedRevisions = [];\n                                }\n                                if (this.checkValidRevision(this.markerData[j].revisionId)) {\n                                    operation.markerData.splittedRevisions.push(this.markerData[j]);\n                                }\n                                this.markerData.splice(j, 1);\n                                j--;\n                            }\n                        }\n                    }\n                    operations.push(operation);\n                    break;\n                }\n            }\n            else if (element instanceof ParagraphWidget) {\n                if (element.characterFormat.revisions.length > 0) {\n                    operations.push(this.getDeleteOperation(this.action));\n                }\n                else if (element.characterFormat.removedIds.length > 0) {\n                    var operation = this.getDeleteOperation(this.action);\n                    operation.markerData.isAcceptOrReject = this.isAcceptOrReject;\n                    operations.push(operation);\n                    var position = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.insertPosition);\n                    if (!position.isAtParagraphStart) {\n                        //When accept the delete revision if paragraph is not start then paragraph is combining.\n                        var endIndex_1 = this.endIndex;\n                        this.endIndex = this.startIndex;\n                        operations.push(this.getDeleteOperation('Delete'));\n                        this.endIndex = endIndex_1;\n                    }\n                    break;\n                }\n                else if (element.characterFormat.revisions.length === 0) {\n                    var operation = this.getFormatOperation();\n                    for (var j = 0; j < this.markerData.length; j++) {\n                        if (this.markerData[j].revisionType === 'Deletion') {\n                            if (isNullOrUndefined(operation.markerData.splittedRevisions)) {\n                                operation.markerData.splittedRevisions = [];\n                            }\n                            if (this.checkValidRevision(this.markerData[j].revisionId)) {\n                                operation.markerData.splittedRevisions.push(this.markerData[j]);\n                            }\n                            this.markerData.splice(j, 1);\n                            j--;\n                        }\n                    }\n                    this.markerData = [];\n                    operations.push(operation);\n                    break;\n                }\n            }\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.checkValidRevision = function (revisionID) {\n        for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n            if (this.owner.revisions.changes[i].revisionID === revisionID) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getDeleteOperationForTrackChanges = function (element) {\n        var operation;\n        if (element instanceof TextElementBox || element instanceof ImageElementBox || element instanceof FieldElementBox || element instanceof BookmarkElementBox) {\n            if (element.removedIds.length === 0) {\n                operation = this.getFormatOperation(element);\n            }\n            else if (element.removedIds.length > 0) {\n                var revisionId = element.removedIds[0];\n                var revision = this.owner.editorModule.getRevision(revisionId);\n                var currentUser = this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser;\n                if (revision.revisionType === 'Insertion' && revision.author !== currentUser) {\n                    operation = this.getFormatOperation(element);\n                }\n                else if (revision.revisionType === 'Insertion') {\n                    operation = this.getDeleteOperation(this.action, undefined, this.getRemovedText(element));\n                }\n                else if (revision.revisionType === 'Deletion') {\n                    if (revision.author !== currentUser) {\n                        operation = this.getFormatOperation(element);\n                        if (element.removedIds.length > 0) {\n                            for (var i = 0; i < element.removedIds.length; i++) {\n                                if (!isNullOrUndefined(operation.markerData.removedIds)) {\n                                    operation.markerData.removedIds = [];\n                                }\n                                operation.markerData.removedIds.push(element.removedIds[i]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (this.action !== 'Enter' && !(element instanceof ParagraphWidget) && (isNullOrUndefined(operation) || operation.action !== 'Delete')) {\n            this.startIndex += element.length;\n        }\n        return operation;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getActionInfo = function (isInvertOperation) {\n        var action = this.action;\n        if (!isNullOrUndefined(this.isAcceptOrReject) && this.isAcceptOrReject === 'Reject') {\n            action = 'Reject Change';\n        }\n        var operations = [];\n        switch (action.toString()) {\n            case 'Insert':\n            case 'InsertTextParaReplace':\n            case 'Enter':\n            case 'InsertInline':\n            case 'SectionBreak':\n            case 'SectionBreakContinuous':\n                if (this.removedNodes.length > 0 && isNullOrUndefined(this.dropDownIndex)) {\n                    if (this.owner.enableTrackChanges && !this.editorHistory.isUndoing) {\n                        operations = this.getDeleteOperationsForTrackChanges();\n                        if (action !== 'InsertInline') {\n                            this.insertIndex = this.endIndex;\n                        }\n                    }\n                    else {\n                        var deleteOperation = this.getDeleteOperation(action);\n                        if (action === 'Enter' && this.owner.enableTrackChanges && this.editorHistory.isUndoing) {\n                            deleteOperation.markerData = { isSkipTracking: true };\n                        }\n                        operations.push(deleteOperation);\n                    }\n                }\n                if ((action === 'Enter' || this.insertedText.length > 0)) {\n                    if (!this.editorHistory.isUndoing && (!this.editorHistory.isRedoing || action === 'Enter' || action === 'SectionBreak' || action === 'SectionBreakContinuous')) {\n                        var operation = this.getInsertOperation(action);\n                        if (this.owner.enableTrackChanges && this.action !== 'Enter') {\n                            if (this.insertedElement instanceof FootnoteElementBox) {\n                                operation.markerData = this.markerData[0];\n                                this.markerData.splice(0, 1);\n                                operation.text = CONTROL_CHARACTERS.Marker_Start;\n                                operation.markerData.type = this.insertedElement.footnoteType;\n                                operation.markerData.revisionForFootnoteEndnoteContent = this.markerData.pop();\n                            }\n                            operations.push(operation);\n                            for (var i = 0; i < this.splittedRevisions.length; i++) {\n                                if (isNullOrUndefined(operation.markerData)) {\n                                    operation.markerData = {};\n                                }\n                                if (isNullOrUndefined(operation.markerData.splittedRevisions)) {\n                                    operation.markerData.splittedRevisions = [];\n                                }\n                                operation.markerData.splittedRevisions.push(this.splittedRevisions[i]);\n                            }\n                        }\n                        else {\n                            operations.push(operation);\n                        }\n                    }\n                    else if (this.isRemovedNodes) {\n                        var operationCollection = this.getDeleteContent(action);\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                var operation2 = operations[operations.length - 1];\n                if (action === 'Insert' && !isNullOrUndefined(operation2.text)) {\n                    operation2.length = operation2.text.length;\n                }\n                if (!isNullOrUndefined(this.dropDownIndex)) {\n                    operation2.markerData = { 'type': 'Field', 'dropDownIndex': this.dropDownIndex };\n                    operation2.offset = this.getElementAbsolutePosition(this.fieldBegin);\n                    operation2.type = 'DropDown';\n                }\n                break;\n            case 'InsertTable':\n            case 'InsertTableBelow':\n                if (this.removedNodes.length > 0) {\n                    operations.push(this.getDeleteOperation(action));\n                }\n                if (this.editorHistory.isUndoing && this.isRemovedNodes) {\n                    operations.push(this.getUndoRedoOperation(action));\n                }\n                else {\n                    var tableRowOperation = this.buildTableRowCellOperation(action);\n                    for (var i = 0; i < tableRowOperation.length; i++) {\n                        operations.push(tableRowOperation[i]);\n                    }\n                }\n                break;\n            case 'InsertRowAbove':\n            case 'InsertRowBelow':\n            case 'InsertColumnLeft':\n            case 'InsertColumnRight':\n                if (this.editorHistory.isUndoing) {\n                    for (var i = 0; i < this.cellOperation.length; i++) {\n                        operations.push(this.cellOperation[i]);\n                    }\n                    var operation = this.getUndoRedoOperation(action, true);\n                    if (this.owner.enableTrackChanges && isNullOrUndefined(operation.markerData)) {\n                        operation.markerData = { isSkipTracking: true };\n                    }\n                    operations.push(operation);\n                }\n                else {\n                    var tableCellOperation = this.buildTableRowCellOperation(action);\n                    if (action === 'InsertRowAbove' || action === 'InsertRowBelow') {\n                        operations = tableCellOperation.slice();\n                    }\n                    else {\n                        operations = tableCellOperation.reverse().slice();\n                    }\n                }\n                break;\n            case 'BackSpace':\n            case 'Delete':\n            case 'Cut':\n            case 'DeleteBookmark':\n            case 'RemoveEditRange':\n                if (this.editorHistory.isUndoing) {\n                    if (action == \"DeleteBookmark\" || action == \"RemoveEditRange\") {\n                        this.startIndex -= 1;\n                        this.insertIndex = this.startIndex;\n                        this.insertedText = CONTROL_CHARACTERS.Marker_Start;\n                        operations.push(this.getInsertOperation(action));\n                        this.insertedText = CONTROL_CHARACTERS.Marker_End;\n                        operations.push(this.getInsertOperation(action, true));\n                        if (action === 'RemoveEditRange') {\n                            var operation = operations[operations.length - 1];\n                            operation.offset -= 1;\n                        }\n                        this.startIndex += 1;\n                    }\n                    else {\n                        if (this.endRevisionLogicalIndex && this.editorHistory.isUndoing) {\n                            if (this.removedNodes.length > 0) {\n                                var deleteOperation = this.getDeleteOperation(action);\n                                deleteOperation.markerData = { isSkipTracking: true };\n                                operations.push(deleteOperation);\n                            }\n                            if (this.isRemovedNodes) {\n                                var operationCollection = this.getDeleteContent(action);\n                                operations = operations.concat(operationCollection);\n                            }\n                        }\n                        else {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                    }\n                }\n                else {\n                    if (this.cellOperation.length > 0) {\n                        operations = this.cellOperation;\n                        this.cellOperation = [];\n                    }\n                    else {\n                        if (this.removedNodes.length > 0) {\n                            if (this.owner.enableTrackChanges) {\n                                if (this.editorHistory.isRedoing) {\n                                    if (this.removedNodes.length > 0) {\n                                        var deleteOperation = this.getDeleteOperation(action);\n                                        deleteOperation.markerData = { isSkipTracking: true };\n                                        operations.push(deleteOperation);\n                                    }\n                                    if (this.isRemovedNodes) {\n                                        var operationCollection = this.getDeleteContent(action);\n                                        operations = operations.concat(operationCollection);\n                                    }\n                                }\n                                else {\n                                    operations = this.getDeleteOperationsForTrackChanges();\n                                }\n                            }\n                            else {\n                                var deleteOperation = this.getDeleteOperation(action);\n                                operations.push(deleteOperation);\n                                for (var i = 0; i < this.removedNodes.length; i++) {\n                                    var element = this.removedNodes[parseInt(i.toString(), 10)];\n                                    if (element instanceof BodyWidget) {\n                                        var headersFooters = element.removedHeaderFooters;\n                                        for (var j = 0; j < headersFooters.length; j++) {\n                                            var headerFooter = headersFooters[parseInt(j.toString(), 10)];\n                                            var keysLength = Object.keys(headerFooter).length;\n                                            if (keysLength > 0) {\n                                                operations.push(this.getDeleteOperation('DeleteHeaderFooter', undefined));\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                if (action === 'DeleteBookmark' || action === 'RemoveEditRange') {\n                                    operations.push(this.getDeleteOperation(action, true));\n                                    if (action === 'RemoveEditRange') {\n                                        var operation = operations[operations.length - 1];\n                                        operation.offset -= 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                this.markerData = [];\n                break;\n            case 'ResolveComment':\n            case 'EditComment':\n                for (var i = 0; i < this.removedNodes.length; i++) {\n                    var operation = this.getUpdateOperation();\n                    operations.push(this.getCommentOperation(operation, action, this.removedNodes[i]));\n                }\n                break;\n            case 'ClearRevisions':\n            case 'TrackingPageBreak':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    if (this.removedNodes.length > 0) {\n                        var deleteOperation = this.getDeleteOperation(action);\n                        deleteOperation.markerData = { isSkipTracking: true };\n                        operations.push(deleteOperation);\n                    }\n                    if (this.isRemovedNodes) {\n                        var revision = void 0;\n                        if (typeof (this.removedNodes[0]) === 'string') {\n                            revision = this.owner.editorModule.getRevision(this.removedNodes[0]);\n                        }\n                        if (revision && revision.range[0] instanceof WCharacterFormat) {\n                            operations.push(this.getInsertOperation('Enter'));\n                        }\n                        else {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        var revision = this.owner.editorModule.getRevision(this.removedNodes[0]);\n                        if (action === 'TrackingPageBreak') {\n                            if (!(typeof this.removedNodes[0] === 'string')) {\n                                var operation = this.getDeleteOperation(action);\n                                operation.markerData.isAcceptOrReject = 'Reject';\n                                operations.push(operation);\n                                break;\n                            }\n                        }\n                        operations.push(this.getRevisionOperation(revision));\n                    }\n                }\n                break;\n            case 'Reject Change':\n                if (this.isRemovedNodes) {\n                    var operationCollection = this.getDeleteContent(action);\n                    operations = operations.concat(operationCollection);\n                }\n                else {\n                    var operation = this.getDeleteOperation(action);\n                    operation.markerData.isAcceptOrReject = 'Reject';\n                    operations.push(operation);\n                }\n                break;\n            case 'Accept Change':\n                if (this.isRemovedNodes) {\n                    var operationCollection = this.getDeleteContent(action);\n                    operations = operations.concat(operationCollection);\n                }\n                else {\n                    var deleteOperation = this.getDeleteOperation(action);\n                    deleteOperation.markerData.isAcceptOrReject = 'Accept';\n                    operations.push(deleteOperation);\n                }\n                break;\n            case 'Paste':\n            case 'PasteColumn':\n            case 'PasteOverwrite':\n            case 'PasteRow':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    var isTextRemoved = false;\n                    if (this.removedNodes.length > 0) {\n                        for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n                            if (this.removedNodes[i] instanceof ParagraphWidget) {\n                                isTextRemoved = true;\n                            }\n                            else {\n                                isTextRemoved = false;\n                            }\n                        }\n                        operations.push(this.getDeleteOperation(action));\n                        if (isTextRemoved) {\n                            this.endIndex = this.startIndex;\n                            operations.push(this.getDeleteOperation('Delete'));\n                        }\n                    }\n                    if (this.isRemovedNodes) {\n                        if (this.action === 'Paste') {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                        else {\n                            operations.push(this.getUndoRedoOperation(action, true));\n                        }\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        operations.push(this.getDeleteOperation('Delete'));\n                    }\n                    var length_2 = this.getPasteContentLength();\n                    if (action !== 'Paste') {\n                        if (this.owner.selectionModule.start.paragraph.isInsideTable) {\n                            length_2 = this.owner.selectionModule.getBlockLength(undefined, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable, 0, { done: false }, true, undefined, undefined);\n                        }\n                    }\n                    var pasteOperation = {\n                        action: 'Insert',\n                        offset: this.startIndex,\n                        length: length_2,\n                        pasteContent: JSON.stringify(this.pasteContent),\n                        type: isNullOrUndefined(this.type) ? 'Paste' : this.type,\n                        markerData: this.markerData.pop()\n                    };\n                    operations.push(pasteOperation);\n                }\n                break;\n            case 'InsertHyperlink':\n                if (isNullOrUndefined(this.fieldBegin)) {\n                    operations.push(this.getDeleteOperation('BackSpace'));\n                    if (this.isRemovedNodes) {\n                        var operationCollection = this.getDeleteContent(action);\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    if (this.isEditHyperlink) {\n                        operations = this.getEditHyperlinkOperation();\n                    }\n                    else {\n                        operations = this.getFieldOperation();\n                    }\n                }\n                this.fieldBegin = undefined;\n                break;\n            case 'UpdateFormField':\n                this.insertedText = '';\n                var operation1 = this.getInsertOperation('UpdateFormField');\n                operation1.text = CONTROL_CHARACTERS.Marker_Start;\n                operation1.markerData = { 'type': 'Field', 'checkBoxValue': this.fieldBegin.formFieldData.checked };\n                operation1.offset = this.getElementAbsolutePosition(this.fieldBegin);\n                operations.push(operation1);\n                break;\n            case 'DeleteRow':\n            case 'DeleteCells':\n            case 'DeleteColumn':\n            case 'DeleteTable':\n            case 'ClearCells':\n            case 'MergeCells':\n                if (this.editorHistory.isUndoing) {\n                    if (action == 'DeleteTable') {\n                        operations.push(this.getUndoRedoOperation(action));\n                    }\n                    else {\n                        operations = this.cellOperation.slice();\n                        this.insertIndex = this.startIndex;\n                        operations.push(this.getUndoRedoOperation(action, true));\n                        this.cellOperation = [];\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        if (this.cellOperation.length > 0) {\n                            // For delete column and delete cell.\n                            for (var i = 0; i < this.cellOperation.length; i++) {\n                                operations.push(this.cellOperation[i]);\n                            }\n                            if (action === 'MergeCells') {\n                                operations.push(this.getPasteMergeOperation());\n                                operations.push(this.getFormatOperation());\n                                this.type = undefined;\n                            }\n                            else {\n                                operations.reverse();\n                            }\n                        }\n                        else {\n                            if (this.owner.enableTrackChanges) {\n                                operations.push(this.getFormatOperation(undefined, action));\n                            }\n                            else {\n                                operations.push(this.getDeleteOperation(action));\n                            }\n                        }\n                        this.cellOperation = [];\n                    }\n                }\n                break;\n            case 'RemoveRowTrack':\n                if (this.editorHistory.isUndoing) {\n                    if (this.isRemovedNodes && this.editorHistory.isUndoing) {\n                        operations = this.cellOperation.slice();\n                        var operationCollection = this.getDeleteContent(action);\n                        if (isNullOrUndefined(operationCollection[0].markerData)) {\n                            operationCollection[0].markerData = { isSkipTracking: true };\n                        }\n                        operations.push.apply(operations, operationCollection);\n                    }\n                }\n                else {\n                    if (this.removedNodes.length > 0) {\n                        if (this.cellOperation.length > 0) {\n                            operations.push.apply(operations, this.cellOperation);\n                        }\n                        else {\n                            operations = this.revisionOperation.slice();\n                            this.getTrackchangesOperation(operations);\n                        }\n                    }\n                }\n                break;\n            case 'RowResizing':\n            case 'CellResizing':\n                operations = this.getResizingOperation(action);\n                break;\n            case 'ImageResizing':\n                operations.push(this.getFormatOperation());\n                break;\n            case 'Bold':\n            case 'Italic':\n            case 'Underline':\n            case 'FontSize':\n            case 'Strikethrough':\n            case 'BaselineAlignment':\n            case 'HighlightColor':\n            case 'FontColor':\n            case 'FontFamily':\n            case 'Uppercase':\n            case 'Lowercase':\n            case 'CapitalizeEachWord':\n            case 'SentenceCase':\n            case 'ToggleCase':\n            case 'CharacterFormat':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    if (action === 'Uppercase') {\n                        operations.push(this.getDeleteOperation(action));\n                        if (this.removedNodes) {\n                            var operationCollection = this.getDeleteContent(action);\n                            operations = operations.concat(operationCollection);\n                        }\n                    }\n                    else {\n                        operations = this.modifiedFormatOperation;\n                        this.modifiedFormatOperation = [];\n                    }\n                }\n                else {\n                    var charFormatOperation = this.buildFormatOperation(action, true);\n                    operations = charFormatOperation.slice();\n                }\n                break;\n            case 'AfterSpacing':\n            case 'BeforeSpacing':\n            case 'RightIndent':\n            case 'LeftIndent':\n            case 'FirstLineIndent':\n            case 'LineSpacing':\n            case 'LineSpacingType':\n            case 'TextAlignment':\n            case 'Borders':\n            case 'TopBorder':\n            case 'BottomBorder':\n            case 'LeftBorder':\n            case 'RightBorder':\n            case 'HorizontalBorder':\n            case 'VerticalBorder':\n            case 'ListFormat':\n            case 'ParagraphFormat':\n            case 'StyleName':\n            case 'ClearParagraphFormat':\n            case 'SpaceBeforeAuto':\n            case 'SpaceAfterAuto':\n            case 'ParagraphBidi':\n            case 'ContextualSpacing':\n            case 'ContinueNumbering':\n            case 'List':\n                if (this.modifiedFormatOperation.length > 0 && !isInvertOperation) {\n                    operations = this.modifiedFormatOperation;\n                    this.modifiedFormatOperation = [];\n                }\n                else {\n                    if (isInvertOperation && this.editorHistory.isUndoing && (action === 'ListFormat' || action === 'ClearParagraphFormat')) {\n                        action = 'ParagraphFormat';\n                    }\n                    if (action === 'ContinueNumbering') {\n                        this.type = action.toString();\n                    }\n                    if (action === 'Borders' && this.removedNodes[this.removedNodes.length - 1] instanceof TableWidget) {\n                        this.insertedText = CONTROL_CHARACTERS.Cell;\n                        this.type = 'CellFormat';\n                        this.createCellFormat(action);\n                        operations = this.getSelectedCellOperation(action, undefined, true, false, true);\n                        break;\n                    }\n                    var paraFormatOperation = this.buildFormatOperation(action, false);\n                    operations = paraFormatOperation.slice();\n                }\n                break;\n            case 'TableAlignment':\n            case 'DefaultCellSpacing':\n            case 'TableLeftIndent':\n            case 'DefaultCellLeftMargin':\n            case 'DefaultCellRightMargin':\n            case 'DefaultCellTopMargin':\n            case 'DefaultCellBottomMargin':\n            case 'TablePreferredWidth':\n            case 'TablePreferredWidthType':\n            case 'TableBidi':\n                this.createTableFormat(action);\n                this.type = 'TableFormat';\n                operations.push(this.getFormatOperation());\n                this.format = undefined;\n                break;\n            case 'RestartNumbering':\n                this.type = action.toString();\n                var numberingOperation = this.getFormatOperation(undefined, action);\n                this.createListFormat(action, numberingOperation);\n                operations.push(numberingOperation);\n                break;\n            case 'Shading':\n                this.createCellFormat(action);\n                this.type = 'CellFormat';\n                operations = this.getSelectedCellOperation(action, undefined, undefined, true, true);\n                break;\n            case 'TableAutoFitToContents':\n            case 'TableAutoFitToWindow':\n            case 'TableFixedColumnWidth':\n                if (this.editorHistory.isUndoing) {\n                    operations = this.getDeleteContent('Insert');\n                }\n                else {\n                    this.createTableFormat(action);\n                    this.type = 'TableFormat';\n                    this.insertedText = action.toString();\n                    operations.push(this.getFormatOperation());\n                    this.format = undefined;\n                }\n                break;\n            case 'SectionFormat':\n            case 'HeaderDistance':\n            case 'FooterDistance':\n            case 'DifferentFirstPage':\n            case 'DifferentOddAndEvenPages':\n            case 'PageWidth':\n            case 'PageHeight':\n            case 'LeftMargin':\n            case 'TopMargin':\n            case 'RightMargin':\n            case 'BottomMargin':\n            case 'RestartPageNumbering':\n            case 'PageStartingNumber':\n            case 'EndnoteNumberFormat':\n            case 'FootNoteNumberFormat':\n            case 'RestartIndexForEndnotes':\n            case 'RestartIndexForFootnotes':\n            case 'InitialFootNoteNumber':\n            case 'InitialEndNoteNumber':\n            case 'LineBetweenColumns':\n            case 'EqualWidth':\n            case 'BreakCode':\n            case 'LinkToPrevious':\n                this.createSectionFormat(action);\n                this.type = 'SectionFormat';\n                operations.push(this.getFormatOperation(undefined));\n                if (action === 'LinkToPrevious') {\n                    var operation = operations[operations.length - 1];\n                    operation.offset = this.insertIndex;\n                }\n                break;\n            case 'RowHeight':\n            case 'RowHeightType':\n            case 'AllowBreakAcrossPages':\n            case 'RowHeader':\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && this.modifiedProperties.length > 1) {\n                    operations = this.modifiedFormatOperation;\n                    this.modifiedFormatOperation = [];\n                }\n                else {\n                    this.createRowFormat(action);\n                    this.type = 'RowFormat';\n                    operations.push(this.getFormatOperation(undefined));\n                    this.format = undefined;\n                }\n                break;\n            case 'CellContentVerticalAlignment':\n            case 'CellLeftMargin':\n            case 'CellRightMargin':\n            case 'CellBottomMargin':\n            case 'CellTopMargin':\n            case 'CellPreferredWidth':\n            case 'CellPreferredWidthType':\n                this.createCellFormat(action);\n                this.type = 'CellFormat';\n                operations = this.getSelectedCellOperation(action, false, false, false, true).slice();\n                this.format = undefined;\n                break;\n        }\n        this.cellOperation = [];\n        this.revisionOperation = [];\n        this.isRemovedNodes = false;\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getTrackchangesOperation = function (operations) {\n        var markerInfo = this.markerData;\n        for (var i = markerInfo.length - 1; i >= 0; i--) {\n            if (!isNullOrUndefined(markerInfo[i].revisionId)) {\n                var revision = this.getRevision(markerInfo[i].revisionId);\n                if (revision && revision.range.length > 0) {\n                    if (revision.range[0] instanceof WRowFormat) {\n                        operations.push(this.buildRowOperationForTrackChanges(revision.range[0].ownerBase, 'RemoveRowTrack'));\n                    }\n                    else {\n                        var startPosition = new TextPosition(this.owner);\n                        var endPosition = new TextPosition(this.owner);\n                        this.owner.selection.selectRevision(revision, startPosition, endPosition);\n                        this.startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(startPosition);\n                        this.endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(endPosition);\n                        operations.push(this.getFormatOperation(undefined));\n                    }\n                }\n                else {\n                    this.owner.editorModule.removeMarkerInfoRevision(markerInfo[i].revisionId, markerInfo);\n                }\n            }\n        }\n    };\n    BaseHistoryInfo.prototype.getRevision = function (revisionId) {\n        for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n            var revision = this.owner.revisions.changes[i].revisionID;\n            if (revision === revisionId) {\n                return this.owner.revisions.changes[i];\n            }\n        }\n        return undefined;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getElementAbsolutePosition = function (element) {\n        if (element) {\n            var position = this.owner.selectionModule.getElementPosition(element);\n            var startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position.startPosition);\n            return startIndex;\n        }\n        return undefined;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getFieldOperation = function () {\n        var operations = [];\n        var element = this.fieldBegin;\n        var isFieldEnd = false;\n        var elementOffset = this.insertIndex;\n        if (!isNullOrUndefined(element)) {\n            do {\n                var insertedText = void 0;\n                var Data = void 0;\n                var elementLength = void 0;\n                var characterFormat = void 0;\n                var type = void 0;\n                if (!element.skipformFieldLength) {\n                    if (element instanceof FieldElementBox) {\n                        if (element.fieldType === 0 && this.getRemovedText() !== '') {\n                            operations.push(this.getDeleteOperation('Delete'));\n                            var operation_1 = operations[operations.length - 1];\n                            operation_1.offset = elementOffset;\n                            if (!isNullOrUndefined(operation_1.markerData) && this.owner.enableTrackChanges) {\n                                operation_1.markerData.isSkipTracking = true;\n                            }\n                        }\n                        insertedText = element.fieldType === 0 ? CONTROL_CHARACTERS.Marker_Start : element.fieldType === 1 ? CONTROL_CHARACTERS.Marker_End : element.fieldType === 2 ? CONTROL_CHARACTERS.Field_Separator : '';\n                        if (element.fieldType === 0 && element.formFieldData) {\n                            type = this.formFieldType;\n                            if (element.revisions.length > 0) {\n                                Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n                            }\n                            if (isNullOrUndefined(Data)) {\n                                Data = {};\n                            }\n                            Data.type = 'Field';\n                            Data.formFieldData = JSON.stringify(element.formFieldData);\n                        }\n                        else {\n                            if (element.revisions.length > 0) {\n                                Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n                            }\n                            if (isNullOrUndefined(Data)) {\n                                Data = {};\n                            }\n                            Data.type = 'Field';\n                        }\n                        elementLength = element.length;\n                    }\n                    else if (this.fieldBegin.formFieldData && element instanceof BookmarkElementBox) {\n                        insertedText = element.bookmarkType === 0 ? CONTROL_CHARACTERS.Marker_Start : CONTROL_CHARACTERS.Marker_End;\n                        Data = { 'bookmarkName': element.name, 'type': 'Bookmark' };\n                        elementLength = element.length;\n                    }\n                    else if (element instanceof TextElementBox) {\n                        insertedText = element.text;\n                        elementLength = element.length;\n                        if (element.revisions.length > 0) {\n                            Data = this.owner.editorModule.getRevisionMarkerData(Data, element.revisions[0]);\n                        }\n                    }\n                    if (!(element instanceof BookmarkElementBox)) {\n                        var characterData = this.owner.sfdtExportModule.writeCharacterFormat(element.characterFormat, 0);\n                        characterFormat = JSON.stringify(characterData);\n                    }\n                    var operation = {\n                        action: 'Insert',\n                        offset: elementOffset,\n                        type: type,\n                        text: insertedText,\n                        length: elementLength,\n                        markerData: Data,\n                        format: characterFormat\n                    };\n                    operations.push(operation);\n                    elementOffset += element.length;\n                    Data = undefined;\n                    type = undefined;\n                    characterFormat = undefined;\n                    if (element instanceof FieldElementBox && element.fieldType === 1) {\n                        isFieldEnd = true;\n                        if (this.fieldBegin.formFieldData && element.nextNode instanceof BookmarkElementBox) {\n                            var elementBox = element.nextNode;\n                            insertedText = elementBox.bookmarkType === 0 ? CONTROL_CHARACTERS.Marker_Start : CONTROL_CHARACTERS.Marker_End;\n                            if (element.revisions.length > 0) {\n                                Data = this.owner.editorModule.getRevisionMarkerData(Data, elementBox.revisions[0]);\n                            }\n                            if (isNullOrUndefined(Data)) {\n                                Data = {};\n                            }\n                            Data.bookmarkName = elementBox.name;\n                            Data.type = 'Bookmark';\n                            elementLength = elementBox.length;\n                            var operation_2 = {\n                                action: 'Insert',\n                                offset: elementOffset,\n                                text: insertedText,\n                                length: elementLength,\n                                markerData: Data\n                            };\n                            operations.push(operation_2);\n                        }\n                    }\n                }\n                element = element.nextNode;\n            } while (!isFieldEnd && !isNullOrUndefined(element));\n        }\n        return operations;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     * This method will build the operation for undo/Redo deleted content as paste action.\n     */\n    BaseHistoryInfo.prototype.getDeleteContent = function (action) {\n        var operations = [];\n        var startPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n        var endPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n        var paraEnd = endPosition.clone();\n        paraEnd.offset = endPosition.offset - 1;\n        var isParaSelected = startPosition.isAtParagraphStart && paraEnd.isAtParagraphEnd;\n        if (isParaSelected && (!startPosition.currentWidget.paragraph.isInsideTable)) {\n            operations.push(this.getInsertOperation('Enter', false, true));\n            operations.push(this.getUndoRedoOperation(action));\n        }\n        else if (startPosition.paragraph == endPosition.paragraph) {\n            if (startPosition.isAtSamePosition(endPosition)) {\n                if (this.owner.selectionModule.isEmpty && action === 'BackSpace') {\n                    this.insertIndex -= 1;\n                }\n                operations.push(this.getUndoRedoOperation(action, false, true));\n            }\n            else {\n                operations.push(this.getUndoRedoOperation(action));\n            }\n        }\n        else {\n            if (startPosition.currentWidget.paragraph.isInsideTable) {\n                operations = this.cellOperation.slice();\n                operations.push(this.getUndoRedoOperation(action, true));\n            }\n            else {\n                operations.push(this.getUndoRedoOperation(action));\n                this.startIndex = this.endIndex + 1;\n                if (!(startPosition.isAtParagraphStart || paraEnd.isAtParagraphEnd)) {\n                    var operation = this.getDeleteOperation('Delete');\n                    if (this.owner.enableTrackChanges) {\n                        operation.markerData = { isSkipTracking: true };\n                    }\n                    operations.push(operation);\n                }\n            }\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getEditHyperlinkOperation = function () {\n        var operations = [];\n        var element = this.fieldBegin;\n        if (element) {\n            var startIndex = this.getElementAbsolutePosition(element);\n            operations.push(this.getDeleteOperation('Delete'));\n            var operation = operations[operations.length - 1];\n            operation.offset = startIndex;\n            var fieldCode = this.getRemovedFieldCode();\n            operation.length = fieldCode.length;\n            operation.text = fieldCode;\n            operations.push(this.getInsertOperation('InsertHyperlink'));\n            operation = operations[operations.length - 1];\n            operation.offset = startIndex;\n            fieldCode = this.owner.selectionModule.getFieldCode(element, true);\n            operation.text = fieldCode;\n            operation.length = fieldCode.length;\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getPasteContentLength = function () {\n        var length = 0;\n        for (var i = 0; i < this.insertedNodes.length; i++) {\n            var block = this.insertedNodes[i];\n            if (block instanceof TextElementBox) {\n                length += block.length;\n            }\n            else {\n                length += this.owner.selectionModule.getBlockLength(undefined, block, 0, { done: false }, true, undefined, undefined);\n            }\n        }\n        this.insertedNodes = [];\n        return length;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getUpdateOperation = function () {\n        var operation = {\n            action: 'Update'\n        };\n        return operation;\n    };\n    BaseHistoryInfo.prototype.getResizingOperation = function (action) {\n        var operations = [];\n        var tableResize = this.owner.editorModule.tableResize;\n        var table = tableResize.currentResizingTable;\n        if (!isNullOrUndefined(table.childWidgets)) {\n            table = table.combineWidget(this.owner.viewer);\n            var resizerPosition = tableResize.resizerPosition;\n            var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n            if (action == 'RowResizing') {\n                var row = table.childWidgets[resizerPosition];\n                if (isNullOrUndefined(row)) {\n                    row = this.modifiedProperties[0].rowFormat.ownerBase;\n                }\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n                this.endIndex = this.startIndex + this.getRowLength(row);\n                var rowFormat = {};\n                if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                    this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n                }\n                this.format = JSON.stringify(rowFormat);\n                this.insertedText = CONTROL_CHARACTERS.Row;\n                operations.push(this.getFormatOperation());\n            }\n            else {\n                var rightColumnIndex = resizerPosition;\n                var leftColumnIndex = resizerPosition - 1;\n                this.insertedText = CONTROL_CHARACTERS.Cell;\n                var isResize = false;\n                if (!this.owner.selectionModule.isEmpty) {\n                    var cellwidget = tableResize.getTableCellWidget(tableResize.startingPoint);\n                    if (cellwidget && (this.owner.selectionModule.selectedWidgets.containsKey(cellwidget) || (cellwidget.previousWidget\n                        && this.owner.selectionModule.selectedWidgets.containsKey((cellwidget.previousWidget))))) {\n                        isResize = true;\n                        var selectedCells = this.owner.selectionModule.getSelectedCells();\n                        var startCell = selectedCells[0];\n                        var endCell = selectedCells[selectedCells.length - 1];\n                        var rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n                        var count = table.childWidgets.indexOf(endCell.ownerRow);\n                        var row = table.childWidgets[rowStartIndex];\n                        while (row && row.index <= count) {\n                            var cell = row.firstChild;\n                            while (cell) {\n                                if (cell.index == rightColumnIndex || cell.index == leftColumnIndex) {\n                                    var cellFormat = {};\n                                    if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                                        cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                                    }\n                                    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n                                    // Plus one for adding the cell index.\n                                    this.endIndex = this.startIndex + this.owner.selectionModule.calculateCellLength(cell) + 1;\n                                    this.type = \"CellFormat\";\n                                    this.format = JSON.stringify(cellFormat);\n                                    operations.push(this.getFormatOperation());\n                                }\n                                cell = cell.nextWidget;\n                            }\n                            var rowFormat = {};\n                            if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                                this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n                            }\n                            this.format = JSON.stringify(rowFormat);\n                            this.type = \"RowFormat\";\n                            this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n                            this.endIndex = this.startIndex + this.getRowLength(row);\n                            operations.push(this.getFormatOperation());\n                            row = row.getSplitWidgets().pop().nextRenderedWidget;\n                        }\n                    }\n                }\n                else {\n                    isResize = true;\n                    var row = table.firstChild;\n                    while (row) {\n                        var cell = row.firstChild;\n                        while (cell) {\n                            if (cell.index == rightColumnIndex || cell.index == leftColumnIndex) {\n                                var cellFormat = {};\n                                if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                                    cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                                }\n                                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n                                // Plus one for adding the cell index.\n                                this.endIndex = this.startIndex + this.owner.selectionModule.calculateCellLength(cell) + 1;\n                                this.type = \"CellFormat\";\n                                this.format = JSON.stringify(cellFormat);\n                                operations.push(this.getFormatOperation());\n                            }\n                            cell = cell.nextWidget;\n                        }\n                        var rowFormat = {};\n                        if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                            this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n                        }\n                        this.format = JSON.stringify(rowFormat);\n                        this.type = \"RowFormat\";\n                        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n                        this.endIndex = this.startIndex + this.getRowLength(row);\n                        operations.push(this.getFormatOperation());\n                        row = row.getSplitWidgets().pop().nextRenderedWidget;\n                    }\n                }\n                if (isResize) {\n                    var tableFormat = {};\n                    tableFormat = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeTableFormat(table.tableFormat, 0) : {};\n                    this.format = JSON.stringify(tableFormat);\n                    this.type = \"TableFormat\";\n                    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n                    // this.startIndex will get the offset of table. So in get block length it will start from the table. So doing minus one.\n                    this.endIndex = this.startIndex + this.owner.selectionModule.getBlockLength(undefined, table, 0, { done: false }, true, undefined, undefined) - 1;\n                    operations.push(this.getFormatOperation());\n                }\n            }\n            this.owner.documentHelper.layout.reLayoutTable(table);\n        }\n        this.format = undefined;\n        return operations;\n    };\n    BaseHistoryInfo.prototype.getRowLength = function (row) {\n        var length = 0;\n        for (var i = 0; i < row.childWidgets.length; i++) {\n            // for collab editing for row amd cell we are adding plus one index to the offset. So it will calculate the widgets inside the cell one. So adding plus one offset.\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[i]) + 1;\n        }\n        return length;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getDeleteOperation = function (action, setEndIndex, text) {\n        if (this.startIndex > this.endIndex) {\n            var temp = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = temp;\n        }\n        // if (action === 'Delete' && this.endIndex === this.startIndex) {\n        //     this.startIndex++;\n        //     this.endIndex++;\n        // }\n        if (action === 'Delete' && this.endIndex < this.startIndex) {\n            var start = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = start;\n        }\n        if (this.endIndex === this.startIndex && action !== 'DeleteBookmark' && action !== 'RemoveEditRange' && this.action !== 'InsertHyperlink') {\n            if (action === 'BackSpace' || action === 'Insert' || action === 'Enter') {\n                this.startIndex--;\n            }\n            else {\n                this.endIndex++;\n            }\n        }\n        if (action === 'DeleteHeaderFooter') {\n            this.startIndex = this.headerFooterStart;\n            this.endIndex = this.headerFooterEnd;\n        }\n        var selectionLength = !isNullOrUndefined(text) ? text.length : this.endIndex - this.startIndex;\n        var removedText;\n        if (action === 'DeleteBookmark' || action === 'RemoveEditRange') {\n            removedText = this.insertedText;\n            selectionLength = 1;\n        }\n        else if (action === 'DeleteHeaderFooter') {\n            removedText === '';\n        }\n        else if (action === 'DeleteTable' || action === 'DeleteRow' || action === 'DeleteColumn' || action === 'MergeCells' || action === 'RemoveRowTrack') {\n            removedText = this.insertedText;\n            if (action !== 'DeleteTable' && action !== 'DeleteRow') {\n                selectionLength = this.tableRelatedLength;\n            }\n        }\n        else {\n            removedText = !isNullOrUndefined(text) ? text : this.getRemovedText();\n        }\n        if (action === 'Cut' && removedText[removedText.length - 1] === ' ' && selectionLength < removedText.length) {\n            selectionLength = removedText.length;\n        }\n        var operation = {\n            action: 'Delete',\n            offset: setEndIndex ? this.endIndex : this.startIndex,\n            text: removedText,\n            length: (action === 'Paste' || selectionLength === 0) ? removedText.length : selectionLength,\n            skipOperation: action === 'DeleteHeaderFooter' ? true : undefined,\n            markerData: this.markerData[0],\n        };\n        if (this.removedNodes[0] instanceof FootnoteElementBox) {\n            if (this.editorHistory.isUndoing && operation.length >= 3) {\n                operation.length += 1;\n            }\n            else {\n                var element = this.removedNodes[0];\n                var lastPara = element.bodyWidget.lastChild;\n                var positionInfo = { position: 0, done: false };\n                var paragraphInfo = { paragraph: lastPara, offset: this.owner.selectionModule.getParagraphLength(lastPara) + 1 };\n                this.owner.selectionModule.getPositionInfoForBodyContent(paragraphInfo, positionInfo, element.bodyWidget.firstChild);\n                operation.length += positionInfo.position;\n            }\n        }\n        return operation;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getInsertOperation = function (action, setEndIndex, skipMarkerData) {\n        var insertedText = action === 'Enter' ? '\\n' : this.insertedText;\n        var length;\n        if (action === 'InsertTable' || action === 'InsertTableBelow' || action === 'InsertRowAbove' || action === 'InsertRowBelow'\n            || action === 'InsertColumnLeft' || action === 'InsertColumnRight' || action === 'MergeCells' || action === 'RemoveRowTrack') {\n            length = this.tableRelatedLength;\n            if (this.action === 'InsertTable' || this.action === 'InsertTableBelow') {\n                this.insertIndex = this.startIndex;\n            }\n        }\n        else {\n            if (!isNullOrUndefined(insertedText)) {\n                length = insertedText.length;\n            }\n        }\n        var operation = {\n            action: 'Insert',\n            offset: setEndIndex ? this.endIndex : this.insertIndex,\n            text: insertedText,\n            type: this.type,\n            length: length,\n            skipOperation: false,\n            imageData: this.insertedData,\n            format: this.format,\n        };\n        if (!isNullOrUndefined(this.markerData) && !skipMarkerData) {\n            operation.markerData = this.markerData.pop();\n        }\n        if (this.insertedElement instanceof FootnoteElementBox) {\n            var lastPara = this.insertedElement.bodyWidget.lastChild;\n            var positionInfo = { position: 0, done: false };\n            var paragraphInfo = { paragraph: lastPara, offset: this.owner.selectionModule.getParagraphLength(lastPara) + 1 };\n            this.owner.selectionModule.getPositionInfoForBodyContent(paragraphInfo, positionInfo, this.insertedElement.bodyWidget.firstChild);\n            operation.length += positionInfo.position;\n        }\n        return operation;\n    };\n    BaseHistoryInfo.prototype.getUndoRedoOperation = function (action, isTableInsert, issamePosition) {\n        var table;\n        var lastPara;\n        var startLine;\n        var lastLine;\n        var endoffset;\n        var startOffset;\n        var startPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabStart);\n        var endPosition = this.owner.selectionModule.getTextPosBasedOnLogicalIndex(this.collabEnd);\n        var length = 0;\n        if (isTableInsert) {\n            if (action === 'BackSpace' || action === 'Delete' || action === 'Insert') {\n                table = startPosition.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, table).position;\n                if (endPosition.currentWidget.paragraph.isInsideTable) {\n                    lastPara = this.documentHelper.getLastParagraphBlock(endPosition.currentWidget.paragraph.associatedCell.ownerTable);\n                    lastLine = lastPara.lastChild;\n                    endoffset = lastPara.lastChild.getEndOffset();\n                }\n                else {\n                    lastLine = endPosition.currentWidget;\n                    endoffset = endPosition.offset;\n                }\n            }\n            else {\n                table = this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n                lastPara = this.documentHelper.getLastParagraphBlock(table);\n                lastLine = lastPara.lastChild;\n                endoffset = lastPara.lastChild.getEndOffset();\n            }\n            startLine = this.documentHelper.getFirstParagraphBlock(table).firstChild;\n            startOffset = 0;\n            length = this.owner.selectionModule.getBlockLength(undefined, table, 0, { done: false }, true, undefined, undefined);\n        }\n        else {\n            startLine = startPosition.currentWidget;\n            lastLine = endPosition.currentWidget;\n            endoffset = issamePosition ? (action == 'BackSpace' ? endPosition.offset : endPosition.offset + 1) : endPosition.offset;\n            startOffset = issamePosition ? (action === 'BackSpace' ? startPosition.offset - 1 : startPosition.offset) : startPosition.offset;\n            var startIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.collabStart);\n            var endIndex = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(this.collabEnd);\n            length = endIndex - startIndex;\n        }\n        this.pasteContent = this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), startLine, startOffset, lastLine, endoffset, false, true);\n        return this.getPasteOpertion(this.pasteContent, length);\n    };\n    BaseHistoryInfo.prototype.getPasteOpertion = function (pasteContent, length) {\n        var pasteOperation = {\n            action: 'Insert',\n            offset: this.startIndex,\n            length: length > 0 ? length : 1,\n            pasteContent: JSON.stringify(pasteContent),\n            type: 'Paste'\n        };\n        if (this.owner.enableTrackChanges) {\n            pasteOperation.markerData = { isSkipTracking: true };\n        }\n        return pasteOperation;\n    };\n    // Builds the Table and Row operation.\n    BaseHistoryInfo.prototype.buildTableRowCellOperation = function (action) {\n        var operations = [];\n        if (this.insertedNodes.length > 0) {\n            if (this.insertedNodes[0] instanceof TableRowWidget) {\n                var row = this.insertedNodes[0];\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                this.insertIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, this.insertedNodes[0]).position;\n                var length_3 = this.insertedNodes.length;\n                if (row.ownerTable.childWidgets.length === row.indexInOwner + length_3) {\n                    this.insertIndex -= 1;\n                }\n            }\n            if (this.insertedNodes.length > 1 && action === 'InsertTable') {\n                var enterOperation = this.getInsertOperation('Enter', false, true);\n                if (isNullOrUndefined(enterOperation.markerData)) {\n                    enterOperation.markerData = {};\n                }\n                enterOperation.markerData.isSkipTracking = true;\n                operations.push(enterOperation);\n            }\n            for (var i = 0; i < this.insertedNodes.length; i++) {\n                if (this.insertedNodes[i] instanceof TableWidget) {\n                    var tableWidget = this.insertedNodes[i].combineWidget(this.owner.viewer);\n                    this.tableRelatedLength = action === 'InsertTableBelow' ? 0 : 1;\n                    this.insertedText = CONTROL_CHARACTERS.Table;\n                    var tableFormat = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeTableFormat(tableWidget.tableFormat, 0) : {};\n                    this.format = JSON.stringify(tableFormat);\n                    operations.push(this.getInsertOperation(action, false, true));\n                    for (var j = 0; j < tableWidget.childWidgets.length; j++) {\n                        var row = tableWidget.childWidgets[j];\n                        operations.push(this.buildRowOperation(row, action));\n                        for (var k = 0; k < row.childWidgets.length; k++) {\n                            var cell = row.childWidgets[k];\n                            var cellOperations = this.buildCellOperation(cell, action, true);\n                            for (var l = 0; l < cellOperations.length; l++) {\n                                operations.push(cellOperations[l]);\n                            }\n                        }\n                    }\n                }\n                else if (this.insertedNodes[i] instanceof TableRowWidget) {\n                    var row = this.insertedNodes[i];\n                    operations.push(this.buildRowOperation(row, action));\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        var cell = row.childWidgets[j];\n                        var cellOperations = this.buildCellOperation(cell, action, true);\n                        for (var l = 0; l < cellOperations.length; l++) {\n                            operations.push(cellOperations[l]);\n                        }\n                    }\n                }\n                else if (this.insertedNodes[i] instanceof TableCellWidget) {\n                    var cell = this.insertedNodes[i];\n                    var table = cell.ownerTable.combineWidget(this.owner.viewer);\n                    var num = 0;\n                    for (var j = 0; j < table.childWidgets.length; j++) {\n                        i = this.insertedNodes.length;\n                        var row = table.childWidgets[j];\n                        for (var k = 0; k < row.childWidgets.length; k++) {\n                            var cell_1 = row.childWidgets[k];\n                            var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                            if (this.insertedNodes.indexOf(cell_1) !== -1) {\n                                var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell_1).position;\n                                this.insertIndex = offset - num;\n                                if (cell_1.ownerTable.childWidgets.length === cell_1.ownerRow.indexInOwner + 1) {\n                                    if (this.insertedNodes.indexOf(row.childWidgets[row.childWidgets.length - 1]) !== -1) {\n                                        this.insertIndex -= 1;\n                                    }\n                                }\n                                var cellOperations = this.buildCellOperation(cell_1, action, true);\n                                for (var l = 0; l < cellOperations.length; l++) {\n                                    operations.push(cellOperations[l]);\n                                }\n                                num += 2;\n                            }\n                            else {\n                                var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell_1).position;\n                                this.insertIndex = offset - num;\n                                var cellOperations = this.buildCellOperation(cell_1, action, false);\n                                for (var l = 0; l < cellOperations.length; l++) {\n                                    operations.push(cellOperations[l]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            this.insertedNodes = [];\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.assignRevisionData = function (type, author, date, revisionId) {\n        var markerData = {\n            revisionType: type,\n            author: author,\n            date: date,\n            revisionId: revisionId\n        };\n        return markerData;\n    };\n    BaseHistoryInfo.prototype.createAcceptRejectOperation = function (action) {\n        var start = this.owner.selectionModule.start;\n        if (!start.paragraph.isInsideTable) {\n            return;\n        }\n        var row = start.paragraph.associatedCell.ownerRow;\n        var length = 0;\n        this.insertedText = CONTROL_CHARACTERS.Row;\n        if (row.rowFormat.revisions.length > 0) {\n            var revision = row.rowFormat.revisions[0];\n            var isAcceptOrReject = void 0;\n            if (action === 'Accept Change') {\n                isAcceptOrReject = 'Accept';\n            }\n            else if (action === 'Reject Change') {\n                isAcceptOrReject = 'Reject';\n            }\n            this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, isAcceptOrReject));\n        }\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n        if (row.rowFormat.revisions.length > 0) {\n            if (row.rowFormat.revisions[0].revisionType === 'Insertion') {\n                if (action === 'Accept Change') {\n                    this.startIndex = offset;\n                    this.tableRelatedLength = 1;\n                    this.cellOperation.push(this.getFormatOperation(undefined, 'RemoveRowTrack'));\n                }\n                else if (action === 'Reject Change') {\n                    this.startIndex = offset;\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n                    }\n                    this.tableRelatedLength = length;\n                    this.cellOperation.push(this.getDeleteOperation('RemoveRowTrack'));\n                }\n            }\n            else if (row.rowFormat.revisions[0].revisionType === 'Deletion') {\n                if (action === 'Accept Change') {\n                    this.startIndex = offset;\n                    // this.tableRelatedLength = 0;\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n                    }\n                    this.tableRelatedLength = length;\n                    this.cellOperation.push(this.getDeleteOperation('RemoveRowTrack'));\n                }\n                else if (action === 'Reject Change') {\n                    this.startIndex = offset;\n                    for (var j = 0; j < row.childWidgets.length; j++) {\n                        length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n                    }\n                    this.tableRelatedLength = length;\n                    this.cellOperation.push(this.getFormatOperation(undefined, 'RemoveRowTrack'));\n                }\n            }\n            this.markerData = [];\n        }\n    };\n    BaseHistoryInfo.prototype.buildRowOperation = function (row, action) {\n        this.insertedText = CONTROL_CHARACTERS.Row;\n        var rowFormat = {};\n        if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n            this.owner.sfdtExportModule.assignRowFormat(rowFormat, row.rowFormat, 0);\n        }\n        this.format = JSON.stringify(rowFormat);\n        if (action === 'InsertTable' && row.rowFormat.revisions.length > 0) {\n            var revision = row.rowFormat.revisions[row.rowFormat.revisions.length - 1];\n            var lastRevision = this.markerData[this.markerData.length - 1];\n            if (!(!isNullOrUndefined(lastRevision) && lastRevision.revisionId === revision.revisionID)) {\n                this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision));\n            }\n        }\n        this.tableRelatedLength = 1;\n        var operation = this.getInsertOperation(action);\n        this.format = undefined;\n        return operation;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.buildRowOperationForTrackChanges = function (row, action) {\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        var length = 0;\n        var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, row).position;\n        this.startIndex = offset;\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            length += this.owner.selectionModule.calculateCellLength(row.childWidgets[j]) + 1;\n        }\n        this.tableRelatedLength = length;\n        this.insertedText = CONTROL_CHARACTERS.Row;\n        var operation = this.getFormatOperation(undefined, action);\n        this.insertedText = '';\n        return operation;\n    };\n    BaseHistoryInfo.prototype.buildCellOperation = function (cell, action, isCellInserted) {\n        var operations = [];\n        this.tableRelatedLength = isCellInserted ? 1 : 0;\n        this.insertedText = CONTROL_CHARACTERS.Cell;\n        this.type = 'CellFormat';\n        var cellFormat = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0) : {};\n        this.format = JSON.stringify(cellFormat);\n        operations.push(this.getInsertOperation(action, false, true));\n        if (!isCellInserted) {\n            return operations;\n        }\n        this.tableRelatedLength = isCellInserted ? 1 : 0;\n        this.type = 'ParagraphFormat';\n        var paragraphFormat = this.owner.sfdtExportModule.writeParagraphFormat(cell.childWidgets[0].paragraphFormat, 0, true);\n        this.format = JSON.stringify(paragraphFormat);\n        operations.push(this.getInsertOperation(action, false, true));\n        this.tableRelatedLength = 0;\n        this.type = 'CharacterFormat';\n        var characterData = this.owner.sfdtExportModule.writeCharacterFormat(cell.childWidgets[0].characterFormat, 0, true);\n        this.format = JSON.stringify(characterData);\n        operations.push(this.getInsertOperation(action, false, true));\n        this.format = undefined;\n        this.type = undefined;\n        return operations;\n    };\n    BaseHistoryInfo.prototype.deleteColumnOperation = function (action) {\n        var startCell = this.owner.editorModule.getOwnerCell(this.owner.selectionModule.isForward);\n        var endCell = this.owner.editorModule.getOwnerCell(!this.owner.selectionModule.isForward);\n        var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n        var deleteCells = [];\n        var rowStartIndex = 0;\n        var count = 0;\n        if (action === 'DeleteColumn') {\n            deleteCells = table.getColumnCellsForSelection(startCell, endCell);\n        }\n        else {\n            var start = this.owner.selectionModule.getCellLeft(startCell.ownerRow, startCell);\n            var end = start + startCell.cellFormat.cellWidth;\n            var endCellLeft = this.owner.selectionModule.getCellLeft(endCell.ownerRow, endCell);\n            var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n            var cellInfo = this.owner.editorModule.updateSelectedCellsInTable(start, end, endCellLeft, endCellRight);\n            start = cellInfo.start;\n            end = cellInfo.end;\n            count = table.childWidgets.indexOf(endCell.ownerRow);\n            rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n            for (var i = rowStartIndex; i <= count; i++) {\n                var row = table.childWidgets[i];\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    var cell = row.childWidgets[j];\n                    var cellStart = this.owner.selectionModule.getCellLeft(row, cell);\n                    if (HelperMethods.round(start, 2) <= HelperMethods.round(cellStart, 2)\n                        && HelperMethods.round(cellStart, 2) < HelperMethods.round(end, 2)) {\n                        deleteCells.push(cell);\n                    }\n                }\n            }\n        }\n        var isRowSelect = this.owner.selectionModule.isRowSelect() && rowStartIndex != count;\n        for (var i = 0; i < deleteCells.length; i++) {\n            if (action === 'ClearCells') {\n                this.deleteCell(action, deleteCells[i], false);\n            }\n            else if (action === 'MergeCells') {\n                if (i !== 0) {\n                    var isRowOffset = isRowSelect && (!deleteCells[0].ownerRow.equals(deleteCells[i].ownerRow)) && deleteCells[i].index == 0;\n                    this.deleteCell(action, deleteCells[i], isRowOffset);\n                }\n            }\n            else {\n                this.deleteCell('DeleteColumn', deleteCells[i], false);\n            }\n        }\n        if (action === 'MergeCells') {\n            this.cellOperation.reverse();\n            this.deleteCell('ClearCells', deleteCells[0], false);\n        }\n    };\n    BaseHistoryInfo.prototype.getPasteMergeOperation = function () {\n        var cell = this.owner.selectionModule.start.paragraph.associatedCell;\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        var offset = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n        var length = this.owner.selectionModule.calculateCellLength(cell) - 1;\n        var firstParagraph = this.owner.selectionModule.getFirstParagraph(cell);\n        var lastParagraph = this.owner.selectionModule.getLastParagraph(cell);\n        var startline = firstParagraph.firstChild;\n        var lastLine = lastParagraph.lastChild;\n        this.pasteContent = this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), startline, 0, lastLine, lastLine.getEndOffset(), false, true);\n        this.startIndex = offset + 1;\n        var pasteOperation = {\n            action: 'Insert',\n            offset: this.startIndex,\n            length: length,\n            pasteContent: JSON.stringify(this.pasteContent),\n            type: 'Paste'\n        };\n        this.insertedText = CONTROL_CHARACTERS.Cell;\n        this.type = 'CellFormat';\n        this.startIndex = offset;\n        this.endIndex = offset;\n        this.format = JSON.stringify(this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0));\n        return pasteOperation;\n    };\n    BaseHistoryInfo.prototype.deleteCell = function (action, cell, isRowDelete) {\n        this.tableRelatedLength = this.owner.selectionModule.calculateCellLength(cell) + 1;\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n        this.startIndex -= isRowDelete ? 1 : 0;\n        this.tableRelatedLength += isRowDelete ? 1 : 0;\n        if (!this.owner.enableTrackChanges) {\n            if (action === 'ClearCells') {\n                var block = cell.childWidgets[0];\n                if (cell.childWidgets.length === 1 && block instanceof ParagraphWidget && block.isEmpty()) {\n                    return;\n                }\n                this.endIndex = this.startIndex + this.tableRelatedLength - 1;\n                this.startIndex += 1;\n                this.cellOperation.push(this.getDeleteOperation('ClearCells'));\n            }\n            else {\n                this.cellOperation.push(this.getDeleteOperation('DeleteColumn'));\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getFormatOperation = function (element, action, skipIncrement) {\n        if (this.startIndex > this.endIndex) {\n            var temp = this.startIndex;\n            this.startIndex = this.endIndex;\n            this.endIndex = temp;\n        }\n        var length = 0;\n        if (this.endIndex === this.startIndex && !skipIncrement && this.action !== 'DeleteBookmark' && this.action !== 'RemoveEditRange' && this.action !== 'InsertHyperlink') {\n            if (this.action === 'BackSpace') {\n                this.startIndex--;\n            }\n            else {\n                this.endIndex++;\n            }\n        }\n        if (action === 'RemoveRowTrack') {\n            length = this.tableRelatedLength;\n        }\n        else if (action === 'RowResizing' || action === 'CellResizing' || action === 'ImageResizing') {\n            length = this.insertedText.length;\n        }\n        else {\n            length = !isNullOrUndefined(element) ? element.length : this.endIndex - this.startIndex;\n        }\n        var formatOperation = {\n            action: 'Format',\n            offset: this.startIndex,\n            length: length,\n            markerData: this.markerData[this.markerData.length - 1],\n            imageData: this.insertedData,\n            text: this.insertedText,\n            format: this.format\n        };\n        this.markerData.pop();\n        if (!isNullOrUndefined(action)) {\n            formatOperation.type = action.toString();\n        }\n        else {\n            formatOperation.type = this.type;\n        }\n        return formatOperation;\n    };\n    BaseHistoryInfo.prototype.getRemovedText = function (element) {\n        var text = '';\n        if (!isNullOrUndefined(element)) {\n            var node = element;\n            if (node instanceof ParagraphWidget) {\n                text += this.getParagraphText(node);\n            }\n            else if (node instanceof ElementBox) {\n                if (node instanceof TextElementBox) {\n                    text += node.text;\n                }\n                else {\n                    text += ElementBox.objectCharacter;\n                }\n            }\n            else if (node instanceof TableWidget) {\n                text += this.getTableText(node);\n            }\n            else if (node instanceof TableRowWidget) {\n                text += this.getRowText(node);\n            }\n        }\n        else {\n            for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n                var node = this.removedNodes[i];\n                if (node instanceof ParagraphWidget) {\n                    text += this.getParagraphText(node);\n                }\n                else if (node instanceof ElementBox) {\n                    if (node instanceof TextElementBox) {\n                        text += node.text;\n                    }\n                    else {\n                        text += ElementBox.objectCharacter;\n                    }\n                }\n                else if (node instanceof TableWidget) {\n                    text += this.getTableText(node);\n                }\n                else if (node instanceof TableRowWidget) {\n                    text += this.getRowText(node);\n                }\n            }\n        }\n        return text;\n    };\n    BaseHistoryInfo.prototype.getRevisionOperation = function (revision) {\n        if (revision.revisionType === 'Insertion') {\n            // Accept operation - Insertion\n            this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, 'Accept'));\n            return this.getFormatOperation();\n        }\n        else if (revision.revisionType === 'Deletion') {\n            // Reject operation - Deletion\n            this.markerData.push(this.owner.editorModule.getMarkerData(undefined, undefined, revision, 'Reject'));\n            return this.getFormatOperation();\n        }\n        return {};\n    };\n    BaseHistoryInfo.prototype.getRemovedFieldCode = function () {\n        var fieldCode = '';\n        var isStarted = false;\n        for (var i = this.removedNodes.length - 1; i >= 0; i--) {\n            var node = this.removedNodes[i];\n            if (node instanceof ElementBox) {\n                if (node instanceof FieldElementBox && node.fieldType === 0) {\n                    isStarted = true;\n                }\n                if (node && node instanceof TextElementBox) {\n                    if (isStarted) {\n                        fieldCode += node.text;\n                    }\n                }\n                if (node instanceof FieldElementBox\n                    && (node.fieldType === 2 || node.fieldType === 1)) {\n                    return fieldCode;\n                }\n            }\n            else if (node instanceof ParagraphWidget) {\n                for (var i_1 = 0; i_1 < node.childWidgets.length; i_1++) {\n                    var lineWidget = node.childWidgets[i_1];\n                    for (var j = 0; j < lineWidget.children.length; j++) {\n                        var element = lineWidget.children[j];\n                        if (element instanceof FieldElementBox && element.fieldType === 0) {\n                            isStarted = true;\n                        }\n                        if (element instanceof TextElementBox) {\n                            if (isStarted) {\n                                fieldCode += element.text;\n                            }\n                        }\n                        if (element instanceof FieldElementBox\n                            && (element.fieldType === 2 || element.fieldType === 1)) {\n                            return fieldCode;\n                        }\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    //  Add for loop to iterate paragraph child elements and get text \n    BaseHistoryInfo.prototype.getParagraphText = function (paragraph) {\n        var text = '';\n        if (!isNullOrUndefined(paragraph) && !isNullOrUndefined(paragraph.childWidgets)) {\n            for (var i = 0; i < paragraph.childWidgets.length; i++) {\n                var line = paragraph.childWidgets[i];\n                for (var j = 0; j < line.children.length; j++) {\n                    if (line.children[j] instanceof TextElementBox) {\n                        text += line.children[j].text;\n                    }\n                    else {\n                        text += ElementBox.objectCharacter;\n                    }\n                }\n            }\n            return text + '\\n';\n        }\n        return text;\n    };\n    //  Add for loop to iterate table child elements and get text\n    BaseHistoryInfo.prototype.getTableText = function (table) {\n        var text = '';\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            text += this.getRowText(row);\n        }\n        return text;\n    };\n    // Add for loop to iterate table row child elements and get text\n    BaseHistoryInfo.prototype.getRowText = function (row) {\n        var text = '';\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            var cell = row.childWidgets[j];\n            for (var k = 0; k < cell.childWidgets.length; k++) {\n                var block = cell.childWidgets[k];\n                if (block instanceof ParagraphWidget) {\n                    text += this.getParagraphText(block);\n                }\n                else {\n                    text += this.getTableText(block);\n                }\n            }\n        }\n        return text;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getCommentOperation = function (operation, action, comment) {\n        if (action === 'InsertInline' || action === 'RemoveInline') {\n            var commentRangeElement = action === 'RemoveInline' ? this.removedNodes[0] : this.insertedElement;\n            var commentElement = commentRangeElement.comment;\n            operation.text = commentRangeElement.commentType === 0 ? CONTROL_CHARACTERS.Marker_Start : CONTROL_CHARACTERS.Marker_End;\n            operation.markerData = {\n                type: 'Comment',\n                commentId: commentRangeElement.commentId,\n                ownerCommentId: commentElement.isReply ? commentElement.ownerComment.commentId : undefined\n            };\n        }\n        else if (action === 'InsertCommentWidget' || action === 'DeleteCommentWidget') {\n            if (isNullOrUndefined(comment)) {\n                comment = this.removedNodes[0];\n            }\n            operation.length = 1;\n            operation.action = 'Format';\n            operation.offset = undefined;\n            operation.text = CONTROL_CHARACTERS.Marker_Start + CONTROL_CHARACTERS.Marker_End;\n            operation.markerData = {\n                type: 'Comment',\n                commentId: comment.commentId,\n                author: comment.author,\n                date: comment.date,\n                commentIndex: comment.isReply ? comment.ownerComment.replyComments.indexOf(comment) : this.owner.documentHelper.comments.indexOf(comment),\n                initial: comment.initial,\n                done: comment.isResolved,\n                text: comment.text,\n                isReply: comment.isReply\n            };\n            if (!isNullOrUndefined(comment.ownerComment)) {\n                // Get the position of the comment owner offset\n                var position = this.owner.selection.getElementPosition(comment.ownerComment.commentEnd, true).startPosition;\n                operation.offset = this.owner.selectionModule.getAbsolutePositionFromRelativePosition(position);\n            }\n            if (action === 'DeleteCommentWidget') {\n                operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n                // To get the offset of end comment element box we are seperating minus one to it. \n                operation.offset -= 1;\n                operation.markerData.commentAction = 'remove';\n            }\n            else if (action === 'InsertCommentWidget') {\n                operation.markerData.commentAction = 'add';\n            }\n        }\n        else if (action === 'ResolveComment') {\n            operation.action = 'Format';\n            operation.length = 1;\n            operation.text = CONTROL_CHARACTERS.Marker_Start + CONTROL_CHARACTERS.Marker_End;\n            operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n            // To get the offset of end comment element box we are seperating minus one to it.\n            operation.offset -= 1;\n            operation.markerData = {\n                type: 'Comment',\n                commentId: comment.commentId,\n                done: comment.isResolved\n            };\n        }\n        else if (action === 'EditComment') {\n            operation.action = 'Format';\n            operation.length = 1;\n            operation.text = CONTROL_CHARACTERS.Marker_Start + CONTROL_CHARACTERS.Marker_End;\n            operation.offset = this.startIndex < this.endIndex ? this.endIndex : this.startIndex;\n            // To get the offset of end comment element box we are seperating minus one to it.\n            operation.offset -= 1;\n            operation.markerData = {\n                type: 'Comment',\n                text: comment.text,\n            };\n        }\n        return operation;\n    };\n    /**\n     * @private\n     */\n    BaseHistoryInfo.prototype.getDeleteCommentOperation = function (modifiedActions, operations) {\n        for (var i = 0; i < modifiedActions.length; i++) {\n            var currentHistory = modifiedActions[i];\n            if (currentHistory instanceof HistoryInfo && (currentHistory.action === 'DeleteComment')) {\n                this.getDeleteCommentOperation(currentHistory.modifiedActions, operations);\n            }\n            else {\n                var operation = currentHistory.getDeleteOperation(currentHistory.action);\n                currentHistory.getCommentOperation(operation, currentHistory.action);\n                if (currentHistory.action === 'DeleteCommentWidget' && !isNullOrUndefined(modifiedActions[i + 1])) {\n                    // For update operation we need end offset. So taking the offset from end remove inline history.\n                    var updateHistory = modifiedActions[i + 1];\n                    operation.offset = updateHistory.startIndex < updateHistory.endIndex ? updateHistory.startIndex : updateHistory.endIndex;\n                }\n                operations.push(operation);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.buildFormatOperation = function (action, ischarFormat) {\n        var operations = [];\n        if ((action === 'ApplyStyle' || action === 'StyleName') && this.insertedFormat instanceof WParagraphStyle) {\n            this.insertedFormat = this.insertedFormat.name;\n            this.type = 'ParagraphFormat';\n            this.createParagraphFormat(action);\n        }\n        else {\n            if (action === 'ApplyStyle' || action === 'StyleName') {\n                this.insertedFormat = this.insertedFormat.name;\n            }\n            if (ischarFormat) {\n                this.type = 'CharacterFormat';\n                this.createCharacterFormat(action);\n            }\n            else {\n                this.type = action == 'ContinueNumbering' ? 'ContinueNumbering' : 'ParagraphFormat';\n                this.createParagraphFormat(action);\n            }\n        }\n        operations = this.getSelectedCellOperation(action, ischarFormat);\n        this.format = undefined;\n        return operations;\n    };\n    /**\n     * @private\n     * @returns {Operation}\n     */\n    BaseHistoryInfo.prototype.getSelectedCellOperation = function (action, ischarFormat, isBorder, isShading, isCell) {\n        var operations = [];\n        var start = this.owner.selectionModule.start;\n        var end = this.owner.selectionModule.end;\n        if (start.paragraph.isInsideTable && end.paragraph.isInsideTable && (start.paragraph.associatedCell.ownerTable.equals(end.paragraph.associatedCell.ownerTable)\n            && this.owner.selectionModule.isCellSelected(start.paragraph.associatedCell, start, end))) {\n            var selectCells = this.owner.selectionModule.getSelectedCells();\n            for (var i = 0; i < selectCells.length; i++) {\n                var cell = selectCells[i];\n                var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, cell).position;\n                // Plus one is for cell index\n                var length_4 = this.owner.selectionModule.calculateCellLength(cell) + 1;\n                this.endIndex = this.startIndex + length_4;\n                if (length_4 === 0 && ischarFormat) {\n                    continue;\n                }\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                        var cellFormat = this.owner.sfdtExportModule.writeCellFormat(cell.cellFormat, 0);\n                        this.format = JSON.stringify(cellFormat);\n                    }\n                }\n                else {\n                    this.writeBorderFormat(isBorder, isShading, cell);\n                }\n                var formatOperation = void 0;\n                if (action === 'ListFormat') {\n                    formatOperation = this.getFormatOperation(undefined, undefined, true);\n                    formatOperation.type = 'ListFormat';\n                    this.createListFormat(action, formatOperation);\n                }\n                else {\n                    formatOperation = this.getFormatOperation(undefined, undefined, true);\n                }\n                operations.push(formatOperation);\n            }\n        }\n        else {\n            var operation = void 0;\n            if (action === 'ListFormat') {\n                operation = this.getFormatOperation(undefined, undefined, true);\n                operation.type = 'ListFormat';\n                this.createListFormat(action, operation);\n            }\n            else {\n                if (start.paragraph.isInsideTable && isCell) {\n                    var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n                    this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, start.paragraph.associatedCell).position;\n                    var length_5 = this.owner.selectionModule.calculateCellLength(start.paragraph.associatedCell) + 1;\n                    this.endIndex = this.startIndex + length_5;\n                    this.writeBorderFormat(isBorder, isShading, start.paragraph.associatedCell);\n                }\n                operation = this.getFormatOperation(undefined, undefined, true);\n            }\n            operations.push(operation);\n        }\n        return operations;\n    };\n    BaseHistoryInfo.prototype.writeBorderFormat = function (isBorder, isShading, cell) {\n        var cellFormat = {};\n        if (isBorder) {\n            cellFormat['borders'] = HelperMethods.writeBorders(cell.cellFormat.borders, 0);\n            this.format = JSON.stringify(cellFormat);\n        }\n        if (isShading) {\n            cellFormat['shading'] = this.owner.sfdtExportModule ? this.owner.sfdtExportModule.writeShading(cell.cellFormat.shading, 0) : {};\n            this.format = JSON.stringify(cellFormat);\n        }\n    };\n    BaseHistoryInfo.prototype.createListFormat = function (action, operation) {\n        var listId;\n        var nsid;\n        if (action === 'ListFormat') {\n            listId = this.insertedFormat.listId;\n            operation.text = action.toString().charAt(0).toLowerCase() + action.toString().slice(1);\n        }\n        else {\n            listId = this.insertedFormat.listId;\n            nsid = this.insertedFormat.nsid;\n        }\n        if (listId > -1) {\n            var list = this.owner.documentHelper.getListById(listId);\n            var listData = {};\n            listData.optimizeSfdt = this.owner.documentEditorSettings.optimizeSfdt;\n            if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.keywordIndex = this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0;\n                listData[listsProperty[this.owner.sfdtExportModule.keywordIndex]] = [];\n                listData[listsProperty[this.owner.sfdtExportModule.keywordIndex]].push(this.owner.sfdtExportModule.writeList(list));\n                listData[abstractListsProperty[this.owner.sfdtExportModule.keywordIndex]] = [];\n                if (!isNullOrUndefined(list)) {\n                    listData[abstractListsProperty[this.owner.sfdtExportModule.keywordIndex]].push(this.owner.sfdtExportModule.writeAbstractList(list.abstractList));\n                }\n                if (action == 'RestartNumbering') {\n                    listData[listIdProperty[this.owner.sfdtExportModule.keywordIndex]] = listId;\n                    listData[nsidProperty] = nsid;\n                }\n            }\n            operation.listData = JSON.stringify(listData);\n        }\n    };\n    BaseHistoryInfo.prototype.createCharacterFormat = function (action) {\n        var characterFormat = {};\n        if (action === 'Uppercase') {\n            characterFormat.Uppercase = true;\n        }\n        else if (action === 'Lowercase') {\n            characterFormat.Lowercase = true;\n        }\n        else if (action === 'SentenceCase') {\n            characterFormat.SentenceCase = true;\n        }\n        else if (action === 'ToggleCase') {\n            characterFormat.ToggleCase = true;\n        }\n        else if (action === 'CapitalizeEachWord') {\n            characterFormat.CapitalizeEachWord = true;\n        }\n        else if (action === 'ApplyStyle' || action === 'StyleName') {\n            characterFormat.styleName = this.insertedFormat;\n        }\n        else if (action === 'CharacterFormat') {\n            var charFormat = this.insertedFormat;\n            characterFormat.bold = charFormat.hasValue('bold') ? charFormat.bold : characterFormat.bold;\n            characterFormat.italic = charFormat.hasValue('italic') ? charFormat.italic : characterFormat.italic;\n            characterFormat.fontSize = charFormat.hasValue('fontSize') ? charFormat.fontSize : characterFormat.fontSize;\n            characterFormat.underline = charFormat.hasValue('underline') ? charFormat.underline : characterFormat.underline;\n            characterFormat.strikethrough = charFormat.hasValue('strikethrough') ? charFormat.strikethrough : characterFormat.strikethrough;\n            characterFormat.baselineAlignment = charFormat.hasValue('baselineAlignment') ? charFormat.baselineAlignment : characterFormat.baselineAlignment;\n            characterFormat.highlightColor = charFormat.hasValue('highlightColor') ? charFormat.highlightColor : characterFormat.highlightColor;\n            characterFormat.fontColor = charFormat.hasValue('fontColor') ? charFormat.fontColor : characterFormat.fontColor;\n            characterFormat.fontFamily = charFormat.hasValue('fontFamily') ? charFormat.fontFamily : characterFormat.fontFamily;\n            characterFormat.allCaps = charFormat.hasValue('allCaps') ? charFormat.allCaps : characterFormat.allCaps;\n            characterFormat.LowerCase = charFormat.hasValue('Lowercase') ? charFormat.Lowercase : characterFormat.Lowercase;\n            characterFormat.Uppercase = charFormat.hasValue('Uppercase') ? charFormat.Lowercase : characterFormat.Uppercase;\n            characterFormat.CapitalizeEachWord = charFormat.hasValue('CapitalizeEachWord') ? charFormat.CapitalizeEachWord : characterFormat.CapitalizeEachWord;\n            characterFormat.SentenceCase = charFormat.hasValue('SentenceCase') ? charFormat.SentenceCase : characterFormat.SentenceCase;\n            characterFormat.ToggleCase = charFormat.hasValue('ToggleCase') ? charFormat.ToggleCase : characterFormat.ToggleCase;\n        }\n        else {\n            if (this.insertedFormat === 'increment' || this.insertedFormat === 'decrement') {\n                this.type = this.insertedFormat;\n                characterFormat.fontSize = 0;\n            }\n            else {\n                if (action !== 'ClearFormat') {\n                    var text = action.toString().charAt(0).toLowerCase() + action.toString().slice(1);\n                    if (this.insertedFormat instanceof WCharacterFormat && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                        this.insertedFormat = this.insertedFormat[text];\n                    }\n                    characterFormat[text] = this.insertedFormat;\n                }\n            }\n        }\n        this.format = JSON.stringify(characterFormat);\n    };\n    BaseHistoryInfo.prototype.createParagraphFormat = function (action) {\n        var paragraphFormat = {};\n        if (action === 'ParagraphFormat' || action === 'ContinueNumbering') {\n            var paraFormat = this.insertedFormat;\n            paragraphFormat.afterSpacing = paraFormat.hasValue('afterSpacing') ? paraFormat.afterSpacing : paragraphFormat.afterSpacing;\n            paragraphFormat.beforeSpacing = paraFormat.hasValue('beforeSpacing') ? paraFormat.beforeSpacing : paragraphFormat.beforeSpacing;\n            paragraphFormat.spaceAfterAuto = paraFormat.hasValue('spaceAfterAuto') ? paraFormat.spaceAfterAuto : paragraphFormat.spaceAfterAuto;\n            paragraphFormat.spaceBeforeAuto = paraFormat.hasValue('spaceBeforeAuto') ? paraFormat.spaceBeforeAuto : paragraphFormat.spaceBeforeAuto;\n            paragraphFormat.rightIndent = paraFormat.hasValue('rightIndent') ? paraFormat.rightIndent : paragraphFormat.rightIndent;\n            paragraphFormat.leftIndent = paraFormat.hasValue('leftIndent') ? paraFormat.leftIndent : paragraphFormat.leftIndent;\n            paragraphFormat.firstLineIndent = paraFormat.hasValue('firstLineIndent') ? paraFormat.firstLineIndent : paragraphFormat.firstLineIndent;\n            paragraphFormat.lineSpacing = paraFormat.hasValue('lineSpacing') ? paraFormat.lineSpacing : paragraphFormat.lineSpacing;\n            paragraphFormat.lineSpacingType = paraFormat.hasValue('lineSpacingType') ? paraFormat.lineSpacingType : paragraphFormat.lineSpacingType;\n            paragraphFormat.textAlignment = paraFormat.hasValue('textAlignment') ? paraFormat.textAlignment : paragraphFormat.textAlignment;\n            paragraphFormat.outlineLevel = paraFormat.hasValue('outlineLevel') ? paraFormat.outlineLevel : paragraphFormat.outlineLevel;\n            paragraphFormat.bidi = paraFormat.hasValue('bidi') ? paraFormat.bidi : paragraphFormat.bidi;\n            if (paragraphFormat.bidi) {\n                if (paragraphFormat.textAlignment === 'Right') {\n                    paragraphFormat.textAlignment = 'Left';\n                }\n                else if (paragraphFormat.textAlignment === 'Left') {\n                    paragraphFormat.textAlignment = 'Right';\n                }\n            }\n            paragraphFormat.borders = paraFormat.hasValue('borders') ? paraFormat.borders : paragraphFormat.borders;\n            if (paraFormat.listFormat.listId !== -1) {\n                var listFormat = {};\n                listFormat.listId = paraFormat.listFormat.listId;\n                listFormat.listLevelNumber = paraFormat.listFormat.listLevelNumber;\n                listFormat.nsid = paraFormat.listFormat.nsid;\n                paragraphFormat.listFormat = listFormat;\n            }\n            paragraphFormat.styleName = paraFormat.hasValue('styleName') ? paragraphFormat.styleName.name : undefined;\n            paragraphFormat.contextualSpacing = paraFormat.hasValue('contextualSpacing') ? paraFormat.contextualSpacing : paragraphFormat.contextualSpacing;\n            paragraphFormat.keepWithNext = paraFormat.hasValue('keepWithNext') ? paraFormat.keepWithNext : paragraphFormat.keepWithNext;\n            paragraphFormat.keepLinesTogether = paraFormat.hasValue('keepLinesTogether') ? paraFormat.keepLinesTogether : paragraphFormat.keepLinesTogether;\n            paragraphFormat.widowControl = paraFormat.hasValue('contextualSpacing') ? paraFormat.widowControl : paragraphFormat.widowControl;\n        }\n        else if (action === 'ListFormat') {\n            if (this.insertedFormat instanceof WParagraphFormat) {\n                this.insertedFormat = this.insertedFormat.listFormat;\n            }\n            var listFormat = {};\n            listFormat.listId = this.insertedFormat.listId;\n            listFormat.nsid = this.insertedFormat.nsid;\n            listFormat.listLevelNumber = this.insertedFormat.listLevelNumber;\n            paragraphFormat.listFormat = listFormat;\n        }\n        else if (action === 'ApplyStyle' || action === 'StyleName') {\n            paragraphFormat.styleName = this.insertedFormat;\n        }\n        else if (action === 'ParagraphBidi') {\n            paragraphFormat.bidi = this.insertedFormat;\n        }\n        else if (action === 'Borders') {\n            paragraphFormat['borders'] = HelperMethods.writeBorders(this.insertedFormat, 0);\n        }\n        else {\n            if (this.insertedFormat instanceof WParagraphFormat) {\n                var paraFormat = this.owner.sfdtExportModule.writeParagraphFormat(this.insertedFormat, 0);\n                paragraphFormat[action.toString().charAt(0).toLowerCase() + action.toString().slice(1)] = paraFormat;\n            }\n            else if (action === 'List') {\n                paragraphFormat = this.insertedFormat;\n            }\n            else {\n                paragraphFormat[action.toString().charAt(0).toLowerCase() + action.toString().slice(1)] = this.insertedFormat;\n            }\n        }\n        this.format = JSON.stringify(paragraphFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.createTableFormat = function (action) {\n        var paragraphInfo = { 'paragraph': null, 'offset': 0 };\n        this.startIndex = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false }, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable).position;\n        this.endIndex = this.startIndex;\n        this.endIndex += this.owner.selectionModule.getBlockLength(undefined, this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer), 0, { done: false }, true, undefined, undefined) - 1;\n        var tableFormat = {};\n        if (action === 'TableFormat') {\n            var tabFormat = this.insertedFormat;\n            if (!isNullOrUndefined(tabFormat)) {\n                tableFormat.bidi = tabFormat.hasValue('bidi') ? tabFormat.bidi : undefined;\n                tableFormat.preferredWidth = tabFormat.hasValue('preferredWidth') ? tabFormat.preferredWidth : undefined;\n                tableFormat.preferredWidthType = tabFormat.hasValue('preferredWidthType') ? tabFormat.preferredWidthType : undefined;\n                tableFormat.tableAlignment = tabFormat.hasValue('tableAlignment') ? tabFormat.tableAlignment : undefined;\n                tableFormat.leftIndent = tabFormat.hasValue('leftIndent') ? tabFormat.leftIndent : undefined;\n            }\n        }\n        else if (action === 'TableOptions') {\n            var tableOption = this.owner.selectionModule.start.paragraph.associatedCell.ownerTable.tableFormat;\n            if (!isNullOrUndefined(tableOption)) {\n                tableFormat.cellSpacing = tableOption.hasValue('cellSpacing') ? tableOption.cellSpacing : undefined;\n                tableFormat.leftMargin = tableOption.hasValue('leftMargin') ? tableOption.leftMargin : undefined;\n                tableFormat.topMargin = tableOption.hasValue('topMargin') ? tableOption.topMargin : undefined;\n                tableFormat.rightMargin = tableOption.hasValue('rightMargin') ? tableOption.rightMargin : undefined;\n                tableFormat.bottomMargin = tableOption.hasValue('bottomMargin') ? tableOption.bottomMargin : undefined;\n            }\n        }\n        else if (action === 'BordersAndShading') {\n            var tabBorderFormat = this.insertedFormat;\n            tableFormat = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeTableFormat(tabBorderFormat, 0) : {};\n        }\n        else {\n            tableFormat[this.getTableFormatString(action)] = this.insertedFormat;\n        }\n        this.format = JSON.stringify(tableFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.createRowFormat = function (action) {\n        var rowFormat = {};\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.assignRowFormat(rowFormat, this.owner.selectionModule.start.paragraph.associatedCell.ownerRow.rowFormat, 0);\n            }\n        }\n        else {\n            if (action === 'RowFormat') {\n                var rForamt = this.insertedFormat;\n                if (!isNullOrUndefined(rForamt)) {\n                    rowFormat.height = rForamt.hasValue('height') ? rForamt.height : undefined;\n                    rowFormat.heightType = rForamt.hasValue('heightType') ? rForamt.heightType : undefined;\n                    rowFormat.isHeader = rForamt.hasValue('isHeader') ? rForamt.isHeader : undefined;\n                    rowFormat.allowBreakAcrossPages = rForamt.hasValue('allowBreakAcrossPages') ? rForamt.allowBreakAcrossPages : undefined;\n                }\n            }\n            else {\n                rowFormat[this.getRowString(action)] = this.insertedFormat;\n            }\n        }\n        this.format = JSON.stringify(rowFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    BaseHistoryInfo.prototype.createCellFormat = function (action) {\n        var cellFormat = {};\n        if (action === 'CellFormat') {\n            var cFormat = this.insertedFormat;\n            cellFormat.preferredWidth = cFormat.hasValue('preferredWidth') ? cFormat.preferredWidth : undefined;\n            cellFormat.preferredWidthType = cFormat.hasValue('preferredWidthType') ? cFormat.preferredWidthType : undefined;\n            cellFormat.verticalAlignment = cFormat.hasValue('verticalAlignment') ? cFormat.verticalAlignment : undefined;\n        }\n        else if (action === 'CellOptions') {\n            var cellOption = this.insertedFormat;\n            cellFormat.leftMargin = cellOption.leftMargin;\n            cellFormat.rightMargin = cellOption.rightMargin;\n            cellFormat.bottomMargin = cellOption.bottomMargin;\n            cellFormat.topMargin = cellOption.topMargin;\n        }\n        else if (action === 'Shading') {\n            cellFormat[this.getCellString(action)] = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeShading(this.insertedFormat, 0) : {};\n        }\n        else if (action === 'Borders') {\n            cellFormat['borders'] = HelperMethods.writeBorders(this.insertedFormat, 0);\n        }\n        else if (action === 'BordersAndShading') {\n            cellFormat['shading'] = !isNullOrUndefined(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.writeShading(this.insertedFormat, 0) : {};\n            cellFormat['borders'] = HelperMethods.writeBorders(this.insertedFormat.borders, 0);\n        }\n        else {\n            cellFormat[this.getCellString(action)] = this.insertedFormat;\n        }\n        this.format = JSON.stringify(cellFormat);\n    };\n    BaseHistoryInfo.prototype.getTableFormatString = function (property) {\n        switch (property) {\n            case 'TableAlignment':\n                return 'tableAlignment';\n            case 'TableLeftIndent':\n                return 'leftIndent';\n            case 'DefaultCellLeftMargin':\n                return 'leftMargin';\n            case 'DefaultCellRightMargin':\n                return 'rightMargin';\n            case 'DefaultCellBottomMargin':\n                return 'bottomMargin';\n            case 'DefaultCellTopMargin':\n                return 'topMargin';\n            case 'TablePreferredWidth':\n                return 'preferredWidth';\n            case 'TablePreferredWidthType':\n                return 'preferredWidthType';\n            case 'Shading':\n                return 'shading';\n            case 'TableBidi':\n                return 'bidi';\n            default:\n                return 'cellSpacing';\n        }\n    };\n    BaseHistoryInfo.prototype.createSectionFormat = function (action) {\n        var sectionFormat = {};\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            if (!isNullOrUndefined(this.owner.sfdtExportModule)) {\n                this.owner.sfdtExportModule.writeSectionFormat(this.owner.selectionModule.start.paragraph.bodyWidget.sectionFormat, sectionFormat, 0);\n            }\n        }\n        else {\n            if (action === 'LinkToPrevious') {\n                var headerFooterWidget = this.owner.selectionModule.start.paragraph.bodyWidget;\n                var sectionIndex = headerFooterWidget.sectionIndex;\n                var headerFooterType = headerFooterWidget.headerFooterType;\n                this.format = JSON.stringify({ linkToPrevious: this.insertedFormat, sectionIndex: sectionIndex, headerFooterType: headerFooterType });\n                return;\n            }\n            else if (action === 'SectionFormat') {\n                var secFormat = this.insertedFormat;\n                this.owner.sfdtExportModule.writeSectionFormat(secFormat, sectionFormat, 0);\n            }\n            else {\n                sectionFormat[action[0].toLowerCase() + action.slice(1)] = this.insertedFormat;\n            }\n        }\n        this.format = JSON.stringify(sectionFormat);\n    };\n    BaseHistoryInfo.prototype.getRowString = function (property) {\n        switch (property) {\n            case 'RowHeight':\n                return 'height';\n            case 'RowHeightType':\n                return 'heightType';\n            case 'RowHeader':\n                return 'isHeader';\n            default:\n                return 'allowBreakAcrossPages';\n        }\n    };\n    BaseHistoryInfo.prototype.getCellString = function (property) {\n        switch (property) {\n            case 'CellContentVerticalAlignment':\n                return 'verticalAlignment';\n            case 'CellLeftMargin':\n                return 'leftMargin';\n            case 'CellRightMargin':\n                return 'rightMargin';\n            case 'CellBottomMargin':\n                return 'bottomMargin';\n            case 'CellTopMargin':\n                return 'topMargin';\n            case 'CellPreferredWidth':\n                return 'preferredWidth';\n            case 'Shading':\n                return 'shading';\n            default:\n                return 'cellPreferredWidthType';\n        }\n    };\n    return BaseHistoryInfo;\n}());\nexport { BaseHistoryInfo };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}