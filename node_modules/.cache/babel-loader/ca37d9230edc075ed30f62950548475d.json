{"ast":null,"code":"import { Dictionary } from '../../base/dictionary';\nimport { WUniqueFormat } from '../../base/unique-format';\nimport { WUniqueFormats } from '../../base/unique-formats';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\nvar WBorder = /** @class */function () {\n  function WBorder(node) {\n    this.uniqueBorderFormat = undefined;\n    this.ownerBase = undefined;\n    this.ownerBase = node;\n  }\n  Object.defineProperty(WBorder.prototype, \"color\", {\n    get: function () {\n      return this.getPropertyValue('color');\n    },\n    set: function (value) {\n      this.setPropertyValue('color', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WBorder.prototype, \"lineStyle\", {\n    get: function () {\n      return this.getPropertyValue('lineStyle');\n    },\n    set: function (value) {\n      this.setPropertyValue('lineStyle', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WBorder.prototype, \"lineWidth\", {\n    get: function () {\n      return this.getPropertyValue('lineWidth');\n    },\n    set: function (value) {\n      this.setPropertyValue('lineWidth', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WBorder.prototype, \"shadow\", {\n    get: function () {\n      return this.getPropertyValue('shadow');\n    },\n    set: function (value) {\n      this.setPropertyValue('shadow', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WBorder.prototype, \"space\", {\n    get: function () {\n      return this.getPropertyValue('space');\n    },\n    set: function (value) {\n      this.setPropertyValue('space', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WBorder.prototype, \"hasNoneStyle\", {\n    get: function () {\n      return this.getPropertyValue('hasNoneStyle');\n    },\n    set: function (value) {\n      this.setPropertyValue('hasNoneStyle', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WBorder.prototype, \"isBorderDefined\", {\n    get: function () {\n      return this.lineStyle !== 'None' || this.hasNoneStyle && this.hasValue('hasNoneStyle');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /* eslint-disable */\n  WBorder.prototype.getPropertyValue = function (property) {\n    var hasValue = this.hasValue(property);\n    if (hasValue) {\n      var propertyType = WUniqueFormat.getPropertyType(WBorder.uniqueFormatType, property);\n      if (!isNullOrUndefined(this.uniqueBorderFormat)) {\n        var propValue = this.uniqueBorderFormat.propertiesHash.get(propertyType);\n        if (!isNullOrUndefined(propValue)) {\n          return propValue;\n        }\n      }\n    }\n    return WBorder.getPropertyDefaultValue(property);\n  };\n  WBorder.prototype.setPropertyValue = function (property, value) {\n    if (isNullOrUndefined(value) || value === '') {\n      value = WBorder.getPropertyDefaultValue(property);\n    }\n    if (isNullOrUndefined(this.uniqueBorderFormat)) {\n      this.initializeUniqueBorder(property, value);\n    } else {\n      var propertyType = WUniqueFormat.getPropertyType(this.uniqueBorderFormat.uniqueFormatType, property);\n      if (this.uniqueBorderFormat.propertiesHash.containsKey(propertyType) && this.uniqueBorderFormat.propertiesHash.get(propertyType) === value) {\n        //Do nothing, since no change in property value and return\n        return;\n      }\n      this.uniqueBorderFormat = WBorder.uniqueBorderFormats.updateUniqueFormat(this.uniqueBorderFormat, property, value);\n    }\n  };\n  WBorder.prototype.initializeUniqueBorder = function (property, propValue) {\n    var uniqueBorderFormatTemp = new Dictionary();\n    this.addUniqueBorderFormat('color', property, propValue, uniqueBorderFormatTemp);\n    this.addUniqueBorderFormat('lineStyle', property, propValue, uniqueBorderFormatTemp);\n    this.addUniqueBorderFormat('lineWidth', property, propValue, uniqueBorderFormatTemp);\n    this.addUniqueBorderFormat('shadow', property, propValue, uniqueBorderFormatTemp);\n    this.addUniqueBorderFormat('space', property, propValue, uniqueBorderFormatTemp);\n    this.addUniqueBorderFormat('hasNoneStyle', property, propValue, uniqueBorderFormatTemp);\n    this.uniqueBorderFormat = WBorder.uniqueBorderFormats.addUniqueFormat(uniqueBorderFormatTemp, WBorder.uniqueFormatType);\n  };\n  WBorder.prototype.addUniqueBorderFormat = function (property, modifiedProperty, propValue, uniqueBorderFormatTemp) {\n    var propertyType = WUniqueFormat.getPropertyType(WBorder.uniqueFormatType, property);\n    if (property === modifiedProperty) {\n      uniqueBorderFormatTemp.add(propertyType, propValue);\n    }\n  };\n  WBorder.getPropertyDefaultValue = function (property) {\n    var value = undefined;\n    /* eslint-enable */\n    switch (property) {\n      case 'color':\n        value = '#000000';\n        break;\n      case 'lineStyle':\n        value = 'None';\n        break;\n      case 'lineWidth':\n        value = 0;\n        break;\n      case 'shadow':\n        value = false;\n        break;\n      case 'space':\n        value = 0;\n        break;\n      case 'hasNoneStyle':\n        value = false;\n        break;\n    }\n    return value;\n  };\n  WBorder.prototype.getLineWidth = function () {\n    /* eslint-disable */\n    switch (this.lineStyle) {\n      case 'None':\n      case 'Cleared':\n        return 0;\n      case 'Triple':\n      case 'Double':\n      case 'ThinThickSmallGap':\n      case 'ThickThinSmallGap':\n      case 'ThinThickThinSmallGap':\n      case 'ThinThickMediumGap':\n      case 'ThickThinMediumGap':\n      case 'ThinThickThinMediumGap':\n      case 'ThinThickLargeGap':\n      case 'ThickThinLargeGap':\n      case 'ThinThickThinLargeGap':\n      case 'Emboss3D':\n      case 'Engrave3D':\n        {\n          var lineArray = this.getBorderLineWidthArray(this.lineStyle, this.lineWidth);\n          var width = 0;\n          for (var i = 0; i < lineArray.length; i++) {\n            width += lineArray[i];\n          }\n          return width;\n        }\n      case 'Single':\n      case 'DashLargeGap':\n      case 'DashSmallGap':\n      case 'Dot':\n      case 'DashDot':\n      case 'DashDotDot':\n      case 'Thick':\n        return this.lineWidth >= 0.5 ? this.lineWidth : 0.5;\n      case 'SingleWavy':\n        return this.lineWidth === 1.5 ? 3 : 2.5;\n      //Double wave border only draw with the fixed width\n      case 'DoubleWavy':\n        return 6.75;\n      //Double wave border only draw with the fixed width\n      case 'DashDotStroked':\n      case 'Outset':\n        return this.lineWidth >= 0.5 ? this.lineWidth : 0.5;\n    }\n    return this.lineWidth >= 0.5 ? this.lineWidth : 0.5;\n    /* eslint-enable */\n  };\n  WBorder.prototype.getBorderLineWidthArray = function (lineStyle, lineWidth) {\n    var borderLineArray = [lineWidth];\n    switch (lineStyle) {\n      case 'Double':\n        borderLineArray = [1, 1, 1];\n        break;\n      case 'ThinThickSmallGap':\n        borderLineArray = [1, -0.75, -0.75];\n        break;\n      case 'ThickThinSmallGap':\n        borderLineArray = [-0.75, -0.75, 1];\n        break;\n      case 'ThinThickMediumGap':\n        borderLineArray = [1, 0.5, 0.5];\n        break;\n      case 'ThickThinMediumGap':\n        borderLineArray = [0.5, 0.5, 1];\n        break;\n      case 'ThinThickLargeGap':\n        borderLineArray = [-1.5, 1, -0.75];\n        break;\n      case 'ThickThinLargeGap':\n        borderLineArray = [-0.75, 1, -1.5];\n        break;\n      case 'Triple':\n        borderLineArray = [1, 1, 1, 1, 1];\n        break;\n      case 'ThinThickThinSmallGap':\n        borderLineArray = [-0.75, -0.75, 1, -0.75, -0.75];\n        break;\n      case 'ThinThickThinMediumGap':\n        borderLineArray = [0.5, 0.5, 1, 0.5, 0.5];\n        break;\n      case 'ThinThickThinLargeGap':\n        borderLineArray = [-0.75, 1, -1.5, 1, -0.75];\n        break;\n      case 'Emboss3D':\n      case 'Engrave3D':\n        borderLineArray = [0.25, 0, 1, 0, 0.25];\n        break;\n    }\n    if (borderLineArray.length === 1) {\n      return [lineWidth];\n    }\n    for (var i = 0; i < borderLineArray.length; i++) {\n      if (borderLineArray[parseInt(i.toString(), 10)] >= 0) {\n        borderLineArray[parseInt(i.toString(), 10)] = borderLineArray[parseInt(i.toString(), 10)] * lineWidth;\n      } else {\n        borderLineArray[parseInt(i.toString(), 10)] = Math.abs(borderLineArray[parseInt(i.toString(), 10)]);\n      }\n    }\n    return borderLineArray;\n  };\n  WBorder.prototype.getBorderWeight = function () {\n    var weight = 0;\n    var numberOfLines = this.getNumberOfLines();\n    var borderNumber = this.getBorderNumber();\n    switch (this.lineStyle) {\n      case 'Single':\n      case 'DashSmallGap':\n      case 'DashDot':\n      case 'DashDotDot':\n      case 'Double':\n      case 'Triple':\n      case 'ThinThickSmallGap':\n      case 'ThickThinSmallGap':\n      case 'ThinThickThinSmallGap':\n      case 'ThinThickMediumGap':\n      case 'ThickThinMediumGap':\n      case 'ThinThickThinMediumGap':\n      case 'ThinThickLargeGap':\n      case 'ThickThinLargeGap':\n      case 'ThinThickThinLargeGap':\n      case 'SingleWavy':\n      case 'DoubleWavy':\n      case 'DashDotStroked':\n      case 'Emboss3D':\n      case 'Engrave3D':\n      case 'Outset':\n      case 'Inset':\n      case 'Thick':\n        weight = this.lineWidth * borderNumber;\n        break;\n      case 'Dot':\n      case 'DashLargeGap':\n        weight = 1;\n        break;\n    }\n    return weight;\n  };\n  WBorder.prototype.getBorderNumber = function () {\n    var borderNumber = 0;\n    switch (this.lineStyle) {\n      case 'Single':\n        borderNumber = 1;\n        break;\n      case 'Thick':\n        borderNumber = 2;\n        break;\n      case 'Double':\n        borderNumber = 3;\n        break;\n      case 'Dot':\n        borderNumber = 4;\n        break;\n      case 'DashLargeGap':\n        //dashed.\n        borderNumber = 5;\n        break;\n      case 'DashDot':\n        borderNumber = 6;\n        break;\n      case 'DashDotDot':\n        borderNumber = 7;\n        break;\n      case 'Triple':\n        borderNumber = 8;\n        break;\n      case 'ThinThickSmallGap':\n        borderNumber = 9;\n        break;\n      case 'ThickThinSmallGap':\n        borderNumber = 10;\n        break;\n      case 'ThinThickThinSmallGap':\n        borderNumber = 11;\n        break;\n      case 'ThinThickMediumGap':\n        borderNumber = 12;\n        break;\n      case 'ThickThinMediumGap':\n        borderNumber = 13;\n        break;\n      case 'ThinThickThinMediumGap':\n        borderNumber = 14;\n        break;\n      case 'ThinThickLargeGap':\n        borderNumber = 15;\n        break;\n      case 'ThickThinLargeGap':\n        borderNumber = 16;\n        break;\n      case 'ThinThickThinLargeGap':\n        borderNumber = 17;\n        break;\n      case 'SingleWavy':\n        //wave.\n        borderNumber = 18;\n        break;\n      case 'DoubleWavy':\n        borderNumber = 19;\n        break;\n      case 'DashSmallGap':\n        borderNumber = 20;\n        break;\n      case 'DashDotStroked':\n        borderNumber = 21;\n        break;\n      case 'Emboss3D':\n        borderNumber = 22;\n        break;\n      case 'Engrave3D':\n        borderNumber = 23;\n        break;\n      case 'Outset':\n        borderNumber = 24;\n        break;\n      case 'Inset':\n        borderNumber = 25;\n        break;\n    }\n    return borderNumber;\n  };\n  WBorder.prototype.getNumberOfLines = function () {\n    //ToDo: Need to analyze more on this.\n    var value = 0;\n    switch (this.lineStyle) {\n      case 'Single':\n      case 'Dot':\n      case 'DashSmallGap':\n      case 'DashLargeGap':\n      case 'DashDot':\n      case 'DashDotDot':\n        value = 1;\n        break;\n      case 'Double':\n        value = 3;\n        break;\n      case 'Triple':\n        value = 5;\n        break;\n      case 'ThinThickSmallGap':\n        value = 3;\n        break;\n      case 'ThickThinSmallGap':\n        value = 3;\n        break;\n      case 'ThinThickThinSmallGap':\n        value = 5;\n        break;\n      case 'ThinThickMediumGap':\n        value = 3;\n        break;\n      case 'ThickThinMediumGap':\n        value = 3;\n        break;\n      case 'ThinThickThinMediumGap':\n        value = 5;\n        break;\n      case 'ThinThickLargeGap':\n        value = 3;\n        break;\n      case 'ThickThinLargeGap':\n        value = 3;\n        break;\n      case 'ThinThickThinLargeGap':\n        value = 5;\n        break;\n      case 'SingleWavy':\n        value = 1;\n        break;\n      case 'DoubleWavy':\n        value = 2;\n        break;\n      case 'DashDotStroked':\n        value = 1;\n        break;\n      case 'Emboss3D':\n      case 'Engrave3D':\n        value = 3;\n        break;\n      case 'Outset':\n      case 'Inset':\n      case 'Thick':\n        value = 1;\n        break;\n    }\n    return value;\n  };\n  WBorder.prototype.getPrecedence = function () {\n    var value = 0;\n    switch (this.lineStyle) {\n      case 'Single':\n        value = 1;\n        break;\n      case 'Thick':\n        value = 2;\n        break;\n      case 'Double':\n        value = 3;\n        break;\n      case 'Dot':\n        value = 4;\n        break;\n      case 'DashLargeGap':\n        //dashed.\n        value = 5;\n        break;\n      case 'DashDot':\n        value = 6;\n        break;\n      case 'DashDotDot':\n        value = 7;\n        break;\n      case 'Triple':\n        value = 8;\n        break;\n      case 'ThinThickSmallGap':\n        value = 9;\n        break;\n      case 'ThickThinSmallGap':\n        value = 10;\n        break;\n      case 'ThinThickThinSmallGap':\n        value = 11;\n        break;\n      case 'ThinThickMediumGap':\n        value = 12;\n        break;\n      case 'ThickThinMediumGap':\n        value = 13;\n        break;\n      case 'ThinThickThinMediumGap':\n        value = 14;\n        break;\n      case 'ThinThickLargeGap':\n        value = 15;\n        break;\n      case 'ThickThinLargeGap':\n        value = 16;\n        break;\n      case 'ThinThickThinLargeGap':\n        value = 17;\n        break;\n      case 'SingleWavy':\n        //wave.\n        value = 18;\n        break;\n      case 'DoubleWavy':\n        value = 19;\n        break;\n      case 'DashSmallGap':\n        value = 20;\n        break;\n      case 'DashDotStroked':\n        value = 21;\n        break;\n      case 'Emboss3D':\n        value = 22;\n        break;\n      case 'Engrave3D':\n        value = 23;\n        break;\n      case 'Outset':\n        value = 24;\n        break;\n      case 'Inset':\n        value = 25;\n        break;\n    }\n    return value;\n  };\n  WBorder.prototype.hasValues = function () {\n    return this.hasValue('color') || this.hasValue('lineStyle') || this.hasValue('lineWidth') || this.hasValue('shadow') || this.hasValue('space') || this.hasValue('hasNoneStyle');\n  };\n  WBorder.prototype.hasValue = function (property) {\n    if (!isNullOrUndefined(this.uniqueBorderFormat)) {\n      var propertyType = WUniqueFormat.getPropertyType(this.uniqueBorderFormat.uniqueFormatType, property);\n      return this.uniqueBorderFormat.propertiesHash.containsKey(propertyType);\n    }\n    return false;\n  };\n  WBorder.prototype.cloneFormat = function () {\n    var border = new WBorder(undefined);\n    border.color = this.color;\n    border.lineStyle = this.lineStyle;\n    border.lineWidth = this.lineWidth;\n    border.shadow = this.shadow;\n    border.space = this.space;\n    return border;\n  };\n  /**\n   * @private\n   */\n  WBorder.prototype.clearFormat = function () {\n    if (!isNullOrUndefined(this.uniqueBorderFormat)) {\n      WBorder.uniqueBorderFormats.remove(this.uniqueBorderFormat);\n    }\n    this.uniqueBorderFormat = undefined;\n  };\n  /**\n   * Disposes the internal objects which are maintained.\n   * @private\n   */\n  WBorder.prototype.destroy = function () {\n    this.clearFormat();\n    this.ownerBase = undefined;\n  };\n  /**\n   * @private\n   */\n  WBorder.prototype.isEqualFormat = function (border) {\n    var value = false;\n    if (this.color === border.color && this.lineStyle === border.lineStyle && this.lineWidth === border.lineWidth && this.shadow == border.shadow && this.space === border.space) {\n      value = true;\n    }\n    return value;\n  };\n  WBorder.prototype.copyFormat = function (border) {\n    if (!isNullOrUndefined(border) && !isNullOrUndefined(border.uniqueBorderFormat)) {\n      if (border.hasValue('color')) {\n        this.color = border.color;\n      }\n      if (border.hasValue('lineStyle')) {\n        this.lineStyle = border.lineStyle;\n      }\n      if (border.hasValue('lineWidth')) {\n        this.lineWidth = border.lineWidth;\n      }\n      if (border.hasValue('shadow')) {\n        this.shadow = border.shadow;\n      }\n      if (border.hasValue('space')) {\n        this.space = border.space;\n      }\n      if (border.hasValue('hasNoneStyle')) {\n        this.hasNoneStyle = border.hasNoneStyle;\n      }\n    }\n  };\n  WBorder.clear = function () {\n    this.uniqueBorderFormats.clear();\n  };\n  WBorder.uniqueBorderFormats = new WUniqueFormats();\n  WBorder.uniqueFormatType = 1;\n  return WBorder;\n}();\nexport { WBorder };","map":{"version":3,"names":["Dictionary","WUniqueFormat","WUniqueFormats","isNullOrUndefined","WBorder","node","uniqueBorderFormat","undefined","ownerBase","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","lineStyle","hasNoneStyle","hasValue","property","propertyType","getPropertyType","uniqueFormatType","propValue","propertiesHash","getPropertyDefaultValue","initializeUniqueBorder","containsKey","uniqueBorderFormats","updateUniqueFormat","uniqueBorderFormatTemp","addUniqueBorderFormat","addUniqueFormat","modifiedProperty","add","getLineWidth","lineArray","getBorderLineWidthArray","lineWidth","width","i","length","borderLineArray","parseInt","toString","Math","abs","getBorderWeight","weight","numberOfLines","getNumberOfLines","borderNumber","getBorderNumber","getPrecedence","hasValues","cloneFormat","border","color","shadow","space","clearFormat","remove","destroy","isEqualFormat","copyFormat","clear"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/border.js"],"sourcesContent":["import { Dictionary } from '../../base/dictionary';\nimport { WUniqueFormat } from '../../base/unique-format';\nimport { WUniqueFormats } from '../../base/unique-formats';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\nvar WBorder = /** @class */ (function () {\n    function WBorder(node) {\n        this.uniqueBorderFormat = undefined;\n        this.ownerBase = undefined;\n        this.ownerBase = node;\n    }\n    Object.defineProperty(WBorder.prototype, \"color\", {\n        get: function () {\n            return this.getPropertyValue('color');\n        },\n        set: function (value) {\n            this.setPropertyValue('color', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"lineStyle\", {\n        get: function () {\n            return this.getPropertyValue('lineStyle');\n        },\n        set: function (value) {\n            this.setPropertyValue('lineStyle', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"lineWidth\", {\n        get: function () {\n            return this.getPropertyValue('lineWidth');\n        },\n        set: function (value) {\n            this.setPropertyValue('lineWidth', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"shadow\", {\n        get: function () {\n            return this.getPropertyValue('shadow');\n        },\n        set: function (value) {\n            this.setPropertyValue('shadow', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"space\", {\n        get: function () {\n            return this.getPropertyValue('space');\n        },\n        set: function (value) {\n            this.setPropertyValue('space', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"hasNoneStyle\", {\n        get: function () {\n            return this.getPropertyValue('hasNoneStyle');\n        },\n        set: function (value) {\n            this.setPropertyValue('hasNoneStyle', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WBorder.prototype, \"isBorderDefined\", {\n        get: function () {\n            return (this.lineStyle !== 'None' ||\n                (this.hasNoneStyle && this.hasValue('hasNoneStyle')));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /* eslint-disable */\n    WBorder.prototype.getPropertyValue = function (property) {\n        var hasValue = this.hasValue(property);\n        if (hasValue) {\n            var propertyType = WUniqueFormat.getPropertyType(WBorder.uniqueFormatType, property);\n            if (!isNullOrUndefined(this.uniqueBorderFormat)) {\n                var propValue = this.uniqueBorderFormat.propertiesHash.get(propertyType);\n                if (!isNullOrUndefined(propValue)) {\n                    return propValue;\n                }\n            }\n        }\n        return WBorder.getPropertyDefaultValue(property);\n    };\n    WBorder.prototype.setPropertyValue = function (property, value) {\n        if (isNullOrUndefined(value) || value === '') {\n            value = WBorder.getPropertyDefaultValue(property);\n        }\n        if (isNullOrUndefined(this.uniqueBorderFormat)) {\n            this.initializeUniqueBorder(property, value);\n        }\n        else {\n            var propertyType = WUniqueFormat.getPropertyType(this.uniqueBorderFormat.uniqueFormatType, property);\n            if (this.uniqueBorderFormat.propertiesHash.containsKey(propertyType) &&\n                this.uniqueBorderFormat.propertiesHash.get(propertyType) === value) {\n                //Do nothing, since no change in property value and return\n                return;\n            }\n            this.uniqueBorderFormat = WBorder.uniqueBorderFormats.updateUniqueFormat(this.uniqueBorderFormat, property, value);\n        }\n    };\n    WBorder.prototype.initializeUniqueBorder = function (property, propValue) {\n        var uniqueBorderFormatTemp = new Dictionary();\n        this.addUniqueBorderFormat('color', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('lineStyle', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('lineWidth', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('shadow', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('space', property, propValue, uniqueBorderFormatTemp);\n        this.addUniqueBorderFormat('hasNoneStyle', property, propValue, uniqueBorderFormatTemp);\n        this.uniqueBorderFormat = WBorder.uniqueBorderFormats.addUniqueFormat(uniqueBorderFormatTemp, WBorder.uniqueFormatType);\n    };\n    WBorder.prototype.addUniqueBorderFormat = function (property, modifiedProperty, propValue, uniqueBorderFormatTemp) {\n        var propertyType = WUniqueFormat.getPropertyType(WBorder.uniqueFormatType, property);\n        if (property === modifiedProperty) {\n            uniqueBorderFormatTemp.add(propertyType, propValue);\n        }\n    };\n    WBorder.getPropertyDefaultValue = function (property) {\n        var value = undefined;\n        /* eslint-enable */\n        switch (property) {\n            case 'color':\n                value = '#000000';\n                break;\n            case 'lineStyle':\n                value = 'None';\n                break;\n            case 'lineWidth':\n                value = 0;\n                break;\n            case 'shadow':\n                value = false;\n                break;\n            case 'space':\n                value = 0;\n                break;\n            case 'hasNoneStyle':\n                value = false;\n                break;\n        }\n        return value;\n    };\n    WBorder.prototype.getLineWidth = function () {\n        /* eslint-disable */\n        switch (this.lineStyle) {\n            case 'None':\n            case 'Cleared':\n                return 0;\n            case 'Triple':\n            case 'Double':\n            case 'ThinThickSmallGap':\n            case 'ThickThinSmallGap':\n            case 'ThinThickThinSmallGap':\n            case 'ThinThickMediumGap':\n            case 'ThickThinMediumGap':\n            case 'ThinThickThinMediumGap':\n            case 'ThinThickLargeGap':\n            case 'ThickThinLargeGap':\n            case 'ThinThickThinLargeGap':\n            case 'Emboss3D':\n            case 'Engrave3D':\n                {\n                    var lineArray = this.getBorderLineWidthArray(this.lineStyle, this.lineWidth);\n                    var width = 0;\n                    for (var i = 0; i < lineArray.length; i++) {\n                        width += lineArray[i];\n                    }\n                    return width;\n                }\n            case 'Single':\n            case 'DashLargeGap':\n            case 'DashSmallGap':\n            case 'Dot':\n            case 'DashDot':\n            case 'DashDotDot':\n            case 'Thick':\n                return (this.lineWidth >= 0.5 ? this.lineWidth : 0.5);\n            case 'SingleWavy':\n                return (this.lineWidth === 1.5 ? 3 : 2.5); //Double wave border only draw with the fixed width\n            case 'DoubleWavy':\n                return (6.75); //Double wave border only draw with the fixed width\n            case 'DashDotStroked':\n            case 'Outset':\n                return (this.lineWidth >= 0.5 ? this.lineWidth : 0.5);\n        }\n        return (this.lineWidth >= 0.5 ? this.lineWidth : 0.5);\n        /* eslint-enable */\n    };\n    WBorder.prototype.getBorderLineWidthArray = function (lineStyle, lineWidth) {\n        var borderLineArray = [lineWidth];\n        switch (lineStyle) {\n            case 'Double':\n                borderLineArray = [1, 1, 1];\n                break;\n            case 'ThinThickSmallGap':\n                borderLineArray = [1, -0.75, -0.75];\n                break;\n            case 'ThickThinSmallGap':\n                borderLineArray = [-0.75, -0.75, 1];\n                break;\n            case 'ThinThickMediumGap':\n                borderLineArray = [1, 0.5, 0.5];\n                break;\n            case 'ThickThinMediumGap':\n                borderLineArray = [0.5, 0.5, 1];\n                break;\n            case 'ThinThickLargeGap':\n                borderLineArray = [-1.5, 1, -0.75];\n                break;\n            case 'ThickThinLargeGap':\n                borderLineArray = [-0.75, 1, -1.5];\n                break;\n            case 'Triple':\n                borderLineArray = [1, 1, 1, 1, 1];\n                break;\n            case 'ThinThickThinSmallGap':\n                borderLineArray = [-0.75, -0.75, 1, -0.75, -0.75];\n                break;\n            case 'ThinThickThinMediumGap':\n                borderLineArray = [0.5, 0.5, 1, 0.5, 0.5];\n                break;\n            case 'ThinThickThinLargeGap':\n                borderLineArray = [-0.75, 1, -1.5, 1, -0.75];\n                break;\n            case 'Emboss3D':\n            case 'Engrave3D':\n                borderLineArray = [0.25, 0, 1, 0, 0.25];\n                break;\n        }\n        if (borderLineArray.length === 1) {\n            return [lineWidth];\n        }\n        for (var i = 0; i < borderLineArray.length; i++) {\n            if (borderLineArray[parseInt(i.toString(), 10)] >= 0) {\n                borderLineArray[parseInt(i.toString(), 10)] = borderLineArray[parseInt(i.toString(), 10)] * lineWidth;\n            }\n            else {\n                borderLineArray[parseInt(i.toString(), 10)] = Math.abs(borderLineArray[parseInt(i.toString(), 10)]);\n            }\n        }\n        return borderLineArray;\n    };\n    WBorder.prototype.getBorderWeight = function () {\n        var weight = 0;\n        var numberOfLines = this.getNumberOfLines();\n        var borderNumber = this.getBorderNumber();\n        switch (this.lineStyle) {\n            case 'Single':\n            case 'DashSmallGap':\n            case 'DashDot':\n            case 'DashDotDot':\n            case 'Double':\n            case 'Triple':\n            case 'ThinThickSmallGap':\n            case 'ThickThinSmallGap':\n            case 'ThinThickThinSmallGap':\n            case 'ThinThickMediumGap':\n            case 'ThickThinMediumGap':\n            case 'ThinThickThinMediumGap':\n            case 'ThinThickLargeGap':\n            case 'ThickThinLargeGap':\n            case 'ThinThickThinLargeGap':\n            case 'SingleWavy':\n            case 'DoubleWavy':\n            case 'DashDotStroked':\n            case 'Emboss3D':\n            case 'Engrave3D':\n            case 'Outset':\n            case 'Inset':\n            case 'Thick':\n                weight = this.lineWidth * borderNumber;\n                break;\n            case 'Dot':\n            case 'DashLargeGap':\n                weight = 1;\n                break;\n        }\n        return weight;\n    };\n    WBorder.prototype.getBorderNumber = function () {\n        var borderNumber = 0;\n        switch (this.lineStyle) {\n            case 'Single':\n                borderNumber = 1;\n                break;\n            case 'Thick':\n                borderNumber = 2;\n                break;\n            case 'Double':\n                borderNumber = 3;\n                break;\n            case 'Dot':\n                borderNumber = 4;\n                break;\n            case 'DashLargeGap': //dashed.\n                borderNumber = 5;\n                break;\n            case 'DashDot':\n                borderNumber = 6;\n                break;\n            case 'DashDotDot':\n                borderNumber = 7;\n                break;\n            case 'Triple':\n                borderNumber = 8;\n                break;\n            case 'ThinThickSmallGap':\n                borderNumber = 9;\n                break;\n            case 'ThickThinSmallGap':\n                borderNumber = 10;\n                break;\n            case 'ThinThickThinSmallGap':\n                borderNumber = 11;\n                break;\n            case 'ThinThickMediumGap':\n                borderNumber = 12;\n                break;\n            case 'ThickThinMediumGap':\n                borderNumber = 13;\n                break;\n            case 'ThinThickThinMediumGap':\n                borderNumber = 14;\n                break;\n            case 'ThinThickLargeGap':\n                borderNumber = 15;\n                break;\n            case 'ThickThinLargeGap':\n                borderNumber = 16;\n                break;\n            case 'ThinThickThinLargeGap':\n                borderNumber = 17;\n                break;\n            case 'SingleWavy': //wave.\n                borderNumber = 18;\n                break;\n            case 'DoubleWavy':\n                borderNumber = 19;\n                break;\n            case 'DashSmallGap':\n                borderNumber = 20;\n                break;\n            case 'DashDotStroked':\n                borderNumber = 21;\n                break;\n            case 'Emboss3D':\n                borderNumber = 22;\n                break;\n            case 'Engrave3D':\n                borderNumber = 23;\n                break;\n            case 'Outset':\n                borderNumber = 24;\n                break;\n            case 'Inset':\n                borderNumber = 25;\n                break;\n        }\n        return borderNumber;\n    };\n    WBorder.prototype.getNumberOfLines = function () {\n        //ToDo: Need to analyze more on this.\n        var value = 0;\n        switch (this.lineStyle) {\n            case 'Single':\n            case 'Dot':\n            case 'DashSmallGap':\n            case 'DashLargeGap':\n            case 'DashDot':\n            case 'DashDotDot':\n                value = 1;\n                break;\n            case 'Double':\n                value = 3;\n                break;\n            case 'Triple':\n                value = 5;\n                break;\n            case 'ThinThickSmallGap':\n                value = 3;\n                break;\n            case 'ThickThinSmallGap':\n                value = 3;\n                break;\n            case 'ThinThickThinSmallGap':\n                value = 5;\n                break;\n            case 'ThinThickMediumGap':\n                value = 3;\n                break;\n            case 'ThickThinMediumGap':\n                value = 3;\n                break;\n            case 'ThinThickThinMediumGap':\n                value = 5;\n                break;\n            case 'ThinThickLargeGap':\n                value = 3;\n                break;\n            case 'ThickThinLargeGap':\n                value = 3;\n                break;\n            case 'ThinThickThinLargeGap':\n                value = 5;\n                break;\n            case 'SingleWavy':\n                value = 1;\n                break;\n            case 'DoubleWavy':\n                value = 2;\n                break;\n            case 'DashDotStroked':\n                value = 1;\n                break;\n            case 'Emboss3D':\n            case 'Engrave3D':\n                value = 3;\n                break;\n            case 'Outset':\n            case 'Inset':\n            case 'Thick':\n                value = 1;\n                break;\n        }\n        return value;\n    };\n    WBorder.prototype.getPrecedence = function () {\n        var value = 0;\n        switch (this.lineStyle) {\n            case 'Single':\n                value = 1;\n                break;\n            case 'Thick':\n                value = 2;\n                break;\n            case 'Double':\n                value = 3;\n                break;\n            case 'Dot':\n                value = 4;\n                break;\n            case 'DashLargeGap': //dashed.\n                value = 5;\n                break;\n            case 'DashDot':\n                value = 6;\n                break;\n            case 'DashDotDot':\n                value = 7;\n                break;\n            case 'Triple':\n                value = 8;\n                break;\n            case 'ThinThickSmallGap':\n                value = 9;\n                break;\n            case 'ThickThinSmallGap':\n                value = 10;\n                break;\n            case 'ThinThickThinSmallGap':\n                value = 11;\n                break;\n            case 'ThinThickMediumGap':\n                value = 12;\n                break;\n            case 'ThickThinMediumGap':\n                value = 13;\n                break;\n            case 'ThinThickThinMediumGap':\n                value = 14;\n                break;\n            case 'ThinThickLargeGap':\n                value = 15;\n                break;\n            case 'ThickThinLargeGap':\n                value = 16;\n                break;\n            case 'ThinThickThinLargeGap':\n                value = 17;\n                break;\n            case 'SingleWavy': //wave.\n                value = 18;\n                break;\n            case 'DoubleWavy':\n                value = 19;\n                break;\n            case 'DashSmallGap':\n                value = 20;\n                break;\n            case 'DashDotStroked':\n                value = 21;\n                break;\n            case 'Emboss3D':\n                value = 22;\n                break;\n            case 'Engrave3D':\n                value = 23;\n                break;\n            case 'Outset':\n                value = 24;\n                break;\n            case 'Inset':\n                value = 25;\n                break;\n        }\n        return value;\n    };\n    WBorder.prototype.hasValues = function () {\n        return this.hasValue('color') || this.hasValue('lineStyle') || this.hasValue('lineWidth') || this.hasValue('shadow') || this.hasValue('space') || this.hasValue('hasNoneStyle');\n    };\n    WBorder.prototype.hasValue = function (property) {\n        if (!isNullOrUndefined(this.uniqueBorderFormat)) {\n            var propertyType = WUniqueFormat.getPropertyType(this.uniqueBorderFormat.uniqueFormatType, property);\n            return this.uniqueBorderFormat.propertiesHash.containsKey(propertyType);\n        }\n        return false;\n    };\n    WBorder.prototype.cloneFormat = function () {\n        var border = new WBorder(undefined);\n        border.color = this.color;\n        border.lineStyle = this.lineStyle;\n        border.lineWidth = this.lineWidth;\n        border.shadow = this.shadow;\n        border.space = this.space;\n        return border;\n    };\n    /**\n     * @private\n     */\n    WBorder.prototype.clearFormat = function () {\n        if (!isNullOrUndefined(this.uniqueBorderFormat)) {\n            WBorder.uniqueBorderFormats.remove(this.uniqueBorderFormat);\n        }\n        this.uniqueBorderFormat = undefined;\n    };\n    /**\n     * Disposes the internal objects which are maintained.\n     * @private\n     */\n    WBorder.prototype.destroy = function () {\n        this.clearFormat();\n        this.ownerBase = undefined;\n    };\n    /**\n     * @private\n     */\n    WBorder.prototype.isEqualFormat = function (border) {\n        var value = false;\n        if (this.color === border.color && this.lineStyle === border.lineStyle && this.lineWidth === border.lineWidth && this.shadow == border.shadow && this.space === border.space) {\n            value = true;\n        }\n        return value;\n    };\n    WBorder.prototype.copyFormat = function (border) {\n        if (!isNullOrUndefined(border) && !isNullOrUndefined(border.uniqueBorderFormat)) {\n            if (border.hasValue('color')) {\n                this.color = border.color;\n            }\n            if (border.hasValue('lineStyle')) {\n                this.lineStyle = border.lineStyle;\n            }\n            if (border.hasValue('lineWidth')) {\n                this.lineWidth = border.lineWidth;\n            }\n            if (border.hasValue('shadow')) {\n                this.shadow = border.shadow;\n            }\n            if (border.hasValue('space')) {\n                this.space = border.space;\n            }\n            if (border.hasValue('hasNoneStyle')) {\n                this.hasNoneStyle = border.hasNoneStyle;\n            }\n        }\n    };\n    WBorder.clear = function () {\n        this.uniqueBorderFormats.clear();\n    };\n    WBorder.uniqueBorderFormats = new WUniqueFormats();\n    WBorder.uniqueFormatType = 1;\n    return WBorder;\n}());\nexport { WBorder };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}