{"ast":null,"code":"import { FontScriptType } from '../../base/types';\nimport { WShading } from '../format/index';\nimport { HelperMethods } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { WList } from '../list/list';\nimport { WAbstractList } from '../list/abstract-list';\nimport { WListLevel } from '../list/list-level';\n/* eslint-disable */\n/**\n * Selection character format implementation\n */\nvar SelectionCharacterFormat = /** @class */function () {\n  /**\n   * @param selection\n   * @private\n   */\n  function SelectionCharacterFormat(selection) {\n    this.boldIn = undefined;\n    this.italicIn = undefined;\n    this.underlineIn = undefined;\n    this.strikeThroughIn = undefined;\n    this.baselineAlignmentIn = undefined;\n    this.highlightColorIn = undefined;\n    this.fontSizeIn = 0;\n    this.scriptType = FontScriptType.English;\n    this.fontColorIn = undefined;\n    this.allCapsIn = undefined;\n    /**\n     * @private\n     */\n    this.boldBidi = undefined;\n    /**\n     * @private\n     */\n    this.italicBidi = undefined;\n    /**\n     * @private\n     */\n    this.fontSizeBidi = 0;\n    /**\n     * @private\n     */\n    this.bidi = undefined;\n    /**\n     * @private\n     */\n    this.bdo = undefined;\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"fontSize\", {\n    /**\n     * Gets the font size of selected contents.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.fontSizeIn;\n    },\n    /**\n     * Sets the font size of selected contents.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.fontSizeIn) {\n        return;\n      }\n      this.fontSizeIn = value;\n      this.notifyPropertyChanged('fontSize');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"renderedFontFamily\", {\n    get: function () {\n      return this.renderedFontFamilyIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"fontFamily\", {\n    /**\n     * Gets or sets the font family of selected contents.\n     *\n     * @aspType string\n     */\n    get: function () {\n      return this.fontFamilyIn;\n    },\n    /**\n     * Sets the font family of selected contents.\n     *\n     * @aspType string\n     */\n    set: function (value) {\n      if (value === this.fontFamilyIn) {\n        return;\n      }\n      this.fontFamilyIn = this.renderedFontFamilyIn = value;\n      this.notifyPropertyChanged('fontFamily');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"fontColor\", {\n    /**\n     * Gets or sets the font color of selected contents.\n     *\n     * @aspType string\n     */\n    get: function () {\n      return this.fontColorIn;\n    },\n    /**\n     * Sets the font color of selected contents.\n     *\n     * @aspType string\n     */\n    set: function (value) {\n      if (value === this.fontColorIn) {\n        return;\n      }\n      this.fontColorIn = value;\n      this.notifyPropertyChanged('fontColor');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"bold\", {\n    /**\n     * Gets or sets the bold formatting of selected contents.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.boldIn;\n    },\n    /**\n     * Sets the bold formatting of selected contents.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      if (value === this.boldIn) {\n        return;\n      }\n      this.boldIn = value;\n      this.notifyPropertyChanged('bold');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"italic\", {\n    /**\n     * Gets or sets the italic formatting of selected contents.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.italicIn;\n    },\n    /**\n     * Sets the italic formatting of selected contents.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      if (value === this.italic) {\n        return;\n      }\n      this.italicIn = value;\n      this.notifyPropertyChanged('italic');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"strikethrough\", {\n    /**\n     * Gets or sets the strikethrough property of selected contents.\n     */\n    get: function () {\n      return this.strikeThroughIn;\n    },\n    /**\n     * Sets the strikethrough property of selected contents.\n     */\n    set: function (value) {\n      if (value === this.strikeThroughIn) {\n        return;\n      }\n      this.strikeThroughIn = value;\n      this.notifyPropertyChanged('strikethrough');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"baselineAlignment\", {\n    /**\n     * Gets or sets the baseline alignment property of selected contents.\n     */\n    get: function () {\n      return this.baselineAlignmentIn;\n    },\n    /**\n     * Sets the baseline alignment property of selected contents.\n     */\n    set: function (value) {\n      if (value === this.baselineAlignmentIn) {\n        return;\n      }\n      this.baselineAlignmentIn = value;\n      this.notifyPropertyChanged('baselineAlignment');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"underline\", {\n    /**\n     * Gets or sets the underline style of selected contents.\n     */\n    get: function () {\n      return this.underlineIn;\n    },\n    /**\n     * Sets the underline style of selected contents.\n     */\n    set: function (value) {\n      if (value === this.underlineIn) {\n        return;\n      }\n      this.underlineIn = value;\n      this.notifyPropertyChanged('underline');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"highlightColor\", {\n    /**\n     * Gets or sets the highlight color of selected contents.\n     */\n    get: function () {\n      return this.highlightColorIn;\n    },\n    /**\n     * Sets the highlight color of selected contents.\n     */\n    set: function (value) {\n      if (value === this.highlightColorIn && value !== \"NoColor\") {\n        return;\n      }\n      this.highlightColorIn = value;\n      this.notifyPropertyChanged('highlightColor');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCharacterFormat.prototype, \"allCaps\", {\n    /**\n     * Gets or sets the allCaps formatting of selected contents.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.allCapsIn;\n    },\n    /**\n     * Sets the allCaps formatting of selected contents.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      if (value === this.allCapsIn) {\n        return;\n      }\n      this.allCapsIn = value;\n      this.notifyPropertyChanged('allCaps');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionCharacterFormat.prototype.getPropertyValue = function (property) {\n    switch (property) {\n      case 'bold':\n        return this.bold;\n      case 'italic':\n        return this.italic;\n      case 'fontSize':\n        if (this.fontSize >= 1) {\n          return this.fontSize;\n        }\n        return undefined;\n      case 'fontFamily':\n        return this.fontFamily;\n      case 'strikethrough':\n        return this.strikethrough;\n      case 'baselineAlignment':\n        return this.baselineAlignment;\n      case 'highlightColor':\n        return this.highlightColor;\n      case 'underline':\n        return this.underline;\n      case 'fontColor':\n        return this.fontColor;\n      case 'allCaps':\n        return this.allCaps;\n      default:\n        return undefined;\n    }\n  };\n  /**\n   * Notifies whenever property gets changed.\n   *\n   * @param {string} propertyName\n   */\n  SelectionCharacterFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    if (!isNullOrUndefined(this.selection) && (this.selection.isCleared || this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode() || !this.selection.owner.isDocumentLoaded || this.selection.owner.isPastingContent) && !this.selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n      var propertyValue = this.getPropertyValue(propertyName);\n      if (!isNullOrUndefined(propertyValue)) {\n        this.selection.owner.editorModule.onApplyCharacterFormat(propertyName, propertyValue);\n      }\n    }\n  };\n  /**\n   * Copies the source format.\n   *\n   * @param {WCharacterFormat} format\n   * @returns {void}\n   * @private\n   */\n  SelectionCharacterFormat.prototype.copyFormat = function (format, renderFontFamily) {\n    this.styleName = !isNullOrUndefined(format.baseCharStyle) ? format.baseCharStyle.name : 'Default Paragraph Font';\n    this.fontSize = format.fontSize;\n    this.renderedFontFamilyIn = renderFontFamily;\n    this.fontFamily = format.fontFamily;\n    this.bold = format.bold;\n    this.italic = format.italic;\n    this.baselineAlignment = format.baselineAlignment;\n    this.underline = format.underline;\n    this.fontColor = format.fontColor;\n    this.highlightColor = format.highlightColor;\n    this.strikethrough = format.strikethrough;\n    this.bidi = format.bidi;\n    this.bdo = format.bdo;\n    this.boldBidi = format.boldBidi;\n    this.italicBidi = format.italicBidi;\n    this.fontFamilyBidi = format.fontFamilyBidi;\n    this.fontSizeBidi = format.fontSizeBidi;\n    this.allCaps = format.allCaps;\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WCharacterFormat} format\n   * @private\n   */\n  SelectionCharacterFormat.prototype.combineFormat = function (format, renderFontFamily) {\n    if (!isNullOrUndefined(this.bold) && this.bold !== format.bold) {\n      this.bold = undefined;\n    }\n    if (!isNullOrUndefined(this.italic) && this.italic !== format.italic) {\n      this.italic = undefined;\n    }\n    if (this.fontSize !== 0 && this.fontSize !== format.fontSize) {\n      this.fontSize = 0;\n    }\n    if (!isNullOrUndefined(this.renderedFontFamily) && this.renderedFontFamily !== renderFontFamily) {\n      this.renderedFontFamilyIn = undefined;\n    }\n    if (!isNullOrUndefined(this.fontFamily) && this.fontFamily !== format.fontFamily) {\n      this.fontFamily = undefined;\n    }\n    if (!isNullOrUndefined(this.highlightColor) && this.highlightColor !== format.highlightColor) {\n      this.highlightColor = undefined;\n    }\n    if (!isNullOrUndefined(this.baselineAlignment) && this.baselineAlignment !== format.baselineAlignment) {\n      this.baselineAlignment = undefined;\n    }\n    if (!isNullOrUndefined(this.fontColor) && this.fontColor !== format.fontColor) {\n      this.fontColor = undefined;\n    }\n    if (!isNullOrUndefined(this.underline) && this.underline !== format.underline) {\n      this.underline = undefined;\n    }\n    if (!isNullOrUndefined(this.strikethrough) && this.strikethrough !== format.strikethrough) {\n      this.strikethrough = undefined;\n    }\n    if (!isNullOrUndefined(this.boldBidi) && this.boldBidi !== format.boldBidi) {\n      this.boldBidi = undefined;\n    }\n    if (!isNullOrUndefined(this.italicBidi) && this.italicBidi !== format.italicBidi) {\n      this.italicBidi = undefined;\n    }\n    if (this.fontSizeBidi !== 0 && this.fontSizeBidi !== format.fontSizeBidi) {\n      this.fontSizeBidi = 0;\n    }\n    if (!isNullOrUndefined(this.fontFamilyBidi) && this.fontFamilyBidi !== format.fontFamilyBidi) {\n      this.fontFamilyBidi = undefined;\n    }\n    if (!isNullOrUndefined(this.bidi) && this.bidi !== format.bidi) {\n      this.bidi = undefined;\n    }\n    if (!isNullOrUndefined(this.bdo) && this.bdo !== format.bdo) {\n      this.bdo = undefined;\n    }\n    if (!isNullOrUndefined(this.allCaps) && this.allCaps !== format.allCaps) {\n      this.allCaps = undefined;\n    }\n  };\n  /**\n   * @private\n   */\n  SelectionCharacterFormat.prototype.canRetrieveNextCharacterFormat = function () {\n    if (isNullOrUndefined(this.bold) && isNullOrUndefined(this.italic) && this.fontSize === 0 && isNullOrUndefined(this.fontFamily) && isNullOrUndefined(this.highlightColor) && isNullOrUndefined(this.baselineAlignment) && isNullOrUndefined(this.fontColor) && isNullOrUndefined(this.underline) && isNullOrUndefined(this.strikethrough) && isNullOrUndefined(this.boldBidi) && isNullOrUndefined(this.italicBidi) && this.fontSizeBidi === 0 && isNullOrUndefined(this.fontFamilyBidi) && isNullOrUndefined(this.bdo) && isNullOrUndefined(this.allCaps)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Clones the format.\n   *\n   * @param {SelectionCharacterFormat} selectionCharacterFormat\n   * @returns {void}\n   * @private\n   */\n  SelectionCharacterFormat.prototype.cloneFormat = function (selectionCharacterFormat) {\n    this.bold = selectionCharacterFormat.bold;\n    this.italic = selectionCharacterFormat.italic;\n    this.underline = selectionCharacterFormat.underline;\n    this.strikethrough = selectionCharacterFormat.strikethrough;\n    this.baselineAlignment = selectionCharacterFormat.baselineAlignment;\n    this.highlightColor = selectionCharacterFormat.highlightColor;\n    this.fontSize = selectionCharacterFormat.fontSize;\n    this.fontFamily = selectionCharacterFormat.fontFamily;\n    this.fontColor = selectionCharacterFormat.fontColor;\n    this.styleName = selectionCharacterFormat.styleName;\n    this.bidi = selectionCharacterFormat.bidi;\n    this.bdo = selectionCharacterFormat.bdo;\n    this.boldBidi = selectionCharacterFormat.boldBidi;\n    this.italicBidi = selectionCharacterFormat.italicBidi;\n    this.fontSizeBidi = selectionCharacterFormat.fontSizeBidi;\n    this.fontFamilyBidi = selectionCharacterFormat.fontFamilyBidi;\n    this.allCaps = selectionCharacterFormat.allCaps;\n  };\n  /**\n   * Checks whether current format is equal to the source format or not.\n   *\n   * @param {SelectionCharacterFormat} format\n   * @returns boolean\n   * @private\n   */\n  SelectionCharacterFormat.prototype.isEqualFormat = function (format) {\n    return this.fontSize === format.fontSize && this.strikethrough === format.strikethrough && this.bold === format.bold && this.fontFamily === format.fontFamily && this.underline === format.underline && this.highlightColor === format.highlightColor && this.italic === format.italic && this.baselineAlignment === format.baselineAlignment && this.fontColor === format.fontColor && this.allCaps === format.allCaps;\n  };\n  /**\n   * Clears the format.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionCharacterFormat.prototype.clearFormat = function () {\n    this.fontSizeIn = 0;\n    this.boldIn = undefined;\n    this.italicIn = undefined;\n    this.fontFamilyIn = undefined;\n    this.fontColorIn = undefined;\n    this.underlineIn = undefined;\n    this.strikeThroughIn = undefined;\n    this.highlightColorIn = undefined;\n    this.baselineAlignmentIn = undefined;\n    this.styleName = undefined;\n    this.bidi = undefined;\n    this.bdo = undefined;\n    this.boldBidi = undefined;\n    this.italicBidi = undefined;\n    this.fontFamilyBidi = undefined;\n    this.fontSizeBidi = undefined;\n    this.allCapsIn = undefined;\n  };\n  /**\n   * Destroys the maintained resources.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionCharacterFormat.prototype.destroy = function () {\n    this.fontSizeIn = undefined;\n    this.boldIn = undefined;\n    this.italicIn = undefined;\n    this.fontFamilyIn = undefined;\n    this.fontColorIn = undefined;\n    this.underlineIn = undefined;\n    this.strikeThroughIn = undefined;\n    this.baselineAlignmentIn = undefined;\n    this.highlightColorIn = undefined;\n    this.selection = undefined;\n    this.styleName = undefined;\n    this.bidi = undefined;\n    this.bdo = undefined;\n    this.boldBidi = undefined;\n    this.italicBidi = undefined;\n    this.fontFamilyBidi = undefined;\n    this.fontSizeBidi = undefined;\n    this.allCapsIn = undefined;\n  };\n  return SelectionCharacterFormat;\n}();\nexport { SelectionCharacterFormat };\n/**\n * Selection Border implementation\n */\nvar SelectionBorder = /** @class */function () {\n  /**\n   * @param SelectionBorders\n   * @private\n   */\n  function SelectionBorder(selection, borderType, node) {\n    this.colorIn = undefined;\n    this.lineStyleIn = undefined;\n    this.lineWidthIn = undefined;\n    this.shadowIn = undefined;\n    this.spaceIn = undefined;\n    this.borderType = borderType;\n    this.ownerBase = node;\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionBorder.prototype, \"color\", {\n    /**\n     * Gets or sets the color for selected paragraph borders.\n     *\n     * @default undefined\n     * @aspType string\n     */\n    get: function () {\n      return this.colorIn;\n    },\n    /**\n     * Sets the color for selected paragraph borders.\n     *\n     * @default undefined\n     * @aspType string\n     */\n    set: function (value) {\n      if (value === this.colorIn) {\n        return;\n      }\n      this.colorIn = value;\n      this.notifyPropertyChanged(\"color\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorder.prototype, \"lineStyle\", {\n    /**\n     * Gets or sets the lineStyle for selected paragraph borders.\n     *\n     * @default undefined\n     * @aspType LineStyle\n     */\n    get: function () {\n      return this.lineStyleIn;\n    },\n    /**\n     * Sets the lineStyle for selected paragraph borders.\n     *\n     * @default undefined\n     * @aspType LineStyle\n     */\n    set: function (value) {\n      if (value === this.lineStyleIn) {\n        return;\n      }\n      this.lineStyleIn = value;\n      this.notifyPropertyChanged(\"lineStyle\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorder.prototype, \"lineWidth\", {\n    /**\n     * Gets or sets the lineWidth for selected paragraph borders.\n     *\n     * @default undefined\n     * @aspType number\n     */\n    get: function () {\n      return this.lineWidthIn;\n    },\n    /**\n     * Sets the lineWidth for selected paragraphs borders.\n     *\n     * @default undefined\n     * @aspType number\n     */\n    set: function (value) {\n      if (value === this.lineWidthIn) {\n        return;\n      }\n      this.lineWidthIn = value;\n      this.notifyPropertyChanged(\"lineWidth\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorder.prototype, \"shadow\", {\n    /**\n     * Gets or sets the shadow for selected paragraph borders.\n     *\n     * @default undefined\n     * @aspType boolean\n     */\n    get: function () {\n      return this.shadowIn;\n    },\n    /**\n     * Sets the shadow for selected paragraphs borders.\n     *\n     * @default undefined\n     * @aspType boolean\n     */\n    set: function (value) {\n      if (value === this.shadowIn) {\n        return;\n      }\n      this.shadowIn = value;\n      this.notifyPropertyChanged(\"shadow\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorder.prototype, \"space\", {\n    /**\n     * Gets or sets the space for selected paragraphs borders.\n     *\n     * @default undefined\n     * @aspType number\n     */\n    get: function () {\n      return this.spaceIn;\n    },\n    /**\n     * Sets the space for selected paragraphs borders.\n     *\n     * @default undefined\n     * @aspType number\n     */\n    set: function (value) {\n      if (value === this.spaceIn) {\n        return;\n      }\n      this.spaceIn = value;\n      this.notifyPropertyChanged('space');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   *Copies the format.\n   *\n   * @param {WBorder} border\n   * @returns {void}\n   * @private\n   */\n  SelectionBorder.prototype.copyFormat = function (border) {\n    this.color = border.color;\n    this.lineStyle = border.lineStyle;\n    this.lineWidth = border.lineWidth;\n    this.shadow = border.shadow;\n    this.space = border.space;\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WBorder} border\n   * @returns {void}\n   * @private\n   */\n  SelectionBorder.prototype.combineFormat = function (border) {\n    if (!isNullOrUndefined(this.color) && this.color !== border.color) {\n      this.color = undefined;\n    }\n    if (!isNullOrUndefined(this.lineStyle) && this.lineStyle !== border.lineStyle) {\n      this.lineStyle = undefined;\n    }\n    if (!isNullOrUndefined(this.lineWidth) && this.lineWidth !== border.lineWidth) {\n      this.lineWidth = undefined;\n    }\n    if (!isNullOrUndefined(this.shadow) && this.shadow !== border.shadow) {\n      this.shadow = undefined;\n    }\n    if (!isNullOrUndefined(this.space) && this.space !== border.space) {\n      this.space = undefined;\n    }\n  };\n  SelectionBorder.prototype.getPropertyValue = function (property) {\n    switch (property) {\n      case 'color':\n        return this.color;\n      case 'lineStyle':\n        return this.lineStyle;\n      case 'lineWidth':\n        return this.lineWidth;\n      case 'space':\n        return this.space;\n      case 'shadow':\n        return this.shadow;\n    }\n    return undefined;\n  };\n  /**\n   * Notifies whenever the property gets changed.\n   * @param {string} propertyName\n   * @returns {void}\n   */\n  SelectionBorder.prototype.notifyPropertyChanged = function (propertyName) {\n    if (!isNullOrUndefined(this.selection) && (this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode() || !this.selection.owner.isDocumentLoaded) && !this.selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n      var editor = this.selection.owner.editorModule;\n      var propertyValue = this.getPropertyValue(propertyName);\n      if (!isNullOrUndefined(propertyValue)) {\n        editor.applyParagraphBorders(propertyName, this.borderType, propertyValue);\n      }\n    }\n  };\n  /**\n   * Destroys the managed resources.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionBorder.prototype.destroy = function () {\n    if (!isNullOrUndefined(this.colorIn)) {\n      this.colorIn = undefined;\n    }\n    if (!isNullOrUndefined(this.lineStyleIn)) {\n      this.lineStyleIn = undefined;\n    }\n    if (!isNullOrUndefined(this.lineWidthIn)) {\n      this.lineWidthIn = undefined;\n    }\n    if (!isNullOrUndefined(this.spaceIn)) {\n      this.spaceIn = undefined;\n    }\n    if (!isNullOrUndefined(this.shadowIn)) {\n      this.shadowIn = undefined;\n    }\n  };\n  return SelectionBorder;\n}();\nexport { SelectionBorder };\n/**\n * Selection Borders implementation\n */\nvar SelectionBorders = /** @class */function () {\n  /**\n   * @param Object\n   * @private\n   */\n  function SelectionBorders(selection, node) {\n    this.ownerBase = undefined;\n    this.ownerBase = node;\n    this.selection = selection;\n    this.topIn = new SelectionBorder(this.selection, 'topBorder', this);\n    this.bottomIn = new SelectionBorder(this.selection, 'bottomBorder', this);\n    this.rightIn = new SelectionBorder(this.selection, 'rightBorder', this);\n    this.leftIn = new SelectionBorder(this.selection, 'leftBorder', this);\n    this.horizontalIn = new SelectionBorder(this.selection, 'horizontalBorder', this);\n    this.verticalIn = new SelectionBorder(this.selection, 'verticalBorder', this);\n  }\n  Object.defineProperty(SelectionBorders.prototype, \"top\", {\n    /**\n     * Gets the top Border for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorder\n     */\n    get: function () {\n      return this.topIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorders.prototype, \"bottom\", {\n    /**\n     * Gets the bottom Border for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorder\n     */\n    get: function () {\n      return this.bottomIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorders.prototype, \"left\", {\n    /**\n     * Gets the left Border for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorder\n     */\n    get: function () {\n      return this.leftIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorders.prototype, \"right\", {\n    /**\n     * Gets the right Border for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorder\n     */\n    get: function () {\n      return this.rightIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorders.prototype, \"horizontal\", {\n    /**\n     * Gets the horizontal Border for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorder\n     */\n    get: function () {\n      return this.horizontalIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionBorders.prototype, \"vertical\", {\n    /**\n     * Gets the vertical Border for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorder\n     */\n    get: function () {\n      return this.verticalIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Copies the format.\n   *\n   * @param {WBorders} borders\n   * @returns {void}\n   * @private\n   */\n  SelectionBorders.prototype.copyFormat = function (borders) {\n    this.top.copyFormat(borders.top);\n    this.bottom.copyFormat(borders.bottom);\n    this.left.copyFormat(borders.left);\n    this.right.copyFormat(borders.right);\n    this.horizontal.copyFormat(borders.horizontal);\n    this.vertical.copyFormat(borders.vertical);\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WBorders} borders\n   * @private\n   */\n  SelectionBorders.prototype.combineFormat = function (borders) {\n    this.top.combineFormat(borders.top);\n    this.bottom.combineFormat(borders.bottom);\n    this.left.combineFormat(borders.left);\n    this.right.combineFormat(borders.right);\n    this.vertical.combineFormat(borders.vertical);\n    this.horizontal.combineFormat(borders.horizontal);\n  };\n  /**\n   * Destroys the managed resources.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionBorders.prototype.destroy = function () {\n    if (!isNullOrUndefined(this.topIn)) {\n      this.topIn.destroy();\n      this.topIn = undefined;\n    }\n    if (!isNullOrUndefined(this.topIn)) {\n      this.bottomIn.destroy();\n      this.bottomIn = undefined;\n    }\n    if (!isNullOrUndefined(this.leftIn)) {\n      this.leftIn.destroy();\n      this.leftIn = undefined;\n    }\n    if (!isNullOrUndefined(this.rightIn)) {\n      this.rightIn.destroy();\n      this.rightIn = undefined;\n    }\n    if (!isNullOrUndefined(this.horizontalIn)) {\n      this.horizontalIn.destroy();\n      this.horizontalIn = undefined;\n    }\n    if (!isNullOrUndefined(this.verticalIn)) {\n      this.verticalIn.destroy();\n      this.verticalIn = undefined;\n    }\n  };\n  return SelectionBorders;\n}();\nexport { SelectionBorders };\n/**\n * Selection paragraph format implementation\n */\nvar SelectionParagraphFormat = /** @class */function () {\n  /**\n   * @param selection\n   * @param documentHelper\n   * @private\n   */\n  function SelectionParagraphFormat(selection, documentHelper) {\n    // Declaring the character format properties.\n    this.leftIndentIn = 0;\n    this.rightIndentIn = 0;\n    this.beforeSpacingIn = 0;\n    this.afterSpacingIn = 0;\n    this.spaceAfterAutoIn = undefined;\n    this.spaceBeforeAutoIn = undefined;\n    this.textAlignmentIn = undefined;\n    this.outlineLevelIn = undefined;\n    this.firstLineIndentIn = 0;\n    this.lineSpacingIn = 1;\n    this.lineSpacingTypeIn = undefined;\n    this.bidiIn = undefined;\n    this.keepWithNextIn = undefined;\n    this.keepLinesTogetherIn = undefined;\n    this.widowControlIn = undefined;\n    this.contextualSpacingIn = undefined;\n    this.listLevelNumberIn = -1;\n    this.selection = selection;\n    this.documentHelper = documentHelper;\n    this.bordersIn = new SelectionBorders(this.selection, this);\n  }\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"borders\", {\n    /**\n     * Gets the borders for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType SelectionBorders\n     */\n    get: function () {\n      return this.bordersIn;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"leftIndent\", {\n    /**\n     * Gets or Sets the left indent for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.leftIndentIn;\n    },\n    /**\n     * Sets the left indent for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.leftIndentIn) {\n        return;\n      }\n      this.leftIndentIn = value;\n      this.notifyPropertyChanged('leftIndent');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"rightIndent\", {\n    /**\n     * Gets or Sets the right indent for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.rightIndentIn;\n    },\n    /**\n     * Sets the right indent for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.rightIndentIn) {\n        return;\n      }\n      this.rightIndentIn = value;\n      this.notifyPropertyChanged('rightIndent');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"firstLineIndent\", {\n    /**\n     * Gets or Sets the first line indent for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.firstLineIndentIn;\n    },\n    /**\n     * Sets the first line indent for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.firstLineIndentIn) {\n        return;\n      }\n      this.firstLineIndentIn = value;\n      this.notifyPropertyChanged('firstLineIndent');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"textAlignment\", {\n    /**\n     * Gets or Sets the text alignment for selected paragraphs.\n     *\n     * @default undefined\n     */\n    get: function () {\n      return this.textAlignmentIn;\n    },\n    /**\n     * Sets the text alignment for selected paragraphs.\n     *\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.textAlignmentIn) {\n        return;\n      }\n      this.textAlignmentIn = value;\n      this.notifyPropertyChanged('textAlignment');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"outlineLevel\", {\n    /**\n     * Gets or Sets the outline level for selected paragraphs.\n     *\n     * @default undefined\n     */\n    get: function () {\n      return this.outlineLevelIn;\n    },\n    /**\n     * Sets the outline level for selected paragraphs.\n     *\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.outlineLevelIn) {\n        return;\n      }\n      this.outlineLevelIn = value;\n      this.notifyPropertyChanged('outlineLevel');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"afterSpacing\", {\n    /**\n     * Sets the after spacing for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.afterSpacingIn;\n    },\n    /**\n     * Gets or Sets the after spacing for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.afterSpacingIn) {\n        return;\n      }\n      this.afterSpacingIn = value;\n      this.notifyPropertyChanged('afterSpacing');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"beforeSpacing\", {\n    /**\n     * Gets or Sets the before spacing for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.beforeSpacingIn;\n    },\n    /**\n     * Sets the before spacing for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.beforeSpacingIn) {\n        return;\n      }\n      this.beforeSpacingIn = value;\n      this.notifyPropertyChanged('beforeSpacing');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"spaceAfterAuto\", {\n    /**\n     * Gets or Sets the space after auto for selected paragraphs.\n     *\n     * @default false\n     * @aspType bool\n     */\n    get: function () {\n      return this.spaceAfterAutoIn;\n    },\n    /**\n     *  Sets the space after auto for selected paragraphs.\n     *\n     * @aspType bool\n     * @blazorType bool\n     */\n    set: function (value) {\n      if (value === this.spaceAfterAutoIn) {\n        return;\n      }\n      this.spaceAfterAutoIn = value;\n      this.notifyPropertyChanged('spaceAfterAuto');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"spaceBeforeAuto\", {\n    /**\n     * Gets or Sets the space before auto for selected paragraphs.\n     *\n     * @default false\n     * @aspType bool\n     */\n    get: function () {\n      return this.spaceBeforeAutoIn;\n    },\n    /**\n     *  Sets the space before auto for selected paragraphs.\n     *\n     * @aspType bool\n     * @blazorType bool\n     */\n    set: function (value) {\n      if (value === this.spaceBeforeAutoIn) {\n        return;\n      }\n      this.spaceBeforeAutoIn = value;\n      this.notifyPropertyChanged('spaceBeforeAuto');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"lineSpacing\", {\n    /**\n     * Gets or Sets the line spacing for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.lineSpacingIn;\n    },\n    /**\n     * Sets the line spacing for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.lineSpacingIn) {\n        return;\n      }\n      this.lineSpacingIn = value;\n      this.notifyPropertyChanged('lineSpacing');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"lineSpacingType\", {\n    /**\n     * Gets or Sets the line spacing type for selected paragraphs.\n     *\n     * @default undefined\n     */\n    get: function () {\n      return this.lineSpacingTypeIn;\n    },\n    /**\n     * Gets or Sets the line spacing type for selected paragraphs.\n     *\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.lineSpacingTypeIn) {\n        return;\n      }\n      this.lineSpacingTypeIn = value;\n      this.notifyPropertyChanged('lineSpacingType');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"listLevelNumber\", {\n    /**\n     * Sets the list level number for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.listLevelNumberIn;\n    },\n    /**\n     * Gets or Sets the list level number for selected paragraphs.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.listLevelNumberIn) {\n        return;\n      }\n      this.listLevelNumberIn = value;\n      this.notifyPropertyChanged('listLevelNumber');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"bidi\", {\n    /**\n     * Gets or Sets the bidirectional property for selected paragraphs\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.bidiIn;\n    },\n    /**\n     * Sets the bidirectional property for selected paragraphs\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      this.bidiIn = value;\n      this.notifyPropertyChanged('bidi');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"keepWithNext\", {\n    /**\n     * Gets or sets a value indicating whether the specified paragraph remains on the same page as the paragraph that follows it while paginating the document.\n     *\n     * @default false\n     * @aspType bool\n     * @returns {boolean} - `true` if the specified paragraph remains on the same page as the paragraph that follows it; otherwise, `false`.\n     */\n    get: function () {\n      return this.keepWithNextIn;\n    },\n    /**\n     * Sets a value indicating whether the specified paragraph remains on the same page as the paragraph that follows it while paginating the document.\n     *\n     * @aspType bool\n     * @blazorType bool\n     */\n    set: function (value) {\n      this.keepWithNextIn = value;\n      this.notifyPropertyChanged('keepWithNext');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"keepLinesTogether\", {\n    /**\n     * Gets or sets a value indicating whether all lines in the specified paragraphs remain on the same page while paginating the document.\n     *\n     * @default false\n     * @aspType bool\n     * @returns {boolean} - `true` if all lines in the specified paragraphs remain on the same page; otherwise, `false`.\n     */\n    get: function () {\n      return this.keepLinesTogetherIn;\n    },\n    /**\n     * Sets a value indicating whether all lines in the specified paragraphs remain on the same page while paginating the document.\n     *\n     * @aspType bool\n     * @blazorType bool\n     */\n    set: function (value) {\n      this.keepLinesTogetherIn = value;\n      this.notifyPropertyChanged('keepLinesTogether');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"widowControl\", {\n    /**\n     * Gets or sets a value indicating whether the first and last lines of the paragraph are to remain on the same page as the rest of the paragraph when paginating the document.\n     *\n     * @default true\n     * @aspType bool\n     * @returns {boolean} - `true` if the first and last lines of the paragraph are to remain on the same page; otherwise, `false`.\n     */\n    get: function () {\n      return this.widowControlIn;\n    },\n    /**\n     * Sets a value indicating whether the first and last lines of the paragraph are to remain on the same page as the rest of the paragraph when paginating the document.\n     *\n     * @default true\n     * @aspType bool\n     */\n    set: function (value) {\n      this.widowControlIn = value;\n      this.notifyPropertyChanged('widowControl');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"contextualSpacing\", {\n    /**\n     * Gets or sets a value indicating whether to add space between the paragraphs of same style.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.contextualSpacingIn;\n    },\n    /**\n     * Sets a value indicating whether to add space between the paragraphs of same style.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      this.contextualSpacingIn = value;\n      this.notifyPropertyChanged('contextualSpacing');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionParagraphFormat.prototype.validateLineSpacing = function () {\n    if (this.lineSpacingType !== 'Multiple' && this.lineSpacingIn < 12) {\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(SelectionParagraphFormat.prototype, \"listText\", {\n    /**\n     * Gets the list text for selected paragraphs.\n     *\n     * @aspType string\n     */\n    get: function () {\n      var listFormat = undefined;\n      var list = this.documentHelper.getListById(this.listId);\n      if (list instanceof WList && this.listLevelNumberIn > -1 && this.listLevelNumberIn < 9) {\n        var listLevel = list.getListLevel(this.listLevelNumber);\n        if (listLevel instanceof WListLevel) {\n          if (listLevel.listLevelPattern === 'Bullet') {\n            listFormat = listLevel.numberFormat;\n          } else {\n            listFormat = listLevel.numberFormat;\n            for (var i = 0; i < 9; i++) {\n              var levelPattern = '%' + (i + 1);\n              if (listFormat.indexOf(levelPattern) > -1) {\n                var level = i === this.listLevelNumberIn ? listLevel : list.getListLevel(i);\n                var listTextElement = this.selection.getListTextElementBox(this.selection.start.paragraph);\n                var listText = listTextElement ? listTextElement.text : '';\n                listFormat = listText;\n              }\n            }\n          }\n        }\n      }\n      return listFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionParagraphFormat.prototype.getPropertyValue = function (property) {\n    switch (property) {\n      case 'leftIndent':\n        return this.leftIndent;\n      case 'rightIndent':\n        return this.rightIndent;\n      case 'firstLineIndent':\n        return this.firstLineIndent;\n      case 'beforeSpacing':\n        return this.beforeSpacing;\n      case 'afterSpacing':\n        return this.afterSpacing;\n      case 'spaceAfterAuto':\n        return this.spaceAfterAuto;\n      case 'spaceBeforeAuto':\n        return this.spaceBeforeAuto;\n      case 'textAlignment':\n        return this.textAlignment;\n      case 'lineSpacing':\n        return this.lineSpacing;\n      case 'lineSpacingType':\n        return this.lineSpacingType;\n      case 'bidi':\n        return this.bidi;\n      case 'contextualSpacing':\n        return this.contextualSpacing;\n      case 'keepWithNext':\n        return this.keepWithNext;\n      case 'keepLinesTogether':\n        return this.keepLinesTogether;\n      case 'widowControl':\n        return this.widowControl;\n      case 'outlineLevel':\n        return this.outlineLevel;\n      default:\n        return undefined;\n    }\n  };\n  /**\n   * Notifies whenever the property gets changed.\n   *\n   * @param {string} propertyName\n   */\n  SelectionParagraphFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    if (!isNullOrUndefined(this.selection) && (this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode() || !this.selection.owner.isDocumentLoaded) && !this.selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n      var editorModule = this.selection.owner.editorModule;\n      if (propertyName === 'lineSpacing' || propertyName === 'lineSpacingType') {\n        var editorHistory = this.selection.owner.editorHistoryModule;\n        if (!(editorHistory && (editorHistory.isUndoing || editorHistory.isRedoing)) && this.validateLineSpacing()) {\n          this.selection.owner.editorHistoryModule.initComplexHistory(this.selection, 'LineSpacing');\n          if (propertyName === 'lineSpacing') {\n            this.lineSpacingTypeIn = 'Multiple';\n            var value_1 = this.getPropertyValue('lineSpacingType');\n            editorModule.onApplyParagraphFormat('lineSpacingType', value_1, false, false);\n            editorModule.onApplyParagraphFormat(propertyName, this.getPropertyValue(propertyName), false, false);\n          } else {\n            editorModule.onApplyParagraphFormat(propertyName, this.getPropertyValue(propertyName), false, false);\n            this.lineSpacingIn = 12;\n            editorModule.onApplyParagraphFormat('lineSpacing', this.getPropertyValue('lineSpacing'), false, false);\n          }\n          this.selection.owner.editorHistoryModule.updateComplexHistory();\n          return;\n        }\n      }\n      var value = this.getPropertyValue(propertyName);\n      if ((propertyName === 'leftIndent' || propertyName === 'rightIndent' || propertyName === 'firstLineIndent') && !(value >= -1056 && value < 1056)) {\n        return;\n      }\n      if (propertyName === 'listLevelNumber') {\n        editorModule.onApplyListInternal(this.documentHelper.getListById(this.listId), this.listLevelNumber);\n      } else {\n        editorModule.onApplyParagraphFormat(propertyName, value, propertyName === 'textAlignment' ? true : false, false);\n      }\n    }\n  };\n  /**\n   * Copies the format.\n   *\n   * @param {WParagraphFormat} format\n   * @returns {void}\n   * @private\n   */\n  SelectionParagraphFormat.prototype.copyFormat = function (format) {\n    this.styleName = !isNullOrUndefined(format.baseStyle) ? format.baseStyle.name : 'Normal';\n    this.leftIndent = format.leftIndent;\n    this.rightIndent = format.rightIndent;\n    this.firstLineIndent = format.firstLineIndent;\n    this.afterSpacing = format.afterSpacing;\n    this.beforeSpacing = format.beforeSpacing;\n    this.spaceAfterAuto = format.spaceAfterAuto;\n    this.spaceBeforeAuto = format.spaceBeforeAuto;\n    this.lineSpacing = format.lineSpacing;\n    this.lineSpacingType = format.lineSpacingType;\n    this.textAlignment = format.textAlignment;\n    this.outlineLevel = format.outlineLevel;\n    this.bidi = format.bidi;\n    this.keepLinesTogether = format.keepLinesTogether;\n    this.keepWithNext = format.keepWithNext;\n    this.widowControl = format.widowControl;\n    this.contextualSpacing = format.contextualSpacing;\n    this.borders.copyFormat(format.borders);\n    if (!isNullOrUndefined(format.listFormat) && !isNullOrUndefined(format.listFormat.listId)) {\n      this.listId = format.listFormat.listId;\n      this.listLevelNumber = format.listFormat.listLevelNumber;\n    } else {\n      this.listId = undefined;\n      this.listLevelNumber = 0;\n    }\n  };\n  /**\n   * Copies to format.\n   *\n   * @param {WParagraphFormat} format\n   * @private\n   */\n  SelectionParagraphFormat.prototype.copyToFormat = function (format) {\n    if (isNullOrUndefined(format)) {\n      return;\n    }\n    if (!isNullOrUndefined(this.afterSpacing)) {\n      format.afterSpacing = this.afterSpacing;\n    }\n    if (!isNullOrUndefined(this.beforeSpacing)) {\n      format.beforeSpacing = this.beforeSpacing;\n    }\n    if (!isNullOrUndefined(this.spaceAfterAuto)) {\n      format.spaceAfterAuto = this.spaceAfterAuto;\n    }\n    if (!isNullOrUndefined(this.spaceBeforeAuto)) {\n      format.spaceBeforeAuto = this.spaceBeforeAuto;\n    }\n    if (!isNullOrUndefined(this.leftIndent)) {\n      format.leftIndent = this.leftIndent;\n    }\n    if (!isNullOrUndefined(this.rightIndent)) {\n      format.rightIndent = this.rightIndent;\n    }\n    if (!isNullOrUndefined(this.textAlignment)) {\n      format.textAlignment = this.textAlignment;\n    }\n    if (!isNullOrUndefined(this.outlineLevel)) {\n      format.outlineLevel = this.outlineLevel;\n    }\n    if (!isNullOrUndefined(this.lineSpacing)) {\n      format.lineSpacing = this.lineSpacing;\n    }\n    if (!isNullOrUndefined(this.lineSpacingType)) {\n      format.lineSpacingType = this.lineSpacingType;\n    }\n    if (!isNullOrUndefined(this.firstLineIndent)) {\n      format.firstLineIndent = this.firstLineIndent;\n    }\n    if (!isNullOrUndefined(this.bidi)) {\n      format.bidi = this.bidi;\n    }\n    if (!isNullOrUndefined(this.keepWithNext)) {\n      format.keepWithNext = this.keepWithNext;\n    }\n    if (!isNullOrUndefined(this.keepLinesTogether)) {\n      format.keepLinesTogether = this.keepLinesTogether;\n    }\n    if (!isNullOrUndefined(this.widowControl)) {\n      format.widowControl = this.widowControl;\n    }\n    if (!isNullOrUndefined(this.contextualSpacing)) {\n      format.contextualSpacing = this.contextualSpacing;\n    }\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WParagraphFormat} format\n   * @private\n   */\n  SelectionParagraphFormat.prototype.combineFormat = function (format) {\n    if (!isNullOrUndefined(this.leftIndent) && this.leftIndent !== format.leftIndent) {\n      this.leftIndent = undefined;\n    }\n    if (!isNullOrUndefined(this.rightIndent) && this.rightIndent !== format.rightIndent) {\n      this.rightIndent = undefined;\n    }\n    if (!isNullOrUndefined(this.firstLineIndent) && this.firstLineIndent !== format.firstLineIndent) {\n      this.firstLineIndent = undefined;\n    }\n    if (this.lineSpacing !== 0 && this.lineSpacing !== format.lineSpacing) {\n      this.lineSpacing = 0;\n    }\n    if (this.beforeSpacing !== -1 && this.beforeSpacing !== format.beforeSpacing) {\n      this.beforeSpacing = -1;\n    }\n    if (this.afterSpacing !== -1 && this.afterSpacing !== format.afterSpacing) {\n      this.afterSpacing = -1;\n    }\n    if (!isNullOrUndefined(this.spaceAfterAuto) && this.spaceAfterAuto !== format.spaceAfterAuto) {\n      this.spaceAfterAuto = undefined;\n    }\n    if (!isNullOrUndefined(this.spaceBeforeAuto) && this.spaceBeforeAuto !== format.spaceBeforeAuto) {\n      this.spaceBeforeAuto = undefined;\n    }\n    if (!isNullOrUndefined(this.lineSpacingType) && this.lineSpacingType !== format.lineSpacingType) {\n      this.lineSpacingType = undefined;\n    }\n    if (!isNullOrUndefined(this.textAlignment) && this.textAlignment !== format.textAlignment) {\n      this.textAlignment = undefined;\n    }\n    if (!isNullOrUndefined(this.outlineLevel) && this.outlineLevel !== format.outlineLevel) {\n      this.outlineLevel = undefined;\n    }\n    if (this.listLevelNumber >= 0 && !isNullOrUndefined(this.listId) && (isNullOrUndefined(format.listFormat) || format.listFormat.listLevelNumber !== this.listLevelNumber)) {\n      this.listLevelNumber = -1;\n    }\n    if (isNullOrUndefined(format.listFormat) || isNullOrUndefined(format.listFormat.listId) || !isNullOrUndefined(this.listId) && this.listId !== format.listFormat.listId) {\n      this.listId = undefined;\n    }\n    if (!isNullOrUndefined(this.bidi) && this.bidi !== format.bidi) {\n      this.bidi = undefined;\n    }\n    if (!isNullOrUndefined(this.keepLinesTogether) && this.keepLinesTogether !== format.keepLinesTogether) {\n      this.keepLinesTogether = undefined;\n    }\n    if (!isNullOrUndefined(this.keepWithNext) && this.keepWithNext !== format.keepWithNext) {\n      this.keepWithNext = undefined;\n    }\n    if (!isNullOrUndefined(this.widowControl) && this.widowControl !== format.widowControl) {\n      this.widowControl = undefined;\n    }\n    if (!isNullOrUndefined(this.contextualSpacing) && this.contextualSpacing !== format.contextualSpacing) {\n      this.contextualSpacing = undefined;\n    }\n    if (!isNullOrUndefined(this.styleName) && format.baseStyle && this.styleName !== format.baseStyle.name) {\n      this.styleName = undefined;\n    }\n    this.borders.combineFormat(format.borders);\n  };\n  /**\n   * Clears the format.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionParagraphFormat.prototype.clearFormat = function () {\n    this.leftIndent = 0;\n    this.rightIndent = 0;\n    this.beforeSpacing = 0;\n    this.afterSpacing = 0;\n    this.spaceAfterAuto = undefined;\n    this.spaceBeforeAuto = undefined;\n    this.firstLineIndent = 0;\n    this.lineSpacing = 1;\n    this.textAlignment = undefined;\n    this.lineSpacingType = undefined;\n    this.listId = undefined;\n    this.listLevelNumber = -1;\n    this.styleName = undefined;\n    this.bidi = undefined;\n    this.contextualSpacing = undefined;\n  };\n  /**\n   * Gets the clone of list at current selection.\n   *\n   * @returns WList\n   * @private\n   */\n  SelectionParagraphFormat.prototype.getList = function () {\n    var list = this.documentHelper.getListById(this.listId);\n    if (!isNullOrUndefined(list)) {\n      var listAdv = new WList();\n      var abstractList = new WAbstractList();\n      var currentAbstractList = this.documentHelper.getAbstractListById(list.abstractListId);\n      var editor = this.selection.owner.editorModule;\n      if (!isNullOrUndefined(currentAbstractList)) {\n        for (var i = 0; i < currentAbstractList.levels.length; i++) {\n          var level = editor.cloneListLevel(currentAbstractList.levels[i]);\n          abstractList.levels.push(level);\n          level.ownerBase = abstractList;\n        }\n      } else {\n        abstractList.levels.push(new WListLevel(abstractList));\n      }\n      if (!isNullOrUndefined(list.levelOverrides)) {\n        for (var i = 0; i < list.levelOverrides.length; i++) {\n          var levelOverride = editor.cloneLevelOverride(list.levelOverrides[i]);\n          listAdv.levelOverrides.push(levelOverride);\n        }\n      }\n      listAdv.abstractList = abstractList;\n      listAdv.abstractListId = abstractList.abstractListId;\n      listAdv.sourceListId = list.listId;\n      return listAdv;\n    }\n    return undefined;\n  };\n  /**\n   * Modifies the list at current selection.\n   *\n   * @param {WList} listAdv\n   * @private\n   */\n  SelectionParagraphFormat.prototype.setList = function (listAdv, isListDialog) {\n    if (this.documentHelper.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode() || !this.documentHelper.owner.isDocumentLoaded) {\n      return;\n    }\n    var list = this.documentHelper.getListById(this.listId);\n    var collection = undefined;\n    var currentAbstractList = listAdv ? this.documentHelper.getAbstractListById(listAdv.abstractListId) : undefined;\n    if (!isNullOrUndefined(list) && !isNullOrUndefined(listAdv) && !isNullOrUndefined(currentAbstractList) && listAdv.sourceListId === list.listId) {\n      var history_1 = this.documentHelper.owner.editorHistoryModule;\n      var listLevel = this.documentHelper.layout.getListLevel(list, 1);\n      this.selection.owner.isLayoutEnabled = false;\n      this.documentHelper.owner.editorModule.setOffsetValue(this.selection);\n      if (history_1) {\n        collection = history_1.updateListChangesInHistory(currentAbstractList, list);\n      }\n      this.documentHelper.owner.editorModule.updateListParagraphs();\n      if (history_1) {\n        history_1.applyListChanges(this.selection, collection);\n      }\n      this.selection.owner.isLayoutEnabled = true;\n      this.documentHelper.renderedLists.clear();\n      this.documentHelper.renderedLevelOverrides = [];\n      if (isListDialog) {\n        this.documentHelper.layout.clearInvalidList(listAdv);\n      }\n      this.documentHelper.owner.editorModule.layoutWholeDocument();\n      this.documentHelper.owner.editorModule.updateSelectionTextPosition(false);\n      if (history_1 && history_1.currentBaseHistoryInfo) {\n        if (history_1.currentBaseHistoryInfo.modifiedProperties.length > 0) {\n          history_1.currentBaseHistoryInfo.updateSelection();\n        }\n        history_1.updateHistory();\n      }\n      this.documentHelper.owner.editorModule.fireContentChange();\n    } else if (!isNullOrUndefined(listAdv)) {\n      this.selection.owner.isLayoutEnabled = false;\n      if (!isNullOrUndefined(currentAbstractList) && this.documentHelper.abstractLists.indexOf(currentAbstractList) === -1) {\n        this.documentHelper.abstractLists.push(currentAbstractList);\n      }\n      if (this.documentHelper.lists.indexOf(listAdv) === -1) {\n        this.documentHelper.lists.push(listAdv);\n      }\n      //currentAbstractList.listType = 'Numbering';\n      this.selection.owner.isLayoutEnabled = true;\n      this.selection.owner.editorModule.onApplyList(listAdv);\n    } else {\n      this.selection.owner.editorModule.onApplyList(undefined);\n    }\n  };\n  /**\n   * Destroys the managed resources.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionParagraphFormat.prototype.destroy = function () {\n    this.leftIndentIn = undefined;\n    this.rightIndentIn = undefined;\n    this.beforeSpacingIn = undefined;\n    this.afterSpacingIn = undefined;\n    this.spaceBeforeAutoIn = undefined;\n    this.spaceAfterAutoIn = undefined;\n    this.firstLineIndentIn = undefined;\n    this.lineSpacingIn = undefined;\n    this.textAlignmentIn = undefined;\n    this.lineSpacingTypeIn = undefined;\n    this.listId = undefined;\n    this.listLevelNumberIn = undefined;\n    this.documentHelper = undefined;\n    this.selection = undefined;\n    this.styleName = undefined;\n    this.bidi = undefined;\n    this.contextualSpacing = undefined;\n    if (!isNullOrUndefined(this.bordersIn)) {\n      this.bordersIn.destroy();\n      this.bordersIn = undefined;\n    }\n  };\n  return SelectionParagraphFormat;\n}();\nexport { SelectionParagraphFormat };\nvar SelectionHeaderFooter = /** @class */function () {\n  function SelectionHeaderFooter(selection) {\n    this.linkToPreviousIn = true;\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionHeaderFooter.prototype, \"linkToPrevious\", {\n    get: function () {\n      return this.linkToPreviousIn;\n    },\n    /**\n     * Gets or sets a value indicating whether this header footer is linked to the previous section header footer in the document.\n     *\n     * @default true\n     * @aspType bool\n     * @returns {boolean} Returns `true` if the header footer is linked to the previous section header footer; Otherwise `false`.\n     */\n    set: function (value) {\n      this.linkToPreviousIn = value;\n      this.notifyPropertyChanged('linkToPrevious');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionHeaderFooter.prototype.notifyPropertyChanged = function (propertyName) {\n    var selection = this.selection;\n    if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isPastingContent || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded) && !selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n      var value = this.getPropertyvalue(propertyName);\n      if (!isNullOrUndefined(value)) {\n        var headerFooterWidget = selection.start.paragraph.bodyWidget;\n        var sectionIndex = headerFooterWidget.sectionIndex;\n        var headerFooterType = headerFooterWidget.headerFooterType;\n        selection.owner.editorModule.removeInlineHeaderFooterWidget(sectionIndex, headerFooterType, propertyName, value);\n      }\n    }\n  };\n  SelectionHeaderFooter.prototype.getPropertyvalue = function (propertyName) {\n    if (propertyName == \"linkToPrevious\") {\n      if (!isNullOrUndefined(this.linkToPrevious)) {\n        return this.linkToPrevious;\n      }\n    }\n    return undefined;\n  };\n  return SelectionHeaderFooter;\n}();\nexport { SelectionHeaderFooter };\n/**\n * Selection section format implementation\n */\nvar SelectionSectionFormat = /** @class */function () {\n  /**\n   * @param selection\n   * @private\n   */\n  function SelectionSectionFormat(selection) {\n    this.differentFirstPageIn = undefined;\n    this.differentOddAndEvenPagesIn = undefined;\n    /**\n     * private\n     */\n    this.bidi = undefined;\n    this.selection = selection;\n    this.firstPageHeaderIn = new SelectionHeaderFooter(selection);\n    this.firstPageFooterIn = new SelectionHeaderFooter(selection);\n    this.oddPageHeaderIn = new SelectionHeaderFooter(selection);\n    this.oddPageFooterIn = new SelectionHeaderFooter(selection);\n    this.evenPageHeaderIn = new SelectionHeaderFooter(selection);\n    this.evenPageFooterIn = new SelectionHeaderFooter(selection);\n  }\n  Object.defineProperty(SelectionSectionFormat.prototype, \"pageHeight\", {\n    /**\n     * Gets or sets the page height.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.pageHeightIn;\n    },\n    /**\n     * Gets or sets the page height.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.pageHeightIn = value;\n      this.notifyPropertyChanged('pageHeight');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"pageWidth\", {\n    /**\n     * Gets or sets the page width.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.pageWidthIn;\n    },\n    /**\n     * Gets or sets the page width.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.pageWidthIn = value;\n      this.notifyPropertyChanged('pageWidth');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"leftMargin\", {\n    /**\n     * Gets or sets the page left margin.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.leftMarginIn;\n    },\n    /**\n     * Gets or sets the page left margin.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.leftMarginIn = value;\n      this.notifyPropertyChanged('leftMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"bottomMargin\", {\n    /**\n     * Gets or sets the page bottom margin.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.bottomMarginIn;\n    },\n    /**\n     * Gets or sets the page bottom margin.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.bottomMarginIn = value;\n      this.notifyPropertyChanged('bottomMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"topMargin\", {\n    /**\n     * Gets or sets the page top margin.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.topMarginIn;\n    },\n    /**\n     * Gets or sets the page top margin.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.topMarginIn = value;\n      this.notifyPropertyChanged('topMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"rightMargin\", {\n    /**\n     * Gets or sets the page right margin.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.rightMarginIn;\n    },\n    /**\n     * Gets or sets the page right margin.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.rightMarginIn = value;\n      this.notifyPropertyChanged('rightMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"headerDistance\", {\n    /**\n     * Gets or sets the header distance.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.headerDistanceIn;\n    },\n    /**\n     * Gets or sets the header distance.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.headerDistanceIn = value;\n      this.notifyPropertyChanged('headerDistance');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"firstPageHeader\", {\n    get: function () {\n      return this.firstPageHeaderIn;\n    },\n    /**\n     * Gets the first page header of the section.\n     *\n     * @aspType SelectionHeaderFooter\n     */\n    set: function (value) {\n      this.firstPageHeaderIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"firstPageFooter\", {\n    get: function () {\n      return this.firstPageFooterIn;\n    },\n    /**\n     * Gets the first page footer of the section.\n     *\n     * @aspType SelectionHeaderFooter\n     */\n    set: function (value) {\n      this.firstPageFooterIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"oddPageHeader\", {\n    get: function () {\n      return this.oddPageHeaderIn;\n    },\n    /**\n     * Gets the odd page header of the section.\n     *\n     * @aspType SelectionHeaderFooter\n     */\n    set: function (value) {\n      this.oddPageHeaderIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"oddPageFooter\", {\n    get: function () {\n      return this.oddPageFooterIn;\n    },\n    /**\n     * Gets the odd page footer of the section.\n     *\n     * @aspType SelectionHeaderFooter\n     */\n    set: function (value) {\n      this.oddPageFooterIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"evenPageHeader\", {\n    get: function () {\n      return this.evenPageHeaderIn;\n    },\n    /**\n     * Gets the even page header of the section.\n     *\n     * @aspType SelectionHeaderFooter\n     */\n    set: function (value) {\n      this.evenPageHeaderIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"evenPageFooter\", {\n    get: function () {\n      return this.evenPageFooterIn;\n    },\n    /**\n     * Gets the even page footer of the section.\n     *\n     * @aspType SelectionHeaderFooter\n     */\n    set: function (value) {\n      this.evenPageFooterIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"pageStartingNumber\", {\n    /**\n     * Gets or sets the starting page number.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.pageStartingNumberIn;\n    },\n    /**\n     * Gets or sets the starting page number.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.pageStartingNumberIn = value;\n      this.notifyPropertyChanged('pageStartingNumber');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"restartPageNumbering\", {\n    /**\n     * Gets or sets a value indicating whether to restart page numbering.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.restartPageNumberingIn;\n    },\n    /**\n     * Gets or sets a value indicating whether to restart page numbering.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      this.restartPageNumberingIn = value;\n      this.notifyPropertyChanged('restartPageNumbering');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"footerDistance\", {\n    /**\n     * Gets or sets the footer distance.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.footerDistanceIn;\n    },\n    /**\n     * Gets or sets the footer distance.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.footerDistanceIn = value;\n      this.notifyPropertyChanged('footerDistance');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"differentFirstPage\", {\n    /**\n     * Gets or sets a value indicating whether the section has different first page.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.differentFirstPageIn;\n    },\n    /**\n     * Gets or sets a value indicating whether the section has different first page.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      this.differentFirstPageIn = value;\n      this.notifyPropertyChanged('differentFirstPage');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"differentOddAndEvenPages\", {\n    /**\n     * Gets or sets a value indicating whether the section has different odd and even page.\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.differentOddAndEvenPagesIn;\n    },\n    /**\n     * Gets or sets a value indicating whether the section has different odd and even page.\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      this.differentOddAndEvenPagesIn = value;\n      this.notifyPropertyChanged('differentOddAndEvenPages');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"endnoteNumberFormat\", {\n    /**\n     * Gets or sets the number format of endnote.\n     */\n    get: function () {\n      return this.endnoteNumberFormatIn;\n    },\n    /**\n     * Gets or sets the number format of endnote.\n     */\n    set: function (value) {\n      this.endnoteNumberFormatIn = value;\n      this.notifyPropertyChanged('endnoteNumberFormat');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"footNoteNumberFormat\", {\n    /**\n     * Gets or sets the number format of footnote.\n     */\n    get: function () {\n      return this.footNoteNumberFormatIn;\n    },\n    /**\n     * Gets or sets the number format of footnote.\n     */\n    set: function (value) {\n      this.footNoteNumberFormatIn = value;\n      this.notifyPropertyChanged('footNoteNumberFormat');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"initialFootNoteNumber\", {\n    /**\n     * Gets or sets the number format of footnote.\n     */\n    get: function () {\n      return this.initialFootNoteNumberIn;\n    },\n    /**\n     * Gets or sets the number format of footnote.\n     */\n    set: function (value) {\n      this.initialFootNoteNumberIn = value;\n      this.notifyPropertyChanged('initialFootNoteNumber');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"initialEndNoteNumber\", {\n    /**\n     * Gets or sets the number format of footnote.\n     */\n    get: function () {\n      return this.initialEndNoteNumberIn;\n    },\n    /**\n     * Gets or sets the number format of footnote.\n     */\n    set: function (value) {\n      this.initialEndNoteNumberIn = value;\n      this.notifyPropertyChanged('initialEndNoteNumber');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"restartIndexForFootnotes\", {\n    /**\n     * Gets or sets the restart index of footnote\n     */\n    get: function () {\n      return this.restartIndexForFootnotesIn;\n    },\n    /**\n     * Gets or sets the restart index of footnote\n     */\n    set: function (value) {\n      this.restartIndexForFootnotesIn = value;\n      this.notifyPropertyChanged('restartIndexForFootnotes');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"restartIndexForEndnotes\", {\n    /**\n     * Gets or sets the restart index of endnote\n     */\n    get: function () {\n      return this.restartIndexForEndnotesIn;\n    },\n    /**\n     * Gets or sets the restart index of endnote\n     */\n    set: function (value) {\n      this.restartIndexForEndnotesIn = value;\n      this.notifyPropertyChanged('restartIndexForEndnotes');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"numberOfColumns\", {\n    /**\n     * Gets the number of columns on a page.\n     */\n    get: function () {\n      return this.columns.length == 0 ? 1 : this.columns.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"equalWidth\", {\n    /**\n     * Gets or sets a value indicating whether all the columns on a page has even width and space.\n     */\n    get: function () {\n      return this.equalWidthIn;\n    },\n    /**\n     * Gets or sets a value indicating whether all the columns on a page has even width and space.\n     */\n    set: function (value) {\n      this.equalWidthIn = value;\n      this.notifyPropertyChanged('equalWidth');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"lineBetweenColumns\", {\n    /**\n     * Gets or sets a value indicating whether the vertical lines appear between all the columns.\n     */\n    get: function () {\n      return this.lineBetweenColumnsIn;\n    },\n    /**\n     * Gets or sets a value indicating whether the vertical lines appear between all the columns.\n     */\n    set: function (value) {\n      this.lineBetweenColumnsIn = value;\n      this.notifyPropertyChanged('lineBetweenColumns');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"columns\", {\n    /**\n     * Gets or sets the columns.\n     */\n    get: function () {\n      return this.columnsIn;\n    },\n    /**\n     * Gets or sets the columns.\n     */\n    set: function (value) {\n      this.columnsIn = value;\n      var selection = this.selection;\n      if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isPastingContent || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded) && !selection.isRetrieveFormatting) {\n        return;\n      }\n      if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n        this.selection.owner.editorModule.onApplyColumnFormat('columns', value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionSectionFormat.prototype, \"breakCode\", {\n    /**\n     * Gets or sets the breakCode.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.breakCodeIn;\n    },\n    /**\n     * Gets or sets the breakCode.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      this.breakCodeIn = value;\n      this.notifyPropertyChanged('breakCode');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Copies the format.\n   *\n   * @param {WSectionFormat} format\n   * @returns {void}\n   * @private\n   */\n  SelectionSectionFormat.prototype.copyFormat = function (format) {\n    this.pageHeight = format.pageHeight;\n    this.pageWidth = format.pageWidth;\n    this.leftMargin = format.leftMargin;\n    this.topMargin = format.topMargin;\n    this.rightMargin = format.rightMargin;\n    this.bottomMargin = format.bottomMargin;\n    this.headerDistance = format.headerDistance;\n    this.footerDistance = format.footerDistance;\n    this.differentFirstPage = format.differentFirstPage;\n    this.differentOddAndEvenPages = format.differentOddAndEvenPages;\n    this.bidi = format.bidi;\n    this.pageStartingNumber = format.pageStartingNumber;\n    this.restartPageNumbering = format.restartPageNumbering;\n    this.endnoteNumberFormat = format.endnoteNumberFormat;\n    this.footNoteNumberFormat = format.footNoteNumberFormat;\n    this.restartIndexForEndnotes = format.restartIndexForEndnotes;\n    this.restartIndexForFootnotes = format.restartIndexForFootnotes;\n    this.initialEndNoteNumber = format.initialEndNoteNumber;\n    this.initialFootNoteNumber = format.initialFootNoteNumber;\n    this.equalWidth = format.equalWidth;\n    this.lineBetweenColumns = format.lineBetweenColumns;\n    this.columns = [];\n    for (var _i = 0, _a = format.columns; _i < _a.length; _i++) {\n      var col = _a[_i];\n      var selectCol = new SelectionColumnFormat(this.selection);\n      selectCol.width = HelperMethods.convertPixelToPoint(col.width);\n      selectCol.space = HelperMethods.convertPixelToPoint(col.space);\n      this.columns.push(selectCol);\n    }\n    this.breakCode = format.breakCode;\n    if (this.selection.owner.enableHeaderAndFooter) {\n      var headerFootersColletion = this.selection.documentHelper.headersFooters;\n      var headerFooterWidget = this.selection.start.paragraph.containerWidget;\n      var sectionIndex = headerFooterWidget.sectionIndex;\n      var headerFooterType = headerFooterWidget.headerFooterType;\n      var isLinkedToPrevious = false;\n      if (sectionIndex == 0) {\n        this.oddPageHeader.linkToPrevious = false;\n        this.oddPageFooter.linkToPrevious = false;\n        this.evenPageHeader.linkToPrevious = false;\n        this.evenPageFooter.linkToPrevious = false;\n        this.firstPageHeader.linkToPrevious = false;\n        this.firstPageFooter.linkToPrevious = false;\n      } else if (headerFootersColletion[sectionIndex]) {\n        var index = this.selection.viewer.getHeaderFooter(headerFooterType);\n        var headerFooterWidget_1 = headerFootersColletion[sectionIndex][index];\n        if (isNullOrUndefined(headerFooterWidget_1)) {\n          isLinkedToPrevious = true;\n        }\n        if (!isNullOrUndefined(headerFooterWidget_1) || isLinkedToPrevious) {\n          switch (headerFooterType) {\n            case \"OddHeader\":\n              if (isLinkedToPrevious) {\n                this.oddPageHeader.linkToPrevious = true;\n              } else {\n                this.oddPageHeader.linkToPrevious = false;\n              }\n              break;\n            case \"OddFooter\":\n              if (isLinkedToPrevious) {\n                this.oddPageFooter.linkToPrevious = true;\n              } else {\n                this.oddPageFooter.linkToPrevious = false;\n              }\n              break;\n            case \"EvenHeader\":\n              if (isLinkedToPrevious) {\n                this.evenPageHeader.linkToPrevious = true;\n              } else {\n                this.evenPageHeader.linkToPrevious = false;\n              }\n              break;\n            case \"EvenFooter\":\n              if (isLinkedToPrevious) {\n                this.evenPageFooter.linkToPrevious = true;\n              } else {\n                this.evenPageFooter.linkToPrevious = false;\n              }\n              break;\n            case \"FirstPageHeader\":\n              if (isLinkedToPrevious) {\n                this.firstPageHeader.linkToPrevious = true;\n              } else {\n                this.firstPageHeader.linkToPrevious = false;\n              }\n              break;\n            case \"FirstPageFooter\":\n              if (isLinkedToPrevious) {\n                this.firstPageFooter.linkToPrevious = true;\n              } else {\n                this.firstPageFooter.linkToPrevious = false;\n              }\n              break;\n          }\n        }\n      }\n    }\n  };\n  SelectionSectionFormat.prototype.applyColumnFormat = function () {};\n  SelectionSectionFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    var selection = this.selection;\n    if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isPastingContent || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded) && !selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n      var value = this.getPropertyvalue(propertyName);\n      if (!isNullOrUndefined(value)) {\n        selection.owner.editorModule.onApplySectionFormat(propertyName, value);\n      }\n    }\n  };\n  SelectionSectionFormat.prototype.getPropertyvalue = function (propertyName) {\n    switch (propertyName) {\n      case 'pageHeight':\n        if (this.pageHeight > 0) {\n          return this.pageHeight;\n        }\n        return undefined;\n      case 'pageWidth':\n        if (this.pageWidth > 0) {\n          return this.pageWidth;\n        }\n        return undefined;\n      case 'leftMargin':\n        if (this.leftMargin >= 0) {\n          return this.leftMargin;\n        }\n        return undefined;\n      case 'rightMargin':\n        if (this.rightMargin >= 0) {\n          return this.rightMargin;\n        }\n        return undefined;\n      case 'topMargin':\n        if (this.topMargin >= 0) {\n          return this.topMargin;\n        }\n        return undefined;\n      case 'bottomMargin':\n        if (this.bottomMargin >= 0) {\n          return this.bottomMargin;\n        }\n        return undefined;\n      case 'differentFirstPage':\n        if (!isNullOrUndefined(this.differentFirstPage)) {\n          return this.differentFirstPage;\n        }\n        return undefined;\n      case 'differentOddAndEvenPages':\n        if (!isNullOrUndefined(this.differentOddAndEvenPages)) {\n          return this.differentOddAndEvenPages;\n        }\n        return undefined;\n      case 'headerDistance':\n        return this.headerDistanceIn;\n      case 'footerDistance':\n        return this.footerDistance;\n      case 'pageStartingNumber':\n        if (!isNullOrUndefined(this.pageStartingNumber)) {\n          return this.pageStartingNumber;\n        }\n        return undefined;\n      case 'restartPageNumbering':\n        if (!isNullOrUndefined(this.restartPageNumbering)) {\n          return this.restartPageNumbering;\n        }\n        return undefined;\n      case 'endnoteNumberFormat':\n        return this.endnoteNumberFormatIn;\n      case 'restartIndexForEndnotes':\n        return this.restartIndexForEndnotesIn;\n      case 'restartIndexForFootnotes':\n        return this.restartIndexForFootnotesIn;\n      case 'footNoteNumberFormat':\n        return this.footNoteNumberFormatIn;\n      case 'initialFootNoteNumber':\n        return this.initialFootNoteNumber;\n      case 'initialEndNoteNumber':\n        return this.initialEndNoteNumber;\n      case 'equalWidth':\n        return this.equalWidthIn;\n      case 'lineBetweenColumns':\n        return this.lineBetweenColumnsIn;\n      case 'columns':\n        return this.columnsIn;\n      case 'breakCode':\n        return this.breakCodeIn;\n      default:\n        return undefined;\n    }\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WSectionFormat} format\n   * @private\n   */\n  SelectionSectionFormat.prototype.combineFormat = function (format) {\n    if (this.pageHeight > 0 && this.pageHeight !== format.pageHeight) {\n      this.pageHeight = 0;\n    }\n    if (this.pageWidth > 0 && this.pageWidth !== format.pageWidth) {\n      this.pageWidth = 0;\n    }\n    if (this.leftMargin > -1 && this.leftMargin !== format.leftMargin) {\n      this.leftMargin = -1;\n    }\n    if (this.topMargin > -1 && this.topMargin !== format.topMargin) {\n      this.topMargin = -1;\n    }\n    if (this.rightMargin > -1 && this.rightMargin !== format.rightMargin) {\n      this.rightMargin = -1;\n    }\n    if (this.bottomMargin > -1 && this.bottomMargin !== format.bottomMargin) {\n      this.bottomMargin = -1;\n    }\n    if (this.headerDistance !== 0 && this.headerDistance !== format.headerDistance) {\n      this.headerDistance = 0;\n    }\n    if (this.footerDistance !== 0 && this.footerDistance !== format.footerDistance) {\n      this.footerDistance = 0;\n    }\n    if (!isNullOrUndefined(this.differentFirstPage) && this.differentFirstPage !== format.differentFirstPage) {\n      this.differentFirstPage = undefined;\n    }\n    if (!isNullOrUndefined(this.pageStartingNumber) && this.pageStartingNumber !== format.pageStartingNumber) {\n      this.pageStartingNumber = undefined;\n    }\n    if (!isNullOrUndefined(this.restartPageNumbering) && this.restartPageNumbering !== format.restartPageNumbering) {\n      this.restartPageNumbering = undefined;\n    }\n    if (!isNullOrUndefined(this.differentOddAndEvenPages) && this.differentOddAndEvenPages !== format.differentOddAndEvenPages) {\n      this.differentOddAndEvenPages = undefined;\n    }\n    if (!isNullOrUndefined(this.bidi) && this.bidi !== format.bidi) {\n      this.bidi = undefined;\n    }\n    if (!isNullOrUndefined(this.endnoteNumberFormat) && this.endnoteNumberFormat !== format.endnoteNumberFormat) {\n      this.endnoteNumberFormat = undefined;\n    }\n    if (!isNullOrUndefined(this.restartIndexForEndnotes) && this.restartIndexForEndnotes !== format.restartIndexForEndnotes) {\n      this.restartIndexForEndnotes = undefined;\n    }\n    if (!isNullOrUndefined(this.restartIndexForFootnotes) && this.restartIndexForFootnotes !== format.restartIndexForFootnotes) {\n      this.restartIndexForFootnotes = undefined;\n    }\n    if (!isNullOrUndefined(this.footNoteNumberFormat) && this.footNoteNumberFormat !== format.footNoteNumberFormat) {\n      this.footNoteNumberFormat = undefined;\n    }\n    if (!isNullOrUndefined(this.initialFootNoteNumber) && this.initialFootNoteNumber !== format.initialFootNoteNumber) {\n      this.initialFootNoteNumber = undefined;\n    }\n    if (!isNullOrUndefined(this.initialEndNoteNumber) && this.initialEndNoteNumber !== format.initialEndNoteNumber) {\n      this.initialEndNoteNumber = undefined;\n    }\n  };\n  /**\n   * Clears the format.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionSectionFormat.prototype.clearFormat = function () {\n    this.headerDistance = 0;\n    this.footerDistance = 0;\n    this.pageHeight = 0;\n    this.pageWidth = 0;\n    this.leftMargin = -1;\n    this.rightMargin = -1;\n    this.topMargin = -1;\n    this.bottomMargin = -1;\n    this.differentFirstPage = undefined;\n    this.differentOddAndEvenPages = undefined;\n    this.bidi = undefined;\n    this.pageStartingNumber = undefined;\n    this.restartPageNumbering = undefined;\n    this.endnoteNumberFormat = undefined;\n    this.footNoteNumberFormat = undefined;\n    this.restartIndexForFootnotes = undefined;\n    this.restartIndexForEndnotes = undefined;\n    this.initialFootNoteNumber = 1;\n    this.initialEndNoteNumber = 1;\n  };\n  /**\n   * Destroys the managed resources.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionSectionFormat.prototype.destroy = function () {\n    this.headerDistanceIn = undefined;\n    this.footerDistanceIn = undefined;\n    this.pageHeightIn = undefined;\n    this.pageWidthIn = undefined;\n    this.leftMarginIn = undefined;\n    this.rightMarginIn = undefined;\n    this.topMarginIn = undefined;\n    this.bottomMarginIn = undefined;\n    this.differentFirstPageIn = undefined;\n    this.differentOddAndEvenPagesIn = undefined;\n    this.selection = undefined;\n    this.bidi = undefined;\n    this.pageStartingNumberIn = undefined;\n    this.restartPageNumberingIn = undefined;\n    this.endnoteNumberFormatIn = undefined;\n    this.footNoteNumberFormatIn = undefined;\n    this.restartIndexForFootnotesIn = undefined;\n    this.restartIndexForEndnotesIn = undefined;\n    this.initialEndNoteNumber = undefined;\n    this.initialFootNoteNumber = undefined;\n    this.firstPageHeaderIn = undefined;\n    this.firstPageFooterIn = undefined;\n    this.oddPageHeaderIn = undefined;\n    this.oddPageFooterIn = undefined;\n    this.evenPageHeaderIn = undefined;\n    this.evenPageFooterIn = undefined;\n  };\n  return SelectionSectionFormat;\n}();\nexport { SelectionSectionFormat };\n/**\n * Selection table format implementation\n */\nvar SelectionTableFormat = /** @class */function () {\n  /**\n   * @param selection\n   * @private\n   */\n  function SelectionTableFormat(selection) {\n    this.leftIndentIn = 0;\n    this.backgroundIn = undefined;\n    this.tableAlignmentIn = undefined;\n    this.cellSpacingIn = 0;\n    this.leftMarginIn = 0;\n    this.rightMarginIn = 0;\n    this.topMarginIn = 0;\n    this.bottomMarginIn = 0;\n    this.preferredWidthIn = 0;\n    this.bidiIn = undefined;\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionTableFormat.prototype, \"table\", {\n    /**\n     * Gets or sets the table.\n     *\n     * @private\n     */\n    get: function () {\n      return this.tableIn;\n    },\n    set: function (value) {\n      this.tableIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"title\", {\n    /**\n     * Gets or sets the title of the selected table.\n     *\n     * @aspType string\n     */\n    get: function () {\n      return this.titleIn;\n    },\n    /**\n     * Gets or sets the title of the selected table.\n     *\n     * @aspType string\n     */\n    set: function (value) {\n      if (isNullOrUndefined(this.table)) {\n        return;\n      }\n      this.titleIn = value;\n      this.notifyPropertyChanged('title');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"description\", {\n    /**\n     * Gets or sets the description of the selected table.\n     *\n     * @aspType string\n     */\n    get: function () {\n      return this.descriptionIn;\n    },\n    /**\n     * Gets or sets the description of the selected table.\n     *\n     * @aspType string\n     */\n    set: function (value) {\n      if (isNullOrUndefined(this.table)) {\n        return;\n      }\n      this.descriptionIn = value;\n      this.notifyPropertyChanged('description');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"leftIndent\", {\n    /**\n     * Gets or Sets the left indent for selected table.\n     *\n     * @aspType int\n     */\n    get: function () {\n      return this.leftIndentIn;\n    },\n    /**\n     * Gets or Sets the left indent for selected table.\n     *\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.leftIndentIn) {\n        return;\n      }\n      this.leftIndentIn = value;\n      this.notifyPropertyChanged('leftIndent');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"topMargin\", {\n    /**\n     * Gets or Sets the default top margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.topMarginIn;\n    },\n    /**\n     * Gets or Sets the default top margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.topMarginIn) {\n        return;\n      }\n      this.topMarginIn = value;\n      this.notifyPropertyChanged('topMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"background\", {\n    /**\n     * Gets or Sets the background for selected table.\n     *\n     * @default undefined\n     * @aspType string\n     */\n    get: function () {\n      return this.backgroundIn;\n    },\n    /**\n     * Gets or Sets the background for selected table.\n     *\n     * @default undefined\n     * @aspType string\n     */\n    set: function (value) {\n      if (value === this.backgroundIn) {\n        return;\n      }\n      this.backgroundIn = value;\n      this.notifyPropertyChanged('background');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"tableAlignment\", {\n    /**\n     * Gets or Sets the table alignment for selected table.\n     *\n     * @default undefined\n     */\n    get: function () {\n      return this.tableAlignmentIn;\n    },\n    /**\n     * Gets or Sets the table alignment for selected table.\n     *\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.tableAlignmentIn) {\n        return;\n      }\n      this.tableAlignmentIn = value;\n      this.notifyPropertyChanged('tableAlignment');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"leftMargin\", {\n    /**\n     * Gets or Sets the default left margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.leftMarginIn;\n    },\n    /**\n     * Gets or Sets the default left margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.leftMarginIn) {\n        return;\n      }\n      this.leftMarginIn = value;\n      this.notifyPropertyChanged('leftMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"bottomMargin\", {\n    /**\n     * Gets or Sets the default bottom margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.bottomMarginIn;\n    },\n    /**\n     * Gets or Sets the default bottom margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.bottomMarginIn) {\n        return;\n      }\n      this.bottomMarginIn = value;\n      this.notifyPropertyChanged('bottomMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"cellSpacing\", {\n    /**\n     * Gets or Sets the cell spacing for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.cellSpacingIn;\n    },\n    /**\n     * Gets or Sets the cell spacing for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.cellSpacingIn) {\n        return;\n      }\n      this.cellSpacingIn = value;\n      this.notifyPropertyChanged('cellSpacing');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"rightMargin\", {\n    /**\n     * Gets or Sets the default right margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.rightMarginIn;\n    },\n    /**\n     * Gets or Sets the default right margin of cell for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.rightMarginIn) {\n        return;\n      }\n      this.rightMarginIn = value;\n      this.notifyPropertyChanged('rightMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"preferredWidth\", {\n    /**\n     * Gets or Sets the preferred width for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.preferredWidthIn;\n    },\n    /**\n     * Gets or Sets the preferred width for selected table.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.preferredWidthIn) {\n        return;\n      }\n      this.preferredWidthIn = value;\n      this.notifyPropertyChanged('preferredWidth');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"preferredWidthType\", {\n    /**\n     * Gets or Sets the preferred width type for selected table.\n     *\n     * @default undefined\n     */\n    get: function () {\n      return this.preferredWidthTypeIn;\n    },\n    /**\n     * Gets or Sets the preferred width type for selected table.\n     *\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.preferredWidthTypeIn) {\n        return;\n      }\n      this.preferredWidthTypeIn = value;\n      this.notifyPropertyChanged('preferredWidthType');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionTableFormat.prototype, \"bidi\", {\n    /**\n     * Gets or sets the bidi property\n     *\n     * @aspType bool\n     */\n    get: function () {\n      return this.bidiIn;\n    },\n    /**\n     * Gets or sets the bidi property\n     *\n     * @aspType bool\n     */\n    set: function (value) {\n      this.bidiIn = value;\n      this.notifyPropertyChanged('bidi');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionTableFormat.prototype.getPropertyValue = function (propertyName) {\n    switch (propertyName) {\n      case 'tableAlignment':\n        return this.tableAlignment;\n      case 'leftIndent':\n        return this.leftIndent;\n      case 'cellSpacing':\n        return this.cellSpacing;\n      case 'leftMargin':\n        return this.leftMargin;\n      case 'rightMargin':\n        return this.rightMargin;\n      case 'topMargin':\n        return this.topMargin;\n      case 'bottomMargin':\n        return this.bottomMargin;\n      case 'background':\n        var shading = new WShading();\n        shading.backgroundColor = this.background;\n        return shading;\n      case 'preferredWidth':\n        return this.preferredWidth;\n      case 'preferredWidthType':\n        return this.preferredWidthType;\n      case 'bidi':\n        return this.bidi;\n      case 'title':\n        return this.title;\n      case 'description':\n        return this.description;\n      default:\n        return undefined;\n    }\n  };\n  SelectionTableFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    if (!isNullOrUndefined(this.selection) && (this.selection.isCleared || !this.selection.owner.isDocumentLoaded || this.selection.owner.isReadOnlyMode || this.selection.owner.isPastingContent) && !this.selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n      var value = this.getPropertyValue(propertyName);\n      if (propertyName === 'background') {\n        propertyName = 'shading';\n      }\n      if (!isNullOrUndefined(value)) {\n        this.selection.owner.editorModule.onApplyTableFormat(propertyName, value);\n      }\n    }\n  };\n  /**\n   * Copies the format.\n   *\n   * @param {WTableFormat} format Format to copy.\n   * @returns {void}\n   * @private\n   */\n  SelectionTableFormat.prototype.copyFormat = function (format) {\n    this.leftIndent = format.leftIndent;\n    this.background = format.shading.backgroundColor;\n    this.tableAlignment = format.tableAlignment;\n    this.leftMargin = format.leftMargin;\n    this.rightMargin = format.rightMargin;\n    this.topMargin = format.topMargin;\n    this.bottomMargin = format.bottomMargin;\n    this.cellSpacing = format.cellSpacing;\n    this.preferredWidth = format.preferredWidth;\n    this.preferredWidthType = format.preferredWidthType;\n    this.bidi = format.bidi;\n    this.title = format.title;\n    this.description = format.description;\n  };\n  /**\n   * Clears the format.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionTableFormat.prototype.clearFormat = function () {\n    this.table = undefined;\n    this.leftIndent = 0;\n    this.background = undefined;\n    this.leftIndent = 0;\n    this.leftMargin = 0;\n    this.rightMargin = 0;\n    this.topMargin = 0;\n    this.bottomMargin = 0;\n    this.cellSpacing = 0;\n    this.tableAlignment = undefined;\n    this.bidi = undefined;\n  };\n  /**\n   * Destroys the managed resources.\n   *\n   * @returns {void}\n   * @private\n   */\n  SelectionTableFormat.prototype.destroy = function () {\n    this.leftIndentIn = undefined;\n    this.backgroundIn = undefined;\n    this.leftIndentIn = undefined;\n    this.leftMarginIn = undefined;\n    this.rightMarginIn = undefined;\n    this.topMarginIn = undefined;\n    this.bottomMarginIn = undefined;\n    this.cellSpacingIn = undefined;\n    this.tableAlignmentIn = undefined;\n    this.tableIn = undefined;\n    this.selection = undefined;\n    this.bidi = undefined;\n  };\n  return SelectionTableFormat;\n}();\nexport { SelectionTableFormat };\n/**\n * Selection cell format implementation\n */\nvar SelectionCellFormat = /** @class */function () {\n  /**\n   * @private\n   */\n  function SelectionCellFormat(selection) {\n    this.verticalAlignmentIn = undefined;\n    this.leftMarginIn = 0;\n    this.rightMarginIn = 0;\n    this.topMarginIn = 0;\n    this.bottomMarginIn = 0;\n    this.backgroundIn = undefined;\n    this.preferredWidthTypeIn = undefined;\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionCellFormat.prototype, \"verticalAlignment\", {\n    /**\n     * Gets or sets the vertical alignment of the selected cells.\n     *\n     * @default undefined\n     */\n    get: function () {\n      return this.verticalAlignmentIn;\n    },\n    /**\n     * Gets or sets the vertical alignment of the selected cells.\n     *\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.verticalAlignmentIn) {\n        return;\n      }\n      this.verticalAlignmentIn = value;\n      this.notifyPropertyChanged('verticalAlignment');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"leftMargin\", {\n    /**\n     * Gets or Sets the left margin for selected cells.\n     *\n     * @default undefined\n     * @aspType int\n     */\n    /* eslint-disable */\n    get: function () {\n      return this.leftMarginIn;\n    },\n    /**\n     * Gets or Sets the left margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.leftMarginIn) {\n        return;\n      }\n      this.leftMarginIn = value;\n      this.notifyPropertyChanged('leftMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"rightMargin\", {\n    /**\n     * Gets or Sets the right margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.rightMarginIn;\n    },\n    /**\n     * Gets or Sets the right margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.rightMarginIn) {\n        return;\n      }\n      this.rightMarginIn = value;\n      this.notifyPropertyChanged('rightMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"topMargin\", {\n    /**\n     * Gets or Sets the top margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.topMarginIn;\n    },\n    /**\n     * Gets or Sets the top margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.topMarginIn) {\n        return;\n      }\n      this.topMarginIn = value;\n      this.notifyPropertyChanged('topMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"bottomMargin\", {\n    /**\n     * Gets or Sets the bottom margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.bottomMarginIn;\n    },\n    /**\n     * Gets or Sets the bottom margin for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.bottomMarginIn) {\n        return;\n      }\n      this.bottomMarginIn = value;\n      this.notifyPropertyChanged('bottomMargin');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"background\", {\n    /**\n     * Gets or Sets the background for selected cells.\n     * @default undefined\n     * @aspType string\n     */\n    get: function () {\n      return this.backgroundIn;\n    },\n    /**\n     * Gets or Sets the background for selected cells.\n     * @default undefined\n     * @aspType string\n     */\n    set: function (value) {\n      if (value === this.backgroundIn) {\n        return;\n      }\n      this.backgroundIn = value;\n      this.notifyPropertyChanged('background');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"preferredWidthType\", {\n    /**\n     * Gets or Sets the preferred width type for selected cells.\n     * @default undefined\n     */\n    get: function () {\n      return this.preferredWidthTypeIn;\n    },\n    /**\n     * Gets or Sets the preferred width type for selected cells.\n     * @default undefined\n     */\n    set: function (value) {\n      if (value === this.preferredWidthTypeIn) {\n        return;\n      }\n      this.preferredWidthTypeIn = value;\n      this.notifyPropertyChanged('preferredWidthType');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionCellFormat.prototype, \"preferredWidth\", {\n    /**\n     * Gets or Sets the preferred width  for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    get: function () {\n      return this.preferredWidthIn;\n    },\n    /**\n     * Gets or Sets the preferred width  for selected cells.\n     * @default undefined\n     * @aspType int\n     */\n    set: function (value) {\n      if (value === this.preferredWidthIn) {\n        return;\n      }\n      this.preferredWidthIn = value;\n      this.notifyPropertyChanged('preferredWidth');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionCellFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    var selection = this.selection;\n    if (!isNullOrUndefined(selection)) {\n      if ((selection.isCleared || !selection.owner.isDocumentLoaded || selection.owner.isReadOnlyMode || selection.owner.isPastingContent) && !selection.isRetrieveFormatting) {\n        return;\n      }\n      if (!isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n        var value = this.getPropertyValue(propertyName);\n        if (propertyName === 'background') {\n          propertyName = 'shading';\n        }\n        if (!isNullOrUndefined(value)) {\n          this.selection.owner.editorModule.onApplyTableCellFormat(propertyName, value);\n        }\n      }\n    }\n  };\n  SelectionCellFormat.prototype.getPropertyValue = function (propertyName) {\n    switch (propertyName) {\n      case 'verticalAlignment':\n        return this.verticalAlignment;\n      case 'leftMargin':\n        return this.leftMargin;\n      case 'rightMargin':\n        return this.rightMargin;\n      case 'topMargin':\n        return this.topMargin;\n      case 'bottomMargin':\n        return this.bottomMargin;\n      case 'preferredWidth':\n        return this.preferredWidth;\n      case 'preferredWidthType':\n        return this.preferredWidthType;\n      case 'background':\n        var shading = new WShading();\n        shading.backgroundColor = this.background;\n        return shading;\n      default:\n        return undefined;\n    }\n  };\n  /**\n   * Copies the format.\n   *\n   * @private\n   * @param {WCellFormat} format - Source Format to copy.\n   * @returns {void}\n   */\n  SelectionCellFormat.prototype.copyFormat = function (format) {\n    this.leftMargin = format.leftMargin;\n    this.rightMargin = format.rightMargin;\n    this.topMargin = format.topMargin;\n    this.bottomMargin = format.bottomMargin;\n    this.background = format.shading.backgroundColor;\n    this.verticalAlignment = format.verticalAlignment;\n    this.preferredWidth = format.preferredWidth;\n    this.preferredWidthType = format.preferredWidthType;\n  };\n  /**\n   * Clears the format.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionCellFormat.prototype.clearCellFormat = function () {\n    this.leftMargin = undefined;\n    this.rightMargin = undefined;\n    this.topMargin = undefined;\n    this.bottomMargin = undefined;\n    this.background = undefined;\n    this.verticalAlignment = undefined;\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WCellFormat} format - Returns cell format\n   * @private\n   */\n  SelectionCellFormat.prototype.combineFormat = function (format) {\n    if (!isNullOrUndefined(this.leftMargin) && this.leftMargin !== format.leftMargin) {\n      this.leftMargin = undefined;\n    }\n    if (!isNullOrUndefined(this.topMargin) && this.topMargin !== format.topMargin) {\n      this.topMargin = undefined;\n    }\n    if (!isNullOrUndefined(this.rightMargin) && this.rightMargin !== format.rightMargin) {\n      this.rightMargin = undefined;\n    }\n    if (!isNullOrUndefined(this.bottomMargin) && this.bottomMargin !== format.bottomMargin) {\n      this.bottomMargin = undefined;\n    }\n    if (!isNullOrUndefined(this.background) && this.background !== format.shading.backgroundColor) {\n      this.background = undefined;\n    }\n    if (!isNullOrUndefined(this.verticalAlignment) && this.verticalAlignment !== format.verticalAlignment) {\n      this.verticalAlignment = undefined;\n    }\n    if (!isNullOrUndefined(this.preferredWidth) && this.preferredWidth !== format.preferredWidth) {\n      this.preferredWidth = undefined;\n    }\n    if (!isNullOrUndefined(this.preferredWidthType) && this.preferredWidthType !== format.preferredWidthType) {\n      this.preferredWidthType = undefined;\n    }\n  };\n  /**\n   * Clears the format.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionCellFormat.prototype.clearFormat = function () {\n    this.background = undefined;\n    this.bottomMargin = 0;\n    this.leftMargin = 0;\n    this.rightMargin = 0;\n    this.topMargin = 0;\n    this.verticalAlignment = undefined;\n  };\n  /**\n   * Destroys the manages resources.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionCellFormat.prototype.destroy = function () {\n    this.backgroundIn = undefined;\n    this.verticalAlignmentIn = undefined;\n    this.bottomMarginIn = undefined;\n    this.leftMarginIn = undefined;\n    this.rightMarginIn = undefined;\n    this.topMarginIn = undefined;\n    this.selection = undefined;\n  };\n  return SelectionCellFormat;\n}();\nexport { SelectionCellFormat };\n/**\n * Selection row format implementation\n */\nvar SelectionRowFormat = /** @class */function () {\n  /**\n   * @param {Selection} selection - Specifies the selection\n   * @private\n   */\n  function SelectionRowFormat(selection) {\n    this.heightIn = undefined;\n    this.heightTypeIn = undefined;\n    this.isHeaderIn = undefined;\n    this.allowRowBreakAcrossPagesIn = undefined;\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionRowFormat.prototype, \"height\", {\n    /**\n     * Gets or Sets the height for selected rows.\n     *\n     * @default undefined\n     * @aspType int\n     * @returns {number} - Returns the height\n     */\n    get: function () {\n      return this.heightIn;\n    },\n    /**\n     * Gets or Sets the height for selected rows.\n     *\n     * @default undefined\n     * @aspType int\n     * @param {number} value - Specified the value\n     */\n    set: function (value) {\n      if (value === this.heightIn) {\n        return;\n      }\n      this.heightIn = value;\n      this.notifyPropertyChanged('height');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionRowFormat.prototype, \"heightType\", {\n    /**\n     * Gets or Sets the height type for selected rows.\n     *\n     * @default undefined\n     * @returns {HeightType} - Returns height type\n     */\n    get: function () {\n      return this.heightTypeIn;\n    },\n    /**\n     * Gets or Sets the height type for selected rows.\n     *\n     * @default undefined\n     * @param {HeightType} value - Specified the value\n     */\n    set: function (value) {\n      if (value === this.heightTypeIn) {\n        return;\n      }\n      this.heightTypeIn = value;\n      this.notifyPropertyChanged('heightType');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionRowFormat.prototype, \"isHeader\", {\n    /**\n     * Gets or Sets a value indicating whether the selected rows are header rows or not.\n     *\n     * @default undefined\n     * @aspType bool\n     * @returns {boolean} - Returns the is header\n     */\n    get: function () {\n      return this.isHeaderIn;\n    },\n    /**\n     * Gets or Sets a value indicating whether the selected rows are header rows or not.\n     *\n     * @default undefined\n     * @aspType bool\n     * @param {boolean} value - Specified the value\n     */\n    set: function (value) {\n      if (value === this.isHeaderIn) {\n        return;\n      }\n      this.isHeaderIn = value;\n      this.notifyPropertyChanged('isHeader');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionRowFormat.prototype, \"allowBreakAcrossPages\", {\n    /**\n     * Gets or Sets a value indicating whether to allow break across pages for selected rows.\n     *\n     * @default undefined\n     * @aspType bool\n     * @returns {boolean} - Returns the allow break across page\n     */\n    get: function () {\n      return this.allowRowBreakAcrossPagesIn;\n    },\n    /**\n     * Gets or Sets a value indicating whether to allow break across pages for selected rows.\n     *\n     * @default undefined\n     * @param {boolean} value - Specified the value\n     * @aspType bool\n     */\n    set: function (value) {\n      if (value === this.allowRowBreakAcrossPagesIn) {\n        return;\n      }\n      this.allowRowBreakAcrossPagesIn = value;\n      this.notifyPropertyChanged('allowBreakAcrossPages');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionRowFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    var selection = this.selection;\n    if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded || selection.owner.isPastingContent) && !selection.isRetrieveFormatting) {\n      return;\n    }\n    if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n      var value = this.getPropertyValue(propertyName);\n      if (!isNullOrUndefined(value)) {\n        selection.owner.editorModule.onApplyTableRowFormat(propertyName, value);\n      }\n    }\n  };\n  SelectionRowFormat.prototype.getPropertyValue = function (propertyName) {\n    switch (propertyName) {\n      case 'height':\n        return this.height;\n      case 'heightType':\n        return this.heightType;\n      case 'isHeader':\n        return this.isHeader;\n      case 'allowBreakAcrossPages':\n        return this.allowBreakAcrossPages;\n      default:\n        return undefined;\n    }\n  };\n  /**\n   * Copies the format.\n   *\n   * @param {WRowFormat} format - Specified row format\n   * @private\n   * @returns {void}\n   */\n  SelectionRowFormat.prototype.copyFormat = function (format) {\n    this.height = format.height;\n    this.heightType = format.heightType;\n    this.allowBreakAcrossPages = format.allowBreakAcrossPages;\n    this.isHeader = format.isHeader;\n  };\n  /**\n   * Combines the format.\n   *\n   * @param {WRowFormat} format - Secifies row format\n   * @private\n   */\n  SelectionRowFormat.prototype.combineFormat = function (format) {\n    if (!isNullOrUndefined(this.height) && this.height !== format.height) {\n      this.height = undefined;\n    }\n    if (!isNullOrUndefined(this.heightType) && this.heightType !== format.heightType) {\n      this.heightType = undefined;\n    }\n    if (!isNullOrUndefined(this.allowBreakAcrossPages) && this.allowBreakAcrossPages !== format.allowBreakAcrossPages) {\n      this.allowBreakAcrossPages = undefined;\n    }\n    if (!isNullOrUndefined(this.isHeader) && this.isHeader !== format.isHeader) {\n      this.isHeader = undefined;\n    }\n  };\n  /**\n   * Clears the row format.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionRowFormat.prototype.clearRowFormat = function () {\n    this.height = undefined;\n    this.heightType = undefined;\n    this.allowBreakAcrossPages = undefined;\n    this.isHeader = undefined;\n  };\n  /**\n   * Clears the format.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionRowFormat.prototype.clearFormat = function () {\n    this.height = 0;\n    this.heightType = undefined;\n    this.allowBreakAcrossPages = undefined;\n    this.isHeader = undefined;\n  };\n  /**\n   * Destroys the managed resources.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionRowFormat.prototype.destroy = function () {\n    this.heightIn = undefined;\n    this.heightTypeIn = undefined;\n    this.allowRowBreakAcrossPagesIn = undefined;\n    this.isHeaderIn = undefined;\n    this.selection = undefined;\n  };\n  return SelectionRowFormat;\n}();\nexport { SelectionRowFormat };\n/**\n * Selection image format implementation\n */\nvar SelectionImageFormat = /** @class */function () {\n  /**\n   * @param {Selection} selection - Specifies selecion module\n   * @private\n   */\n  function SelectionImageFormat(selection) {\n    this.selection = selection;\n  }\n  Object.defineProperty(SelectionImageFormat.prototype, \"width\", {\n    /**\n     * Gets the width of the image.\n     *\n     * @aspType int\n     * @returns {number} - Returns image width\n     */\n    get: function () {\n      if (this.image) {\n        return this.image.width;\n      }\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionImageFormat.prototype, \"height\", {\n    /**\n     * Gets the height of the image.\n     *\n     * @aspType int\n     * @returns {number} - Returns image height\n     */\n    get: function () {\n      if (this.image) {\n        return this.image.height;\n      }\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionImageFormat.prototype, \"alternateText\", {\n    /**\n     * Gets the alternateText of the image.\n     *\n     * @aspType string\n     * @returns {string} - Returns image alternateText\n     */\n    get: function () {\n      if (this.image) {\n        return this.image.alternateText;\n      }\n      return null;\n    },\n    /**\n     * Sets the alternateText of the image.\n     *\n     * @aspType string\n     * @returns {string} - Returns image alternateText\n     */\n    set: function (value) {\n      if (value === this.alternateText) {\n        return;\n      }\n      this.image.alternateText = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Resizes the image based on given size.\n   *\n   * @param {number} width - Specified the image width\n   * @param {number} height - Specifies the image height\n   * @private\n   * @returns {void}\n   */\n  SelectionImageFormat.prototype.resize = function (width, height) {\n    this.updateImageFormat(width, height, this.alternateText);\n  };\n  /**\n   * update the image based on given alternateText.\n   *\n   * @param {string} alternateText - Specified the image alternateText\n   * @private\n   * @returns {void}\n   */\n  SelectionImageFormat.prototype.applyImageAlternativeText = function (alternateText) {\n    this.updateImageFormat(this.width, this.height, alternateText);\n  };\n  /**\n   * Update image width and height\n   *\n   * @param {number} width - Specified the image width\n   * @param {number} height - Specifies the image height\n   * @param {string} alternateText - Specofies the image alternateText\n   * @private\n   * @returns {void}\n   */\n  SelectionImageFormat.prototype.updateImageFormat = function (width, height, alternateText) {\n    if (this.image) {\n      if (this.selection.owner.editorModule) {\n        this.selection.owner.editorModule.onImageFormat(this.image, width, height, alternateText);\n      }\n    }\n  };\n  /**\n   * @param {ImageElementBox} image - Specifies image element box\n   * @private\n   * @returns {void}\n   */\n  SelectionImageFormat.prototype.copyImageFormat = function (image) {\n    this.image = image;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  SelectionImageFormat.prototype.clearImageFormat = function () {\n    this.image = undefined;\n  };\n  return SelectionImageFormat;\n}();\nexport { SelectionImageFormat };\n/**\n * Selection column format\n */\nvar SelectionColumnFormat = /** @class */function () {\n  /**\n   * @param selection\n   * @private\n   */\n  function SelectionColumnFormat(selection) {\n    this.widthIn = 0;\n    this.spaceIn = 0;\n    this.selection = selection;\n  }\n  /**\n   * Copies the format.\n   *\n   * @private\n   * @param {WColumnFormat} format - Source Format to copy.\n   * @returns {void}\n   */\n  SelectionColumnFormat.prototype.copyFormat = function (format) {\n    this.width = format.width;\n    this.space = format.space;\n  };\n  Object.defineProperty(SelectionColumnFormat.prototype, \"width\", {\n    /**\n     * Gets or sets the width of the column.\n     */\n    get: function () {\n      return this.widthIn;\n    },\n    /**\n     * Gets or sets the width of the column.\n     */\n    set: function (value) {\n      if (value === this.widthIn) {\n        return;\n      }\n      this.widthIn = value;\n      //this.notifyPropertyChanged('width');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionColumnFormat.prototype, \"space\", {\n    /**\n     * Gets or sets the space in between this column and next column.\n     */\n    get: function () {\n      return this.spaceIn;\n    },\n    /**\n     * Gets or sets the space in between this column and next column.\n     */\n    set: function (value) {\n      if (value === this.spaceIn) {\n        return;\n      }\n      this.spaceIn = value;\n      //this.notifyPropertyChanged('space');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectionColumnFormat.prototype.getPropertyValue = function (property) {\n    switch (property) {\n      case 'space':\n        return this.space;\n      case 'width':\n        return this.width;\n      default:\n        return undefined;\n    }\n  };\n  SelectionColumnFormat.prototype.notifyPropertyChanged = function (propertyName) {\n    var selection = this.selection;\n    if (!isNullOrUndefined(selection)) {\n      this.selection.owner.editorModule.onApplyColumnFormat('columns', this.selection.sectionFormat.columns);\n    }\n  };\n  /**\n   * Clears the format.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionColumnFormat.prototype.clearFormat = function () {\n    this.widthIn = 0;\n    this.spaceIn = 0;\n  };\n  /**\n   * Destroys the manages resources.\n   *\n   * @private\n   * @returns {void}\n   */\n  SelectionColumnFormat.prototype.destroy = function () {\n    this.widthIn = undefined;\n    this.spaceIn = undefined;\n  };\n  return SelectionColumnFormat;\n}();\nexport { SelectionColumnFormat };\n/* eslint-enable */","map":{"version":3,"names":["FontScriptType","WShading","HelperMethods","isNullOrUndefined","WList","WAbstractList","WListLevel","SelectionCharacterFormat","selection","boldIn","undefined","italicIn","underlineIn","strikeThroughIn","baselineAlignmentIn","highlightColorIn","fontSizeIn","scriptType","English","fontColorIn","allCapsIn","boldBidi","italicBidi","fontSizeBidi","bidi","bdo","Object","defineProperty","prototype","get","set","value","notifyPropertyChanged","enumerable","configurable","renderedFontFamilyIn","fontFamilyIn","italic","getPropertyValue","property","bold","fontSize","fontFamily","strikethrough","baselineAlignment","highlightColor","underline","fontColor","allCaps","propertyName","isCleared","owner","isReadOnlyMode","isInlineFormFillMode","isDocumentLoaded","isPastingContent","isRetrieveFormatting","start","propertyValue","editorModule","onApplyCharacterFormat","copyFormat","format","renderFontFamily","styleName","baseCharStyle","name","fontFamilyBidi","combineFormat","renderedFontFamily","canRetrieveNextCharacterFormat","cloneFormat","selectionCharacterFormat","isEqualFormat","clearFormat","destroy","SelectionBorder","borderType","node","colorIn","lineStyleIn","lineWidthIn","shadowIn","spaceIn","ownerBase","border","color","lineStyle","lineWidth","shadow","space","editor","applyParagraphBorders","SelectionBorders","topIn","bottomIn","rightIn","leftIn","horizontalIn","verticalIn","borders","top","bottom","left","right","horizontal","vertical","SelectionParagraphFormat","documentHelper","leftIndentIn","rightIndentIn","beforeSpacingIn","afterSpacingIn","spaceAfterAutoIn","spaceBeforeAutoIn","textAlignmentIn","outlineLevelIn","firstLineIndentIn","lineSpacingIn","lineSpacingTypeIn","bidiIn","keepWithNextIn","keepLinesTogetherIn","widowControlIn","contextualSpacingIn","listLevelNumberIn","bordersIn","validateLineSpacing","lineSpacingType","listFormat","list","getListById","listId","listLevel","getListLevel","listLevelNumber","listLevelPattern","numberFormat","i","levelPattern","indexOf","level","listTextElement","getListTextElementBox","paragraph","listText","text","leftIndent","rightIndent","firstLineIndent","beforeSpacing","afterSpacing","spaceAfterAuto","spaceBeforeAuto","textAlignment","lineSpacing","contextualSpacing","keepWithNext","keepLinesTogether","widowControl","outlineLevel","editorHistory","editorHistoryModule","isUndoing","isRedoing","initComplexHistory","value_1","onApplyParagraphFormat","updateComplexHistory","onApplyListInternal","baseStyle","copyToFormat","getList","listAdv","abstractList","currentAbstractList","getAbstractListById","abstractListId","levels","length","cloneListLevel","push","levelOverrides","levelOverride","cloneLevelOverride","sourceListId","setList","isListDialog","collection","history_1","layout","isLayoutEnabled","setOffsetValue","updateListChangesInHistory","updateListParagraphs","applyListChanges","renderedLists","clear","renderedLevelOverrides","clearInvalidList","layoutWholeDocument","updateSelectionTextPosition","currentBaseHistoryInfo","modifiedProperties","updateSelection","updateHistory","fireContentChange","abstractLists","lists","onApplyList","SelectionHeaderFooter","linkToPreviousIn","getPropertyvalue","headerFooterWidget","bodyWidget","sectionIndex","headerFooterType","removeInlineHeaderFooterWidget","linkToPrevious","SelectionSectionFormat","differentFirstPageIn","differentOddAndEvenPagesIn","firstPageHeaderIn","firstPageFooterIn","oddPageHeaderIn","oddPageFooterIn","evenPageHeaderIn","evenPageFooterIn","pageHeightIn","pageWidthIn","leftMarginIn","bottomMarginIn","topMarginIn","rightMarginIn","headerDistanceIn","pageStartingNumberIn","restartPageNumberingIn","footerDistanceIn","endnoteNumberFormatIn","footNoteNumberFormatIn","initialFootNoteNumberIn","initialEndNoteNumberIn","restartIndexForFootnotesIn","restartIndexForEndnotesIn","columns","equalWidthIn","lineBetweenColumnsIn","columnsIn","onApplyColumnFormat","breakCodeIn","pageHeight","pageWidth","leftMargin","topMargin","rightMargin","bottomMargin","headerDistance","footerDistance","differentFirstPage","differentOddAndEvenPages","pageStartingNumber","restartPageNumbering","endnoteNumberFormat","footNoteNumberFormat","restartIndexForEndnotes","restartIndexForFootnotes","initialEndNoteNumber","initialFootNoteNumber","equalWidth","lineBetweenColumns","_i","_a","col","selectCol","SelectionColumnFormat","width","convertPixelToPoint","breakCode","enableHeaderAndFooter","headerFootersColletion","headersFooters","containerWidget","isLinkedToPrevious","oddPageHeader","oddPageFooter","evenPageHeader","evenPageFooter","firstPageHeader","firstPageFooter","index","viewer","getHeaderFooter","headerFooterWidget_1","applyColumnFormat","onApplySectionFormat","SelectionTableFormat","backgroundIn","tableAlignmentIn","cellSpacingIn","preferredWidthIn","tableIn","titleIn","table","descriptionIn","preferredWidthTypeIn","tableAlignment","cellSpacing","shading","backgroundColor","background","preferredWidth","preferredWidthType","title","description","onApplyTableFormat","SelectionCellFormat","verticalAlignmentIn","onApplyTableCellFormat","verticalAlignment","clearCellFormat","SelectionRowFormat","heightIn","heightTypeIn","isHeaderIn","allowRowBreakAcrossPagesIn","onApplyTableRowFormat","height","heightType","isHeader","allowBreakAcrossPages","clearRowFormat","SelectionImageFormat","image","alternateText","resize","updateImageFormat","applyImageAlternativeText","onImageFormat","copyImageFormat","clearImageFormat","widthIn","sectionFormat"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-format.js"],"sourcesContent":["import { FontScriptType } from '../../base/types';\nimport { WShading } from '../format/index';\nimport { HelperMethods } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { WList } from '../list/list';\nimport { WAbstractList } from '../list/abstract-list';\nimport { WListLevel } from '../list/list-level';\n/* eslint-disable */\n/**\n * Selection character format implementation\n */\nvar SelectionCharacterFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionCharacterFormat(selection) {\n        this.boldIn = undefined;\n        this.italicIn = undefined;\n        this.underlineIn = undefined;\n        this.strikeThroughIn = undefined;\n        this.baselineAlignmentIn = undefined;\n        this.highlightColorIn = undefined;\n        this.fontSizeIn = 0;\n        this.scriptType = FontScriptType.English;\n        this.fontColorIn = undefined;\n        this.allCapsIn = undefined;\n        /**\n         * @private\n         */\n        this.boldBidi = undefined;\n        /**\n         * @private\n         */\n        this.italicBidi = undefined;\n        /**\n         * @private\n         */\n        this.fontSizeBidi = 0;\n        /**\n         * @private\n         */\n        this.bidi = undefined;\n        /**\n         * @private\n         */\n        this.bdo = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"fontSize\", {\n        /**\n         * Gets the font size of selected contents.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.fontSizeIn;\n        },\n        /**\n         * Sets the font size of selected contents.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.fontSizeIn) {\n                return;\n            }\n            this.fontSizeIn = value;\n            this.notifyPropertyChanged('fontSize');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"renderedFontFamily\", {\n        get: function () {\n            return this.renderedFontFamilyIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"fontFamily\", {\n        /**\n         * Gets or sets the font family of selected contents.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.fontFamilyIn;\n        },\n        /**\n         * Sets the font family of selected contents.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.fontFamilyIn) {\n                return;\n            }\n            this.fontFamilyIn = this.renderedFontFamilyIn = value;\n            this.notifyPropertyChanged('fontFamily');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"fontColor\", {\n        /**\n         * Gets or sets the font color of selected contents.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.fontColorIn;\n        },\n        /**\n         * Sets the font color of selected contents.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.fontColorIn) {\n                return;\n            }\n            this.fontColorIn = value;\n            this.notifyPropertyChanged('fontColor');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"bold\", {\n        /**\n         * Gets or sets the bold formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.boldIn;\n        },\n        /**\n         * Sets the bold formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.boldIn) {\n                return;\n            }\n            this.boldIn = value;\n            this.notifyPropertyChanged('bold');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"italic\", {\n        /**\n         * Gets or sets the italic formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.italicIn;\n        },\n        /**\n         * Sets the italic formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.italic) {\n                return;\n            }\n            this.italicIn = value;\n            this.notifyPropertyChanged('italic');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"strikethrough\", {\n        /**\n         * Gets or sets the strikethrough property of selected contents.\n         */\n        get: function () {\n            return this.strikeThroughIn;\n        },\n        /**\n         * Sets the strikethrough property of selected contents.\n         */\n        set: function (value) {\n            if (value === this.strikeThroughIn) {\n                return;\n            }\n            this.strikeThroughIn = value;\n            this.notifyPropertyChanged('strikethrough');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"baselineAlignment\", {\n        /**\n         * Gets or sets the baseline alignment property of selected contents.\n         */\n        get: function () {\n            return this.baselineAlignmentIn;\n        },\n        /**\n         * Sets the baseline alignment property of selected contents.\n         */\n        set: function (value) {\n            if (value === this.baselineAlignmentIn) {\n                return;\n            }\n            this.baselineAlignmentIn = value;\n            this.notifyPropertyChanged('baselineAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"underline\", {\n        /**\n         * Gets or sets the underline style of selected contents.\n         */\n        get: function () {\n            return this.underlineIn;\n        },\n        /**\n         * Sets the underline style of selected contents.\n         */\n        set: function (value) {\n            if (value === this.underlineIn) {\n                return;\n            }\n            this.underlineIn = value;\n            this.notifyPropertyChanged('underline');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"highlightColor\", {\n        /**\n         * Gets or sets the highlight color of selected contents.\n         */\n        get: function () {\n            return this.highlightColorIn;\n        },\n        /**\n         * Sets the highlight color of selected contents.\n         */\n        set: function (value) {\n            if (value === this.highlightColorIn && value !== \"NoColor\") {\n                return;\n            }\n            this.highlightColorIn = value;\n            this.notifyPropertyChanged('highlightColor');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCharacterFormat.prototype, \"allCaps\", {\n        /**\n         * Gets or sets the allCaps formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.allCapsIn;\n        },\n        /**\n         * Sets the allCaps formatting of selected contents.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.allCapsIn) {\n                return;\n            }\n            this.allCapsIn = value;\n            this.notifyPropertyChanged('allCaps');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionCharacterFormat.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'bold':\n                return this.bold;\n            case 'italic':\n                return this.italic;\n            case 'fontSize':\n                if (this.fontSize >= 1) {\n                    return this.fontSize;\n                }\n                return undefined;\n            case 'fontFamily':\n                return this.fontFamily;\n            case 'strikethrough':\n                return this.strikethrough;\n            case 'baselineAlignment':\n                return this.baselineAlignment;\n            case 'highlightColor':\n                return this.highlightColor;\n            case 'underline':\n                return this.underline;\n            case 'fontColor':\n                return this.fontColor;\n            case 'allCaps':\n                return this.allCaps;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Notifies whenever property gets changed.\n     *\n     * @param {string} propertyName\n     */\n    SelectionCharacterFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!isNullOrUndefined(this.selection) && (this.selection.isCleared || (this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) ||\n            !this.selection.owner.isDocumentLoaded || this.selection.owner.isPastingContent) && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var propertyValue = this.getPropertyValue(propertyName);\n            if (!isNullOrUndefined(propertyValue)) {\n                this.selection.owner.editorModule.onApplyCharacterFormat(propertyName, propertyValue);\n            }\n        }\n    };\n    /**\n     * Copies the source format.\n     *\n     * @param {WCharacterFormat} format\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.copyFormat = function (format, renderFontFamily) {\n        this.styleName = !isNullOrUndefined(format.baseCharStyle) ? format.baseCharStyle.name : 'Default Paragraph Font';\n        this.fontSize = format.fontSize;\n        this.renderedFontFamilyIn = renderFontFamily;\n        this.fontFamily = format.fontFamily;\n        this.bold = format.bold;\n        this.italic = format.italic;\n        this.baselineAlignment = format.baselineAlignment;\n        this.underline = format.underline;\n        this.fontColor = format.fontColor;\n        this.highlightColor = format.highlightColor;\n        this.strikethrough = format.strikethrough;\n        this.bidi = format.bidi;\n        this.bdo = format.bdo;\n        this.boldBidi = format.boldBidi;\n        this.italicBidi = format.italicBidi;\n        this.fontFamilyBidi = format.fontFamilyBidi;\n        this.fontSizeBidi = format.fontSizeBidi;\n        this.allCaps = format.allCaps;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WCharacterFormat} format\n     * @private\n     */\n    SelectionCharacterFormat.prototype.combineFormat = function (format, renderFontFamily) {\n        if (!isNullOrUndefined(this.bold) && this.bold !== format.bold) {\n            this.bold = undefined;\n        }\n        if (!isNullOrUndefined(this.italic) && this.italic !== format.italic) {\n            this.italic = undefined;\n        }\n        if (this.fontSize !== 0 && this.fontSize !== format.fontSize) {\n            this.fontSize = 0;\n        }\n        if (!isNullOrUndefined(this.renderedFontFamily) && this.renderedFontFamily !== renderFontFamily) {\n            this.renderedFontFamilyIn = undefined;\n        }\n        if (!isNullOrUndefined(this.fontFamily) && this.fontFamily !== format.fontFamily) {\n            this.fontFamily = undefined;\n        }\n        if (!isNullOrUndefined(this.highlightColor) && this.highlightColor !== format.highlightColor) {\n            this.highlightColor = undefined;\n        }\n        if (!isNullOrUndefined(this.baselineAlignment) && this.baselineAlignment !== format.baselineAlignment) {\n            this.baselineAlignment = undefined;\n        }\n        if (!isNullOrUndefined(this.fontColor) && (this.fontColor !== format.fontColor)) {\n            this.fontColor = undefined;\n        }\n        if (!isNullOrUndefined(this.underline) && this.underline !== format.underline) {\n            this.underline = undefined;\n        }\n        if (!isNullOrUndefined(this.strikethrough) && this.strikethrough !== format.strikethrough) {\n            this.strikethrough = undefined;\n        }\n        if (!isNullOrUndefined(this.boldBidi) && this.boldBidi !== format.boldBidi) {\n            this.boldBidi = undefined;\n        }\n        if (!isNullOrUndefined(this.italicBidi) && this.italicBidi !== format.italicBidi) {\n            this.italicBidi = undefined;\n        }\n        if (this.fontSizeBidi !== 0 && this.fontSizeBidi !== format.fontSizeBidi) {\n            this.fontSizeBidi = 0;\n        }\n        if (!isNullOrUndefined(this.fontFamilyBidi) && this.fontFamilyBidi !== format.fontFamilyBidi) {\n            this.fontFamilyBidi = undefined;\n        }\n        if (!isNullOrUndefined(this.bidi) && this.bidi !== format.bidi) {\n            this.bidi = undefined;\n        }\n        if (!isNullOrUndefined(this.bdo) && this.bdo !== format.bdo) {\n            this.bdo = undefined;\n        }\n        if (!isNullOrUndefined(this.allCaps) && this.allCaps !== format.allCaps) {\n            this.allCaps = undefined;\n        }\n    };\n    /**\n     * @private\n     */\n    SelectionCharacterFormat.prototype.canRetrieveNextCharacterFormat = function () {\n        if (isNullOrUndefined(this.bold) && isNullOrUndefined(this.italic) && this.fontSize === 0 && isNullOrUndefined(this.fontFamily) && isNullOrUndefined(this.highlightColor)\n            && isNullOrUndefined(this.baselineAlignment) && isNullOrUndefined(this.fontColor) && isNullOrUndefined(this.underline) && isNullOrUndefined(this.strikethrough) && isNullOrUndefined(this.boldBidi)\n            && isNullOrUndefined(this.italicBidi) && this.fontSizeBidi === 0 && isNullOrUndefined(this.fontFamilyBidi) && isNullOrUndefined(this.bdo) && isNullOrUndefined(this.allCaps)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Clones the format.\n     *\n     * @param {SelectionCharacterFormat} selectionCharacterFormat\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.cloneFormat = function (selectionCharacterFormat) {\n        this.bold = selectionCharacterFormat.bold;\n        this.italic = selectionCharacterFormat.italic;\n        this.underline = selectionCharacterFormat.underline;\n        this.strikethrough = selectionCharacterFormat.strikethrough;\n        this.baselineAlignment = selectionCharacterFormat.baselineAlignment;\n        this.highlightColor = selectionCharacterFormat.highlightColor;\n        this.fontSize = selectionCharacterFormat.fontSize;\n        this.fontFamily = selectionCharacterFormat.fontFamily;\n        this.fontColor = selectionCharacterFormat.fontColor;\n        this.styleName = selectionCharacterFormat.styleName;\n        this.bidi = selectionCharacterFormat.bidi;\n        this.bdo = selectionCharacterFormat.bdo;\n        this.boldBidi = selectionCharacterFormat.boldBidi;\n        this.italicBidi = selectionCharacterFormat.italicBidi;\n        this.fontSizeBidi = selectionCharacterFormat.fontSizeBidi;\n        this.fontFamilyBidi = selectionCharacterFormat.fontFamilyBidi;\n        this.allCaps = selectionCharacterFormat.allCaps;\n    };\n    /**\n     * Checks whether current format is equal to the source format or not.\n     *\n     * @param {SelectionCharacterFormat} format\n     * @returns boolean\n     * @private\n     */\n    SelectionCharacterFormat.prototype.isEqualFormat = function (format) {\n        return (this.fontSize === format.fontSize\n            && this.strikethrough === format.strikethrough\n            && this.bold === format.bold\n            && this.fontFamily === format.fontFamily\n            && this.underline === format.underline\n            && this.highlightColor === format.highlightColor\n            && this.italic === format.italic\n            && this.baselineAlignment === format.baselineAlignment\n            && this.fontColor === format.fontColor\n            && this.allCaps === format.allCaps);\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.clearFormat = function () {\n        this.fontSizeIn = 0;\n        this.boldIn = undefined;\n        this.italicIn = undefined;\n        this.fontFamilyIn = undefined;\n        this.fontColorIn = undefined;\n        this.underlineIn = undefined;\n        this.strikeThroughIn = undefined;\n        this.highlightColorIn = undefined;\n        this.baselineAlignmentIn = undefined;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.bdo = undefined;\n        this.boldBidi = undefined;\n        this.italicBidi = undefined;\n        this.fontFamilyBidi = undefined;\n        this.fontSizeBidi = undefined;\n        this.allCapsIn = undefined;\n    };\n    /**\n     * Destroys the maintained resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionCharacterFormat.prototype.destroy = function () {\n        this.fontSizeIn = undefined;\n        this.boldIn = undefined;\n        this.italicIn = undefined;\n        this.fontFamilyIn = undefined;\n        this.fontColorIn = undefined;\n        this.underlineIn = undefined;\n        this.strikeThroughIn = undefined;\n        this.baselineAlignmentIn = undefined;\n        this.highlightColorIn = undefined;\n        this.selection = undefined;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.bdo = undefined;\n        this.boldBidi = undefined;\n        this.italicBidi = undefined;\n        this.fontFamilyBidi = undefined;\n        this.fontSizeBidi = undefined;\n        this.allCapsIn = undefined;\n    };\n    return SelectionCharacterFormat;\n}());\nexport { SelectionCharacterFormat };\n/**\n * Selection Border implementation\n */\nvar SelectionBorder = /** @class */ (function () {\n    /**\n     * @param SelectionBorders\n     * @private\n     */\n    function SelectionBorder(selection, borderType, node) {\n        this.colorIn = undefined;\n        this.lineStyleIn = undefined;\n        this.lineWidthIn = undefined;\n        this.shadowIn = undefined;\n        this.spaceIn = undefined;\n        this.borderType = borderType;\n        this.ownerBase = node;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionBorder.prototype, \"color\", {\n        /**\n         * Gets or sets the color for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        get: function () {\n            return this.colorIn;\n        },\n        /**\n         * Sets the color for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.colorIn) {\n                return;\n            }\n            this.colorIn = value;\n            this.notifyPropertyChanged(\"color\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"lineStyle\", {\n        /**\n         * Gets or sets the lineStyle for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType LineStyle\n         */\n        get: function () {\n            return this.lineStyleIn;\n        },\n        /**\n         * Sets the lineStyle for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType LineStyle\n         */\n        set: function (value) {\n            if (value === this.lineStyleIn) {\n                return;\n            }\n            this.lineStyleIn = value;\n            this.notifyPropertyChanged(\"lineStyle\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"lineWidth\", {\n        /**\n         * Gets or sets the lineWidth for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        get: function () {\n            return this.lineWidthIn;\n        },\n        /**\n         * Sets the lineWidth for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        set: function (value) {\n            if (value === this.lineWidthIn) {\n                return;\n            }\n            this.lineWidthIn = value;\n            this.notifyPropertyChanged(\"lineWidth\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"shadow\", {\n        /**\n         * Gets or sets the shadow for selected paragraph borders.\n         *\n         * @default undefined\n         * @aspType boolean\n         */\n        get: function () {\n            return this.shadowIn;\n        },\n        /**\n         * Sets the shadow for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType boolean\n         */\n        set: function (value) {\n            if (value === this.shadowIn) {\n                return;\n            }\n            this.shadowIn = value;\n            this.notifyPropertyChanged(\"shadow\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorder.prototype, \"space\", {\n        /**\n         * Gets or sets the space for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        get: function () {\n            return this.spaceIn;\n        },\n        /**\n         * Sets the space for selected paragraphs borders.\n         *\n         * @default undefined\n         * @aspType number\n         */\n        set: function (value) {\n            if (value === this.spaceIn) {\n                return;\n            }\n            this.spaceIn = value;\n            this.notifyPropertyChanged('space');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *Copies the format.\n     *\n     * @param {WBorder} border\n     * @returns {void}\n     * @private\n     */\n    SelectionBorder.prototype.copyFormat = function (border) {\n        this.color = border.color;\n        this.lineStyle = border.lineStyle;\n        this.lineWidth = border.lineWidth;\n        this.shadow = border.shadow;\n        this.space = border.space;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WBorder} border\n     * @returns {void}\n     * @private\n     */\n    SelectionBorder.prototype.combineFormat = function (border) {\n        if (!isNullOrUndefined(this.color) && this.color !== border.color) {\n            this.color = undefined;\n        }\n        if (!isNullOrUndefined(this.lineStyle) && this.lineStyle !== border.lineStyle) {\n            this.lineStyle = undefined;\n        }\n        if (!isNullOrUndefined(this.lineWidth) && this.lineWidth !== border.lineWidth) {\n            this.lineWidth = undefined;\n        }\n        if (!isNullOrUndefined(this.shadow) && this.shadow !== border.shadow) {\n            this.shadow = undefined;\n        }\n        if (!isNullOrUndefined(this.space) && this.space !== border.space) {\n            this.space = undefined;\n        }\n    };\n    SelectionBorder.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'color':\n                return this.color;\n            case 'lineStyle':\n                return this.lineStyle;\n            case 'lineWidth':\n                return this.lineWidth;\n            case 'space':\n                return this.space;\n            case 'shadow':\n                return this.shadow;\n        }\n        return undefined;\n    };\n    /**\n     * Notifies whenever the property gets changed.\n     * @param {string} propertyName\n     * @returns {void}\n     */\n    SelectionBorder.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!isNullOrUndefined(this.selection) &&\n            ((this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.selection.owner.isDocumentLoaded)\n            && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var editor = this.selection.owner.editorModule;\n            var propertyValue = this.getPropertyValue(propertyName);\n            if (!isNullOrUndefined(propertyValue)) {\n                editor.applyParagraphBorders(propertyName, this.borderType, propertyValue);\n            }\n        }\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionBorder.prototype.destroy = function () {\n        if (!isNullOrUndefined(this.colorIn)) {\n            this.colorIn = undefined;\n        }\n        if (!isNullOrUndefined(this.lineStyleIn)) {\n            this.lineStyleIn = undefined;\n        }\n        if (!isNullOrUndefined(this.lineWidthIn)) {\n            this.lineWidthIn = undefined;\n        }\n        if (!isNullOrUndefined(this.spaceIn)) {\n            this.spaceIn = undefined;\n        }\n        if (!isNullOrUndefined(this.shadowIn)) {\n            this.shadowIn = undefined;\n        }\n    };\n    return SelectionBorder;\n}());\nexport { SelectionBorder };\n/**\n * Selection Borders implementation\n */\nvar SelectionBorders = /** @class */ (function () {\n    /**\n     * @param Object\n     * @private\n     */\n    function SelectionBorders(selection, node) {\n        this.ownerBase = undefined;\n        this.ownerBase = node;\n        this.selection = selection;\n        this.topIn = new SelectionBorder(this.selection, 'topBorder', this);\n        this.bottomIn = new SelectionBorder(this.selection, 'bottomBorder', this);\n        this.rightIn = new SelectionBorder(this.selection, 'rightBorder', this);\n        this.leftIn = new SelectionBorder(this.selection, 'leftBorder', this);\n        this.horizontalIn = new SelectionBorder(this.selection, 'horizontalBorder', this);\n        this.verticalIn = new SelectionBorder(this.selection, 'verticalBorder', this);\n    }\n    Object.defineProperty(SelectionBorders.prototype, \"top\", {\n        /**\n         * Gets the top Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.topIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"bottom\", {\n        /**\n         * Gets the bottom Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.bottomIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"left\", {\n        /**\n         * Gets the left Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.leftIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"right\", {\n        /**\n         * Gets the right Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.rightIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"horizontal\", {\n        /**\n         * Gets the horizontal Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.horizontalIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionBorders.prototype, \"vertical\", {\n        /**\n         * Gets the vertical Border for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorder\n         */\n        get: function () {\n            return this.verticalIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies the format.\n     *\n     * @param {WBorders} borders\n     * @returns {void}\n     * @private\n     */\n    SelectionBorders.prototype.copyFormat = function (borders) {\n        this.top.copyFormat(borders.top);\n        this.bottom.copyFormat(borders.bottom);\n        this.left.copyFormat(borders.left);\n        this.right.copyFormat(borders.right);\n        this.horizontal.copyFormat(borders.horizontal);\n        this.vertical.copyFormat(borders.vertical);\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WBorders} borders\n     * @private\n     */\n    SelectionBorders.prototype.combineFormat = function (borders) {\n        this.top.combineFormat(borders.top);\n        this.bottom.combineFormat(borders.bottom);\n        this.left.combineFormat(borders.left);\n        this.right.combineFormat(borders.right);\n        this.vertical.combineFormat(borders.vertical);\n        this.horizontal.combineFormat(borders.horizontal);\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionBorders.prototype.destroy = function () {\n        if (!isNullOrUndefined(this.topIn)) {\n            this.topIn.destroy();\n            this.topIn = undefined;\n        }\n        if (!isNullOrUndefined(this.topIn)) {\n            this.bottomIn.destroy();\n            this.bottomIn = undefined;\n        }\n        if (!isNullOrUndefined(this.leftIn)) {\n            this.leftIn.destroy();\n            this.leftIn = undefined;\n        }\n        if (!isNullOrUndefined(this.rightIn)) {\n            this.rightIn.destroy();\n            this.rightIn = undefined;\n        }\n        if (!isNullOrUndefined(this.horizontalIn)) {\n            this.horizontalIn.destroy();\n            this.horizontalIn = undefined;\n        }\n        if (!isNullOrUndefined(this.verticalIn)) {\n            this.verticalIn.destroy();\n            this.verticalIn = undefined;\n        }\n    };\n    return SelectionBorders;\n}());\nexport { SelectionBorders };\n/**\n * Selection paragraph format implementation\n */\nvar SelectionParagraphFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @param documentHelper\n     * @private\n     */\n    function SelectionParagraphFormat(selection, documentHelper) {\n        // Declaring the character format properties.\n        this.leftIndentIn = 0;\n        this.rightIndentIn = 0;\n        this.beforeSpacingIn = 0;\n        this.afterSpacingIn = 0;\n        this.spaceAfterAutoIn = undefined;\n        this.spaceBeforeAutoIn = undefined;\n        this.textAlignmentIn = undefined;\n        this.outlineLevelIn = undefined;\n        this.firstLineIndentIn = 0;\n        this.lineSpacingIn = 1;\n        this.lineSpacingTypeIn = undefined;\n        this.bidiIn = undefined;\n        this.keepWithNextIn = undefined;\n        this.keepLinesTogetherIn = undefined;\n        this.widowControlIn = undefined;\n        this.contextualSpacingIn = undefined;\n        this.listLevelNumberIn = -1;\n        this.selection = selection;\n        this.documentHelper = documentHelper;\n        this.bordersIn = new SelectionBorders(this.selection, this);\n    }\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"borders\", {\n        /**\n         * Gets the borders for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType SelectionBorders\n         */\n        get: function () {\n            return this.bordersIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"leftIndent\", {\n        /**\n         * Gets or Sets the left indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.leftIndentIn;\n        },\n        /**\n         * Sets the left indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftIndentIn) {\n                return;\n            }\n            this.leftIndentIn = value;\n            this.notifyPropertyChanged('leftIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"rightIndent\", {\n        /**\n         * Gets or Sets the right indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.rightIndentIn;\n        },\n        /**\n         * Sets the right indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.rightIndentIn) {\n                return;\n            }\n            this.rightIndentIn = value;\n            this.notifyPropertyChanged('rightIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"firstLineIndent\", {\n        /**\n         * Gets or Sets the first line indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.firstLineIndentIn;\n        },\n        /**\n         * Sets the first line indent for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.firstLineIndentIn) {\n                return;\n            }\n            this.firstLineIndentIn = value;\n            this.notifyPropertyChanged('firstLineIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"textAlignment\", {\n        /**\n         * Gets or Sets the text alignment for selected paragraphs.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.textAlignmentIn;\n        },\n        /**\n         * Sets the text alignment for selected paragraphs.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.textAlignmentIn) {\n                return;\n            }\n            this.textAlignmentIn = value;\n            this.notifyPropertyChanged('textAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"outlineLevel\", {\n        /**\n         * Gets or Sets the outline level for selected paragraphs.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.outlineLevelIn;\n        },\n        /**\n         * Sets the outline level for selected paragraphs.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.outlineLevelIn) {\n                return;\n            }\n            this.outlineLevelIn = value;\n            this.notifyPropertyChanged('outlineLevel');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"afterSpacing\", {\n        /**\n         * Sets the after spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.afterSpacingIn;\n        },\n        /**\n         * Gets or Sets the after spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.afterSpacingIn) {\n                return;\n            }\n            this.afterSpacingIn = value;\n            this.notifyPropertyChanged('afterSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"beforeSpacing\", {\n        /**\n         * Gets or Sets the before spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.beforeSpacingIn;\n        },\n        /**\n         * Sets the before spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.beforeSpacingIn) {\n                return;\n            }\n            this.beforeSpacingIn = value;\n            this.notifyPropertyChanged('beforeSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"spaceAfterAuto\", {\n        /**\n         * Gets or Sets the space after auto for selected paragraphs.\n         *\n         * @default false\n         * @aspType bool\n         */\n        get: function () {\n            return this.spaceAfterAutoIn;\n        },\n        /**\n         *  Sets the space after auto for selected paragraphs.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            if (value === this.spaceAfterAutoIn) {\n                return;\n            }\n            this.spaceAfterAutoIn = value;\n            this.notifyPropertyChanged('spaceAfterAuto');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"spaceBeforeAuto\", {\n        /**\n         * Gets or Sets the space before auto for selected paragraphs.\n         *\n         * @default false\n         * @aspType bool\n         */\n        get: function () {\n            return this.spaceBeforeAutoIn;\n        },\n        /**\n         *  Sets the space before auto for selected paragraphs.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            if (value === this.spaceBeforeAutoIn) {\n                return;\n            }\n            this.spaceBeforeAutoIn = value;\n            this.notifyPropertyChanged('spaceBeforeAuto');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"lineSpacing\", {\n        /**\n         * Gets or Sets the line spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.lineSpacingIn;\n        },\n        /**\n         * Sets the line spacing for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.lineSpacingIn) {\n                return;\n            }\n            this.lineSpacingIn = value;\n            this.notifyPropertyChanged('lineSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"lineSpacingType\", {\n        /**\n         * Gets or Sets the line spacing type for selected paragraphs.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.lineSpacingTypeIn;\n        },\n        /**\n         * Gets or Sets the line spacing type for selected paragraphs.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.lineSpacingTypeIn) {\n                return;\n            }\n            this.lineSpacingTypeIn = value;\n            this.notifyPropertyChanged('lineSpacingType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"listLevelNumber\", {\n        /**\n         * Sets the list level number for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.listLevelNumberIn;\n        },\n        /**\n         * Gets or Sets the list level number for selected paragraphs.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.listLevelNumberIn) {\n                return;\n            }\n            this.listLevelNumberIn = value;\n            this.notifyPropertyChanged('listLevelNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"bidi\", {\n        /**\n         * Gets or Sets the bidirectional property for selected paragraphs\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.bidiIn;\n        },\n        /**\n         * Sets the bidirectional property for selected paragraphs\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.bidiIn = value;\n            this.notifyPropertyChanged('bidi');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"keepWithNext\", {\n        /**\n         * Gets or sets a value indicating whether the specified paragraph remains on the same page as the paragraph that follows it while paginating the document.\n         *\n         * @default false\n         * @aspType bool\n         * @returns {boolean} - `true` if the specified paragraph remains on the same page as the paragraph that follows it; otherwise, `false`.\n         */\n        get: function () {\n            return this.keepWithNextIn;\n        },\n        /**\n         * Sets a value indicating whether the specified paragraph remains on the same page as the paragraph that follows it while paginating the document.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            this.keepWithNextIn = value;\n            this.notifyPropertyChanged('keepWithNext');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"keepLinesTogether\", {\n        /**\n         * Gets or sets a value indicating whether all lines in the specified paragraphs remain on the same page while paginating the document.\n         *\n         * @default false\n         * @aspType bool\n         * @returns {boolean} - `true` if all lines in the specified paragraphs remain on the same page; otherwise, `false`.\n         */\n        get: function () {\n            return this.keepLinesTogetherIn;\n        },\n        /**\n         * Sets a value indicating whether all lines in the specified paragraphs remain on the same page while paginating the document.\n         *\n         * @aspType bool\n         * @blazorType bool\n         */\n        set: function (value) {\n            this.keepLinesTogetherIn = value;\n            this.notifyPropertyChanged('keepLinesTogether');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"widowControl\", {\n        /**\n         * Gets or sets a value indicating whether the first and last lines of the paragraph are to remain on the same page as the rest of the paragraph when paginating the document.\n         *\n         * @default true\n         * @aspType bool\n         * @returns {boolean} - `true` if the first and last lines of the paragraph are to remain on the same page; otherwise, `false`.\n         */\n        get: function () {\n            return this.widowControlIn;\n        },\n        /**\n         * Sets a value indicating whether the first and last lines of the paragraph are to remain on the same page as the rest of the paragraph when paginating the document.\n         *\n         * @default true\n         * @aspType bool\n         */\n        set: function (value) {\n            this.widowControlIn = value;\n            this.notifyPropertyChanged('widowControl');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"contextualSpacing\", {\n        /**\n         * Gets or sets a value indicating whether to add space between the paragraphs of same style.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.contextualSpacingIn;\n        },\n        /**\n         * Sets a value indicating whether to add space between the paragraphs of same style.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.contextualSpacingIn = value;\n            this.notifyPropertyChanged('contextualSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionParagraphFormat.prototype.validateLineSpacing = function () {\n        if (this.lineSpacingType !== 'Multiple' && this.lineSpacingIn < 12) {\n            return true;\n        }\n        return false;\n    };\n    Object.defineProperty(SelectionParagraphFormat.prototype, \"listText\", {\n        /**\n         * Gets the list text for selected paragraphs.\n         *\n         * @aspType string\n         */\n        get: function () {\n            var listFormat = undefined;\n            var list = this.documentHelper.getListById(this.listId);\n            if (list instanceof WList && this.listLevelNumberIn > -1 && this.listLevelNumberIn < 9) {\n                var listLevel = list.getListLevel(this.listLevelNumber);\n                if (listLevel instanceof WListLevel) {\n                    if (listLevel.listLevelPattern === 'Bullet') {\n                        listFormat = listLevel.numberFormat;\n                    }\n                    else {\n                        listFormat = listLevel.numberFormat;\n                        for (var i = 0; i < 9; i++) {\n                            var levelPattern = '%' + (i + 1);\n                            if (listFormat.indexOf(levelPattern) > -1) {\n                                var level = i === this.listLevelNumberIn ? listLevel : list.getListLevel(i);\n                                var listTextElement = this.selection.getListTextElementBox(this.selection.start.paragraph);\n                                var listText = listTextElement ? listTextElement.text : '';\n                                listFormat = listText;\n                            }\n                        }\n                    }\n                }\n            }\n            return listFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionParagraphFormat.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'leftIndent':\n                return this.leftIndent;\n            case 'rightIndent':\n                return this.rightIndent;\n            case 'firstLineIndent':\n                return this.firstLineIndent;\n            case 'beforeSpacing':\n                return this.beforeSpacing;\n            case 'afterSpacing':\n                return this.afterSpacing;\n            case 'spaceAfterAuto':\n                return this.spaceAfterAuto;\n            case 'spaceBeforeAuto':\n                return this.spaceBeforeAuto;\n            case 'textAlignment':\n                return this.textAlignment;\n            case 'lineSpacing':\n                return this.lineSpacing;\n            case 'lineSpacingType':\n                return this.lineSpacingType;\n            case 'bidi':\n                return this.bidi;\n            case 'contextualSpacing':\n                return this.contextualSpacing;\n            case 'keepWithNext':\n                return this.keepWithNext;\n            case 'keepLinesTogether':\n                return this.keepLinesTogether;\n            case 'widowControl':\n                return this.widowControl;\n            case 'outlineLevel':\n                return this.outlineLevel;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Notifies whenever the property gets changed.\n     *\n     * @param {string} propertyName\n     */\n    SelectionParagraphFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!isNullOrUndefined(this.selection) &&\n            ((this.selection.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.selection.owner.isDocumentLoaded)\n            && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var editorModule = this.selection.owner.editorModule;\n            if (propertyName === 'lineSpacing' || propertyName === 'lineSpacingType') {\n                var editorHistory = this.selection.owner.editorHistoryModule;\n                if (!(editorHistory && (editorHistory.isUndoing || editorHistory.isRedoing)) && this.validateLineSpacing()) {\n                    this.selection.owner.editorHistoryModule.initComplexHistory(this.selection, 'LineSpacing');\n                    if (propertyName === 'lineSpacing') {\n                        this.lineSpacingTypeIn = 'Multiple';\n                        var value_1 = this.getPropertyValue('lineSpacingType');\n                        editorModule.onApplyParagraphFormat('lineSpacingType', value_1, false, false);\n                        editorModule.onApplyParagraphFormat(propertyName, this.getPropertyValue(propertyName), false, false);\n                    }\n                    else {\n                        editorModule.onApplyParagraphFormat(propertyName, this.getPropertyValue(propertyName), false, false);\n                        this.lineSpacingIn = 12;\n                        editorModule.onApplyParagraphFormat('lineSpacing', this.getPropertyValue('lineSpacing'), false, false);\n                    }\n                    this.selection.owner.editorHistoryModule.updateComplexHistory();\n                    return;\n                }\n            }\n            var value = this.getPropertyValue(propertyName);\n            if ((propertyName === 'leftIndent' || propertyName === 'rightIndent' || propertyName === 'firstLineIndent')\n                && !(value >= -1056 && value < 1056)) {\n                return;\n            }\n            if (propertyName === 'listLevelNumber') {\n                editorModule.onApplyListInternal(this.documentHelper.getListById(this.listId), this.listLevelNumber);\n            }\n            else {\n                editorModule.onApplyParagraphFormat(propertyName, value, propertyName === 'textAlignment' ? true : false, false);\n            }\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @param {WParagraphFormat} format\n     * @returns {void}\n     * @private\n     */\n    SelectionParagraphFormat.prototype.copyFormat = function (format) {\n        this.styleName = !isNullOrUndefined(format.baseStyle) ? format.baseStyle.name : 'Normal';\n        this.leftIndent = format.leftIndent;\n        this.rightIndent = format.rightIndent;\n        this.firstLineIndent = format.firstLineIndent;\n        this.afterSpacing = format.afterSpacing;\n        this.beforeSpacing = format.beforeSpacing;\n        this.spaceAfterAuto = format.spaceAfterAuto;\n        this.spaceBeforeAuto = format.spaceBeforeAuto;\n        this.lineSpacing = format.lineSpacing;\n        this.lineSpacingType = format.lineSpacingType;\n        this.textAlignment = format.textAlignment;\n        this.outlineLevel = format.outlineLevel;\n        this.bidi = format.bidi;\n        this.keepLinesTogether = format.keepLinesTogether;\n        this.keepWithNext = format.keepWithNext;\n        this.widowControl = format.widowControl;\n        this.contextualSpacing = format.contextualSpacing;\n        this.borders.copyFormat(format.borders);\n        if (!isNullOrUndefined(format.listFormat) && !isNullOrUndefined(format.listFormat.listId)) {\n            this.listId = format.listFormat.listId;\n            this.listLevelNumber = format.listFormat.listLevelNumber;\n        }\n        else {\n            this.listId = undefined;\n            this.listLevelNumber = 0;\n        }\n    };\n    /**\n     * Copies to format.\n     *\n     * @param {WParagraphFormat} format\n     * @private\n     */\n    SelectionParagraphFormat.prototype.copyToFormat = function (format) {\n        if (isNullOrUndefined(format)) {\n            return;\n        }\n        if (!isNullOrUndefined(this.afterSpacing)) {\n            format.afterSpacing = this.afterSpacing;\n        }\n        if (!isNullOrUndefined(this.beforeSpacing)) {\n            format.beforeSpacing = this.beforeSpacing;\n        }\n        if (!isNullOrUndefined(this.spaceAfterAuto)) {\n            format.spaceAfterAuto = this.spaceAfterAuto;\n        }\n        if (!isNullOrUndefined(this.spaceBeforeAuto)) {\n            format.spaceBeforeAuto = this.spaceBeforeAuto;\n        }\n        if (!isNullOrUndefined(this.leftIndent)) {\n            format.leftIndent = this.leftIndent;\n        }\n        if (!isNullOrUndefined(this.rightIndent)) {\n            format.rightIndent = this.rightIndent;\n        }\n        if (!isNullOrUndefined(this.textAlignment)) {\n            format.textAlignment = this.textAlignment;\n        }\n        if (!isNullOrUndefined(this.outlineLevel)) {\n            format.outlineLevel = this.outlineLevel;\n        }\n        if (!isNullOrUndefined(this.lineSpacing)) {\n            format.lineSpacing = this.lineSpacing;\n        }\n        if (!isNullOrUndefined(this.lineSpacingType)) {\n            format.lineSpacingType = this.lineSpacingType;\n        }\n        if (!isNullOrUndefined(this.firstLineIndent)) {\n            format.firstLineIndent = this.firstLineIndent;\n        }\n        if (!isNullOrUndefined(this.bidi)) {\n            format.bidi = this.bidi;\n        }\n        if (!isNullOrUndefined(this.keepWithNext)) {\n            format.keepWithNext = this.keepWithNext;\n        }\n        if (!isNullOrUndefined(this.keepLinesTogether)) {\n            format.keepLinesTogether = this.keepLinesTogether;\n        }\n        if (!isNullOrUndefined(this.widowControl)) {\n            format.widowControl = this.widowControl;\n        }\n        if (!isNullOrUndefined(this.contextualSpacing)) {\n            format.contextualSpacing = this.contextualSpacing;\n        }\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WParagraphFormat} format\n     * @private\n     */\n    SelectionParagraphFormat.prototype.combineFormat = function (format) {\n        if (!isNullOrUndefined(this.leftIndent) && this.leftIndent !== format.leftIndent) {\n            this.leftIndent = undefined;\n        }\n        if (!isNullOrUndefined(this.rightIndent) && this.rightIndent !== format.rightIndent) {\n            this.rightIndent = undefined;\n        }\n        if (!isNullOrUndefined(this.firstLineIndent) && this.firstLineIndent !== format.firstLineIndent) {\n            this.firstLineIndent = undefined;\n        }\n        if (this.lineSpacing !== 0 && this.lineSpacing !== format.lineSpacing) {\n            this.lineSpacing = 0;\n        }\n        if (this.beforeSpacing !== -1 && this.beforeSpacing !== format.beforeSpacing) {\n            this.beforeSpacing = -1;\n        }\n        if (this.afterSpacing !== -1 && this.afterSpacing !== format.afterSpacing) {\n            this.afterSpacing = -1;\n        }\n        if (!isNullOrUndefined(this.spaceAfterAuto) && this.spaceAfterAuto !== format.spaceAfterAuto) {\n            this.spaceAfterAuto = undefined;\n        }\n        if (!isNullOrUndefined(this.spaceBeforeAuto) && this.spaceBeforeAuto !== format.spaceBeforeAuto) {\n            this.spaceBeforeAuto = undefined;\n        }\n        if (!isNullOrUndefined(this.lineSpacingType) && this.lineSpacingType !== format.lineSpacingType) {\n            this.lineSpacingType = undefined;\n        }\n        if (!isNullOrUndefined(this.textAlignment) && this.textAlignment !== format.textAlignment) {\n            this.textAlignment = undefined;\n        }\n        if (!isNullOrUndefined(this.outlineLevel) && this.outlineLevel !== format.outlineLevel) {\n            this.outlineLevel = undefined;\n        }\n        if (this.listLevelNumber >= 0 && !isNullOrUndefined(this.listId) && (isNullOrUndefined(format.listFormat) || format.listFormat.listLevelNumber !== this.listLevelNumber)) {\n            this.listLevelNumber = -1;\n        }\n        if (isNullOrUndefined(format.listFormat) || isNullOrUndefined(format.listFormat.listId) || (!isNullOrUndefined(this.listId) && this.listId !== format.listFormat.listId)) {\n            this.listId = undefined;\n        }\n        if (!isNullOrUndefined(this.bidi) && this.bidi !== format.bidi) {\n            this.bidi = undefined;\n        }\n        if (!isNullOrUndefined(this.keepLinesTogether) && this.keepLinesTogether !== format.keepLinesTogether) {\n            this.keepLinesTogether = undefined;\n        }\n        if (!isNullOrUndefined(this.keepWithNext) && this.keepWithNext !== format.keepWithNext) {\n            this.keepWithNext = undefined;\n        }\n        if (!isNullOrUndefined(this.widowControl) && this.widowControl !== format.widowControl) {\n            this.widowControl = undefined;\n        }\n        if (!isNullOrUndefined(this.contextualSpacing) && this.contextualSpacing !== format.contextualSpacing) {\n            this.contextualSpacing = undefined;\n        }\n        if (!isNullOrUndefined(this.styleName) && format.baseStyle && this.styleName !== format.baseStyle.name) {\n            this.styleName = undefined;\n        }\n        this.borders.combineFormat(format.borders);\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionParagraphFormat.prototype.clearFormat = function () {\n        this.leftIndent = 0;\n        this.rightIndent = 0;\n        this.beforeSpacing = 0;\n        this.afterSpacing = 0;\n        this.spaceAfterAuto = undefined;\n        this.spaceBeforeAuto = undefined;\n        this.firstLineIndent = 0;\n        this.lineSpacing = 1;\n        this.textAlignment = undefined;\n        this.lineSpacingType = undefined;\n        this.listId = undefined;\n        this.listLevelNumber = -1;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.contextualSpacing = undefined;\n    };\n    /**\n     * Gets the clone of list at current selection.\n     *\n     * @returns WList\n     * @private\n     */\n    SelectionParagraphFormat.prototype.getList = function () {\n        var list = this.documentHelper.getListById(this.listId);\n        if (!isNullOrUndefined(list)) {\n            var listAdv = new WList();\n            var abstractList = new WAbstractList();\n            var currentAbstractList = this.documentHelper.getAbstractListById(list.abstractListId);\n            var editor = this.selection.owner.editorModule;\n            if (!isNullOrUndefined(currentAbstractList)) {\n                for (var i = 0; i < currentAbstractList.levels.length; i++) {\n                    var level = editor.cloneListLevel(currentAbstractList.levels[i]);\n                    abstractList.levels.push(level);\n                    level.ownerBase = abstractList;\n                }\n            }\n            else {\n                abstractList.levels.push(new WListLevel(abstractList));\n            }\n            if (!isNullOrUndefined(list.levelOverrides)) {\n                for (var i = 0; i < list.levelOverrides.length; i++) {\n                    var levelOverride = editor.cloneLevelOverride(list.levelOverrides[i]);\n                    listAdv.levelOverrides.push(levelOverride);\n                }\n            }\n            listAdv.abstractList = abstractList;\n            listAdv.abstractListId = abstractList.abstractListId;\n            listAdv.sourceListId = list.listId;\n            return listAdv;\n        }\n        return undefined;\n    };\n    /**\n     * Modifies the list at current selection.\n     *\n     * @param {WList} listAdv\n     * @private\n     */\n    SelectionParagraphFormat.prototype.setList = function (listAdv, isListDialog) {\n        if ((this.documentHelper.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.documentHelper.owner.isDocumentLoaded) {\n            return;\n        }\n        var list = this.documentHelper.getListById(this.listId);\n        var collection = undefined;\n        var currentAbstractList = listAdv ? this.documentHelper.getAbstractListById(listAdv.abstractListId) : undefined;\n        if (!isNullOrUndefined(list) && !isNullOrUndefined(listAdv)\n            && !isNullOrUndefined(currentAbstractList) && listAdv.sourceListId === list.listId) {\n            var history_1 = this.documentHelper.owner.editorHistoryModule;\n            var listLevel = this.documentHelper.layout.getListLevel(list, 1);\n            this.selection.owner.isLayoutEnabled = false;\n            this.documentHelper.owner.editorModule.setOffsetValue(this.selection);\n            if (history_1) {\n                collection = history_1.updateListChangesInHistory(currentAbstractList, list);\n            }\n            this.documentHelper.owner.editorModule.updateListParagraphs();\n            if (history_1) {\n                history_1.applyListChanges(this.selection, collection);\n            }\n            this.selection.owner.isLayoutEnabled = true;\n            this.documentHelper.renderedLists.clear();\n            this.documentHelper.renderedLevelOverrides = [];\n            if (isListDialog) {\n                this.documentHelper.layout.clearInvalidList(listAdv);\n            }\n            this.documentHelper.owner.editorModule.layoutWholeDocument();\n            this.documentHelper.owner.editorModule.updateSelectionTextPosition(false);\n            if (history_1 && history_1.currentBaseHistoryInfo) {\n                if (history_1.currentBaseHistoryInfo.modifiedProperties.length > 0) {\n                    history_1.currentBaseHistoryInfo.updateSelection();\n                }\n                history_1.updateHistory();\n            }\n            this.documentHelper.owner.editorModule.fireContentChange();\n        }\n        else if (!isNullOrUndefined(listAdv)) {\n            this.selection.owner.isLayoutEnabled = false;\n            if (!isNullOrUndefined(currentAbstractList) && this.documentHelper.abstractLists.indexOf(currentAbstractList) === -1) {\n                this.documentHelper.abstractLists.push(currentAbstractList);\n            }\n            if (this.documentHelper.lists.indexOf(listAdv) === -1) {\n                this.documentHelper.lists.push(listAdv);\n            }\n            //currentAbstractList.listType = 'Numbering';\n            this.selection.owner.isLayoutEnabled = true;\n            this.selection.owner.editorModule.onApplyList(listAdv);\n        }\n        else {\n            this.selection.owner.editorModule.onApplyList(undefined);\n        }\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionParagraphFormat.prototype.destroy = function () {\n        this.leftIndentIn = undefined;\n        this.rightIndentIn = undefined;\n        this.beforeSpacingIn = undefined;\n        this.afterSpacingIn = undefined;\n        this.spaceBeforeAutoIn = undefined;\n        this.spaceAfterAutoIn = undefined;\n        this.firstLineIndentIn = undefined;\n        this.lineSpacingIn = undefined;\n        this.textAlignmentIn = undefined;\n        this.lineSpacingTypeIn = undefined;\n        this.listId = undefined;\n        this.listLevelNumberIn = undefined;\n        this.documentHelper = undefined;\n        this.selection = undefined;\n        this.styleName = undefined;\n        this.bidi = undefined;\n        this.contextualSpacing = undefined;\n        if (!isNullOrUndefined(this.bordersIn)) {\n            this.bordersIn.destroy();\n            this.bordersIn = undefined;\n        }\n    };\n    return SelectionParagraphFormat;\n}());\nexport { SelectionParagraphFormat };\nvar SelectionHeaderFooter = /** @class */ (function () {\n    function SelectionHeaderFooter(selection) {\n        this.linkToPreviousIn = true;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionHeaderFooter.prototype, \"linkToPrevious\", {\n        get: function () {\n            return this.linkToPreviousIn;\n        },\n        /**\n         * Gets or sets a value indicating whether this header footer is linked to the previous section header footer in the document.\n         *\n         * @default true\n         * @aspType bool\n         * @returns {boolean} Returns `true` if the header footer is linked to the previous section header footer; Otherwise `false`.\n         */\n        set: function (value) {\n            this.linkToPreviousIn = value;\n            this.notifyPropertyChanged('linkToPrevious');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionHeaderFooter.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isPastingContent\n            || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded)\n            && !selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n            var value = this.getPropertyvalue(propertyName);\n            if (!isNullOrUndefined(value)) {\n                var headerFooterWidget = selection.start.paragraph.bodyWidget;\n                var sectionIndex = headerFooterWidget.sectionIndex;\n                var headerFooterType = headerFooterWidget.headerFooterType;\n                selection.owner.editorModule.removeInlineHeaderFooterWidget(sectionIndex, headerFooterType, propertyName, value);\n            }\n        }\n    };\n    SelectionHeaderFooter.prototype.getPropertyvalue = function (propertyName) {\n        if (propertyName == \"linkToPrevious\") {\n            if (!isNullOrUndefined(this.linkToPrevious)) {\n                return this.linkToPrevious;\n            }\n        }\n        return undefined;\n    };\n    return SelectionHeaderFooter;\n}());\nexport { SelectionHeaderFooter };\n/**\n * Selection section format implementation\n */\nvar SelectionSectionFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionSectionFormat(selection) {\n        this.differentFirstPageIn = undefined;\n        this.differentOddAndEvenPagesIn = undefined;\n        /**\n         * private\n         */\n        this.bidi = undefined;\n        this.selection = selection;\n        this.firstPageHeaderIn = new SelectionHeaderFooter(selection);\n        this.firstPageFooterIn = new SelectionHeaderFooter(selection);\n        this.oddPageHeaderIn = new SelectionHeaderFooter(selection);\n        this.oddPageFooterIn = new SelectionHeaderFooter(selection);\n        this.evenPageHeaderIn = new SelectionHeaderFooter(selection);\n        this.evenPageFooterIn = new SelectionHeaderFooter(selection);\n    }\n    Object.defineProperty(SelectionSectionFormat.prototype, \"pageHeight\", {\n        /**\n         * Gets or sets the page height.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.pageHeightIn;\n        },\n        /**\n         * Gets or sets the page height.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.pageHeightIn = value;\n            this.notifyPropertyChanged('pageHeight');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"pageWidth\", {\n        /**\n         * Gets or sets the page width.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.pageWidthIn;\n        },\n        /**\n         * Gets or sets the page width.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.pageWidthIn = value;\n            this.notifyPropertyChanged('pageWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"leftMargin\", {\n        /**\n         * Gets or sets the page left margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.leftMarginIn;\n        },\n        /**\n         * Gets or sets the page left margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.leftMarginIn = value;\n            this.notifyPropertyChanged('leftMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"bottomMargin\", {\n        /**\n         * Gets or sets the page bottom margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.bottomMarginIn;\n        },\n        /**\n         * Gets or sets the page bottom margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.bottomMarginIn = value;\n            this.notifyPropertyChanged('bottomMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"topMargin\", {\n        /**\n         * Gets or sets the page top margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.topMarginIn;\n        },\n        /**\n         * Gets or sets the page top margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.topMarginIn = value;\n            this.notifyPropertyChanged('topMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"rightMargin\", {\n        /**\n         * Gets or sets the page right margin.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.rightMarginIn;\n        },\n        /**\n         * Gets or sets the page right margin.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.rightMarginIn = value;\n            this.notifyPropertyChanged('rightMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"headerDistance\", {\n        /**\n         * Gets or sets the header distance.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.headerDistanceIn;\n        },\n        /**\n         * Gets or sets the header distance.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.headerDistanceIn = value;\n            this.notifyPropertyChanged('headerDistance');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"firstPageHeader\", {\n        get: function () {\n            return this.firstPageHeaderIn;\n        },\n        /**\n         * Gets the first page header of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.firstPageHeaderIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"firstPageFooter\", {\n        get: function () {\n            return this.firstPageFooterIn;\n        },\n        /**\n         * Gets the first page footer of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.firstPageFooterIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"oddPageHeader\", {\n        get: function () {\n            return this.oddPageHeaderIn;\n        },\n        /**\n         * Gets the odd page header of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.oddPageHeaderIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"oddPageFooter\", {\n        get: function () {\n            return this.oddPageFooterIn;\n        },\n        /**\n         * Gets the odd page footer of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.oddPageFooterIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"evenPageHeader\", {\n        get: function () {\n            return this.evenPageHeaderIn;\n        },\n        /**\n         * Gets the even page header of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.evenPageHeaderIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"evenPageFooter\", {\n        get: function () {\n            return this.evenPageFooterIn;\n        },\n        /**\n         * Gets the even page footer of the section.\n         *\n         * @aspType SelectionHeaderFooter\n         */\n        set: function (value) {\n            this.evenPageFooterIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"pageStartingNumber\", {\n        /**\n         * Gets or sets the starting page number.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.pageStartingNumberIn;\n        },\n        /**\n         * Gets or sets the starting page number.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.pageStartingNumberIn = value;\n            this.notifyPropertyChanged('pageStartingNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"restartPageNumbering\", {\n        /**\n         * Gets or sets a value indicating whether to restart page numbering.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.restartPageNumberingIn;\n        },\n        /**\n         * Gets or sets a value indicating whether to restart page numbering.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.restartPageNumberingIn = value;\n            this.notifyPropertyChanged('restartPageNumbering');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"footerDistance\", {\n        /**\n         * Gets or sets the footer distance.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.footerDistanceIn;\n        },\n        /**\n         * Gets or sets the footer distance.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.footerDistanceIn = value;\n            this.notifyPropertyChanged('footerDistance');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"differentFirstPage\", {\n        /**\n         * Gets or sets a value indicating whether the section has different first page.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.differentFirstPageIn;\n        },\n        /**\n         * Gets or sets a value indicating whether the section has different first page.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.differentFirstPageIn = value;\n            this.notifyPropertyChanged('differentFirstPage');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"differentOddAndEvenPages\", {\n        /**\n         * Gets or sets a value indicating whether the section has different odd and even page.\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.differentOddAndEvenPagesIn;\n        },\n        /**\n         * Gets or sets a value indicating whether the section has different odd and even page.\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.differentOddAndEvenPagesIn = value;\n            this.notifyPropertyChanged('differentOddAndEvenPages');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"endnoteNumberFormat\", {\n        /**\n         * Gets or sets the number format of endnote.\n         */\n        get: function () {\n            return this.endnoteNumberFormatIn;\n        },\n        /**\n         * Gets or sets the number format of endnote.\n         */\n        set: function (value) {\n            this.endnoteNumberFormatIn = value;\n            this.notifyPropertyChanged('endnoteNumberFormat');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"footNoteNumberFormat\", {\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        get: function () {\n            return this.footNoteNumberFormatIn;\n        },\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        set: function (value) {\n            this.footNoteNumberFormatIn = value;\n            this.notifyPropertyChanged('footNoteNumberFormat');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"initialFootNoteNumber\", {\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        get: function () {\n            return this.initialFootNoteNumberIn;\n        },\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        set: function (value) {\n            this.initialFootNoteNumberIn = value;\n            this.notifyPropertyChanged('initialFootNoteNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"initialEndNoteNumber\", {\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        get: function () {\n            return this.initialEndNoteNumberIn;\n        },\n        /**\n         * Gets or sets the number format of footnote.\n         */\n        set: function (value) {\n            this.initialEndNoteNumberIn = value;\n            this.notifyPropertyChanged('initialEndNoteNumber');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"restartIndexForFootnotes\", {\n        /**\n         * Gets or sets the restart index of footnote\n         */\n        get: function () {\n            return this.restartIndexForFootnotesIn;\n        },\n        /**\n         * Gets or sets the restart index of footnote\n         */\n        set: function (value) {\n            this.restartIndexForFootnotesIn = value;\n            this.notifyPropertyChanged('restartIndexForFootnotes');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"restartIndexForEndnotes\", {\n        /**\n         * Gets or sets the restart index of endnote\n         */\n        get: function () {\n            return this.restartIndexForEndnotesIn;\n        },\n        /**\n         * Gets or sets the restart index of endnote\n         */\n        set: function (value) {\n            this.restartIndexForEndnotesIn = value;\n            this.notifyPropertyChanged('restartIndexForEndnotes');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"numberOfColumns\", {\n        /**\n         * Gets the number of columns on a page.\n         */\n        get: function () {\n            return this.columns.length == 0 ? 1 : this.columns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"equalWidth\", {\n        /**\n         * Gets or sets a value indicating whether all the columns on a page has even width and space.\n         */\n        get: function () {\n            return this.equalWidthIn;\n        },\n        /**\n         * Gets or sets a value indicating whether all the columns on a page has even width and space.\n         */\n        set: function (value) {\n            this.equalWidthIn = value;\n            this.notifyPropertyChanged('equalWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"lineBetweenColumns\", {\n        /**\n         * Gets or sets a value indicating whether the vertical lines appear between all the columns.\n         */\n        get: function () {\n            return this.lineBetweenColumnsIn;\n        },\n        /**\n         * Gets or sets a value indicating whether the vertical lines appear between all the columns.\n         */\n        set: function (value) {\n            this.lineBetweenColumnsIn = value;\n            this.notifyPropertyChanged('lineBetweenColumns');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"columns\", {\n        /**\n         * Gets or sets the columns.\n         */\n        get: function () {\n            return this.columnsIn;\n        },\n        /**\n         * Gets or sets the columns.\n         */\n        set: function (value) {\n            this.columnsIn = value;\n            var selection = this.selection;\n            if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isPastingContent\n                || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded)\n                && !selection.isRetrieveFormatting) {\n                return;\n            }\n            if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n                this.selection.owner.editorModule.onApplyColumnFormat('columns', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionSectionFormat.prototype, \"breakCode\", {\n        /**\n         * Gets or sets the breakCode.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.breakCodeIn;\n        },\n        /**\n         * Gets or sets the breakCode.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            this.breakCodeIn = value;\n            this.notifyPropertyChanged('breakCode');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies the format.\n     *\n     * @param {WSectionFormat} format\n     * @returns {void}\n     * @private\n     */\n    SelectionSectionFormat.prototype.copyFormat = function (format) {\n        this.pageHeight = format.pageHeight;\n        this.pageWidth = format.pageWidth;\n        this.leftMargin = format.leftMargin;\n        this.topMargin = format.topMargin;\n        this.rightMargin = format.rightMargin;\n        this.bottomMargin = format.bottomMargin;\n        this.headerDistance = format.headerDistance;\n        this.footerDistance = format.footerDistance;\n        this.differentFirstPage = format.differentFirstPage;\n        this.differentOddAndEvenPages = format.differentOddAndEvenPages;\n        this.bidi = format.bidi;\n        this.pageStartingNumber = format.pageStartingNumber;\n        this.restartPageNumbering = format.restartPageNumbering;\n        this.endnoteNumberFormat = format.endnoteNumberFormat;\n        this.footNoteNumberFormat = format.footNoteNumberFormat;\n        this.restartIndexForEndnotes = format.restartIndexForEndnotes;\n        this.restartIndexForFootnotes = format.restartIndexForFootnotes;\n        this.initialEndNoteNumber = format.initialEndNoteNumber;\n        this.initialFootNoteNumber = format.initialFootNoteNumber;\n        this.equalWidth = format.equalWidth;\n        this.lineBetweenColumns = format.lineBetweenColumns;\n        this.columns = [];\n        for (var _i = 0, _a = format.columns; _i < _a.length; _i++) {\n            var col = _a[_i];\n            var selectCol = new SelectionColumnFormat(this.selection);\n            selectCol.width = HelperMethods.convertPixelToPoint(col.width);\n            selectCol.space = HelperMethods.convertPixelToPoint(col.space);\n            this.columns.push(selectCol);\n        }\n        this.breakCode = format.breakCode;\n        if (this.selection.owner.enableHeaderAndFooter) {\n            var headerFootersColletion = this.selection.documentHelper.headersFooters;\n            var headerFooterWidget = this.selection.start.paragraph.containerWidget;\n            var sectionIndex = headerFooterWidget.sectionIndex;\n            var headerFooterType = headerFooterWidget.headerFooterType;\n            var isLinkedToPrevious = false;\n            if (sectionIndex == 0) {\n                this.oddPageHeader.linkToPrevious = false;\n                this.oddPageFooter.linkToPrevious = false;\n                this.evenPageHeader.linkToPrevious = false;\n                this.evenPageFooter.linkToPrevious = false;\n                this.firstPageHeader.linkToPrevious = false;\n                this.firstPageFooter.linkToPrevious = false;\n            }\n            else if (headerFootersColletion[sectionIndex]) {\n                var index = this.selection.viewer.getHeaderFooter(headerFooterType);\n                var headerFooterWidget_1 = headerFootersColletion[sectionIndex][index];\n                if (isNullOrUndefined(headerFooterWidget_1)) {\n                    isLinkedToPrevious = true;\n                }\n                if (!isNullOrUndefined(headerFooterWidget_1) || isLinkedToPrevious) {\n                    switch (headerFooterType) {\n                        case \"OddHeader\":\n                            if (isLinkedToPrevious) {\n                                this.oddPageHeader.linkToPrevious = true;\n                            }\n                            else {\n                                this.oddPageHeader.linkToPrevious = false;\n                            }\n                            break;\n                        case \"OddFooter\":\n                            if (isLinkedToPrevious) {\n                                this.oddPageFooter.linkToPrevious = true;\n                            }\n                            else {\n                                this.oddPageFooter.linkToPrevious = false;\n                            }\n                            break;\n                        case \"EvenHeader\":\n                            if (isLinkedToPrevious) {\n                                this.evenPageHeader.linkToPrevious = true;\n                            }\n                            else {\n                                this.evenPageHeader.linkToPrevious = false;\n                            }\n                            break;\n                        case \"EvenFooter\":\n                            if (isLinkedToPrevious) {\n                                this.evenPageFooter.linkToPrevious = true;\n                            }\n                            else {\n                                this.evenPageFooter.linkToPrevious = false;\n                            }\n                            break;\n                        case \"FirstPageHeader\":\n                            if (isLinkedToPrevious) {\n                                this.firstPageHeader.linkToPrevious = true;\n                            }\n                            else {\n                                this.firstPageHeader.linkToPrevious = false;\n                            }\n                            break;\n                        case \"FirstPageFooter\":\n                            if (isLinkedToPrevious) {\n                                this.firstPageFooter.linkToPrevious = true;\n                            }\n                            else {\n                                this.firstPageFooter.linkToPrevious = false;\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n    };\n    SelectionSectionFormat.prototype.applyColumnFormat = function () {\n    };\n    SelectionSectionFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isPastingContent\n            || selection.owner.isReadOnlyMode || !selection.owner.isDocumentLoaded)\n            && !selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n            var value = this.getPropertyvalue(propertyName);\n            if (!isNullOrUndefined(value)) {\n                selection.owner.editorModule.onApplySectionFormat(propertyName, value);\n            }\n        }\n    };\n    SelectionSectionFormat.prototype.getPropertyvalue = function (propertyName) {\n        switch (propertyName) {\n            case 'pageHeight':\n                if (this.pageHeight > 0) {\n                    return this.pageHeight;\n                }\n                return undefined;\n            case 'pageWidth':\n                if (this.pageWidth > 0) {\n                    return this.pageWidth;\n                }\n                return undefined;\n            case 'leftMargin':\n                if (this.leftMargin >= 0) {\n                    return this.leftMargin;\n                }\n                return undefined;\n            case 'rightMargin':\n                if (this.rightMargin >= 0) {\n                    return this.rightMargin;\n                }\n                return undefined;\n            case 'topMargin':\n                if (this.topMargin >= 0) {\n                    return this.topMargin;\n                }\n                return undefined;\n            case 'bottomMargin':\n                if (this.bottomMargin >= 0) {\n                    return this.bottomMargin;\n                }\n                return undefined;\n            case 'differentFirstPage':\n                if (!isNullOrUndefined(this.differentFirstPage)) {\n                    return this.differentFirstPage;\n                }\n                return undefined;\n            case 'differentOddAndEvenPages':\n                if (!isNullOrUndefined(this.differentOddAndEvenPages)) {\n                    return this.differentOddAndEvenPages;\n                }\n                return undefined;\n            case 'headerDistance':\n                return this.headerDistanceIn;\n            case 'footerDistance':\n                return this.footerDistance;\n            case 'pageStartingNumber':\n                if (!isNullOrUndefined(this.pageStartingNumber)) {\n                    return this.pageStartingNumber;\n                }\n                return undefined;\n            case 'restartPageNumbering':\n                if (!isNullOrUndefined(this.restartPageNumbering)) {\n                    return this.restartPageNumbering;\n                }\n                return undefined;\n            case 'endnoteNumberFormat':\n                return this.endnoteNumberFormatIn;\n            case 'restartIndexForEndnotes':\n                return this.restartIndexForEndnotesIn;\n            case 'restartIndexForFootnotes':\n                return this.restartIndexForFootnotesIn;\n            case 'footNoteNumberFormat':\n                return this.footNoteNumberFormatIn;\n            case 'initialFootNoteNumber':\n                return this.initialFootNoteNumber;\n            case 'initialEndNoteNumber':\n                return this.initialEndNoteNumber;\n            case 'equalWidth':\n                return this.equalWidthIn;\n            case 'lineBetweenColumns':\n                return this.lineBetweenColumnsIn;\n            case 'columns':\n                return this.columnsIn;\n            case 'breakCode':\n                return this.breakCodeIn;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WSectionFormat} format\n     * @private\n     */\n    SelectionSectionFormat.prototype.combineFormat = function (format) {\n        if (this.pageHeight > 0 && this.pageHeight !== format.pageHeight) {\n            this.pageHeight = 0;\n        }\n        if (this.pageWidth > 0 && this.pageWidth !== format.pageWidth) {\n            this.pageWidth = 0;\n        }\n        if (this.leftMargin > -1 && this.leftMargin !== format.leftMargin) {\n            this.leftMargin = -1;\n        }\n        if (this.topMargin > -1 && this.topMargin !== format.topMargin) {\n            this.topMargin = -1;\n        }\n        if (this.rightMargin > -1 && this.rightMargin !== format.rightMargin) {\n            this.rightMargin = -1;\n        }\n        if (this.bottomMargin > -1 && this.bottomMargin !== format.bottomMargin) {\n            this.bottomMargin = -1;\n        }\n        if (this.headerDistance !== 0 && this.headerDistance !== format.headerDistance) {\n            this.headerDistance = 0;\n        }\n        if (this.footerDistance !== 0 && this.footerDistance !== format.footerDistance) {\n            this.footerDistance = 0;\n        }\n        if (!isNullOrUndefined(this.differentFirstPage) && this.differentFirstPage !== format.differentFirstPage) {\n            this.differentFirstPage = undefined;\n        }\n        if (!isNullOrUndefined(this.pageStartingNumber) && this.pageStartingNumber !== format.pageStartingNumber) {\n            this.pageStartingNumber = undefined;\n        }\n        if (!isNullOrUndefined(this.restartPageNumbering) && this.restartPageNumbering !== format.restartPageNumbering) {\n            this.restartPageNumbering = undefined;\n        }\n        if (!isNullOrUndefined(this.differentOddAndEvenPages) && this.differentOddAndEvenPages !== format.differentOddAndEvenPages) {\n            this.differentOddAndEvenPages = undefined;\n        }\n        if (!isNullOrUndefined(this.bidi) && this.bidi !== format.bidi) {\n            this.bidi = undefined;\n        }\n        if (!isNullOrUndefined(this.endnoteNumberFormat) && this.endnoteNumberFormat !== format.endnoteNumberFormat) {\n            this.endnoteNumberFormat = undefined;\n        }\n        if (!isNullOrUndefined(this.restartIndexForEndnotes) && this.restartIndexForEndnotes !== format.restartIndexForEndnotes) {\n            this.restartIndexForEndnotes = undefined;\n        }\n        if (!isNullOrUndefined(this.restartIndexForFootnotes) && this.restartIndexForFootnotes !== format.restartIndexForFootnotes) {\n            this.restartIndexForFootnotes = undefined;\n        }\n        if (!isNullOrUndefined(this.footNoteNumberFormat) && this.footNoteNumberFormat !== format.footNoteNumberFormat) {\n            this.footNoteNumberFormat = undefined;\n        }\n        if (!isNullOrUndefined(this.initialFootNoteNumber) && this.initialFootNoteNumber !== format.initialFootNoteNumber) {\n            this.initialFootNoteNumber = undefined;\n        }\n        if (!isNullOrUndefined(this.initialEndNoteNumber) && this.initialEndNoteNumber !== format.initialEndNoteNumber) {\n            this.initialEndNoteNumber = undefined;\n        }\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionSectionFormat.prototype.clearFormat = function () {\n        this.headerDistance = 0;\n        this.footerDistance = 0;\n        this.pageHeight = 0;\n        this.pageWidth = 0;\n        this.leftMargin = -1;\n        this.rightMargin = -1;\n        this.topMargin = -1;\n        this.bottomMargin = -1;\n        this.differentFirstPage = undefined;\n        this.differentOddAndEvenPages = undefined;\n        this.bidi = undefined;\n        this.pageStartingNumber = undefined;\n        this.restartPageNumbering = undefined;\n        this.endnoteNumberFormat = undefined;\n        this.footNoteNumberFormat = undefined;\n        this.restartIndexForFootnotes = undefined;\n        this.restartIndexForEndnotes = undefined;\n        this.initialFootNoteNumber = 1;\n        this.initialEndNoteNumber = 1;\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionSectionFormat.prototype.destroy = function () {\n        this.headerDistanceIn = undefined;\n        this.footerDistanceIn = undefined;\n        this.pageHeightIn = undefined;\n        this.pageWidthIn = undefined;\n        this.leftMarginIn = undefined;\n        this.rightMarginIn = undefined;\n        this.topMarginIn = undefined;\n        this.bottomMarginIn = undefined;\n        this.differentFirstPageIn = undefined;\n        this.differentOddAndEvenPagesIn = undefined;\n        this.selection = undefined;\n        this.bidi = undefined;\n        this.pageStartingNumberIn = undefined;\n        this.restartPageNumberingIn = undefined;\n        this.endnoteNumberFormatIn = undefined;\n        this.footNoteNumberFormatIn = undefined;\n        this.restartIndexForFootnotesIn = undefined;\n        this.restartIndexForEndnotesIn = undefined;\n        this.initialEndNoteNumber = undefined;\n        this.initialFootNoteNumber = undefined;\n        this.firstPageHeaderIn = undefined;\n        this.firstPageFooterIn = undefined;\n        this.oddPageHeaderIn = undefined;\n        this.oddPageFooterIn = undefined;\n        this.evenPageHeaderIn = undefined;\n        this.evenPageFooterIn = undefined;\n    };\n    return SelectionSectionFormat;\n}());\nexport { SelectionSectionFormat };\n/**\n * Selection table format implementation\n */\nvar SelectionTableFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionTableFormat(selection) {\n        this.leftIndentIn = 0;\n        this.backgroundIn = undefined;\n        this.tableAlignmentIn = undefined;\n        this.cellSpacingIn = 0;\n        this.leftMarginIn = 0;\n        this.rightMarginIn = 0;\n        this.topMarginIn = 0;\n        this.bottomMarginIn = 0;\n        this.preferredWidthIn = 0;\n        this.bidiIn = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionTableFormat.prototype, \"table\", {\n        /**\n         * Gets or sets the table.\n         *\n         * @private\n         */\n        get: function () {\n            return this.tableIn;\n        },\n        set: function (value) {\n            this.tableIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"title\", {\n        /**\n         * Gets or sets the title of the selected table.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.titleIn;\n        },\n        /**\n         * Gets or sets the title of the selected table.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if (isNullOrUndefined(this.table)) {\n                return;\n            }\n            this.titleIn = value;\n            this.notifyPropertyChanged('title');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"description\", {\n        /**\n         * Gets or sets the description of the selected table.\n         *\n         * @aspType string\n         */\n        get: function () {\n            return this.descriptionIn;\n        },\n        /**\n         * Gets or sets the description of the selected table.\n         *\n         * @aspType string\n         */\n        set: function (value) {\n            if (isNullOrUndefined(this.table)) {\n                return;\n            }\n            this.descriptionIn = value;\n            this.notifyPropertyChanged('description');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"leftIndent\", {\n        /**\n         * Gets or Sets the left indent for selected table.\n         *\n         * @aspType int\n         */\n        get: function () {\n            return this.leftIndentIn;\n        },\n        /**\n         * Gets or Sets the left indent for selected table.\n         *\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftIndentIn) {\n                return;\n            }\n            this.leftIndentIn = value;\n            this.notifyPropertyChanged('leftIndent');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"topMargin\", {\n        /**\n         * Gets or Sets the default top margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.topMarginIn;\n        },\n        /**\n         * Gets or Sets the default top margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.topMarginIn) {\n                return;\n            }\n            this.topMarginIn = value;\n            this.notifyPropertyChanged('topMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"background\", {\n        /**\n         * Gets or Sets the background for selected table.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        get: function () {\n            return this.backgroundIn;\n        },\n        /**\n         * Gets or Sets the background for selected table.\n         *\n         * @default undefined\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.backgroundIn) {\n                return;\n            }\n            this.backgroundIn = value;\n            this.notifyPropertyChanged('background');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"tableAlignment\", {\n        /**\n         * Gets or Sets the table alignment for selected table.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.tableAlignmentIn;\n        },\n        /**\n         * Gets or Sets the table alignment for selected table.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.tableAlignmentIn) {\n                return;\n            }\n            this.tableAlignmentIn = value;\n            this.notifyPropertyChanged('tableAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"leftMargin\", {\n        /**\n         * Gets or Sets the default left margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.leftMarginIn;\n        },\n        /**\n         * Gets or Sets the default left margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftMarginIn) {\n                return;\n            }\n            this.leftMarginIn = value;\n            this.notifyPropertyChanged('leftMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"bottomMargin\", {\n        /**\n         * Gets or Sets the default bottom margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.bottomMarginIn;\n        },\n        /**\n         * Gets or Sets the default bottom margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.bottomMarginIn) {\n                return;\n            }\n            this.bottomMarginIn = value;\n            this.notifyPropertyChanged('bottomMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"cellSpacing\", {\n        /**\n         * Gets or Sets the cell spacing for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.cellSpacingIn;\n        },\n        /**\n         * Gets or Sets the cell spacing for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.cellSpacingIn) {\n                return;\n            }\n            this.cellSpacingIn = value;\n            this.notifyPropertyChanged('cellSpacing');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"rightMargin\", {\n        /**\n         * Gets or Sets the default right margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.rightMarginIn;\n        },\n        /**\n         * Gets or Sets the default right margin of cell for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.rightMarginIn) {\n                return;\n            }\n            this.rightMarginIn = value;\n            this.notifyPropertyChanged('rightMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"preferredWidth\", {\n        /**\n         * Gets or Sets the preferred width for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.preferredWidthIn;\n        },\n        /**\n         * Gets or Sets the preferred width for selected table.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.preferredWidthIn) {\n                return;\n            }\n            this.preferredWidthIn = value;\n            this.notifyPropertyChanged('preferredWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"preferredWidthType\", {\n        /**\n         * Gets or Sets the preferred width type for selected table.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.preferredWidthTypeIn;\n        },\n        /**\n         * Gets or Sets the preferred width type for selected table.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.preferredWidthTypeIn) {\n                return;\n            }\n            this.preferredWidthTypeIn = value;\n            this.notifyPropertyChanged('preferredWidthType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionTableFormat.prototype, \"bidi\", {\n        /**\n         * Gets or sets the bidi property\n         *\n         * @aspType bool\n         */\n        get: function () {\n            return this.bidiIn;\n        },\n        /**\n         * Gets or sets the bidi property\n         *\n         * @aspType bool\n         */\n        set: function (value) {\n            this.bidiIn = value;\n            this.notifyPropertyChanged('bidi');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionTableFormat.prototype.getPropertyValue = function (propertyName) {\n        switch (propertyName) {\n            case 'tableAlignment':\n                return this.tableAlignment;\n            case 'leftIndent':\n                return this.leftIndent;\n            case 'cellSpacing':\n                return this.cellSpacing;\n            case 'leftMargin':\n                return this.leftMargin;\n            case 'rightMargin':\n                return this.rightMargin;\n            case 'topMargin':\n                return this.topMargin;\n            case 'bottomMargin':\n                return this.bottomMargin;\n            case 'background':\n                var shading = new WShading();\n                shading.backgroundColor = this.background;\n                return shading;\n            case 'preferredWidth':\n                return this.preferredWidth;\n            case 'preferredWidthType':\n                return this.preferredWidthType;\n            case 'bidi':\n                return this.bidi;\n            case 'title':\n                return this.title;\n            case 'description':\n                return this.description;\n            default:\n                return undefined;\n        }\n    };\n    SelectionTableFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        if (!isNullOrUndefined(this.selection) && (this.selection.isCleared\n            || !this.selection.owner.isDocumentLoaded || this.selection.owner.isReadOnlyMode\n            || this.selection.owner.isPastingContent) && !this.selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(this.selection) && !isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n            var value = this.getPropertyValue(propertyName);\n            if (propertyName === 'background') {\n                propertyName = 'shading';\n            }\n            if (!isNullOrUndefined(value)) {\n                this.selection.owner.editorModule.onApplyTableFormat(propertyName, value);\n            }\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @param {WTableFormat} format Format to copy.\n     * @returns {void}\n     * @private\n     */\n    SelectionTableFormat.prototype.copyFormat = function (format) {\n        this.leftIndent = format.leftIndent;\n        this.background = format.shading.backgroundColor;\n        this.tableAlignment = format.tableAlignment;\n        this.leftMargin = format.leftMargin;\n        this.rightMargin = format.rightMargin;\n        this.topMargin = format.topMargin;\n        this.bottomMargin = format.bottomMargin;\n        this.cellSpacing = format.cellSpacing;\n        this.preferredWidth = format.preferredWidth;\n        this.preferredWidthType = format.preferredWidthType;\n        this.bidi = format.bidi;\n        this.title = format.title;\n        this.description = format.description;\n    };\n    /**\n     * Clears the format.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionTableFormat.prototype.clearFormat = function () {\n        this.table = undefined;\n        this.leftIndent = 0;\n        this.background = undefined;\n        this.leftIndent = 0;\n        this.leftMargin = 0;\n        this.rightMargin = 0;\n        this.topMargin = 0;\n        this.bottomMargin = 0;\n        this.cellSpacing = 0;\n        this.tableAlignment = undefined;\n        this.bidi = undefined;\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @returns {void}\n     * @private\n     */\n    SelectionTableFormat.prototype.destroy = function () {\n        this.leftIndentIn = undefined;\n        this.backgroundIn = undefined;\n        this.leftIndentIn = undefined;\n        this.leftMarginIn = undefined;\n        this.rightMarginIn = undefined;\n        this.topMarginIn = undefined;\n        this.bottomMarginIn = undefined;\n        this.cellSpacingIn = undefined;\n        this.tableAlignmentIn = undefined;\n        this.tableIn = undefined;\n        this.selection = undefined;\n        this.bidi = undefined;\n    };\n    return SelectionTableFormat;\n}());\nexport { SelectionTableFormat };\n/**\n * Selection cell format implementation\n */\nvar SelectionCellFormat = /** @class */ (function () {\n    /**\n     * @private\n     */\n    function SelectionCellFormat(selection) {\n        this.verticalAlignmentIn = undefined;\n        this.leftMarginIn = 0;\n        this.rightMarginIn = 0;\n        this.topMarginIn = 0;\n        this.bottomMarginIn = 0;\n        this.backgroundIn = undefined;\n        this.preferredWidthTypeIn = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionCellFormat.prototype, \"verticalAlignment\", {\n        /**\n         * Gets or sets the vertical alignment of the selected cells.\n         *\n         * @default undefined\n         */\n        get: function () {\n            return this.verticalAlignmentIn;\n        },\n        /**\n         * Gets or sets the vertical alignment of the selected cells.\n         *\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.verticalAlignmentIn) {\n                return;\n            }\n            this.verticalAlignmentIn = value;\n            this.notifyPropertyChanged('verticalAlignment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"leftMargin\", {\n        /**\n         * Gets or Sets the left margin for selected cells.\n         *\n         * @default undefined\n         * @aspType int\n         */\n        /* eslint-disable */\n        get: function () {\n            return this.leftMarginIn;\n        },\n        /**\n         * Gets or Sets the left margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.leftMarginIn) {\n                return;\n            }\n            this.leftMarginIn = value;\n            this.notifyPropertyChanged('leftMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"rightMargin\", {\n        /**\n         * Gets or Sets the right margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.rightMarginIn;\n        },\n        /**\n         * Gets or Sets the right margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.rightMarginIn) {\n                return;\n            }\n            this.rightMarginIn = value;\n            this.notifyPropertyChanged('rightMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"topMargin\", {\n        /**\n         * Gets or Sets the top margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.topMarginIn;\n        },\n        /**\n         * Gets or Sets the top margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.topMarginIn) {\n                return;\n            }\n            this.topMarginIn = value;\n            this.notifyPropertyChanged('topMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"bottomMargin\", {\n        /**\n         * Gets or Sets the bottom margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.bottomMarginIn;\n        },\n        /**\n         * Gets or Sets the bottom margin for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.bottomMarginIn) {\n                return;\n            }\n            this.bottomMarginIn = value;\n            this.notifyPropertyChanged('bottomMargin');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"background\", {\n        /**\n         * Gets or Sets the background for selected cells.\n         * @default undefined\n         * @aspType string\n         */\n        get: function () {\n            return this.backgroundIn;\n        },\n        /**\n         * Gets or Sets the background for selected cells.\n         * @default undefined\n         * @aspType string\n         */\n        set: function (value) {\n            if (value === this.backgroundIn) {\n                return;\n            }\n            this.backgroundIn = value;\n            this.notifyPropertyChanged('background');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"preferredWidthType\", {\n        /**\n         * Gets or Sets the preferred width type for selected cells.\n         * @default undefined\n         */\n        get: function () {\n            return this.preferredWidthTypeIn;\n        },\n        /**\n         * Gets or Sets the preferred width type for selected cells.\n         * @default undefined\n         */\n        set: function (value) {\n            if (value === this.preferredWidthTypeIn) {\n                return;\n            }\n            this.preferredWidthTypeIn = value;\n            this.notifyPropertyChanged('preferredWidthType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionCellFormat.prototype, \"preferredWidth\", {\n        /**\n         * Gets or Sets the preferred width  for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        get: function () {\n            return this.preferredWidthIn;\n        },\n        /**\n         * Gets or Sets the preferred width  for selected cells.\n         * @default undefined\n         * @aspType int\n         */\n        set: function (value) {\n            if (value === this.preferredWidthIn) {\n                return;\n            }\n            this.preferredWidthIn = value;\n            this.notifyPropertyChanged('preferredWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionCellFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!isNullOrUndefined(selection)) {\n            if ((selection.isCleared || !selection.owner.isDocumentLoaded\n                || selection.owner.isReadOnlyMode || selection.owner.isPastingContent) && !selection.isRetrieveFormatting) {\n                return;\n            }\n            if (!isNullOrUndefined(this.selection.start) && !this.selection.isRetrieveFormatting) {\n                var value = this.getPropertyValue(propertyName);\n                if (propertyName === 'background') {\n                    propertyName = 'shading';\n                }\n                if (!isNullOrUndefined(value)) {\n                    this.selection.owner.editorModule.onApplyTableCellFormat(propertyName, value);\n                }\n            }\n        }\n    };\n    SelectionCellFormat.prototype.getPropertyValue = function (propertyName) {\n        switch (propertyName) {\n            case 'verticalAlignment':\n                return this.verticalAlignment;\n            case 'leftMargin':\n                return this.leftMargin;\n            case 'rightMargin':\n                return this.rightMargin;\n            case 'topMargin':\n                return this.topMargin;\n            case 'bottomMargin':\n                return this.bottomMargin;\n            case 'preferredWidth':\n                return this.preferredWidth;\n            case 'preferredWidthType':\n                return this.preferredWidthType;\n            case 'background':\n                var shading = new WShading();\n                shading.backgroundColor = this.background;\n                return shading;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @private\n     * @param {WCellFormat} format - Source Format to copy.\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.copyFormat = function (format) {\n        this.leftMargin = format.leftMargin;\n        this.rightMargin = format.rightMargin;\n        this.topMargin = format.topMargin;\n        this.bottomMargin = format.bottomMargin;\n        this.background = format.shading.backgroundColor;\n        this.verticalAlignment = format.verticalAlignment;\n        this.preferredWidth = format.preferredWidth;\n        this.preferredWidthType = format.preferredWidthType;\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.clearCellFormat = function () {\n        this.leftMargin = undefined;\n        this.rightMargin = undefined;\n        this.topMargin = undefined;\n        this.bottomMargin = undefined;\n        this.background = undefined;\n        this.verticalAlignment = undefined;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WCellFormat} format - Returns cell format\n     * @private\n     */\n    SelectionCellFormat.prototype.combineFormat = function (format) {\n        if (!isNullOrUndefined(this.leftMargin) && this.leftMargin !== format.leftMargin) {\n            this.leftMargin = undefined;\n        }\n        if (!isNullOrUndefined(this.topMargin) && this.topMargin !== format.topMargin) {\n            this.topMargin = undefined;\n        }\n        if (!isNullOrUndefined(this.rightMargin) && this.rightMargin !== format.rightMargin) {\n            this.rightMargin = undefined;\n        }\n        if (!isNullOrUndefined(this.bottomMargin) && this.bottomMargin !== format.bottomMargin) {\n            this.bottomMargin = undefined;\n        }\n        if (!isNullOrUndefined(this.background) && this.background !== format.shading.backgroundColor) {\n            this.background = undefined;\n        }\n        if (!isNullOrUndefined(this.verticalAlignment) && this.verticalAlignment !== format.verticalAlignment) {\n            this.verticalAlignment = undefined;\n        }\n        if (!isNullOrUndefined(this.preferredWidth) && this.preferredWidth !== format.preferredWidth) {\n            this.preferredWidth = undefined;\n        }\n        if (!isNullOrUndefined(this.preferredWidthType) && this.preferredWidthType !== format.preferredWidthType) {\n            this.preferredWidthType = undefined;\n        }\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.clearFormat = function () {\n        this.background = undefined;\n        this.bottomMargin = 0;\n        this.leftMargin = 0;\n        this.rightMargin = 0;\n        this.topMargin = 0;\n        this.verticalAlignment = undefined;\n    };\n    /**\n     * Destroys the manages resources.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionCellFormat.prototype.destroy = function () {\n        this.backgroundIn = undefined;\n        this.verticalAlignmentIn = undefined;\n        this.bottomMarginIn = undefined;\n        this.leftMarginIn = undefined;\n        this.rightMarginIn = undefined;\n        this.topMarginIn = undefined;\n        this.selection = undefined;\n    };\n    return SelectionCellFormat;\n}());\nexport { SelectionCellFormat };\n/**\n * Selection row format implementation\n */\nvar SelectionRowFormat = /** @class */ (function () {\n    /**\n     * @param {Selection} selection - Specifies the selection\n     * @private\n     */\n    function SelectionRowFormat(selection) {\n        this.heightIn = undefined;\n        this.heightTypeIn = undefined;\n        this.isHeaderIn = undefined;\n        this.allowRowBreakAcrossPagesIn = undefined;\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionRowFormat.prototype, \"height\", {\n        /**\n         * Gets or Sets the height for selected rows.\n         *\n         * @default undefined\n         * @aspType int\n         * @returns {number} - Returns the height\n         */\n        get: function () {\n            return this.heightIn;\n        },\n        /**\n         * Gets or Sets the height for selected rows.\n         *\n         * @default undefined\n         * @aspType int\n         * @param {number} value - Specified the value\n         */\n        set: function (value) {\n            if (value === this.heightIn) {\n                return;\n            }\n            this.heightIn = value;\n            this.notifyPropertyChanged('height');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionRowFormat.prototype, \"heightType\", {\n        /**\n         * Gets or Sets the height type for selected rows.\n         *\n         * @default undefined\n         * @returns {HeightType} - Returns height type\n         */\n        get: function () {\n            return this.heightTypeIn;\n        },\n        /**\n         * Gets or Sets the height type for selected rows.\n         *\n         * @default undefined\n         * @param {HeightType} value - Specified the value\n         */\n        set: function (value) {\n            if (value === this.heightTypeIn) {\n                return;\n            }\n            this.heightTypeIn = value;\n            this.notifyPropertyChanged('heightType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionRowFormat.prototype, \"isHeader\", {\n        /**\n         * Gets or Sets a value indicating whether the selected rows are header rows or not.\n         *\n         * @default undefined\n         * @aspType bool\n         * @returns {boolean} - Returns the is header\n         */\n        get: function () {\n            return this.isHeaderIn;\n        },\n        /**\n         * Gets or Sets a value indicating whether the selected rows are header rows or not.\n         *\n         * @default undefined\n         * @aspType bool\n         * @param {boolean} value - Specified the value\n         */\n        set: function (value) {\n            if (value === this.isHeaderIn) {\n                return;\n            }\n            this.isHeaderIn = value;\n            this.notifyPropertyChanged('isHeader');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionRowFormat.prototype, \"allowBreakAcrossPages\", {\n        /**\n         * Gets or Sets a value indicating whether to allow break across pages for selected rows.\n         *\n         * @default undefined\n         * @aspType bool\n         * @returns {boolean} - Returns the allow break across page\n         */\n        get: function () {\n            return this.allowRowBreakAcrossPagesIn;\n        },\n        /**\n         * Gets or Sets a value indicating whether to allow break across pages for selected rows.\n         *\n         * @default undefined\n         * @param {boolean} value - Specified the value\n         * @aspType bool\n         */\n        set: function (value) {\n            if (value === this.allowRowBreakAcrossPagesIn) {\n                return;\n            }\n            this.allowRowBreakAcrossPagesIn = value;\n            this.notifyPropertyChanged('allowBreakAcrossPages');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionRowFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!isNullOrUndefined(selection) && (selection.isCleared || selection.owner.isReadOnlyMode\n            || !selection.owner.isDocumentLoaded || selection.owner.isPastingContent) && !selection.isRetrieveFormatting) {\n            return;\n        }\n        if (!isNullOrUndefined(selection) && !isNullOrUndefined(selection.start) && !selection.isRetrieveFormatting) {\n            var value = this.getPropertyValue(propertyName);\n            if (!isNullOrUndefined(value)) {\n                selection.owner.editorModule.onApplyTableRowFormat(propertyName, value);\n            }\n        }\n    };\n    SelectionRowFormat.prototype.getPropertyValue = function (propertyName) {\n        switch (propertyName) {\n            case 'height':\n                return this.height;\n            case 'heightType':\n                return this.heightType;\n            case 'isHeader':\n                return this.isHeader;\n            case 'allowBreakAcrossPages':\n                return this.allowBreakAcrossPages;\n            default:\n                return undefined;\n        }\n    };\n    /**\n     * Copies the format.\n     *\n     * @param {WRowFormat} format - Specified row format\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.copyFormat = function (format) {\n        this.height = format.height;\n        this.heightType = format.heightType;\n        this.allowBreakAcrossPages = format.allowBreakAcrossPages;\n        this.isHeader = format.isHeader;\n    };\n    /**\n     * Combines the format.\n     *\n     * @param {WRowFormat} format - Secifies row format\n     * @private\n     */\n    SelectionRowFormat.prototype.combineFormat = function (format) {\n        if (!isNullOrUndefined(this.height) && this.height !== format.height) {\n            this.height = undefined;\n        }\n        if (!isNullOrUndefined(this.heightType) && this.heightType !== format.heightType) {\n            this.heightType = undefined;\n        }\n        if (!isNullOrUndefined(this.allowBreakAcrossPages) && this.allowBreakAcrossPages !== format.allowBreakAcrossPages) {\n            this.allowBreakAcrossPages = undefined;\n        }\n        if (!isNullOrUndefined(this.isHeader) && this.isHeader !== format.isHeader) {\n            this.isHeader = undefined;\n        }\n    };\n    /**\n     * Clears the row format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.clearRowFormat = function () {\n        this.height = undefined;\n        this.heightType = undefined;\n        this.allowBreakAcrossPages = undefined;\n        this.isHeader = undefined;\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.clearFormat = function () {\n        this.height = 0;\n        this.heightType = undefined;\n        this.allowBreakAcrossPages = undefined;\n        this.isHeader = undefined;\n    };\n    /**\n     * Destroys the managed resources.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionRowFormat.prototype.destroy = function () {\n        this.heightIn = undefined;\n        this.heightTypeIn = undefined;\n        this.allowRowBreakAcrossPagesIn = undefined;\n        this.isHeaderIn = undefined;\n        this.selection = undefined;\n    };\n    return SelectionRowFormat;\n}());\nexport { SelectionRowFormat };\n/**\n * Selection image format implementation\n */\nvar SelectionImageFormat = /** @class */ (function () {\n    /**\n     * @param {Selection} selection - Specifies selecion module\n     * @private\n     */\n    function SelectionImageFormat(selection) {\n        this.selection = selection;\n    }\n    Object.defineProperty(SelectionImageFormat.prototype, \"width\", {\n        /**\n         * Gets the width of the image.\n         *\n         * @aspType int\n         * @returns {number} - Returns image width\n         */\n        get: function () {\n            if (this.image) {\n                return this.image.width;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionImageFormat.prototype, \"height\", {\n        /**\n         * Gets the height of the image.\n         *\n         * @aspType int\n         * @returns {number} - Returns image height\n         */\n        get: function () {\n            if (this.image) {\n                return this.image.height;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionImageFormat.prototype, \"alternateText\", {\n        /**\n         * Gets the alternateText of the image.\n         *\n         * @aspType string\n         * @returns {string} - Returns image alternateText\n         */\n        get: function () {\n            if (this.image) {\n                return this.image.alternateText;\n            }\n            return null;\n        },\n        /**\n         * Sets the alternateText of the image.\n         *\n         * @aspType string\n         * @returns {string} - Returns image alternateText\n         */\n        set: function (value) {\n            if (value === this.alternateText) {\n                return;\n            }\n            this.image.alternateText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resizes the image based on given size.\n     *\n     * @param {number} width - Specified the image width\n     * @param {number} height - Specifies the image height\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.resize = function (width, height) {\n        this.updateImageFormat(width, height, this.alternateText);\n    };\n    /**\n     * update the image based on given alternateText.\n     *\n     * @param {string} alternateText - Specified the image alternateText\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.applyImageAlternativeText = function (alternateText) {\n        this.updateImageFormat(this.width, this.height, alternateText);\n    };\n    /**\n     * Update image width and height\n     *\n     * @param {number} width - Specified the image width\n     * @param {number} height - Specifies the image height\n     * @param {string} alternateText - Specofies the image alternateText\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.updateImageFormat = function (width, height, alternateText) {\n        if (this.image) {\n            if (this.selection.owner.editorModule) {\n                this.selection.owner.editorModule.onImageFormat(this.image, width, height, alternateText);\n            }\n        }\n    };\n    /**\n     * @param {ImageElementBox} image - Specifies image element box\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.copyImageFormat = function (image) {\n        this.image = image;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    SelectionImageFormat.prototype.clearImageFormat = function () {\n        this.image = undefined;\n    };\n    return SelectionImageFormat;\n}());\nexport { SelectionImageFormat };\n/**\n * Selection column format\n */\nvar SelectionColumnFormat = /** @class */ (function () {\n    /**\n     * @param selection\n     * @private\n     */\n    function SelectionColumnFormat(selection) {\n        this.widthIn = 0;\n        this.spaceIn = 0;\n        this.selection = selection;\n    }\n    /**\n     * Copies the format.\n     *\n     * @private\n     * @param {WColumnFormat} format - Source Format to copy.\n     * @returns {void}\n     */\n    SelectionColumnFormat.prototype.copyFormat = function (format) {\n        this.width = format.width;\n        this.space = format.space;\n    };\n    Object.defineProperty(SelectionColumnFormat.prototype, \"width\", {\n        /**\n         * Gets or sets the width of the column.\n         */\n        get: function () {\n            return this.widthIn;\n        },\n        /**\n         * Gets or sets the width of the column.\n         */\n        set: function (value) {\n            if (value === this.widthIn) {\n                return;\n            }\n            this.widthIn = value;\n            //this.notifyPropertyChanged('width');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionColumnFormat.prototype, \"space\", {\n        /**\n         * Gets or sets the space in between this column and next column.\n         */\n        get: function () {\n            return this.spaceIn;\n        },\n        /**\n         * Gets or sets the space in between this column and next column.\n         */\n        set: function (value) {\n            if (value === this.spaceIn) {\n                return;\n            }\n            this.spaceIn = value;\n            //this.notifyPropertyChanged('space');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionColumnFormat.prototype.getPropertyValue = function (property) {\n        switch (property) {\n            case 'space':\n                return this.space;\n            case 'width':\n                return this.width;\n            default:\n                return undefined;\n        }\n    };\n    SelectionColumnFormat.prototype.notifyPropertyChanged = function (propertyName) {\n        var selection = this.selection;\n        if (!isNullOrUndefined(selection)) {\n            this.selection.owner.editorModule.onApplyColumnFormat('columns', this.selection.sectionFormat.columns);\n        }\n    };\n    /**\n     * Clears the format.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionColumnFormat.prototype.clearFormat = function () {\n        this.widthIn = 0;\n        this.spaceIn = 0;\n    };\n    /**\n     * Destroys the manages resources.\n     *\n     * @private\n     * @returns {void}\n     */\n    SelectionColumnFormat.prototype.destroy = function () {\n        this.widthIn = undefined;\n        this.spaceIn = undefined;\n    };\n    return SelectionColumnFormat;\n}());\nexport { SelectionColumnFormat };\n/* eslint-enable */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}