{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { BaseHistoryInfo } from './base-history-info';\nimport { CommentCharacterElementBox } from '../viewer/page';\nimport { CONTROL_CHARACTERS } from '../../base/types';\n/**\n * EditorHistory preservation class\n */\n/**\n * @private\n */\nvar HistoryInfo = /** @class */function (_super) {\n  __extends(HistoryInfo, _super);\n  function HistoryInfo(node, isChild) {\n    var _this = _super.call(this, node) || this;\n    _this.isChildHistoryInfo = false;\n    _this.editRangeStart = undefined;\n    _this.documentHelper = node.documentHelper;\n    _this.isChildHistoryInfo = isChild;\n    return _this;\n  }\n  Object.defineProperty(HistoryInfo.prototype, \"hasAction\", {\n    get: function () {\n      return !isNullOrUndefined(this.modifiedActions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  HistoryInfo.prototype.addModifiedAction = function (baseHistoryInfo) {\n    // For complex actions such as Replace text, Insert/Remove Hyperlink etc.\n    if (!(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n      if (isNullOrUndefined(this.modifiedActions)) {\n        this.modifiedActions = [];\n      }\n      this.modifiedActions.push(baseHistoryInfo);\n    }\n  };\n  /**\n   * @private\n   */\n  HistoryInfo.prototype.getActionInfo = function (isInvertOperation) {\n    var action = this.action;\n    var operations = [];\n    switch (action) {\n      case 'InsertBookmark':\n      case 'RestrictEditing':\n        if (this.editorHistory.isUndoing) {\n          for (var i_1 = 0; i_1 < this.modifiedActions.length; i_1++) {\n            if (action == 'RestrictEditing') {\n              this.modifiedActions[parseInt(i_1.toString(), 10)].markerData.push(this.owner.editorModule.getMarkerData(this.modifiedActions[parseInt(i_1.toString(), 10)].removedNodes[0]));\n            }\n            operations.push(this.modifiedActions[parseInt(i_1.toString(), 10)].getDeleteOperation('DeleteBookmark', i_1 == 0 ? true : undefined));\n            this.modifiedActions[parseInt(i_1.toString(), 10)].markerData.shift();\n          }\n        } else {\n          for (var i_2 = 0; i_2 < this.modifiedActions.length; i_2++) {\n            var currentHistory_1 = this.modifiedActions[parseInt(i_2.toString(), 10)];\n            if (currentHistory_1.action === 'DeleteBookmark') {\n              operations.push(currentHistory_1.getDeleteOperation('DeleteBookmark'));\n              operations.push(currentHistory_1.getDeleteOperation('DeleteBookmark', true));\n              continue;\n            }\n            operations.push(currentHistory_1.getInsertOperation(action));\n          }\n        }\n        break;\n      case 'BackSpace':\n      case 'Delete':\n      case 'RemoveEditRange':\n        if (this.editorHistory.isUndoing) {\n          for (var i_3 = 0; i_3 < this.modifiedActions.length; i_3++) {\n            var currentHistory_2 = this.modifiedActions[parseInt(i_3.toString(), 10)];\n            if (currentHistory_2.action === 'InsertInline') {\n              var operation = currentHistory_2.getDeleteOperation('DeleteBookmark', true);\n              operations.push(operation);\n            } else {\n              var operationCollection = currentHistory_2.getActionInfo();\n              operations = operations.concat(operationCollection);\n              if (currentHistory_2.action === 'RemoveEditRange') {\n                operations.push(currentHistory_2.getDeleteOperation(action, true));\n              }\n            }\n          }\n          operations.reverse();\n        } else {\n          for (var i_4 = 0; i_4 < this.modifiedActions.length; i_4++) {\n            var currentHistory_3 = this.modifiedActions[parseInt(i_4.toString(), 10)];\n            if (currentHistory_3.action === 'InsertInline') {\n              var operation = currentHistory_3.getInsertOperation('InsertBookmark');\n              operations.push(operation);\n            } else {\n              operations.push(currentHistory_3.getDeleteOperation(action));\n              if (currentHistory_3.action === 'RemoveEditRange') {\n                operations.push(currentHistory_3.getDeleteOperation(action, true));\n              }\n            }\n          }\n        }\n        break;\n      case 'PageBreak':\n      case 'ColumnBreak':\n        if (this.owner.enableTrackChanges) {\n          for (var i_5 = 0; i_5 < this.modifiedActions.length; i_5++) {\n            var currentHistory_4 = this.modifiedActions[parseInt(i_5.toString(), 10)];\n            if (currentHistory_4.removedNodes.length > 0) {\n              operations = operations.concat(currentHistory_4.getDeleteOperationsForTrackChanges());\n            }\n            var markerData = currentHistory_4.markerData[currentHistory_4.markerData.length - 1];\n            var operation_1 = currentHistory_4.getInsertOperation('Enter');\n            var breakOperation = this.getInsertOperation(action);\n            operation_1.markerData = markerData;\n            breakOperation.markerData = this.owner.editorModule.getMarkerData(undefined, undefined, this.owner.editorModule.getRevision(markerData.revisionId));\n            operations.push(operation_1);\n            operations.push(breakOperation);\n            operations.push(operation_1);\n            operation_1.markerData.skipOperation = true;\n          }\n        } else {\n          if (this.editorHistory.isUndoing) {\n            for (var i_6 = 0; i_6 < this.modifiedActions.length; i_6++) {\n              var currentHistory_5 = this.modifiedActions[parseInt(i_6.toString(), 10)];\n              currentHistory_5.endIndex = currentHistory_5.startIndex;\n              //Basically for pagebreak and column break there will three paragraph difference. So for transformation we sended three backspace operation.\n              operations.push(currentHistory_5.getDeleteOperation('Delete'));\n              operations.push(currentHistory_5.getDeleteOperation('Delete'));\n              operations.push(currentHistory_5.getDeleteOperation('Delete'));\n              if (currentHistory_5.isRemovedNodes) {\n                var operationCollection = currentHistory_5.getDeleteContent('BackSpace');\n                operations = operations.concat(operationCollection);\n              }\n            }\n          } else {\n            for (var i_7 = 0; i_7 < this.modifiedActions.length; i_7++) {\n              var currentHistory_6 = this.modifiedActions[parseInt(i_7.toString(), 10)];\n              if (currentHistory_6.removedNodes.length > 0) {\n                operations.push(currentHistory_6.getDeleteOperation(action));\n              }\n            }\n            var operation_2 = this.getInsertOperation('Enter');\n            operation_2.markerData = {\n              skipOperation: true\n            };\n            //Basically for pagebreak and column break there will three paragraph difference. So for transformation we sended three insert operation.\n            operations.push(operation_2);\n            operations.push(this.getInsertOperation(action));\n            operations.push(operation_2);\n          }\n        }\n        break;\n      case 'InsertHyperlink':\n      case 'AutoFormatHyperlink':\n      case 'RemoveHyperlink':\n        if (this.editorHistory.isUndoing && action === 'RemoveHyperlink') {\n          var length_1 = 0;\n          for (var i_8 = 0; i_8 < this.modifiedActions.length; i_8++) {\n            var currentHistory_7 = this.modifiedActions[parseInt(i_8.toString(), 10)];\n            if (currentHistory_7.action == 'FontColor' || currentHistory_7.action === 'Underline') {\n              length_1 = currentHistory_7.endIndex - currentHistory_7.startIndex;\n            }\n          }\n          if (!isNullOrUndefined(this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].fieldBegin)) {\n            this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].endIndex = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].startIndex + length_1;\n            var operation_3 = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].getDeleteOperation('Delete');\n            operation_3.markerData = undefined;\n            operations.push(operation_3);\n            var operationCollection = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].getFieldOperation();\n            operations = operations.concat(operationCollection);\n          }\n        } else {\n          for (var i = 0; i < this.modifiedActions.length; i++) {\n            var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n            if (currentHistory.action === 'InsertHyperlink') {\n              operations.push.apply(operations, currentHistory.getActionInfo());\n            } else if (currentHistory.action === 'InsertInline') {\n              if (currentHistory.insertedText === CONTROL_CHARACTERS.Marker_Start || currentHistory.insertedText === CONTROL_CHARACTERS.Marker_End) {\n                if (this.editorHistory.isUndoing) {\n                  operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                } else {\n                  operations.push(currentHistory.getInsertOperation('InsertHyperlink'));\n                }\n              } else {\n                if (this.editorHistory.isUndoing) {\n                  operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                } else {\n                  operations.push(currentHistory.getInsertOperation('Insert'));\n                }\n              }\n            } else if (currentHistory.action === 'Delete') {\n              operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n            } else if (currentHistory.action === 'Underline') {\n              operations = operations.concat(currentHistory.getActionInfo());\n            } else if (currentHistory.action === 'FontColor') {\n              operations = operations.concat(currentHistory.getActionInfo());\n            }\n          }\n          if (this.editorHistory.isUndoing) {\n            operations.reverse();\n          }\n        }\n        break;\n      case 'InsertComment':\n        if (this.editorHistory.isUndoing) {\n          this.getDeleteCommentOperation(this.modifiedActions, operations);\n        } else {\n          for (var i_9 = 0; i_9 < this.modifiedActions.length; i_9++) {\n            var currentHistory_8 = this.modifiedActions[parseInt(i_9.toString(), 10)];\n            var operation_4 = currentHistory_8.getInsertOperation(currentHistory_8.action);\n            if (currentHistory_8.insertedElement instanceof CommentCharacterElementBox && currentHistory_8.action === 'InsertInline') {\n              operations.push(currentHistory_8.getCommentOperation(operation_4, currentHistory_8.action));\n            } else if (currentHistory_8.action === 'InsertCommentWidget') {\n              operation_4 = this.getUpdateOperation();\n              operations.push(currentHistory_8.getCommentOperation(operation_4, currentHistory_8.action));\n            }\n          }\n        }\n        break;\n      case 'RemoveComment':\n        if (this.editorHistory.isUndoing) {\n          for (var i_10 = this.modifiedActions.length - 1; i_10 >= 0; i_10--) {\n            var currentHistory_9 = this.modifiedActions[parseInt(i_10.toString(), 10)];\n            var operation_5 = undefined;\n            var operationCollection = [];\n            if (currentHistory_9.action === 'InsertInline' && currentHistory_9.insertedElement instanceof CommentCharacterElementBox) {\n              operation_5 = currentHistory_9.getDeleteOperation(currentHistory_9.action);\n              operationCollection.push(currentHistory_9.getCommentOperation(operation_5, 'InsertInline'));\n            } else if (currentHistory_9.action === 'RemoveInline') {\n              operation_5 = currentHistory_9.getDeleteOperation(currentHistory_9.action);\n              operationCollection.push(currentHistory_9.getCommentOperation(operation_5, 'InsertInline'));\n              operation_5 = currentHistory_9.getInsertOperation(currentHistory_9.action);\n              operationCollection.push(currentHistory_9.getCommentOperation(operation_5, 'InsertInline'));\n            } else if (currentHistory_9.action === 'DeleteComment') {\n              operationCollection = currentHistory_9.getActionInfo();\n            } else {\n              this.owner.sfdtExportModule.iscontentInsert = false;\n              operationCollection = currentHistory_9.getActionInfo();\n              this.owner.sfdtExportModule.iscontentInsert = true;\n            }\n            operations = operations.concat(operationCollection);\n          }\n        } else {\n          for (var i_11 = 0; i_11 < this.modifiedActions.length; i_11++) {\n            var currentHistory_10 = this.modifiedActions[parseInt(i_11.toString(), 10)];\n            var operation_6 = undefined;\n            var operationCollection = [];\n            if (currentHistory_10.action === 'RemoveInline' && currentHistory_10.removedNodes[0] instanceof CommentCharacterElementBox) {\n              operation_6 = currentHistory_10.getDeleteOperation(currentHistory_10.action);\n              operationCollection.push(currentHistory_10.getCommentOperation(operation_6, currentHistory_10.action));\n            } else if (currentHistory_10.action === 'InsertInline' && currentHistory_10.insertedElement instanceof CommentCharacterElementBox) {\n              operation_6 = currentHistory_10.getInsertOperation(currentHistory_10.action);\n              operationCollection.push(currentHistory_10.getCommentOperation(operation_6, currentHistory_10.action));\n            } else {\n              operationCollection = currentHistory_10.getActionInfo();\n            }\n            operations = operations.concat(operationCollection);\n          }\n        }\n        break;\n      case 'DeleteComment':\n        if (this.editorHistory.isUndoing) {\n          for (var j = this.modifiedActions.length - 1; j >= 0; j--) {\n            var history_1 = this.modifiedActions[parseInt(j.toString(), 10)];\n            var operation_7 = history_1.getInsertOperation(history_1.action);\n            if (history_1.insertedElement instanceof CommentCharacterElementBox && history_1.action === 'RemoveInline') {\n              operations.push(history_1.getCommentOperation(operation_7, 'InsertInline'));\n            } else if (history_1.action === 'DeleteCommentWidget') {\n              operation_7 = this.getUpdateOperation();\n              operations.push(history_1.getCommentOperation(operation_7, 'InsertCommentWidget'));\n            } else if (history_1.action === 'DeleteComment') {\n              history_1.getActionInfo();\n            }\n          }\n        } else {\n          this.getDeleteCommentOperation(this.modifiedActions, operations);\n        }\n        break;\n      case 'FormField':\n        var currentHistory = this.modifiedActions.pop();\n        operations = currentHistory.getFieldOperation();\n        break;\n      case 'IMEInput':\n        if (isInvertOperation && !(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n          if (this.modifiedActions[0].removedNodes.length > 0) {\n            var removeOperation = this.modifiedActions[0].getDeleteOperation('Delete');\n            removeOperation.length = removeOperation.text.length;\n            operations.push(removeOperation);\n          }\n          var insertOperation = this.modifiedActions[this.modifiedActions.length - 1].getInsertOperation('Insert');\n          insertOperation.length = insertOperation.text.length;\n          operations.push(insertOperation);\n          operations.reverse();\n          for (var i_12 = 0; i_12 < operations.length; i_12++) {\n            var operation_8 = operations[parseInt(i_12.toString(), 10)];\n            if (operation_8.action === 'Insert') {\n              operation_8.action = 'Delete';\n            } else if (operation_8.action === 'Delete') {\n              operation_8.action = 'Insert';\n            }\n          }\n        } else {\n          var currentHistory_11 = this.modifiedActions[this.modifiedActions.length - 1];\n          if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            for (var i_13 = 0; i_13 < this.modifiedActions.length; i_13++) {\n              currentHistory_11 = this.modifiedActions[parseInt(i_13.toString(), 10)];\n              if (currentHistory_11.removedNodes.length > 0) {\n                operations.push(currentHistory_11.getDeleteOperation(action));\n              }\n              if (currentHistory_11.isRemovedNodes) {\n                var operationCollection = currentHistory_11.getDeleteContent('BackSpace');\n                operations = operations.concat(operationCollection);\n              }\n              currentHistory_11.isRemovedNodes = false;\n            }\n          } else {\n            if (currentHistory_11.removedNodes.length > 0) {\n              operations.push(currentHistory_11.getDeleteOperation(action));\n            }\n            operations.push(currentHistory_11.getInsertOperation(this.action));\n          }\n          currentHistory_11.isRemovedNodes = false;\n        }\n        break;\n      case 'Accept All':\n      case 'ReplaceAll':\n      case 'Reject All':\n        var isSkip = false;\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n          var currentHistory_12 = this.modifiedActions[this.modifiedActions.length - 1];\n          operations.push.apply(operations, currentHistory_12.cellOperation);\n          currentHistory_12.cellOperation = [];\n          if (currentHistory_12.isRemovedNodes) {\n            var operationCollection = currentHistory_12.getDeleteContent('Insert');\n            operations = operations.concat(operationCollection);\n          }\n        } else {\n          for (var i_14 = 0; i_14 < this.modifiedActions.length; i_14++) {\n            var currentHistory_13 = this.modifiedActions[parseInt(i_14.toString(), 10)];\n            if (!isNullOrUndefined(currentHistory_13.cellOperation) && currentHistory_13.cellOperation.length > 0) {\n              operations.push(currentHistory_13.cellOperation[0]);\n              isSkip = true;\n              currentHistory_13.cellOperation = [];\n            } else {\n              var operationsCollection = currentHistory_13.getActionInfo();\n              operations.push.apply(operations, operationsCollection);\n            }\n          }\n        }\n        // if (!isSkip && (action === 'Accept All' || action === 'Reject All')) {\n        //     operations.reverse();\n        // }\n        break;\n      case 'Paste':\n        for (var i_15 = 0; i_15 < this.modifiedActions.length; i_15++) {\n          var currentHistory_14 = this.modifiedActions[parseInt(i_15.toString(), 10)];\n          currentHistory_14.type = this.type === 'PasteToc' ? this.type : 'Paste';\n          var pasteOperations = currentHistory_14.getActionInfo();\n          operations.push.apply(operations, pasteOperations);\n        }\n        break;\n      case 'TOC':\n        if (this.modifiedActions) {\n          for (var i_16 = 0; i_16 < this.modifiedActions.length; i_16++) {\n            var currentHistory_15 = this.modifiedActions[parseInt(i_16.toString(), 10)];\n            currentHistory_15.type = currentHistory_15.action === 'Paste' ? 'PasteToc' : undefined;\n            var tocOperations = currentHistory_15.getActionInfo();\n            operations.push.apply(operations, tocOperations);\n          }\n          if (this.editorHistory.isUndoing && operations.length > 0) {\n            var lastelement = operations.pop();\n            operations.unshift(lastelement);\n          }\n        }\n        break;\n      case 'DragAndDropContent':\n        for (var i_17 = 0; i_17 < this.modifiedActions.length; i_17++) {\n          var currentHistory_16 = this.modifiedActions[parseInt(i_17.toString(), 10)];\n          currentHistory_16.type = currentHistory_16.action === 'Paste' ? 'Paste' : undefined;\n          var ddcOperations = currentHistory_16.getActionInfo();\n          operations.push.apply(operations, ddcOperations);\n        }\n        break;\n      case 'ClearFormat':\n        if (this.editorHistory.isUndoing) {\n          for (var i_18 = 0; i_18 < this.modifiedActions.length; i_18++) {\n            operations.push.apply(operations, this.modifiedActions[parseInt(i_18.toString(), 10)].modifiedFormatOperation);\n            this.modifiedActions[parseInt(i_18.toString(), 10)].modifiedFormatOperation = [];\n          }\n        } else {\n          var clearHistory = this.modifiedActions[this.modifiedActions.length - 1];\n          var formatOperation = clearHistory.buildFormatOperation('ClearFormat', true);\n          operations = formatOperation.slice();\n        }\n        break;\n      case 'ApplyStyle':\n        var styleHistory = void 0;\n        var formatstyleOperation = [];\n        if (this.modifiedActions[0] instanceof HistoryInfo) {\n          var historyInfo = this.modifiedActions[0];\n          styleHistory = historyInfo.modifiedActions[0];\n          formatstyleOperation = styleHistory.buildFormatOperation('ClearFormat', true);\n          operations = formatstyleOperation.slice();\n        }\n        if (!(this.modifiedActions[this.modifiedActions.length - 1] instanceof HistoryInfo)) {\n          formatstyleOperation = this.modifiedActions[this.modifiedActions.length - 1].buildFormatOperation(action, true);\n          for (var i_19 = 0; i_19 < formatstyleOperation.length; i_19++) {\n            operations.push(formatstyleOperation[parseInt(i_19.toString(), 10)]);\n          }\n        }\n        break;\n      case 'TableMarginsSelection':\n        this.modifiedActions[this.modifiedActions.length - 1].createTableFormat(this.modifiedActions[this.modifiedActions.length - 1].action);\n        this.modifiedActions[this.modifiedActions.length - 1].type = 'TableFormat';\n        operations.push(this.modifiedActions[this.modifiedActions.length - 1].getFormatOperation());\n        break;\n      case 'BordersAndShading':\n        if (this.modifiedActions[0].action === 'TableFormat') {\n          this.modifiedActions[0].type = 'TableFormat';\n          this.modifiedActions[0].createTableFormat('BordersAndShading');\n          operations.push(this.modifiedActions[0].getFormatOperation());\n        } else {\n          this.modifiedActions[0].createCellFormat('BordersAndShading');\n          this.modifiedActions[0].type = 'CellFormat';\n          operations = this.modifiedActions[0].getSelectedCellOperation('BordersAndShading', undefined, true, true, true);\n        }\n        break;\n      case 'AutoList':\n        for (var i_20 = 0; i_20 < this.modifiedActions.length; i_20++) {\n          var currentHistory_17 = this.modifiedActions[parseInt(i_20.toString(), 10)];\n          var autoListOperations = currentHistory_17.getActionInfo();\n          operations.push.apply(operations, autoListOperations);\n        }\n        break;\n      case 'TableProperties':\n        for (var i_21 = 0; i_21 < this.modifiedActions.length; i_21++) {\n          var tablePropHistory = this.modifiedActions[parseInt(i_21.toString(), 10)];\n          if (tablePropHistory.action === 'TableFormat') {\n            tablePropHistory.createTableFormat(tablePropHistory.action);\n            tablePropHistory.type = 'TableFormat';\n            operations.push(tablePropHistory.getFormatOperation());\n          } else if (tablePropHistory.action === 'RowFormat') {\n            if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && tablePropHistory.modifiedProperties.length > 1) {\n              operations = tablePropHistory.modifiedFormatOperation;\n              tablePropHistory.modifiedFormatOperation = [];\n            } else {\n              tablePropHistory.createRowFormat(tablePropHistory.action);\n              tablePropHistory.type = 'RowFormat';\n              operations.push(tablePropHistory.getFormatOperation());\n            }\n          } else if (tablePropHistory.action === 'CellFormat') {\n            tablePropHistory.createCellFormat(tablePropHistory.action);\n            tablePropHistory.type = 'CellFormat';\n            var cellProp = tablePropHistory.getSelectedCellOperation(tablePropHistory.action, false, false, false, true);\n            for (var i_22 = 0; i_22 < cellProp.length; i_22++) {\n              operations.push(cellProp[parseInt(i_22.toString(), 10)]);\n            }\n          }\n        }\n        break;\n      case 'CellMarginsSelection':\n        this.modifiedActions[this.modifiedActions.length - 1].createCellFormat('CellOptions');\n        this.modifiedActions[this.modifiedActions.length - 1].type = 'CellFormat';\n        operations = this.modifiedActions[this.modifiedActions.length - 1].getSelectedCellOperation('CellOptions', false, false, false, true).slice();\n        break;\n    }\n    return operations;\n  };\n  HistoryInfo.prototype.revert = function () {\n    this.editorHistory.currentHistoryInfo = this;\n    if (this.action === 'BordersAndShading') {\n      this.owner.editorModule.isBordersAndShadingDialog = true;\n    }\n    if (!isNullOrUndefined(this.modifiedActions)) {\n      if (this.editorHistory.isUndoing) {\n        var i = this.modifiedActions.length;\n        while (i > 0) {\n          var baseHistoryInfo = this.modifiedActions[i - 1];\n          baseHistoryInfo.revert();\n          i = i - 1;\n        }\n      } else {\n        var i = 0;\n        while (i < this.modifiedActions.length) {\n          var baseHistoryInfo = this.modifiedActions[parseInt(i.toString(), 10)];\n          baseHistoryInfo.revert();\n          i = i + 1;\n        }\n      }\n    }\n    if (this.action === 'RestrictEditing') {\n      var user = this.editRangeStart.user !== '' ? this.editRangeStart.user : this.editRangeStart.group;\n      if (this.editorHistory.isUndoing) {\n        var index = this.owner.documentHelper.editRanges.get(user).indexOf(this.editRangeStart);\n        if (index !== -1) {\n          this.owner.documentHelper.editRanges.get(user).splice(index, 1);\n        }\n      } else {\n        this.owner.editorModule.updateRangeCollection(this.editRangeStart, user);\n      }\n      this.owner.selectionModule.updateEditRangeCollection();\n    }\n    if (!this.isChildHistoryInfo) {\n      this.editorHistory.updateComplexHistory();\n    } else {\n      this.editorHistory.updateComplexHistoryInternal();\n    }\n  };\n  HistoryInfo.prototype.destroy = function () {\n    if (!isNullOrUndefined(this.modifiedActions)) {\n      while (this.modifiedActions.length > 0) {\n        var baseHistoryInfo = this.modifiedActions[this.modifiedActions.length - 1];\n        baseHistoryInfo.destroy();\n        this.modifiedActions.splice(this.modifiedActions.indexOf(baseHistoryInfo), 1);\n      }\n      this.modifiedActions = undefined;\n    }\n    _super.prototype.destroy.call(this);\n  };\n  return HistoryInfo;\n}(BaseHistoryInfo);\nexport { HistoryInfo };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","isNullOrUndefined","BaseHistoryInfo","CommentCharacterElementBox","CONTROL_CHARACTERS","HistoryInfo","_super","node","isChild","_this","call","isChildHistoryInfo","editRangeStart","undefined","documentHelper","defineProperty","get","modifiedActions","enumerable","configurable","addModifiedAction","baseHistoryInfo","editorHistory","isUndoing","isRedoing","push","getActionInfo","isInvertOperation","action","operations","i_1","length","parseInt","toString","markerData","owner","editorModule","getMarkerData","removedNodes","getDeleteOperation","shift","i_2","currentHistory_1","getInsertOperation","i_3","currentHistory_2","operation","operationCollection","concat","reverse","i_4","currentHistory_3","enableTrackChanges","i_5","currentHistory_4","getDeleteOperationsForTrackChanges","operation_1","breakOperation","getRevision","revisionId","skipOperation","i_6","currentHistory_5","endIndex","startIndex","isRemovedNodes","getDeleteContent","i_7","currentHistory_6","operation_2","length_1","i_8","currentHistory_7","fieldBegin","operation_3","getFieldOperation","i","currentHistory","apply","insertedText","Marker_Start","Marker_End","getDeleteCommentOperation","i_9","currentHistory_8","operation_4","insertedElement","getCommentOperation","getUpdateOperation","i_10","currentHistory_9","operation_5","sfdtExportModule","iscontentInsert","i_11","currentHistory_10","operation_6","j","history_1","operation_7","pop","removeOperation","text","insertOperation","i_12","operation_8","currentHistory_11","i_13","isSkip","currentHistory_12","cellOperation","i_14","currentHistory_13","operationsCollection","i_15","currentHistory_14","type","pasteOperations","i_16","currentHistory_15","tocOperations","lastelement","unshift","i_17","currentHistory_16","ddcOperations","i_18","modifiedFormatOperation","clearHistory","formatOperation","buildFormatOperation","slice","styleHistory","formatstyleOperation","historyInfo","i_19","createTableFormat","getFormatOperation","createCellFormat","getSelectedCellOperation","i_20","currentHistory_17","autoListOperations","i_21","tablePropHistory","modifiedProperties","createRowFormat","cellProp","i_22","revert","currentHistoryInfo","isBordersAndShadingDialog","user","group","index","editRanges","indexOf","splice","updateRangeCollection","selectionModule","updateEditRangeCollection","updateComplexHistory","updateComplexHistoryInternal","destroy"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-info.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { BaseHistoryInfo } from './base-history-info';\nimport { CommentCharacterElementBox } from '../viewer/page';\nimport { CONTROL_CHARACTERS } from '../../base/types';\n/**\n * EditorHistory preservation class\n */\n/**\n * @private\n */\nvar HistoryInfo = /** @class */ (function (_super) {\n    __extends(HistoryInfo, _super);\n    function HistoryInfo(node, isChild) {\n        var _this = _super.call(this, node) || this;\n        _this.isChildHistoryInfo = false;\n        _this.editRangeStart = undefined;\n        _this.documentHelper = node.documentHelper;\n        _this.isChildHistoryInfo = isChild;\n        return _this;\n    }\n    Object.defineProperty(HistoryInfo.prototype, \"hasAction\", {\n        get: function () {\n            return !isNullOrUndefined(this.modifiedActions);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HistoryInfo.prototype.addModifiedAction = function (baseHistoryInfo) {\n        // For complex actions such as Replace text, Insert/Remove Hyperlink etc.\n        if (!(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n            if (isNullOrUndefined(this.modifiedActions)) {\n                this.modifiedActions = [];\n            }\n            this.modifiedActions.push(baseHistoryInfo);\n        }\n    };\n    /**\n     * @private\n     */\n    HistoryInfo.prototype.getActionInfo = function (isInvertOperation) {\n        var action = this.action;\n        var operations = [];\n        switch (action) {\n            case 'InsertBookmark':\n            case 'RestrictEditing':\n                if (this.editorHistory.isUndoing) {\n                    for (var i_1 = 0; i_1 < this.modifiedActions.length; i_1++) {\n                        if (action == 'RestrictEditing') {\n                            this.modifiedActions[parseInt(i_1.toString(), 10)].markerData.push(this.owner.editorModule.getMarkerData(this.modifiedActions[parseInt(i_1.toString(), 10)].removedNodes[0]));\n                        }\n                        operations.push(this.modifiedActions[parseInt(i_1.toString(), 10)].getDeleteOperation('DeleteBookmark', i_1 == 0 ? true : undefined));\n                        this.modifiedActions[parseInt(i_1.toString(), 10)].markerData.shift();\n                    }\n                }\n                else {\n                    for (var i_2 = 0; i_2 < this.modifiedActions.length; i_2++) {\n                        var currentHistory_1 = this.modifiedActions[parseInt(i_2.toString(), 10)];\n                        if (currentHistory_1.action === 'DeleteBookmark') {\n                            operations.push(currentHistory_1.getDeleteOperation('DeleteBookmark'));\n                            operations.push(currentHistory_1.getDeleteOperation('DeleteBookmark', true));\n                            continue;\n                        }\n                        operations.push(currentHistory_1.getInsertOperation(action));\n                    }\n                }\n                break;\n            case 'BackSpace':\n            case 'Delete':\n            case 'RemoveEditRange':\n                if (this.editorHistory.isUndoing) {\n                    for (var i_3 = 0; i_3 < this.modifiedActions.length; i_3++) {\n                        var currentHistory_2 = this.modifiedActions[parseInt(i_3.toString(), 10)];\n                        if (currentHistory_2.action === 'InsertInline') {\n                            var operation = currentHistory_2.getDeleteOperation('DeleteBookmark', true);\n                            operations.push(operation);\n                        }\n                        else {\n                            var operationCollection = currentHistory_2.getActionInfo();\n                            operations = operations.concat(operationCollection);\n                            if (currentHistory_2.action === 'RemoveEditRange') {\n                                operations.push(currentHistory_2.getDeleteOperation(action, true));\n                            }\n                        }\n                    }\n                    operations.reverse();\n                }\n                else {\n                    for (var i_4 = 0; i_4 < this.modifiedActions.length; i_4++) {\n                        var currentHistory_3 = this.modifiedActions[parseInt(i_4.toString(), 10)];\n                        if (currentHistory_3.action === 'InsertInline') {\n                            var operation = currentHistory_3.getInsertOperation('InsertBookmark');\n                            operations.push(operation);\n                        }\n                        else {\n                            operations.push(currentHistory_3.getDeleteOperation(action));\n                            if (currentHistory_3.action === 'RemoveEditRange') {\n                                operations.push(currentHistory_3.getDeleteOperation(action, true));\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'PageBreak':\n            case 'ColumnBreak':\n                if (this.owner.enableTrackChanges) {\n                    for (var i_5 = 0; i_5 < this.modifiedActions.length; i_5++) {\n                        var currentHistory_4 = this.modifiedActions[parseInt(i_5.toString(), 10)];\n                        if (currentHistory_4.removedNodes.length > 0) {\n                            operations = operations.concat(currentHistory_4.getDeleteOperationsForTrackChanges());\n                        }\n                        var markerData = currentHistory_4.markerData[currentHistory_4.markerData.length - 1];\n                        var operation_1 = currentHistory_4.getInsertOperation('Enter');\n                        var breakOperation = this.getInsertOperation(action);\n                        operation_1.markerData = markerData;\n                        breakOperation.markerData = this.owner.editorModule.getMarkerData(undefined, undefined, this.owner.editorModule.getRevision(markerData.revisionId));\n                        operations.push(operation_1);\n                        operations.push(breakOperation);\n                        operations.push(operation_1);\n                        operation_1.markerData.skipOperation = true;\n                    }\n                }\n                else {\n                    if (this.editorHistory.isUndoing) {\n                        for (var i_6 = 0; i_6 < this.modifiedActions.length; i_6++) {\n                            var currentHistory_5 = this.modifiedActions[parseInt(i_6.toString(), 10)];\n                            currentHistory_5.endIndex = currentHistory_5.startIndex;\n                            //Basically for pagebreak and column break there will three paragraph difference. So for transformation we sended three backspace operation.\n                            operations.push(currentHistory_5.getDeleteOperation('Delete'));\n                            operations.push(currentHistory_5.getDeleteOperation('Delete'));\n                            operations.push(currentHistory_5.getDeleteOperation('Delete'));\n                            if (currentHistory_5.isRemovedNodes) {\n                                var operationCollection = currentHistory_5.getDeleteContent('BackSpace');\n                                operations = operations.concat(operationCollection);\n                            }\n                        }\n                    }\n                    else {\n                        for (var i_7 = 0; i_7 < this.modifiedActions.length; i_7++) {\n                            var currentHistory_6 = this.modifiedActions[parseInt(i_7.toString(), 10)];\n                            if (currentHistory_6.removedNodes.length > 0) {\n                                operations.push(currentHistory_6.getDeleteOperation(action));\n                            }\n                        }\n                        var operation_2 = this.getInsertOperation('Enter');\n                        operation_2.markerData = { skipOperation: true };\n                        //Basically for pagebreak and column break there will three paragraph difference. So for transformation we sended three insert operation.\n                        operations.push(operation_2);\n                        operations.push(this.getInsertOperation(action));\n                        operations.push(operation_2);\n                    }\n                }\n                break;\n            case 'InsertHyperlink':\n            case 'AutoFormatHyperlink':\n            case 'RemoveHyperlink':\n                if (this.editorHistory.isUndoing && action === 'RemoveHyperlink') {\n                    var length_1 = 0;\n                    for (var i_8 = 0; i_8 < this.modifiedActions.length; i_8++) {\n                        var currentHistory_7 = this.modifiedActions[parseInt(i_8.toString(), 10)];\n                        if (currentHistory_7.action == 'FontColor' || currentHistory_7.action === 'Underline') {\n                            length_1 = currentHistory_7.endIndex - currentHistory_7.startIndex;\n                        }\n                    }\n                    if (!isNullOrUndefined(this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].fieldBegin)) {\n                        this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].endIndex = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].startIndex + length_1;\n                        var operation_3 = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].getDeleteOperation('Delete');\n                        operation_3.markerData = undefined;\n                        operations.push(operation_3);\n                        var operationCollection = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].getFieldOperation();\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.action === 'InsertHyperlink') {\n                            operations.push.apply(operations, currentHistory.getActionInfo());\n                        }\n                        else if (currentHistory.action === 'InsertInline') {\n                            if (currentHistory.insertedText === CONTROL_CHARACTERS.Marker_Start || currentHistory.insertedText === CONTROL_CHARACTERS.Marker_End) {\n                                if (this.editorHistory.isUndoing) {\n                                    operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                                }\n                                else {\n                                    operations.push(currentHistory.getInsertOperation('InsertHyperlink'));\n                                }\n                            }\n                            else {\n                                if (this.editorHistory.isUndoing) {\n                                    operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                                }\n                                else {\n                                    operations.push(currentHistory.getInsertOperation('Insert'));\n                                }\n                            }\n                        }\n                        else if (currentHistory.action === 'Delete') {\n                            operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                        }\n                        else if (currentHistory.action === 'Underline') {\n                            operations = operations.concat(currentHistory.getActionInfo());\n                        }\n                        else if (currentHistory.action === 'FontColor') {\n                            operations = operations.concat(currentHistory.getActionInfo());\n                        }\n                    }\n                    if (this.editorHistory.isUndoing) {\n                        operations.reverse();\n                    }\n                }\n                break;\n            case 'InsertComment':\n                if (this.editorHistory.isUndoing) {\n                    this.getDeleteCommentOperation(this.modifiedActions, operations);\n                }\n                else {\n                    for (var i_9 = 0; i_9 < this.modifiedActions.length; i_9++) {\n                        var currentHistory_8 = this.modifiedActions[parseInt(i_9.toString(), 10)];\n                        var operation_4 = currentHistory_8.getInsertOperation(currentHistory_8.action);\n                        if ((currentHistory_8.insertedElement instanceof CommentCharacterElementBox && currentHistory_8.action === 'InsertInline')) {\n                            operations.push(currentHistory_8.getCommentOperation(operation_4, currentHistory_8.action));\n                        }\n                        else if (currentHistory_8.action === 'InsertCommentWidget') {\n                            operation_4 = this.getUpdateOperation();\n                            operations.push(currentHistory_8.getCommentOperation(operation_4, currentHistory_8.action));\n                        }\n                    }\n                }\n                break;\n            case 'RemoveComment':\n                if (this.editorHistory.isUndoing) {\n                    for (var i_10 = this.modifiedActions.length - 1; i_10 >= 0; i_10--) {\n                        var currentHistory_9 = this.modifiedActions[parseInt(i_10.toString(), 10)];\n                        var operation_5 = undefined;\n                        var operationCollection = [];\n                        if (currentHistory_9.action === 'InsertInline' && currentHistory_9.insertedElement instanceof CommentCharacterElementBox) {\n                            operation_5 = currentHistory_9.getDeleteOperation(currentHistory_9.action);\n                            operationCollection.push(currentHistory_9.getCommentOperation(operation_5, 'InsertInline'));\n                        }\n                        else if (currentHistory_9.action === 'RemoveInline') {\n                            operation_5 = currentHistory_9.getDeleteOperation(currentHistory_9.action);\n                            operationCollection.push(currentHistory_9.getCommentOperation(operation_5, 'InsertInline'));\n                            operation_5 = currentHistory_9.getInsertOperation(currentHistory_9.action);\n                            operationCollection.push(currentHistory_9.getCommentOperation(operation_5, 'InsertInline'));\n                        }\n                        else if (currentHistory_9.action === 'DeleteComment') {\n                            operationCollection = currentHistory_9.getActionInfo();\n                        }\n                        else {\n                            this.owner.sfdtExportModule.iscontentInsert = false;\n                            operationCollection = currentHistory_9.getActionInfo();\n                            this.owner.sfdtExportModule.iscontentInsert = true;\n                        }\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    for (var i_11 = 0; i_11 < this.modifiedActions.length; i_11++) {\n                        var currentHistory_10 = this.modifiedActions[parseInt(i_11.toString(), 10)];\n                        var operation_6 = undefined;\n                        var operationCollection = [];\n                        if (currentHistory_10.action === 'RemoveInline' && currentHistory_10.removedNodes[0] instanceof CommentCharacterElementBox) {\n                            operation_6 = currentHistory_10.getDeleteOperation(currentHistory_10.action);\n                            operationCollection.push(currentHistory_10.getCommentOperation(operation_6, currentHistory_10.action));\n                        }\n                        else if (currentHistory_10.action === 'InsertInline' && currentHistory_10.insertedElement instanceof CommentCharacterElementBox) {\n                            operation_6 = currentHistory_10.getInsertOperation(currentHistory_10.action);\n                            operationCollection.push(currentHistory_10.getCommentOperation(operation_6, currentHistory_10.action));\n                        }\n                        else {\n                            operationCollection = currentHistory_10.getActionInfo();\n                        }\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                break;\n            case 'DeleteComment':\n                if (this.editorHistory.isUndoing) {\n                    for (var j = this.modifiedActions.length - 1; j >= 0; j--) {\n                        var history_1 = this.modifiedActions[parseInt(j.toString(), 10)];\n                        var operation_7 = history_1.getInsertOperation(history_1.action);\n                        if ((history_1.insertedElement instanceof CommentCharacterElementBox && history_1.action === 'RemoveInline')) {\n                            operations.push(history_1.getCommentOperation(operation_7, 'InsertInline'));\n                        }\n                        else if (history_1.action === 'DeleteCommentWidget') {\n                            operation_7 = this.getUpdateOperation();\n                            operations.push(history_1.getCommentOperation(operation_7, 'InsertCommentWidget'));\n                        }\n                        else if (history_1.action === 'DeleteComment') {\n                            history_1.getActionInfo();\n                        }\n                    }\n                }\n                else {\n                    this.getDeleteCommentOperation(this.modifiedActions, operations);\n                }\n                break;\n            case 'FormField':\n                var currentHistory = this.modifiedActions.pop();\n                operations = currentHistory.getFieldOperation();\n                break;\n            case 'IMEInput':\n                if (isInvertOperation && (!(this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n                    if (this.modifiedActions[0].removedNodes.length > 0) {\n                        var removeOperation = this.modifiedActions[0].getDeleteOperation('Delete');\n                        removeOperation.length = removeOperation.text.length;\n                        operations.push(removeOperation);\n                    }\n                    var insertOperation = this.modifiedActions[this.modifiedActions.length - 1].getInsertOperation('Insert');\n                    insertOperation.length = insertOperation.text.length;\n                    operations.push(insertOperation);\n                    operations.reverse();\n                    for (var i_12 = 0; i_12 < operations.length; i_12++) {\n                        var operation_8 = operations[parseInt(i_12.toString(), 10)];\n                        if (operation_8.action === 'Insert') {\n                            operation_8.action = 'Delete';\n                        }\n                        else if (operation_8.action === 'Delete') {\n                            operation_8.action = 'Insert';\n                        }\n                    }\n                }\n                else {\n                    var currentHistory_11 = this.modifiedActions[this.modifiedActions.length - 1];\n                    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                        for (var i_13 = 0; i_13 < this.modifiedActions.length; i_13++) {\n                            currentHistory_11 = this.modifiedActions[parseInt(i_13.toString(), 10)];\n                            if (currentHistory_11.removedNodes.length > 0) {\n                                operations.push(currentHistory_11.getDeleteOperation(action));\n                            }\n                            if (currentHistory_11.isRemovedNodes) {\n                                var operationCollection = currentHistory_11.getDeleteContent('BackSpace');\n                                operations = operations.concat(operationCollection);\n                            }\n                            currentHistory_11.isRemovedNodes = false;\n                        }\n                    }\n                    else {\n                        if (currentHistory_11.removedNodes.length > 0) {\n                            operations.push(currentHistory_11.getDeleteOperation(action));\n                        }\n                        operations.push(currentHistory_11.getInsertOperation(this.action));\n                    }\n                    currentHistory_11.isRemovedNodes = false;\n                }\n                break;\n            case 'Accept All':\n            case 'ReplaceAll':\n            case 'Reject All':\n                var isSkip = false;\n                if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                    var currentHistory_12 = this.modifiedActions[this.modifiedActions.length - 1];\n                    operations.push.apply(operations, currentHistory_12.cellOperation);\n                    currentHistory_12.cellOperation = [];\n                    if (currentHistory_12.isRemovedNodes) {\n                        var operationCollection = currentHistory_12.getDeleteContent('Insert');\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    for (var i_14 = 0; i_14 < this.modifiedActions.length; i_14++) {\n                        var currentHistory_13 = this.modifiedActions[parseInt(i_14.toString(), 10)];\n                        if (!isNullOrUndefined(currentHistory_13.cellOperation) && currentHistory_13.cellOperation.length > 0) {\n                            operations.push(currentHistory_13.cellOperation[0]);\n                            isSkip = true;\n                            currentHistory_13.cellOperation = [];\n                        }\n                        else {\n                            var operationsCollection = currentHistory_13.getActionInfo();\n                            operations.push.apply(operations, operationsCollection);\n                        }\n                    }\n                }\n                // if (!isSkip && (action === 'Accept All' || action === 'Reject All')) {\n                //     operations.reverse();\n                // }\n                break;\n            case 'Paste':\n                for (var i_15 = 0; i_15 < this.modifiedActions.length; i_15++) {\n                    var currentHistory_14 = this.modifiedActions[parseInt(i_15.toString(), 10)];\n                    currentHistory_14.type = this.type === 'PasteToc' ? this.type : 'Paste';\n                    var pasteOperations = currentHistory_14.getActionInfo();\n                    operations.push.apply(operations, pasteOperations);\n                }\n                break;\n            case 'TOC':\n                if (this.modifiedActions) {\n                    for (var i_16 = 0; i_16 < this.modifiedActions.length; i_16++) {\n                        var currentHistory_15 = this.modifiedActions[parseInt(i_16.toString(), 10)];\n                        currentHistory_15.type = currentHistory_15.action === 'Paste' ? 'PasteToc' : undefined;\n                        var tocOperations = currentHistory_15.getActionInfo();\n                        operations.push.apply(operations, tocOperations);\n                    }\n                    if (this.editorHistory.isUndoing && operations.length > 0) {\n                        var lastelement = operations.pop();\n                        operations.unshift(lastelement);\n                    }\n                }\n                break;\n            case 'DragAndDropContent':\n                for (var i_17 = 0; i_17 < this.modifiedActions.length; i_17++) {\n                    var currentHistory_16 = this.modifiedActions[parseInt(i_17.toString(), 10)];\n                    currentHistory_16.type = currentHistory_16.action === 'Paste' ? 'Paste' : undefined;\n                    var ddcOperations = currentHistory_16.getActionInfo();\n                    operations.push.apply(operations, ddcOperations);\n                }\n                break;\n            case 'ClearFormat':\n                if (this.editorHistory.isUndoing) {\n                    for (var i_18 = 0; i_18 < this.modifiedActions.length; i_18++) {\n                        operations.push.apply(operations, this.modifiedActions[parseInt(i_18.toString(), 10)].modifiedFormatOperation);\n                        this.modifiedActions[parseInt(i_18.toString(), 10)].modifiedFormatOperation = [];\n                    }\n                }\n                else {\n                    var clearHistory = this.modifiedActions[this.modifiedActions.length - 1];\n                    var formatOperation = clearHistory.buildFormatOperation('ClearFormat', true);\n                    operations = formatOperation.slice();\n                }\n                break;\n            case 'ApplyStyle':\n                var styleHistory = void 0;\n                var formatstyleOperation = [];\n                if (this.modifiedActions[0] instanceof HistoryInfo) {\n                    var historyInfo = this.modifiedActions[0];\n                    styleHistory = historyInfo.modifiedActions[0];\n                    formatstyleOperation = styleHistory.buildFormatOperation('ClearFormat', true);\n                    operations = formatstyleOperation.slice();\n                }\n                if (!(this.modifiedActions[this.modifiedActions.length - 1] instanceof HistoryInfo)) {\n                    formatstyleOperation = this.modifiedActions[this.modifiedActions.length - 1].buildFormatOperation(action, true);\n                    for (var i_19 = 0; i_19 < formatstyleOperation.length; i_19++) {\n                        operations.push(formatstyleOperation[parseInt(i_19.toString(), 10)]);\n                    }\n                }\n                break;\n            case 'TableMarginsSelection':\n                this.modifiedActions[this.modifiedActions.length - 1].createTableFormat(this.modifiedActions[this.modifiedActions.length - 1].action);\n                this.modifiedActions[this.modifiedActions.length - 1].type = 'TableFormat';\n                operations.push(this.modifiedActions[this.modifiedActions.length - 1].getFormatOperation());\n                break;\n            case 'BordersAndShading':\n                if (this.modifiedActions[0].action === 'TableFormat') {\n                    this.modifiedActions[0].type = 'TableFormat';\n                    this.modifiedActions[0].createTableFormat('BordersAndShading');\n                    operations.push(this.modifiedActions[0].getFormatOperation());\n                }\n                else {\n                    this.modifiedActions[0].createCellFormat('BordersAndShading');\n                    this.modifiedActions[0].type = 'CellFormat';\n                    operations = this.modifiedActions[0].getSelectedCellOperation('BordersAndShading', undefined, true, true, true);\n                }\n                break;\n            case 'AutoList':\n                for (var i_20 = 0; i_20 < this.modifiedActions.length; i_20++) {\n                    var currentHistory_17 = this.modifiedActions[parseInt(i_20.toString(), 10)];\n                    var autoListOperations = currentHistory_17.getActionInfo();\n                    operations.push.apply(operations, autoListOperations);\n                }\n                break;\n            case 'TableProperties':\n                for (var i_21 = 0; i_21 < this.modifiedActions.length; i_21++) {\n                    var tablePropHistory = this.modifiedActions[parseInt(i_21.toString(), 10)];\n                    if (tablePropHistory.action === 'TableFormat') {\n                        tablePropHistory.createTableFormat(tablePropHistory.action);\n                        tablePropHistory.type = 'TableFormat';\n                        operations.push(tablePropHistory.getFormatOperation());\n                    }\n                    else if (tablePropHistory.action === 'RowFormat') {\n                        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing && tablePropHistory.modifiedProperties.length > 1) {\n                            operations = tablePropHistory.modifiedFormatOperation;\n                            tablePropHistory.modifiedFormatOperation = [];\n                        }\n                        else {\n                            tablePropHistory.createRowFormat(tablePropHistory.action);\n                            tablePropHistory.type = 'RowFormat';\n                            operations.push(tablePropHistory.getFormatOperation());\n                        }\n                    }\n                    else if (tablePropHistory.action === 'CellFormat') {\n                        tablePropHistory.createCellFormat(tablePropHistory.action);\n                        tablePropHistory.type = 'CellFormat';\n                        var cellProp = tablePropHistory.getSelectedCellOperation(tablePropHistory.action, false, false, false, true);\n                        for (var i_22 = 0; i_22 < cellProp.length; i_22++) {\n                            operations.push(cellProp[parseInt(i_22.toString(), 10)]);\n                        }\n                    }\n                }\n                break;\n            case 'CellMarginsSelection':\n                this.modifiedActions[this.modifiedActions.length - 1].createCellFormat('CellOptions');\n                this.modifiedActions[this.modifiedActions.length - 1].type = 'CellFormat';\n                operations = this.modifiedActions[this.modifiedActions.length - 1].getSelectedCellOperation('CellOptions', false, false, false, true).slice();\n                break;\n        }\n        return operations;\n    };\n    HistoryInfo.prototype.revert = function () {\n        this.editorHistory.currentHistoryInfo = this;\n        if (this.action === 'BordersAndShading') {\n            this.owner.editorModule.isBordersAndShadingDialog = true;\n        }\n        if (!isNullOrUndefined(this.modifiedActions)) {\n            if (this.editorHistory.isUndoing) {\n                var i = this.modifiedActions.length;\n                while (i > 0) {\n                    var baseHistoryInfo = this.modifiedActions[i - 1];\n                    baseHistoryInfo.revert();\n                    i = i - 1;\n                }\n            }\n            else {\n                var i = 0;\n                while (i < this.modifiedActions.length) {\n                    var baseHistoryInfo = this.modifiedActions[parseInt(i.toString(), 10)];\n                    baseHistoryInfo.revert();\n                    i = i + 1;\n                }\n            }\n        }\n        if (this.action === 'RestrictEditing') {\n            var user = this.editRangeStart.user !== '' ? this.editRangeStart.user : this.editRangeStart.group;\n            if (this.editorHistory.isUndoing) {\n                var index = this.owner.documentHelper.editRanges.get(user).indexOf(this.editRangeStart);\n                if (index !== -1) {\n                    this.owner.documentHelper.editRanges.get(user).splice(index, 1);\n                }\n            }\n            else {\n                this.owner.editorModule.updateRangeCollection(this.editRangeStart, user);\n            }\n            this.owner.selectionModule.updateEditRangeCollection();\n        }\n        if (!this.isChildHistoryInfo) {\n            this.editorHistory.updateComplexHistory();\n        }\n        else {\n            this.editorHistory.updateComplexHistoryInternal();\n        }\n    };\n    HistoryInfo.prototype.destroy = function () {\n        if (!isNullOrUndefined(this.modifiedActions)) {\n            while (this.modifiedActions.length > 0) {\n                var baseHistoryInfo = this.modifiedActions[this.modifiedActions.length - 1];\n                baseHistoryInfo.destroy();\n                this.modifiedActions.splice(this.modifiedActions.indexOf(baseHistoryInfo), 1);\n            }\n            this.modifiedActions = undefined;\n        }\n        _super.prototype.destroy.call(this);\n    };\n    return HistoryInfo;\n}(BaseHistoryInfo));\nexport { HistoryInfo };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}