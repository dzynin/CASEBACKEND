{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * Circular 3D chart selection.\n */\nimport { Browser, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getElement } from '../../common/utils/helper';\nimport { Index } from '../../common/model/base';\nimport { BaseSelection } from '../../common/user-interaction/selection';\nimport { selectionComplete } from '../../common/model/constants';\n/**\n * The `CircularChart3DSelection` module handles the selection for circular 3D chart.\n */\nvar CircularChartSelection3D = /** @class */function (_super) {\n  __extends(CircularChartSelection3D, _super);\n  function CircularChartSelection3D(circular3D) {\n    var _this = _super.call(this, circular3D) || this;\n    _this.circular3D = circular3D;\n    _this.renderer = circular3D.renderer;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   *\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.addEventListener = function () {\n    if (this.circular3D.isDestroyed) {\n      return;\n    }\n    //let cancelEvent: string = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.circular3D.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.circular3D.on('click', this.mouseClick, this);\n  };\n  /**\n   * Unbinding events for selection module.\n   *\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.removeEventListener = function () {\n    if (this.circular3D.isDestroyed) {\n      return;\n    }\n    this.circular3D.off(Browser.touchMoveEvent, this.mouseMove);\n    this.circular3D.off('click', this.mouseClick);\n  };\n  /**\n   * Initializes the private variables for selection and deselection.\n   *\n   * @param {CircularChart3D} circular3D - The instance of the circular 3D chart.\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.initPrivateVariables = function (circular3D) {\n    this.styleId = circular3D.element.id + '_ej2_chart_selection';\n    this.unselected = circular3D.element.id + '_ej2_deselected';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n  };\n  /**\n   * Invoke selection by creating selection style for rendered chart.\n   *\n   * @param {CircularChart3D} circular3D - The instance of the circular 3D chart.\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.invokeSelection = function (circular3D) {\n    this.initPrivateVariables(circular3D);\n    this.series = extend({}, circular3D.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = circular3D.selectionMode;\n    this.selectDataIndex(this.concatIndexes(circular3D.selectedDataIndexes, this.selectedDataIndexes), circular3D);\n  };\n  /**\n   * To get the series selection style class name based on the series and point index.\n   *\n   * @param {CircularChart3DSeriesModel} series - Specifies the series model.\n   * @param {number} point - Specifies the point index.\n   * @returns {string} - Returns the style class name.\n   */\n  CircularChartSelection3D.prototype.generateStyle = function (series, point) {\n    return this.styleId + '_series_' + series.index + '_point_' + point;\n  };\n  /**\n   * Gets series point elements based on the specified series and point index.\n   *\n   * @param {Index} index - Specifies the index of the series.\n   * @returns {Element[]} - Returns the array of elements.\n   */\n  CircularChartSelection3D.prototype.getElementByIndex = function (index) {\n    var _this = this;\n    var pointElements = [];\n    var elements = document.querySelectorAll('[id*=\"-region-series-' + index.series + '-point-' + index.point + '\"]');\n    elements.forEach(function (pointElement) {\n      if (_this.indexFinder(pointElement.id).point === index.point) {\n        pointElements.push(pointElement);\n      }\n    });\n    var element = document.getElementById(this.control.element.id + '-svg-data-label-text-' + index.point);\n    var connectorElement = document.getElementById(this.control.element.id + '-datalabel-series-0-connector-' + index.point);\n    var shapeElement = document.getElementById(this.control.element.id + '-svg-data-label-series-0-shape-' + index.point);\n    if (element) {\n      pointElements.push(element);\n    }\n    if (connectorElement) {\n      pointElements.push(connectorElement);\n    }\n    if (shapeElement) {\n      pointElements.push(shapeElement);\n    }\n    return pointElements;\n  };\n  /**\n   * Checks whether the specified element is already selected based on the given event type and optional index.\n   *\n   * @param {Element} targetElement - The target element to be checked for selection status.\n   * @param {string} eventType - The type of event triggering the selection check (e.g., 'mouse move').\n   * @param {Index} [index] - The index to narrow down the selection check for elements with multiple occurrences.\n   * @returns {boolean} - Returns true if the element is already selected; otherwise, returns false.\n   * @private\n   */\n  CircularChartSelection3D.prototype.isAlreadySelected = function (targetElement, eventType, index) {\n    if (eventType === 'mousemove') {\n      this.currentMode = this.circular3D.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.circular3D.element.id + '_ej2_chart_highlight';\n    } else if (eventType === 'click' || eventType === 'keyup') {\n      this.currentMode = this.circular3D.selectionMode;\n      this.styleId = this.circular3D.element.id + '_ej2_chart_selection';\n    }\n    if (this.circular3D.highlightMode !== 'None' && this.circular3D.selectionMode === 'None') {\n      if (eventType === 'click') {\n        return false;\n      }\n    }\n    if ((this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight) && this.previousSelectedElement && this.previousSelectedElement[0]) {\n      var isElement = void 0;\n      var nodeName = targetElement.nodeName;\n      if (targetElement.parentNode) {\n        isElement = (nodeName === 'path' || nodeName === 'shape') && targetElement.id.indexOf('region') > 1 ? true : false;\n      }\n      var _loop_1 = function (i) {\n        if (this_1.previousSelectedElement[i].hasAttribute('class')) {\n          if (this_1.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || eventType === 'click' || eventType === 'keyup')) {\n            var selectionClass_1;\n            this_1.previousSelectedElement[i].classList.forEach(function (className) {\n              if (className.indexOf('selection') > -1) {\n                selectionClass_1 = className;\n              }\n            });\n            this_1.previousSelectedElement[i].removeAttribute('class');\n            if (selectionClass_1) {\n              this_1.addSvgClass(this_1.previousSelectedElement[i], selectionClass_1);\n            }\n            this_1.previousSelectedElement[i].classList.remove(this_1.styleId + '_series_' + index.series);\n            this_1.addOrRemoveIndex(this_1.highlightDataIndexes, this_1.indexFinder(this_1.previousSelectedElement[i].id));\n          } else if (!isElement && this_1.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1) {\n            this_1.performSelection(this_1.indexFinder(this_1.previousSelectedElement[i].id), this_1.circular3D, this_1.previousSelectedElement[i]);\n          }\n        }\n      };\n      var this_1 = this;\n      for (var i = 0; i < this.previousSelectedElement.length; i++) {\n        _loop_1(i);\n      }\n    }\n    return true;\n  };\n  /**\n   * Handles mouse click events on the specified circular 3D instance instance.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D instance where the mouse click event occurred.\n   * @param {Event} event - The mouse click event triggering the action.\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.mouseClick = function (circular3D, event) {\n    this.calculateSelectedElements(circular3D, event.target, event.type);\n  };\n  /**\n   * Calculates and processes selected elements based on the specified circular 3D chart instance, target element, and event type.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D chart instance to be used in the selection calculation.\n   * @param {Element} targetElement - The target element involved in the selection calculation.\n   * @param {string} eventType - The type of event triggering the selection calculation (e.g., 'click').\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.calculateSelectedElements = function (circular3D, targetElement, eventType) {\n    if (isNullOrUndefined(targetElement)) {\n      return;\n    }\n    if (circular3D.selectionMode === 'None' && circular3D.highlightMode === 'None' || targetElement.id && targetElement.id.indexOf(circular3D.element.id + '-') === -1) {\n      return;\n    }\n    if (targetElement.getAttribute('id').indexOf('_connector_') > -1) {\n      return;\n    } else {\n      this.isAlreadySelected(targetElement, eventType, this.indexFinder(targetElement.id));\n      if (targetElement.id.indexOf('-series-') > -1 || targetElement.id.indexOf('-data-label-') > -1) {\n        this.performSelection(this.indexFinder(targetElement.id), circular3D, targetElement);\n      }\n    }\n  };\n  /**\n   * Finds and returns the index associated with the specified identifier.\n   *\n   * @param {string} id - The identifier used to find the associated index.\n   * @returns {Index} - The index associated with the specified identifier.\n   * @private\n   */\n  CircularChartSelection3D.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n    if (id.indexOf('-point-') > -1) {\n      ids = id.split('-series-')[1].split('-point-');\n    } else if (id.indexOf('-border-') > -1) {\n      ids[0] = id.split('-border-')[1];\n    } else if (id.indexOf('data-label-series-0-shape-') > -1 && this.control.series[0].dataLabel.position === 'Inside') {\n      ids[0] = '0';\n      ids[1] = id.split('-shape-')[1];\n    } else if (id.indexOf('-series-') > -1) {\n      ids[0] = id.split('-series-')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = '0';\n    } else if (id.indexOf('_chart_legend_g_') > -1) {\n      ids = id.split('_chart_legend_g_');\n      ids[0] = '0';\n    } else if (id.indexOf('-data-label-') > -1) {\n      ids[0] = '0';\n      ids[1] = id.split('-data-label-text-')[1];\n    } else if (id.indexOf('-connector-') > -1) {\n      ids[0] = '0';\n      ids[1] = id.split('-connector-')[1];\n    }\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Performs the selection based on the specified index, circular 3D instance, and optional element.\n   *\n   * @param {Index} index - The index used for selection, including the point information.\n   * @param {CircularChart3D} circular3D - The circular 3D instance used for the selection operation.\n   * @param {Element | undefined} [element] - The target element for selection.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.performSelection = function (index, circular3D, element) {\n    if (!isNaN(index.point) && this.currentMode === 'Point' && element && this.getElementByIndex(index).length > 0) {\n      this.selection(circular3D, index, this.getElementByIndex(index));\n      this.selectionComplete(circular3D, circular3D.series[0]);\n      this.blurEffect(circular3D.element.id, circular3D.visibleSeries);\n    }\n  };\n  /**\n   * Handles the completion of the selection process in the specified circular 3D chart instance and Circular3DSeries.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D chart instance where the selection is completed.\n   * @param {CircularChart3DSeries} series - The Circular3DSeries associated with the completed selection.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.selectionComplete = function (circular3D, series) {\n    var pointIndex;\n    var selectedPointValues = [];\n    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n      pointIndex = this.selectedDataIndexes[i].point;\n      if (!isNaN(pointIndex)) {\n        selectedPointValues.push({\n          x: series.dataSource[pointIndex][series.xName],\n          y: series.points[pointIndex].y,\n          seriesIndex: this.selectedDataIndexes[i].series,\n          pointIndex: pointIndex\n        });\n      }\n    }\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    circular3D.trigger(selectionComplete, args);\n  };\n  /**\n   * Handles the selection process in the specified circular 3D instance based on the provided index and selected elements.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D chart instance where the selection is being performed.\n   * @param {Index} index - The index used for selection, including point information.\n   * @param {Element[]} selectedElements - The array of elements that have been selected.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.selection = function (circular3D, index, selectedElements) {\n    if (!circular3D.isMultiSelect && this.styleId.indexOf('highlight') === -1 && circular3D.selectionMode !== 'None') {\n      this.removeMultiSelectElements(circular3D, this.selectedDataIndexes, index);\n    }\n    var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n    if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n      this.removeStyles(selectedElements);\n      if (this.styleId.indexOf('highlight') > 0 && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index);\n      }\n    } else {\n      this.previousSelectedElement = circular3D.highlightMode !== 'None' ? selectedElements : [];\n      if (className.indexOf('selection') < 0) {\n        this.applyStyles(selectedElements, index);\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, true);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, true);\n      }\n    }\n  };\n  /**\n   * Redraws the selection in the specified circular 3D chart instance based on the selected data indexes.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D chart  instance where the selection is to be redrawn.\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.redrawSelection = function (circular3D) {\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(circular3D, this.highlightDataIndexes);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(circular3D, this.selectedDataIndexes);\n    }\n    this.blurEffect(circular3D.element.id, circular3D.visibleSeries);\n    this.selectDataIndex(selectedDataIndexes, circular3D);\n  };\n  /**\n   * Removes the selected elements from the specified circular 3D chart instance based on the given indexes.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D instance from which selected elements will be removed.\n   * @param {Index[]} indexes - The indexes representing the selected elements to be removed.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.removeSelectedElements = function (circular3D, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.removeStyles(this.getElementByIndex(index));\n    }\n    var points = circular3D.visibleSeries[0].points;\n    for (var i = 0; i < points.length; i++) {\n      var index = new Index(0, points[i].index);\n      this.removeStyles(this.getElementByIndex(index).length === 0 ? [document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point)] : this.getElementByIndex(index));\n    }\n  };\n  /**\n   * Handles legend item selection in the specified circular 3D chart based on the target element and event type.\n   *\n   * @param {CircularChart3D} chart - The circular 3D chart instance where legend item selection is being processed.\n   * @param {Element} targetElement - The target element associated with the legend item.\n   * @param {string} eventType - The type of event triggering the legend item selection (e.g., 'mouse move').\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.legendSelection = function (chart, targetElement, eventType) {\n    if (eventType === 'mousemove') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('marker') > 1) {\n        targetElement = getElement(targetElement.id.replace('_marker', ''));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.circular3D.highlightMode;\n    } else if (eventType === 'click') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n    }\n    var index = this.indexFinder(targetElement.id);\n    var isPreSelected = this.isAlreadySelected(targetElement, eventType, index);\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[index.series], index.point);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      var isBlurEffectNeeded = true;\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, index.series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries[0].points; _i < _a.length; _i++) {\n          var element = _a[_i];\n          if (element.index !== index.point && (!chart.isMultiSelect || seriesStyle.indexOf('highlight') > 0)) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[index.series], element.index);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, index.series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n          }\n        }\n        var seriesElements = [];\n        seriesElements = this.getElementByIndex(index);\n        if (seriesElements.length > 0) {\n          this.checkSelectionElements(seriesElements, seriesStyle, false, true, index.point);\n          this.selection(chart, index, seriesElements);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n      }\n    }\n  };\n  /**\n   * Selects elements based on the specified data indexes in the given circular 3D chart instance.\n   *\n   * @param {Index[]} indexes - The data indexes used for element selection.\n   * @param {CircularChart3D} circular3D - The circular 3D instance where elements are to be selected.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.selectDataIndex = function (indexes, circular3D) {\n    var element;\n    for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {\n      var index = indexes_2[_i];\n      element = this.getElementByIndex(index)[0];\n      if (element) {\n        this.performSelection(index, circular3D, element);\n      }\n    }\n  };\n  /**\n   * Removes selection styles for elements in a multi-selection process based on the specified data indexes and current index.\n   *\n   * @param {CircularChart3D} circular3D - The circular 3D chart instance from which selection styles will be removed.\n   * @param {Index[]} index - The data indexes representing the elements to remove selection styles from.\n   * @param {Index} currentIndex - The current index used as a reference during the multi-selection process.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.removeMultiSelectElements = function (circular3D, index, currentIndex) {\n    for (var i = 0; i < index.length; i++) {\n      if (!this.checkEquals(index[i], currentIndex)) {\n        this.removeStyles(this.getElementByIndex(index[i]));\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Applies the opacity effect to circular 3D chart series elements based on the specified pieId and visible series.\n   *\n   * @param {string} pieId - The identifier associated with the circular 3D chart series.\n   * @param {CircularChart3DSeries[]} visibleSeries - The array of visible series in the circular 3D chart.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.blurEffect = function (pieId, visibleSeries) {\n    var visibility = this.checkVisibility(this.highlightDataIndexes) || this.checkVisibility(this.selectedDataIndexes); // legend click scenario\n    for (var _i = 0, _a = visibleSeries[0].points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      var pointElements = [];\n      if (point.visible) {\n        pointElements = this.getElementByIndex({\n          series: 0,\n          point: point.index\n        });\n        this.checkSelectionElements(pointElements, this.generateStyle(visibleSeries[0], point.index), visibility, true, point.index);\n      }\n    }\n  };\n  /**\n   * Checks for selection elements based on the specified style class name, visibility, and other parameters.\n   *\n   * @param {Element[] | Element} element - The element or array of elements to be checked for selection.\n   * @param {string} className - The style class name used for identifying selection elements.\n   * @param {boolean} visibility - The visibility status of the selection elements.\n   * @param {boolean} [isLegend=true] - Flag indicating whether the elements belong to a legend.\n   * @param {number} [point=0] - The point value associated with the selection elements.\n   * @returns {void}\n   * @public\n   */\n  CircularChartSelection3D.prototype.checkSelectionElements = function (element, className, visibility, isLegend, point) {\n    if (isLegend === void 0) {\n      isLegend = true;\n    }\n    if (point === void 0) {\n      point = 0;\n    }\n    var children = element;\n    if (this.circular3D.selectionMode !== 'None' && (this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight)) {\n      children = element;\n    }\n    var elementClassName;\n    var legendShape;\n    var selectElement = element;\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      if (this.circular3D.selectionMode !== 'None' && (this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight)) {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n      }\n      if (elementClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        if (elementClassName.indexOf(this.unselected) !== -1 && className.indexOf('highlight') > 0) {\n          this.circular3D.highlightAnimation(children[i], 700, 0.3);\n        }\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n      if (children[i].id.indexOf('-data-label-text-') !== -1 || children[i].id.indexOf('-connector-') !== -1 || children[i].id.indexOf('-data-label-series-0-shape-') !== -1) {\n        if (this.highlightDataIndexes && this.highlightDataIndexes[0] && point === this.highlightDataIndexes[0].point) {\n          this.removeSvgClass(children[i], this.unselected);\n        }\n        if (this.selectedDataIndexes) {\n          for (var j = 0; j < this.selectedDataIndexes.length; j++) {\n            if (point === this.selectedDataIndexes[j].point) {\n              this.removeSvgClass(children[i], this.unselected);\n            }\n          }\n        }\n      }\n    }\n    if (this.control.circularChartLegend3DModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + point);\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n        }\n        if (selectElement.length > 0) {\n          elementClassName = selectElement[0].getAttribute('class');\n        } else if (selectElement) {\n          elementClassName = selectElement.getAttribute('class') || '';\n        }\n        if (elementClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.unselected);\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          if (elementClassName === '') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Applies selection style to the specified elements based on the provided data index.\n   *\n   * @param {Element[]} elements - The array of elements to which the selection style will be applied.\n   * @param {Index} index - The data index used for selection.\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.applyStyles = function (elements, index) {\n    var circular3DTooltip = this.control.circularChartTooltip3DModule;\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        var opacity = circular3DTooltip && circular3DTooltip.previousPoints.length > 0 && circular3DTooltip.previousPoints[0].point.index !== index.point ? circular3DTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n        element.setAttribute('opacity', opacity.toString());\n        if (element.id.indexOf('-data-label-text-') === -1 && element.id.indexOf('-connector-') === -1 && element.id.indexOf('-data-label-series-0-shape-') === -1) {\n          this.addSvgClass(element, this.getSelectionClass(element.id));\n        }\n        if (this.getSelectionClass(element.id).indexOf('highlight') > 0) {\n          this.circular3D.stopElementAnimation(element);\n        }\n      }\n    }\n    if (this.control.circularChartLegend3DModule && this.control.legendSettings.visible) {\n      var legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n      this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n      this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id));\n    }\n  };\n  /**\n   * Retrieves the selection style class name based on the specified element ID.\n   *\n   * @param {string} id - The identifier used to determine the series and point for generating the selection style.\n   * @returns {string} - The selection style class name.\n   * @private\n   */\n  CircularChartSelection3D.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.series[this.indexFinder(id).series], this.indexFinder(id).point);\n  };\n  /**\n   * Handles the removal of selection style class from the selected point in the circular 3D chart.\n   *\n   * @param {CircularChart3D} chart - The 3D chart instance where the selection needs to be removed.\n   * @param {number} series - The index of the series for which the selection is being removed.\n   * @param {NodeListOf<HTMLElement>} selectedElements - The HTML elements representing the selected items.\n   * @param {string} seriesStyle - The style to be applied to the series after the removal of selection.\n   * @param {boolean} isBlurEffectNeeded - A flag indicating whether a blur effect is needed after the removal of selection.\n   * @param {Index} index - The index representing the specific data point for which selection is being removed (optional).\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n      this.removeStyles(elements);\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, index.point));\n      for (var _i = 0, _a = chart.visibleSeries[0].points; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(chart.visibleSeries[0], value.index);\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_2 = elements; _b < elements_2.length; _b++) {\n            var element = elements_2[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, index.point);\n          }\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n      if (isBlurEffectNeeded) {\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /**\n   * Removes styles associated with the selection from the selected elements.\n   *\n   *\n   * @param {Element[]} elements - An array of chart elements from which selection styles should be removed.\n   * @returns {void}\n   */\n  CircularChartSelection3D.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_3 = elements; _i < elements_3.length; _i++) {\n      var element = elements_3[_i];\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n      }\n    }\n  };\n  /**\n   * Adds or removes the specified index from the provided array of indexes based on the 'add' parameter.\n   *\n   * @param {Index[]} indexes - The array of indexes where the specified index will be added or removed.\n   * @param {Index} index - The index to be added or removed.\n   * @param {boolean} [add=true] - Indicates whether to add or remove the index. Defaults to true (add).\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.addOrRemoveIndex = function (indexes, index, add) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.checkEquals(indexes[i], index)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (add) {\n      indexes.push(index);\n    }\n  };\n  /**\n   * Checks if two indexes are equal in terms of their point and series values.\n   *\n   * @param {Index} first - The first index to be compared.\n   * @param {Index} second - The second index to be compared.\n   * @returns {boolean} - Returns true if the indexes are equal; otherwise, returns false.\n   * @private\n   */\n  CircularChartSelection3D.prototype.checkEquals = function (first, second) {\n    return first.point === second.point && first.series === second.series;\n  };\n  /**\n   * Handles the mouse move event in the context of the circular 3D chart.\n   *\n   * @param {PointerEvent | TouchEvent} event - The pointer or touch event triggering the mouse move action.\n   * @returns {void}\n   * @public\n   */\n  CircularChartSelection3D.prototype.mouseMove = function (event) {\n    var circular3D = this.circular3D;\n    var targetElement = event.target;\n    if (!circular3D.rotateActivate && circular3D.circularChartHighlight3DModule && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n      if (!isNullOrUndefined(targetElement)) {\n        if (event.target.id.indexOf('text') > 1 && event.target.id.indexOf('legend') > -1) {\n          targetElement = getElement(event.target.id.replace('text', 'shape'));\n        }\n        if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n        this.calculateSelectedElements(circular3D, event.target, event.type);\n        if (this.highlightDataIndexes && (targetElement.id.indexOf('_chart_legend_') === -1 || targetElement.id.indexOf('_legend_element') !== -1) && this.highlightDataIndexes.length > 0 && targetElement.id.indexOf('-series-') === -1 && targetElement.id.indexOf('-data-label-') === -1) {\n          this.removeLegendHighlightStyles();\n        }\n        return;\n      }\n    }\n    if (circular3D.selectionMode === 'None') {\n      return;\n    }\n  };\n  /**\n   * Removes the highlighted legend and respective points when the legend is not focused.\n   *\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.removeLegendHighlightStyles = function () {\n    this.circular3D.circularChartHighlight3DModule.highlightDataIndexes = [];\n    var elementCollection;\n    for (var i = 0; i < this.circular3D.visibleSeries[0].points.length; i++) {\n      elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n      if (this.selectedDataIndexes.length === 0) {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n          }\n        }\n        elementCollection = document.getElementsByClassName(this.unselected);\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (this.generateStyle(this.circular3D.visibleSeries[0], i).indexOf('highlight') > -1) {\n              this.circular3D.highlightAnimation(element, 700, 0.3);\n            }\n          }\n        }\n      } else {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            this.addSvgClass(element, this.unselected);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Gets the module name for circular 3D chart selection.\n   *\n   * @returns {string} - The module name.\n   * @public\n   */\n  CircularChartSelection3D.prototype.getModuleName = function () {\n    return 'CircularChartSelection3D';\n  };\n  /**\n   * Destroys the `CircularChartSelection3D` module.\n   *\n   * @returns {void}\n   * @private\n   */\n  CircularChartSelection3D.prototype.destroy = function () {\n    // Destroy method performed here\n    this.removeEventListener();\n  };\n  return CircularChartSelection3D;\n}(BaseSelection);\nexport { CircularChartSelection3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","extend","isNullOrUndefined","getElement","Index","BaseSelection","selectionComplete","CircularChartSelection3D","_super","circular3D","_this","call","renderer","addEventListener","isDestroyed","on","touchMoveEvent","mouseMove","mouseClick","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","selectedDataIndexes","rectPoints","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectionMode","selectDataIndex","concatIndexes","generateStyle","point","index","getElementByIndex","pointElements","elements","document","querySelectorAll","forEach","pointElement","indexFinder","push","getElementById","control","connectorElement","shapeElement","isAlreadySelected","targetElement","eventType","highlightMode","highlightDataIndexes","legendSettings","enableHighlight","previousSelectedElement","isElement","nodeName","parentNode","indexOf","_loop_1","i","this_1","hasAttribute","getAttribute","selectionClass_1","classList","className","removeAttribute","addSvgClass","remove","addOrRemoveIndex","performSelection","length","event","calculateSelectedElements","target","type","ids","split","dataLabel","position","parseInt","isNaN","selection","blurEffect","pointIndex","selectedPointValues","x","dataSource","xName","y","points","seriesIndex","args","name","selectedDataValues","cancel","trigger","selectedElements","isMultiSelect","removeMultiSelectElements","getSelectionClass","removeStyles","applyStyles","redrawSelection","removeSelectedElements","indexes","_i","indexes_1","legendSelection","chart","replace","isPreSelected","seriesStyle","isBlurEffectNeeded","removeSelection","_a","seriesElements","checkSelectionElements","indexes_2","currentIndex","checkEquals","splice","pieId","visibility","checkVisibility","visible","isLegend","children","elementClassName","legendShape","selectElement","highlightAnimation","removeSvgClass","j","circularChartLegend3DModule","circular3DTooltip","circularChartTooltip3DModule","elements_1","opacity","previousPoints","svgTooltip","setAttribute","toString","stopElementAnimation","value","_b","elements_2","elements_3","add","first","second","rotateActivate","circularChartHighlight3DModule","removeLegendHighlightStyles","elementCollection","getElementsByClassName","getModuleName","destroy"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Circular 3D chart selection.\n */\nimport { Browser, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getElement } from '../../common/utils/helper';\nimport { Index } from '../../common/model/base';\nimport { BaseSelection } from '../../common/user-interaction/selection';\nimport { selectionComplete } from '../../common/model/constants';\n/**\n * The `CircularChart3DSelection` module handles the selection for circular 3D chart.\n */\nvar CircularChartSelection3D = /** @class */ (function (_super) {\n    __extends(CircularChartSelection3D, _super);\n    function CircularChartSelection3D(circular3D) {\n        var _this = _super.call(this, circular3D) || this;\n        _this.circular3D = circular3D;\n        _this.renderer = circular3D.renderer;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     *\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.addEventListener = function () {\n        if (this.circular3D.isDestroyed) {\n            return;\n        }\n        //let cancelEvent: string = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.circular3D.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.circular3D.on('click', this.mouseClick, this);\n    };\n    /**\n     * Unbinding events for selection module.\n     *\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.removeEventListener = function () {\n        if (this.circular3D.isDestroyed) {\n            return;\n        }\n        this.circular3D.off(Browser.touchMoveEvent, this.mouseMove);\n        this.circular3D.off('click', this.mouseClick);\n    };\n    /**\n     * Initializes the private variables for selection and deselection.\n     *\n     * @param {CircularChart3D} circular3D - The instance of the circular 3D chart.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.initPrivateVariables = function (circular3D) {\n        this.styleId = circular3D.element.id + '_ej2_chart_selection';\n        this.unselected = circular3D.element.id + '_ej2_deselected';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n    };\n    /**\n     * Invoke selection by creating selection style for rendered chart.\n     *\n     * @param {CircularChart3D} circular3D - The instance of the circular 3D chart.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.invokeSelection = function (circular3D) {\n        this.initPrivateVariables(circular3D);\n        this.series = extend({}, circular3D.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = circular3D.selectionMode;\n        this.selectDataIndex(this.concatIndexes(circular3D.selectedDataIndexes, this.selectedDataIndexes), circular3D);\n    };\n    /**\n     * To get the series selection style class name based on the series and point index.\n     *\n     * @param {CircularChart3DSeriesModel} series - Specifies the series model.\n     * @param {number} point - Specifies the point index.\n     * @returns {string} - Returns the style class name.\n     */\n    CircularChartSelection3D.prototype.generateStyle = function (series, point) {\n        return (this.styleId + '_series_' + series.index + '_point_' + point);\n    };\n    /**\n     * Gets series point elements based on the specified series and point index.\n     *\n     * @param {Index} index - Specifies the index of the series.\n     * @returns {Element[]} - Returns the array of elements.\n     */\n    CircularChartSelection3D.prototype.getElementByIndex = function (index) {\n        var _this = this;\n        var pointElements = [];\n        var elements = document.querySelectorAll('[id*=\"-region-series-' + index.series + '-point-' + index.point + '\"]');\n        elements.forEach(function (pointElement) {\n            if (_this.indexFinder(pointElement.id).point === index.point) {\n                pointElements.push(pointElement);\n            }\n        });\n        var element = document.getElementById(this.control.element.id + '-svg-data-label-text-' + index.point);\n        var connectorElement = document.getElementById(this.control.element.id + '-datalabel-series-0-connector-' + index.point);\n        var shapeElement = document.getElementById(this.control.element.id + '-svg-data-label-series-0-shape-' + index.point);\n        if (element) {\n            pointElements.push(element);\n        }\n        if (connectorElement) {\n            pointElements.push(connectorElement);\n        }\n        if (shapeElement) {\n            pointElements.push(shapeElement);\n        }\n        return pointElements;\n    };\n    /**\n     * Checks whether the specified element is already selected based on the given event type and optional index.\n     *\n     * @param {Element} targetElement - The target element to be checked for selection status.\n     * @param {string} eventType - The type of event triggering the selection check (e.g., 'mouse move').\n     * @param {Index} [index] - The index to narrow down the selection check for elements with multiple occurrences.\n     * @returns {boolean} - Returns true if the element is already selected; otherwise, returns false.\n     * @private\n     */\n    CircularChartSelection3D.prototype.isAlreadySelected = function (targetElement, eventType, index) {\n        if (eventType === 'mousemove') {\n            this.currentMode = this.circular3D.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.circular3D.element.id + '_ej2_chart_highlight';\n        }\n        else if (eventType === 'click' || eventType === 'keyup') {\n            this.currentMode = this.circular3D.selectionMode;\n            this.styleId = this.circular3D.element.id + '_ej2_chart_selection';\n        }\n        if (this.circular3D.highlightMode !== 'None' && this.circular3D.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if (((this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight) && this.previousSelectedElement && this.previousSelectedElement[0])) {\n            var isElement = void 0;\n            var nodeName = targetElement.nodeName;\n            if (targetElement.parentNode) {\n                isElement = ((nodeName === 'path' || nodeName === 'shape') && targetElement.id.indexOf('region') > 1) ? true : false;\n            }\n            var _loop_1 = function (i) {\n                if (this_1.previousSelectedElement[i].hasAttribute('class')) {\n                    if (this_1.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || eventType === 'click' || eventType === 'keyup')) {\n                        var selectionClass_1;\n                        this_1.previousSelectedElement[i].classList.forEach(function (className) {\n                            if (className.indexOf('selection') > -1) {\n                                selectionClass_1 = className;\n                            }\n                        });\n                        this_1.previousSelectedElement[i].removeAttribute('class');\n                        if (selectionClass_1) {\n                            this_1.addSvgClass(this_1.previousSelectedElement[i], selectionClass_1);\n                        }\n                        this_1.previousSelectedElement[i].classList.remove(this_1.styleId + '_series_' + index.series);\n                        this_1.addOrRemoveIndex(this_1.highlightDataIndexes, this_1.indexFinder(this_1.previousSelectedElement[i].id));\n                    }\n                    else if (!isElement && this_1.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this_1.performSelection(this_1.indexFinder(this_1.previousSelectedElement[i].id), this_1.circular3D, this_1.previousSelectedElement[i]);\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < this.previousSelectedElement.length; i++) {\n                _loop_1(i);\n            }\n        }\n        return true;\n    };\n    /**\n     * Handles mouse click events on the specified circular 3D instance instance.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D instance where the mouse click event occurred.\n     * @param {Event} event - The mouse click event triggering the action.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.mouseClick = function (circular3D, event) {\n        this.calculateSelectedElements(circular3D, event.target, event.type);\n    };\n    /**\n     * Calculates and processes selected elements based on the specified circular 3D chart instance, target element, and event type.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance to be used in the selection calculation.\n     * @param {Element} targetElement - The target element involved in the selection calculation.\n     * @param {string} eventType - The type of event triggering the selection calculation (e.g., 'click').\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.calculateSelectedElements = function (circular3D, targetElement, eventType) {\n        if (isNullOrUndefined(targetElement)) {\n            return;\n        }\n        if ((circular3D.selectionMode === 'None' && circular3D.highlightMode === 'None') ||\n            targetElement.id && targetElement.id.indexOf(circular3D.element.id + '-') === -1) {\n            return;\n        }\n        if (targetElement.getAttribute('id').indexOf('_connector_') > -1) {\n            return;\n        }\n        else {\n            this.isAlreadySelected(targetElement, eventType, this.indexFinder(targetElement.id));\n            if (targetElement.id.indexOf('-series-') > -1 || targetElement.id.indexOf('-data-label-') > -1) {\n                this.performSelection(this.indexFinder(targetElement.id), circular3D, targetElement);\n            }\n        }\n    };\n    /**\n     * Finds and returns the index associated with the specified identifier.\n     *\n     * @param {string} id - The identifier used to find the associated index.\n     * @returns {Index} - The index associated with the specified identifier.\n     * @private\n     */\n    CircularChartSelection3D.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('-point-') > -1) {\n            ids = id.split('-series-')[1].split('-point-');\n        }\n        else if (id.indexOf('-border-') > -1) {\n            ids[0] = id.split('-border-')[1];\n        }\n        else if (id.indexOf('data-label-series-0-shape-') > -1 && this.control.series[0].dataLabel.position === 'Inside') {\n            ids[0] = '0';\n            ids[1] = id.split('-shape-')[1];\n        }\n        else if (id.indexOf('-series-') > -1) {\n            ids[0] = id.split('-series-')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = '0';\n        }\n        else if (id.indexOf('_chart_legend_g_') > -1) {\n            ids = id.split('_chart_legend_g_');\n            ids[0] = '0';\n        }\n        else if (id.indexOf('-data-label-') > -1) {\n            ids[0] = '0';\n            ids[1] = id.split('-data-label-text-')[1];\n        }\n        else if (id.indexOf('-connector-') > -1) {\n            ids[0] = '0';\n            ids[1] = id.split('-connector-')[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Performs the selection based on the specified index, circular 3D instance, and optional element.\n     *\n     * @param {Index} index - The index used for selection, including the point information.\n     * @param {CircularChart3D} circular3D - The circular 3D instance used for the selection operation.\n     * @param {Element | undefined} [element] - The target element for selection.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.performSelection = function (index, circular3D, element) {\n        if (!isNaN(index.point) && this.currentMode === 'Point' && element && this.getElementByIndex(index).length > 0) {\n            this.selection(circular3D, index, this.getElementByIndex(index));\n            this.selectionComplete(circular3D, circular3D.series[0]);\n            this.blurEffect(circular3D.element.id, circular3D.visibleSeries);\n        }\n    };\n    /**\n     * Handles the completion of the selection process in the specified circular 3D chart instance and Circular3DSeries.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance where the selection is completed.\n     * @param {CircularChart3DSeries} series - The Circular3DSeries associated with the completed selection.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.selectionComplete = function (circular3D, series) {\n        var pointIndex;\n        var selectedPointValues = [];\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = this.selectedDataIndexes[i].point;\n            if (!isNaN(pointIndex)) {\n                selectedPointValues.push({\n                    x: series.dataSource[pointIndex][series.xName], y: series.points[pointIndex].y,\n                    seriesIndex: this.selectedDataIndexes[i].series, pointIndex: pointIndex\n                });\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        circular3D.trigger(selectionComplete, args);\n    };\n    /**\n     * Handles the selection process in the specified circular 3D instance based on the provided index and selected elements.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance where the selection is being performed.\n     * @param {Index} index - The index used for selection, including point information.\n     * @param {Element[]} selectedElements - The array of elements that have been selected.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.selection = function (circular3D, index, selectedElements) {\n        if (!circular3D.isMultiSelect && this.styleId.indexOf('highlight') === -1 &&\n            circular3D.selectionMode !== 'None') {\n            this.removeMultiSelectElements(circular3D, this.selectedDataIndexes, index);\n        }\n        var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n        if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n            this.removeStyles(selectedElements);\n            if (this.styleId.indexOf('highlight') > 0 && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index);\n            }\n        }\n        else {\n            this.previousSelectedElement = circular3D.highlightMode !== 'None' ? selectedElements : [];\n            if (className.indexOf('selection') < 0) {\n                this.applyStyles(selectedElements, index);\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, true);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, true);\n            }\n        }\n    };\n    /**\n     * Redraws the selection in the specified circular 3D chart instance based on the selected data indexes.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart  instance where the selection is to be redrawn.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.redrawSelection = function (circular3D) {\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(circular3D, this.highlightDataIndexes);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(circular3D, this.selectedDataIndexes);\n        }\n        this.blurEffect(circular3D.element.id, circular3D.visibleSeries);\n        this.selectDataIndex(selectedDataIndexes, circular3D);\n    };\n    /**\n     * Removes the selected elements from the specified circular 3D chart instance based on the given indexes.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D instance from which selected elements will be removed.\n     * @param {Index[]} indexes - The indexes representing the selected elements to be removed.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.removeSelectedElements = function (circular3D, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.removeStyles(this.getElementByIndex(index));\n        }\n        var points = circular3D.visibleSeries[0].points;\n        for (var i = 0; i < points.length; i++) {\n            var index = new Index(0, points[i].index);\n            this.removeStyles(this.getElementByIndex(index).length === 0 ? [document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point)] : this.getElementByIndex(index));\n        }\n    };\n    /**\n     * Handles legend item selection in the specified circular 3D chart based on the target element and event type.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance where legend item selection is being processed.\n     * @param {Element} targetElement - The target element associated with the legend item.\n     * @param {string} eventType - The type of event triggering the legend item selection (e.g., 'mouse move').\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.legendSelection = function (chart, targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('marker') > 1) {\n                targetElement = getElement(targetElement.id.replace('_marker', ''));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.circular3D.highlightMode;\n        }\n        else if (eventType === 'click') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n            }\n        }\n        var index = this.indexFinder(targetElement.id);\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType, index);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[index.series], index.point);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, index.series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries[0].points; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== index.point && (!chart.isMultiSelect || seriesStyle.indexOf('highlight') > 0)) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[index.series], element.index);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, index.series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n                    }\n                }\n                var seriesElements = [];\n                seriesElements = this.getElementByIndex(index);\n                if (seriesElements.length > 0) {\n                    this.checkSelectionElements(seriesElements, seriesStyle, false, true, index.point);\n                    this.selection(chart, index, seriesElements);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n            }\n        }\n    };\n    /**\n     * Selects elements based on the specified data indexes in the given circular 3D chart instance.\n     *\n     * @param {Index[]} indexes - The data indexes used for element selection.\n     * @param {CircularChart3D} circular3D - The circular 3D instance where elements are to be selected.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.selectDataIndex = function (indexes, circular3D) {\n        var element;\n        for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {\n            var index = indexes_2[_i];\n            element = this.getElementByIndex(index)[0];\n            if (element) {\n                this.performSelection(index, circular3D, element);\n            }\n        }\n    };\n    /**\n     * Removes selection styles for elements in a multi-selection process based on the specified data indexes and current index.\n     *\n     * @param {CircularChart3D} circular3D - The circular 3D chart instance from which selection styles will be removed.\n     * @param {Index[]} index - The data indexes representing the elements to remove selection styles from.\n     * @param {Index} currentIndex - The current index used as a reference during the multi-selection process.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.removeMultiSelectElements = function (circular3D, index, currentIndex) {\n        for (var i = 0; i < index.length; i++) {\n            if (!this.checkEquals(index[i], currentIndex)) {\n                this.removeStyles(this.getElementByIndex(index[i]));\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Applies the opacity effect to circular 3D chart series elements based on the specified pieId and visible series.\n     *\n     * @param {string} pieId - The identifier associated with the circular 3D chart series.\n     * @param {CircularChart3DSeries[]} visibleSeries - The array of visible series in the circular 3D chart.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.blurEffect = function (pieId, visibleSeries) {\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, _a = visibleSeries[0].points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            var pointElements = [];\n            if (point.visible) {\n                pointElements = this.getElementByIndex({ series: 0, point: point.index });\n                this.checkSelectionElements(pointElements, this.generateStyle(visibleSeries[0], point.index), visibility, true, point.index);\n            }\n        }\n    };\n    /**\n     * Checks for selection elements based on the specified style class name, visibility, and other parameters.\n     *\n     * @param {Element[] | Element} element - The element or array of elements to be checked for selection.\n     * @param {string} className - The style class name used for identifying selection elements.\n     * @param {boolean} visibility - The visibility status of the selection elements.\n     * @param {boolean} [isLegend=true] - Flag indicating whether the elements belong to a legend.\n     * @param {number} [point=0] - The point value associated with the selection elements.\n     * @returns {void}\n     * @public\n     */\n    CircularChartSelection3D.prototype.checkSelectionElements = function (element, className, visibility, isLegend, point) {\n        if (isLegend === void 0) { isLegend = true; }\n        if (point === void 0) { point = 0; }\n        var children = element;\n        if (this.circular3D.selectionMode !== 'None' && (this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight)) {\n            children = element;\n        }\n        var elementClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            if (this.circular3D.selectionMode !== 'None' && (this.circular3D.highlightMode !== 'None' || this.circular3D.legendSettings.enableHighlight)) {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                if (elementClassName.indexOf(this.unselected) !== -1 && className.indexOf('highlight') > 0) {\n                    this.circular3D.highlightAnimation(children[i], 700, 0.3);\n                }\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('-data-label-text-') !== -1 || children[i].id.indexOf('-connector-') !== -1 || children[i].id.indexOf('-data-label-series-0-shape-') !== -1) {\n                if (this.highlightDataIndexes && this.highlightDataIndexes[0] && point === this.highlightDataIndexes[0].point) {\n                    this.removeSvgClass(children[i], this.unselected);\n                }\n                if (this.selectedDataIndexes) {\n                    for (var j = 0; j < this.selectedDataIndexes.length; j++) {\n                        if (point === this.selectedDataIndexes[j].point) {\n                            this.removeSvgClass(children[i], this.unselected);\n                        }\n                    }\n                }\n            }\n        }\n        if (this.control.circularChartLegend3DModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + point);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                }\n                if (selectElement.length > 0) {\n                    elementClassName = selectElement[0].getAttribute('class');\n                }\n                else if (selectElement) {\n                    elementClassName = selectElement.getAttribute('class') || '';\n                }\n                if (elementClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, this.unselected);\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (elementClassName === '') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Applies selection style to the specified elements based on the provided data index.\n     *\n     * @param {Element[]} elements - The array of elements to which the selection style will be applied.\n     * @param {Index} index - The data index used for selection.\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.applyStyles = function (elements, index) {\n        var circular3DTooltip = this.control.circularChartTooltip3DModule;\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                var opacity = circular3DTooltip && (circular3DTooltip.previousPoints.length > 0 &&\n                    circular3DTooltip.previousPoints[0].point.index !== index.point) ?\n                    circular3DTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n                element.setAttribute('opacity', opacity.toString());\n                if (element.id.indexOf('-data-label-text-') === -1 && element.id.indexOf('-connector-') === -1 && element.id.indexOf('-data-label-series-0-shape-') === -1) {\n                    this.addSvgClass(element, this.getSelectionClass(element.id));\n                }\n                if (this.getSelectionClass(element.id).indexOf('highlight') > 0) {\n                    this.circular3D.stopElementAnimation(element);\n                }\n            }\n        }\n        if (this.control.circularChartLegend3DModule && this.control.legendSettings.visible) {\n            var legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n            this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n            this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id));\n        }\n    };\n    /**\n     * Retrieves the selection style class name based on the specified element ID.\n     *\n     * @param {string} id - The identifier used to determine the series and point for generating the selection style.\n     * @returns {string} - The selection style class name.\n     * @private\n     */\n    CircularChartSelection3D.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series], this.indexFinder(id).point);\n    };\n    /**\n     * Handles the removal of selection style class from the selected point in the circular 3D chart.\n     *\n     * @param {CircularChart3D} chart - The 3D chart instance where the selection needs to be removed.\n     * @param {number} series - The index of the series for which the selection is being removed.\n     * @param {NodeListOf<HTMLElement>} selectedElements - The HTML elements representing the selected items.\n     * @param {string} seriesStyle - The style to be applied to the series after the removal of selection.\n     * @param {boolean} isBlurEffectNeeded - A flag indicating whether a blur effect is needed after the removal of selection.\n     * @param {Index} index - The index representing the specific data point for which selection is being removed (optional).\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, index.point));\n            for (var _i = 0, _a = chart.visibleSeries[0].points; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(chart.visibleSeries[0], value.index);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_2 = elements; _b < elements_2.length; _b++) {\n                        var element = elements_2[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, index.point);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /**\n     * Removes styles associated with the selection from the selected elements.\n     *\n     *\n     * @param {Element[]} elements - An array of chart elements from which selection styles should be removed.\n     * @returns {void}\n     */\n    CircularChartSelection3D.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_3 = elements; _i < elements_3.length; _i++) {\n            var element = elements_3[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n            }\n        }\n    };\n    /**\n     * Adds or removes the specified index from the provided array of indexes based on the 'add' parameter.\n     *\n     * @param {Index[]} indexes - The array of indexes where the specified index will be added or removed.\n     * @param {Index} index - The index to be added or removed.\n     * @param {boolean} [add=true] - Indicates whether to add or remove the index. Defaults to true (add).\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.addOrRemoveIndex = function (indexes, index, add) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.checkEquals(indexes[i], index)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (add) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * Checks if two indexes are equal in terms of their point and series values.\n     *\n     * @param {Index} first - The first index to be compared.\n     * @param {Index} second - The second index to be compared.\n     * @returns {boolean} - Returns true if the indexes are equal; otherwise, returns false.\n     * @private\n     */\n    CircularChartSelection3D.prototype.checkEquals = function (first, second) {\n        return ((first.point === second.point) && (first.series === second.series));\n    };\n    /**\n     * Handles the mouse move event in the context of the circular 3D chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The pointer or touch event triggering the mouse move action.\n     * @returns {void}\n     * @public\n     */\n    CircularChartSelection3D.prototype.mouseMove = function (event) {\n        var circular3D = this.circular3D;\n        var targetElement = event.target;\n        if (!circular3D.rotateActivate && circular3D.circularChartHighlight3DModule && (circular3D.highlightMode !== 'None' || circular3D.legendSettings.enableHighlight)) {\n            if (!isNullOrUndefined(targetElement)) {\n                if (event.target.id.indexOf('text') > 1 && event.target.id.indexOf('legend') > -1) {\n                    targetElement = getElement(event.target.id.replace('text', 'shape'));\n                }\n                if ((targetElement).hasAttribute('class') && ((targetElement).getAttribute('class').indexOf('highlight') > -1 ||\n                    targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(circular3D, event.target, event.type);\n                if (this.highlightDataIndexes && (targetElement.id.indexOf('_chart_legend_') === -1 || targetElement.id.indexOf('_legend_element') !== -1) &&\n                    this.highlightDataIndexes.length > 0 && targetElement.id.indexOf('-series-') === -1 &&\n                    targetElement.id.indexOf('-data-label-') === -1) {\n                    this.removeLegendHighlightStyles();\n                }\n                return;\n            }\n        }\n        if (circular3D.selectionMode === 'None') {\n            return;\n        }\n    };\n    /**\n     * Removes the highlighted legend and respective points when the legend is not focused.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.removeLegendHighlightStyles = function () {\n        this.circular3D.circularChartHighlight3DModule.highlightDataIndexes = [];\n        var elementCollection;\n        for (var i = 0; i < this.circular3D.visibleSeries[0].points.length; i++) {\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n            if (this.selectedDataIndexes.length === 0) {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                    }\n                }\n                elementCollection = document.getElementsByClassName(this.unselected);\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (this.generateStyle(this.circular3D.visibleSeries[0], i).indexOf('highlight') > -1) {\n                            this.circular3D.highlightAnimation(element, 700, 0.3);\n                        }\n                    }\n                }\n            }\n            else {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.circular3D.visibleSeries[0], i));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        this.addSvgClass(element, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Gets the module name for circular 3D chart selection.\n     *\n     * @returns {string} - The module name.\n     * @public\n     */\n    CircularChartSelection3D.prototype.getModuleName = function () {\n        return 'CircularChartSelection3D';\n    };\n    /**\n     * Destroys the `CircularChartSelection3D` module.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartSelection3D.prototype.destroy = function () {\n        // Destroy method performed here\n        this.removeEventListener();\n    };\n    return CircularChartSelection3D;\n}(BaseSelection));\nexport { CircularChartSelection3D };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJ;AACA;AACA;AACA,SAASI,OAAO,EAAEC,MAAM,EAAEC,iBAAiB,QAAQ,sBAAsB;AACzE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE;AACA;AACA;AACA,IAAIC,wBAAwB,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC5DtB,SAAS,CAACqB,wBAAwB,EAAEC,MAAM,CAAC;EAC3C,SAASD,wBAAwBA,CAACE,UAAU,EAAE;IAC1C,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAEF,UAAU,CAAC,IAAI,IAAI;IACjDC,KAAK,CAACD,UAAU,GAAGA,UAAU;IAC7BC,KAAK,CAACE,QAAQ,GAAGH,UAAU,CAACG,QAAQ;IACpCF,KAAK,CAACG,gBAAgB,CAAC,CAAC;IACxB,OAAOH,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIH,wBAAwB,CAACT,SAAS,CAACe,gBAAgB,GAAG,YAAY;IAC9D,IAAI,IAAI,CAACJ,UAAU,CAACK,WAAW,EAAE;MAC7B;IACJ;IACA;IACA,IAAI,CAACL,UAAU,CAACM,EAAE,CAACf,OAAO,CAACgB,cAAc,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;IAChE,IAAI,CAACR,UAAU,CAACM,EAAE,CAAC,OAAO,EAAE,IAAI,CAACG,UAAU,EAAE,IAAI,CAAC;EACtD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIX,wBAAwB,CAACT,SAAS,CAACqB,mBAAmB,GAAG,YAAY;IACjE,IAAI,IAAI,CAACV,UAAU,CAACK,WAAW,EAAE;MAC7B;IACJ;IACA,IAAI,CAACL,UAAU,CAACW,GAAG,CAACpB,OAAO,CAACgB,cAAc,EAAE,IAAI,CAACC,SAAS,CAAC;IAC3D,IAAI,CAACR,UAAU,CAACW,GAAG,CAAC,OAAO,EAAE,IAAI,CAACF,UAAU,CAAC;EACjD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIX,wBAAwB,CAACT,SAAS,CAACuB,oBAAoB,GAAG,UAAUZ,UAAU,EAAE;IAC5E,IAAI,CAACa,OAAO,GAAGb,UAAU,CAACc,OAAO,CAACC,EAAE,GAAG,sBAAsB;IAC7D,IAAI,CAACC,UAAU,GAAGhB,UAAU,CAACc,OAAO,CAACC,EAAE,GAAG,iBAAiB;IAC3D,IAAI,CAACE,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,UAAU,GAAG,IAAI;EAC1B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIpB,wBAAwB,CAACT,SAAS,CAAC8B,eAAe,GAAG,UAAUnB,UAAU,EAAE;IACvE,IAAI,CAACY,oBAAoB,CAACZ,UAAU,CAAC;IACrC,IAAI,CAACoB,MAAM,GAAG5B,MAAM,CAAC,CAAC,CAAC,EAAEQ,UAAU,CAACqB,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9D,IAAI,CAACC,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,WAAW,GAAGvB,UAAU,CAACwB,aAAa;IAC3C,IAAI,CAACC,eAAe,CAAC,IAAI,CAACC,aAAa,CAAC1B,UAAU,CAACiB,mBAAmB,EAAE,IAAI,CAACA,mBAAmB,CAAC,EAAEjB,UAAU,CAAC;EAClH,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIF,wBAAwB,CAACT,SAAS,CAACsC,aAAa,GAAG,UAAUP,MAAM,EAAEQ,KAAK,EAAE;IACxE,OAAQ,IAAI,CAACf,OAAO,GAAG,UAAU,GAAGO,MAAM,CAACS,KAAK,GAAG,SAAS,GAAGD,KAAK;EACxE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI9B,wBAAwB,CAACT,SAAS,CAACyC,iBAAiB,GAAG,UAAUD,KAAK,EAAE;IACpE,IAAI5B,KAAK,GAAG,IAAI;IAChB,IAAI8B,aAAa,GAAG,EAAE;IACtB,IAAIC,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,uBAAuB,GAAGL,KAAK,CAACT,MAAM,GAAG,SAAS,GAAGS,KAAK,CAACD,KAAK,GAAG,IAAI,CAAC;IACjHI,QAAQ,CAACG,OAAO,CAAC,UAAUC,YAAY,EAAE;MACrC,IAAInC,KAAK,CAACoC,WAAW,CAACD,YAAY,CAACrB,EAAE,CAAC,CAACa,KAAK,KAAKC,KAAK,CAACD,KAAK,EAAE;QAC1DG,aAAa,CAACO,IAAI,CAACF,YAAY,CAAC;MACpC;IACJ,CAAC,CAAC;IACF,IAAItB,OAAO,GAAGmB,QAAQ,CAACM,cAAc,CAAC,IAAI,CAACC,OAAO,CAAC1B,OAAO,CAACC,EAAE,GAAG,uBAAuB,GAAGc,KAAK,CAACD,KAAK,CAAC;IACtG,IAAIa,gBAAgB,GAAGR,QAAQ,CAACM,cAAc,CAAC,IAAI,CAACC,OAAO,CAAC1B,OAAO,CAACC,EAAE,GAAG,gCAAgC,GAAGc,KAAK,CAACD,KAAK,CAAC;IACxH,IAAIc,YAAY,GAAGT,QAAQ,CAACM,cAAc,CAAC,IAAI,CAACC,OAAO,CAAC1B,OAAO,CAACC,EAAE,GAAG,iCAAiC,GAAGc,KAAK,CAACD,KAAK,CAAC;IACrH,IAAId,OAAO,EAAE;MACTiB,aAAa,CAACO,IAAI,CAACxB,OAAO,CAAC;IAC/B;IACA,IAAI2B,gBAAgB,EAAE;MAClBV,aAAa,CAACO,IAAI,CAACG,gBAAgB,CAAC;IACxC;IACA,IAAIC,YAAY,EAAE;MACdX,aAAa,CAACO,IAAI,CAACI,YAAY,CAAC;IACpC;IACA,OAAOX,aAAa;EACxB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjC,wBAAwB,CAACT,SAAS,CAACsD,iBAAiB,GAAG,UAAUC,aAAa,EAAEC,SAAS,EAAEhB,KAAK,EAAE;IAC9F,IAAIgB,SAAS,KAAK,WAAW,EAAE;MAC3B,IAAI,CAACtB,WAAW,GAAG,IAAI,CAACvB,UAAU,CAAC8C,aAAa;MAChD,IAAI,CAACC,oBAAoB,GAAG,EAAE;MAC9B,IAAI,CAAClC,OAAO,GAAG,IAAI,CAACb,UAAU,CAACc,OAAO,CAACC,EAAE,GAAG,sBAAsB;IACtE,CAAC,MACI,IAAI8B,SAAS,KAAK,OAAO,IAAIA,SAAS,KAAK,OAAO,EAAE;MACrD,IAAI,CAACtB,WAAW,GAAG,IAAI,CAACvB,UAAU,CAACwB,aAAa;MAChD,IAAI,CAACX,OAAO,GAAG,IAAI,CAACb,UAAU,CAACc,OAAO,CAACC,EAAE,GAAG,sBAAsB;IACtE;IACA,IAAI,IAAI,CAACf,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI,IAAI,CAAC9C,UAAU,CAACwB,aAAa,KAAK,MAAM,EAAE;MACtF,IAAIqB,SAAS,KAAK,OAAO,EAAE;QACvB,OAAO,KAAK;MAChB;IACJ;IACA,IAAK,CAAC,IAAI,CAAC7C,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI,IAAI,CAAC9C,UAAU,CAACgD,cAAc,CAACC,eAAe,KAAK,IAAI,CAACC,uBAAuB,IAAI,IAAI,CAACA,uBAAuB,CAAC,CAAC,CAAC,EAAG;MACnK,IAAIC,SAAS,GAAG,KAAK,CAAC;MACtB,IAAIC,QAAQ,GAAGR,aAAa,CAACQ,QAAQ;MACrC,IAAIR,aAAa,CAACS,UAAU,EAAE;QAC1BF,SAAS,GAAI,CAACC,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,KAAKR,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAI,IAAI,GAAG,KAAK;MACxH;MACA,IAAIC,OAAO,GAAG,SAAAA,CAAUC,CAAC,EAAE;QACvB,IAAIC,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACE,YAAY,CAAC,OAAO,CAAC,EAAE;UACzD,IAAID,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACG,YAAY,CAAC,OAAO,CAAC,CAACL,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,KAChFH,SAAS,IAAIN,SAAS,KAAK,OAAO,IAAIA,SAAS,KAAK,OAAO,CAAC,EAAE;YAC/D,IAAIe,gBAAgB;YACpBH,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACK,SAAS,CAAC1B,OAAO,CAAC,UAAU2B,SAAS,EAAE;cACrE,IAAIA,SAAS,CAACR,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrCM,gBAAgB,GAAGE,SAAS;cAChC;YACJ,CAAC,CAAC;YACFL,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACO,eAAe,CAAC,OAAO,CAAC;YAC1D,IAAIH,gBAAgB,EAAE;cAClBH,MAAM,CAACO,WAAW,CAACP,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,EAAEI,gBAAgB,CAAC;YAC3E;YACAH,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACK,SAAS,CAACI,MAAM,CAACR,MAAM,CAAC5C,OAAO,GAAG,UAAU,GAAGgB,KAAK,CAACT,MAAM,CAAC;YAC9FqC,MAAM,CAACS,gBAAgB,CAACT,MAAM,CAACV,oBAAoB,EAAEU,MAAM,CAACpB,WAAW,CAACoB,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACzC,EAAE,CAAC,CAAC;UAClH,CAAC,MACI,IAAI,CAACoC,SAAS,IAAIM,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACG,YAAY,CAAC,OAAO,CAAC,CAACL,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;YACtGG,MAAM,CAACU,gBAAgB,CAACV,MAAM,CAACpB,WAAW,CAACoB,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAACzC,EAAE,CAAC,EAAE0C,MAAM,CAACzD,UAAU,EAAEyD,MAAM,CAACP,uBAAuB,CAACM,CAAC,CAAC,CAAC;UAC3I;QACJ;MACJ,CAAC;MACD,IAAIC,MAAM,GAAG,IAAI;MACjB,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,uBAAuB,CAACkB,MAAM,EAAEZ,CAAC,EAAE,EAAE;QAC1DD,OAAO,CAACC,CAAC,CAAC;MACd;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI1D,wBAAwB,CAACT,SAAS,CAACoB,UAAU,GAAG,UAAUT,UAAU,EAAEqE,KAAK,EAAE;IACzE,IAAI,CAACC,yBAAyB,CAACtE,UAAU,EAAEqE,KAAK,CAACE,MAAM,EAAEF,KAAK,CAACG,IAAI,CAAC;EACxE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1E,wBAAwB,CAACT,SAAS,CAACiF,yBAAyB,GAAG,UAAUtE,UAAU,EAAE4C,aAAa,EAAEC,SAAS,EAAE;IAC3G,IAAIpD,iBAAiB,CAACmD,aAAa,CAAC,EAAE;MAClC;IACJ;IACA,IAAK5C,UAAU,CAACwB,aAAa,KAAK,MAAM,IAAIxB,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAC3EF,aAAa,CAAC7B,EAAE,IAAI6B,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAACtD,UAAU,CAACc,OAAO,CAACC,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAClF;IACJ;IACA,IAAI6B,aAAa,CAACe,YAAY,CAAC,IAAI,CAAC,CAACL,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;MAC9D;IACJ,CAAC,MACI;MACD,IAAI,CAACX,iBAAiB,CAACC,aAAa,EAAEC,SAAS,EAAE,IAAI,CAACR,WAAW,CAACO,aAAa,CAAC7B,EAAE,CAAC,CAAC;MACpF,IAAI6B,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAIV,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE;QAC5F,IAAI,CAACa,gBAAgB,CAAC,IAAI,CAAC9B,WAAW,CAACO,aAAa,CAAC7B,EAAE,CAAC,EAAEf,UAAU,EAAE4C,aAAa,CAAC;MACxF;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI9C,wBAAwB,CAACT,SAAS,CAACgD,WAAW,GAAG,UAAUtB,EAAE,EAAE;IAC3D,IAAI0D,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;IACxB,IAAI1D,EAAE,CAACuC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;MAC5BmB,GAAG,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,SAAS,CAAC;IAClD,CAAC,MACI,IAAI3D,EAAE,CAACuC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;MAClCmB,GAAG,CAAC,CAAC,CAAC,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,MACI,IAAI3D,EAAE,CAACuC,OAAO,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAACd,OAAO,CAACpB,MAAM,CAAC,CAAC,CAAC,CAACuD,SAAS,CAACC,QAAQ,KAAK,QAAQ,EAAE;MAC9GH,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;MACZA,GAAG,CAAC,CAAC,CAAC,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,MACI,IAAI3D,EAAE,CAACuC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;MAClCmB,GAAG,CAAC,CAAC,CAAC,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,MACI,IAAI3D,EAAE,CAACuC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,EAAE;MAC9CmB,GAAG,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,sBAAsB,CAAC;MACtCD,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;IAChB,CAAC,MACI,IAAI1D,EAAE,CAACuC,OAAO,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,EAAE;MAC1CmB,GAAG,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,kBAAkB,CAAC;MAClCD,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;IAChB,CAAC,MACI,IAAI1D,EAAE,CAACuC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE;MACtCmB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;MACZA,GAAG,CAAC,CAAC,CAAC,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,MACI,IAAI3D,EAAE,CAACuC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;MACrCmB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;MACZA,GAAG,CAAC,CAAC,CAAC,GAAG1D,EAAE,CAAC2D,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACvC;IACA,OAAO,IAAI/E,KAAK,CAACkF,QAAQ,CAACJ,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEI,QAAQ,CAACJ,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAChE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI3E,wBAAwB,CAACT,SAAS,CAAC8E,gBAAgB,GAAG,UAAUtC,KAAK,EAAE7B,UAAU,EAAEc,OAAO,EAAE;IACxF,IAAI,CAACgE,KAAK,CAACjD,KAAK,CAACD,KAAK,CAAC,IAAI,IAAI,CAACL,WAAW,KAAK,OAAO,IAAIT,OAAO,IAAI,IAAI,CAACgB,iBAAiB,CAACD,KAAK,CAAC,CAACuC,MAAM,GAAG,CAAC,EAAE;MAC5G,IAAI,CAACW,SAAS,CAAC/E,UAAU,EAAE6B,KAAK,EAAE,IAAI,CAACC,iBAAiB,CAACD,KAAK,CAAC,CAAC;MAChE,IAAI,CAAChC,iBAAiB,CAACG,UAAU,EAAEA,UAAU,CAACoB,MAAM,CAAC,CAAC,CAAC,CAAC;MACxD,IAAI,CAAC4D,UAAU,CAAChF,UAAU,CAACc,OAAO,CAACC,EAAE,EAAEf,UAAU,CAACqB,aAAa,CAAC;IACpE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvB,wBAAwB,CAACT,SAAS,CAACQ,iBAAiB,GAAG,UAAUG,UAAU,EAAEoB,MAAM,EAAE;IACjF,IAAI6D,UAAU;IACd,IAAIC,mBAAmB,GAAG,EAAE;IAC5B,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACvC,mBAAmB,CAACmD,MAAM,EAAEZ,CAAC,EAAE,EAAE;MACtDyB,UAAU,GAAG,IAAI,CAAChE,mBAAmB,CAACuC,CAAC,CAAC,CAAC5B,KAAK;MAC9C,IAAI,CAACkD,KAAK,CAACG,UAAU,CAAC,EAAE;QACpBC,mBAAmB,CAAC5C,IAAI,CAAC;UACrB6C,CAAC,EAAE/D,MAAM,CAACgE,UAAU,CAACH,UAAU,CAAC,CAAC7D,MAAM,CAACiE,KAAK,CAAC;UAAEC,CAAC,EAAElE,MAAM,CAACmE,MAAM,CAACN,UAAU,CAAC,CAACK,CAAC;UAC9EE,WAAW,EAAE,IAAI,CAACvE,mBAAmB,CAACuC,CAAC,CAAC,CAACpC,MAAM;UAAE6D,UAAU,EAAEA;QACjE,CAAC,CAAC;MACN;IACJ;IACA,IAAIQ,IAAI,GAAG;MACPC,IAAI,EAAE7F,iBAAiB;MACvB8F,kBAAkB,EAAET,mBAAmB;MACvCU,MAAM,EAAE;IACZ,CAAC;IACD5F,UAAU,CAAC6F,OAAO,CAAChG,iBAAiB,EAAE4F,IAAI,CAAC;EAC/C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI3F,wBAAwB,CAACT,SAAS,CAAC0F,SAAS,GAAG,UAAU/E,UAAU,EAAE6B,KAAK,EAAEiE,gBAAgB,EAAE;IAC1F,IAAI,CAAC9F,UAAU,CAAC+F,aAAa,IAAI,IAAI,CAAClF,OAAO,CAACyC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IACrEtD,UAAU,CAACwB,aAAa,KAAK,MAAM,EAAE;MACrC,IAAI,CAACwE,yBAAyB,CAAChG,UAAU,EAAE,IAAI,CAACiB,mBAAmB,EAAEY,KAAK,CAAC;IAC/E;IACA,IAAIiC,SAAS,GAAGgC,gBAAgB,CAAC,CAAC,CAAC,KAAKA,gBAAgB,CAAC,CAAC,CAAC,CAACnC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACxF,IAAImC,gBAAgB,CAAC,CAAC,CAAC,IAAIhC,SAAS,CAACR,OAAO,CAAC,IAAI,CAAC2C,iBAAiB,CAACH,gBAAgB,CAAC,CAAC,CAAC,CAAC/E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;MAC/F,IAAI,CAACmF,YAAY,CAACJ,gBAAgB,CAAC;MACnC,IAAI,IAAI,CAACjF,OAAO,CAACyC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAKtD,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI9C,UAAU,CAACgD,cAAc,CAACC,eAAe,CAAC,EAAE;QAC7H,IAAI,CAACiB,gBAAgB,CAAC,IAAI,CAACnB,oBAAoB,EAAElB,KAAK,CAAC;MAC3D,CAAC,MACI;QACD,IAAI,CAACqC,gBAAgB,CAAC,IAAI,CAACjD,mBAAmB,EAAEY,KAAK,CAAC;MAC1D;IACJ,CAAC,MACI;MACD,IAAI,CAACqB,uBAAuB,GAAGlD,UAAU,CAAC8C,aAAa,KAAK,MAAM,GAAGgD,gBAAgB,GAAG,EAAE;MAC1F,IAAIhC,SAAS,CAACR,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;QACpC,IAAI,CAAC6C,WAAW,CAACL,gBAAgB,EAAEjE,KAAK,CAAC;MAC7C;MACA,IAAI,IAAI,CAAChB,OAAO,CAACyC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAKtD,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI9C,UAAU,CAACgD,cAAc,CAACC,eAAe,CAAC,EAAE;QAC7H,IAAI,CAACiB,gBAAgB,CAAC,IAAI,CAACnB,oBAAoB,EAAElB,KAAK,EAAE,IAAI,CAAC;MACjE,CAAC,MACI;QACD,IAAI,CAACqC,gBAAgB,CAAC,IAAI,CAACjD,mBAAmB,EAAEY,KAAK,EAAE,IAAI,CAAC;MAChE;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI/B,wBAAwB,CAACT,SAAS,CAAC+G,eAAe,GAAG,UAAUpG,UAAU,EAAE;IACvE,IAAIiB,mBAAmB,GAAGzB,MAAM,CAAC,EAAE,EAAE,IAAI,CAACyB,mBAAmB,EAAE,IAAI,EAAE,IAAI,CAAC;IAC1E,IAAI8B,oBAAoB,GAAGvD,MAAM,CAAC,EAAE,EAAE,IAAI,CAACuD,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5E,IAAI,IAAI,CAAClC,OAAO,CAACyC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAIP,oBAAoB,CAACqB,MAAM,GAAG,CAAC,EAAE;MAC1E,IAAI,CAACiC,sBAAsB,CAACrG,UAAU,EAAE,IAAI,CAAC+C,oBAAoB,CAAC;MAClE9B,mBAAmB,GAAG8B,oBAAoB;IAC9C,CAAC,MACI;MACD,IAAI,CAACsD,sBAAsB,CAACrG,UAAU,EAAE,IAAI,CAACiB,mBAAmB,CAAC;IACrE;IACA,IAAI,CAAC+D,UAAU,CAAChF,UAAU,CAACc,OAAO,CAACC,EAAE,EAAEf,UAAU,CAACqB,aAAa,CAAC;IAChE,IAAI,CAACI,eAAe,CAACR,mBAAmB,EAAEjB,UAAU,CAAC;EACzD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,wBAAwB,CAACT,SAAS,CAACgH,sBAAsB,GAAG,UAAUrG,UAAU,EAAEsG,OAAO,EAAE;IACvF,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAGF,OAAO,EAAEC,EAAE,GAAGC,SAAS,CAACpC,MAAM,EAAEmC,EAAE,EAAE,EAAE;MAC/D,IAAI1E,KAAK,GAAG2E,SAAS,CAACD,EAAE,CAAC;MACzB,IAAI,CAACL,YAAY,CAAC,IAAI,CAACpE,iBAAiB,CAACD,KAAK,CAAC,CAAC;IACpD;IACA,IAAI0D,MAAM,GAAGvF,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC,CAACkE,MAAM;IAC/C,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACnB,MAAM,EAAEZ,CAAC,EAAE,EAAE;MACpC,IAAI3B,KAAK,GAAG,IAAIlC,KAAK,CAAC,CAAC,EAAE4F,MAAM,CAAC/B,CAAC,CAAC,CAAC3B,KAAK,CAAC;MACzC,IAAI,CAACqE,YAAY,CAAC,IAAI,CAACpE,iBAAiB,CAACD,KAAK,CAAC,CAACuC,MAAM,KAAK,CAAC,GAAG,CAACnC,QAAQ,CAACM,cAAc,CAAC,IAAI,CAACC,OAAO,CAAC1B,OAAO,CAACC,EAAE,GAAG,sBAAsB,GAAGc,KAAK,CAACD,KAAK,CAAC,CAAC,GAAG,IAAI,CAACE,iBAAiB,CAACD,KAAK,CAAC,CAAC;IAC7L;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI/B,wBAAwB,CAACT,SAAS,CAACoH,eAAe,GAAG,UAAUC,KAAK,EAAE9D,aAAa,EAAEC,SAAS,EAAE;IAC5F,IAAIA,SAAS,KAAK,WAAW,EAAE;MAC3B,IAAID,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;QACtCV,aAAa,GAAGlD,UAAU,CAACkD,aAAa,CAAC7B,EAAE,CAAC4F,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;MACzE;MACA,IAAI/D,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACxCV,aAAa,GAAGlD,UAAU,CAACkD,aAAa,CAAC7B,EAAE,CAAC4F,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;MACvE;MACA,IAAI/D,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACnCV,aAAa,GAAGlD,UAAU,CAACkD,aAAa,CAAC7B,EAAE,CAAC4F,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;MAC1E;MACA,IAAI/D,aAAa,CAACc,YAAY,CAAC,OAAO,CAAC,KAAKd,aAAa,CAACe,YAAY,CAAC,OAAO,CAAC,CAACL,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IACrGV,aAAa,CAACe,YAAY,CAAC,OAAO,CAAC,CAACL,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAChE;MACJ;MACA,IAAI,CAAC/B,WAAW,GAAG,IAAI,CAACvB,UAAU,CAAC8C,aAAa;IACpD,CAAC,MACI,IAAID,SAAS,KAAK,OAAO,EAAE;MAC5B,IAAID,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;QACtCV,aAAa,GAAGlD,UAAU,CAACkD,aAAa,CAAC7B,EAAE,CAAC4F,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;MACzE;MACA,IAAI/D,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACnCV,aAAa,GAAGlD,UAAU,CAACkD,aAAa,CAAC7B,EAAE,CAAC4F,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;MAC1E;IACJ;IACA,IAAI9E,KAAK,GAAG,IAAI,CAACQ,WAAW,CAACO,aAAa,CAAC7B,EAAE,CAAC;IAC9C,IAAI6F,aAAa,GAAG,IAAI,CAACjE,iBAAiB,CAACC,aAAa,EAAEC,SAAS,EAAEhB,KAAK,CAAC;IAC3E,IAAI+E,aAAa,EAAE;MACf,IAAIC,WAAW,GAAG,IAAI,CAAClF,aAAa,CAAC+E,KAAK,CAACrF,aAAa,CAACQ,KAAK,CAACT,MAAM,CAAC,EAAES,KAAK,CAACD,KAAK,CAAC;MACpF,IAAIkE,gBAAgB,GAAI7D,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAG2E,WAAW,CAAE;MACrE,IAAIC,kBAAkB,GAAG,IAAI;MAC7B,IAAIhB,gBAAgB,CAAC1B,MAAM,GAAG,CAAC,EAAE;QAC7B,IAAI,CAAC2C,eAAe,CAACL,KAAK,EAAE7E,KAAK,CAACT,MAAM,EAAE0E,gBAAgB,EAAEe,WAAW,EAAEC,kBAAkB,EAAEjF,KAAK,CAAC;MACvG,CAAC,MACI;QACD,KAAK,IAAI0E,EAAE,GAAG,CAAC,EAAES,EAAE,GAAGN,KAAK,CAACrF,aAAa,CAAC,CAAC,CAAC,CAACkE,MAAM,EAAEgB,EAAE,GAAGS,EAAE,CAAC5C,MAAM,EAAEmC,EAAE,EAAE,EAAE;UACvE,IAAIzF,OAAO,GAAGkG,EAAE,CAACT,EAAE,CAAC;UACpB,IAAIzF,OAAO,CAACe,KAAK,KAAKA,KAAK,CAACD,KAAK,KAAK,CAAC8E,KAAK,CAACX,aAAa,IAAIc,WAAW,CAACvD,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;YACjGuD,WAAW,GAAG,IAAI,CAAClF,aAAa,CAAC+E,KAAK,CAACrF,aAAa,CAACQ,KAAK,CAACT,MAAM,CAAC,EAAEN,OAAO,CAACe,KAAK,CAAC;YAClFiE,gBAAgB,GAAG7D,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAG2E,WAAW,CAAC;YAC/D,IAAI,CAACE,eAAe,CAACL,KAAK,EAAE7E,KAAK,CAACT,MAAM,EAAE0E,gBAAgB,EAAEe,WAAW,EAAEC,kBAAkB,EAAEjF,KAAK,CAAC;UACvG;QACJ;QACA,IAAIoF,cAAc,GAAG,EAAE;QACvBA,cAAc,GAAG,IAAI,CAACnF,iBAAiB,CAACD,KAAK,CAAC;QAC9C,IAAIoF,cAAc,CAAC7C,MAAM,GAAG,CAAC,EAAE;UAC3B,IAAI,CAAC8C,sBAAsB,CAACD,cAAc,EAAEJ,WAAW,EAAE,KAAK,EAAE,IAAI,EAAEhF,KAAK,CAACD,KAAK,CAAC;UAClF,IAAI,CAACmD,SAAS,CAAC2B,KAAK,EAAE7E,KAAK,EAAEoF,cAAc,CAAC;UAC5C,IAAI,CAACjC,UAAU,CAAC0B,KAAK,CAAC5F,OAAO,CAACC,EAAE,EAAE2F,KAAK,CAACrF,aAAa,CAAC;QAC1D;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvB,wBAAwB,CAACT,SAAS,CAACoC,eAAe,GAAG,UAAU6E,OAAO,EAAEtG,UAAU,EAAE;IAChF,IAAIc,OAAO;IACX,KAAK,IAAIyF,EAAE,GAAG,CAAC,EAAEY,SAAS,GAAGb,OAAO,EAAEC,EAAE,GAAGY,SAAS,CAAC/C,MAAM,EAAEmC,EAAE,EAAE,EAAE;MAC/D,IAAI1E,KAAK,GAAGsF,SAAS,CAACZ,EAAE,CAAC;MACzBzF,OAAO,GAAG,IAAI,CAACgB,iBAAiB,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAIf,OAAO,EAAE;QACT,IAAI,CAACqD,gBAAgB,CAACtC,KAAK,EAAE7B,UAAU,EAAEc,OAAO,CAAC;MACrD;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIhB,wBAAwB,CAACT,SAAS,CAAC2G,yBAAyB,GAAG,UAAUhG,UAAU,EAAE6B,KAAK,EAAEuF,YAAY,EAAE;IACtG,KAAK,IAAI5D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,KAAK,CAACuC,MAAM,EAAEZ,CAAC,EAAE,EAAE;MACnC,IAAI,CAAC,IAAI,CAAC6D,WAAW,CAACxF,KAAK,CAAC2B,CAAC,CAAC,EAAE4D,YAAY,CAAC,EAAE;QAC3C,IAAI,CAAClB,YAAY,CAAC,IAAI,CAACpE,iBAAiB,CAACD,KAAK,CAAC2B,CAAC,CAAC,CAAC,CAAC;QACnD3B,KAAK,CAACyF,MAAM,CAAC9D,CAAC,EAAE,CAAC,CAAC;QAClBA,CAAC,EAAE;MACP;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1D,wBAAwB,CAACT,SAAS,CAAC2F,UAAU,GAAG,UAAUuC,KAAK,EAAElG,aAAa,EAAE;IAC5E,IAAImG,UAAU,GAAI,IAAI,CAACC,eAAe,CAAC,IAAI,CAAC1E,oBAAoB,CAAC,IAC7D,IAAI,CAAC0E,eAAe,CAAC,IAAI,CAACxG,mBAAmB,CAAE,CAAC,CAAC;IACrD,KAAK,IAAIsF,EAAE,GAAG,CAAC,EAAES,EAAE,GAAG3F,aAAa,CAAC,CAAC,CAAC,CAACkE,MAAM,EAAEgB,EAAE,GAAGS,EAAE,CAAC5C,MAAM,EAAEmC,EAAE,EAAE,EAAE;MACjE,IAAI3E,KAAK,GAAGoF,EAAE,CAACT,EAAE,CAAC;MAClB,IAAIxE,aAAa,GAAG,EAAE;MACtB,IAAIH,KAAK,CAAC8F,OAAO,EAAE;QACf3F,aAAa,GAAG,IAAI,CAACD,iBAAiB,CAAC;UAAEV,MAAM,EAAE,CAAC;UAAEQ,KAAK,EAAEA,KAAK,CAACC;QAAM,CAAC,CAAC;QACzE,IAAI,CAACqF,sBAAsB,CAACnF,aAAa,EAAE,IAAI,CAACJ,aAAa,CAACN,aAAa,CAAC,CAAC,CAAC,EAAEO,KAAK,CAACC,KAAK,CAAC,EAAE2F,UAAU,EAAE,IAAI,EAAE5F,KAAK,CAACC,KAAK,CAAC;MAChI;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/B,wBAAwB,CAACT,SAAS,CAAC6H,sBAAsB,GAAG,UAAUpG,OAAO,EAAEgD,SAAS,EAAE0D,UAAU,EAAEG,QAAQ,EAAE/F,KAAK,EAAE;IACnH,IAAI+F,QAAQ,KAAK,KAAK,CAAC,EAAE;MAAEA,QAAQ,GAAG,IAAI;IAAE;IAC5C,IAAI/F,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,CAAC;IAAE;IACnC,IAAIgG,QAAQ,GAAG9G,OAAO;IACtB,IAAI,IAAI,CAACd,UAAU,CAACwB,aAAa,KAAK,MAAM,KAAK,IAAI,CAACxB,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI,IAAI,CAAC9C,UAAU,CAACgD,cAAc,CAACC,eAAe,CAAC,EAAE;MAC1I2E,QAAQ,GAAG9G,OAAO;IACtB;IACA,IAAI+G,gBAAgB;IACpB,IAAIC,WAAW;IACf,IAAIC,aAAa,GAAGjH,OAAO;IAC3B,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoE,QAAQ,CAACxD,MAAM,EAAEZ,CAAC,EAAE,EAAE;MACtCqE,gBAAgB,GAAGD,QAAQ,CAACpE,CAAC,CAAC,CAACG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;MAC1D,IAAI,IAAI,CAAC3D,UAAU,CAACwB,aAAa,KAAK,MAAM,KAAK,IAAI,CAACxB,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI,IAAI,CAAC9C,UAAU,CAACgD,cAAc,CAACC,eAAe,CAAC,EAAE;QAC1Ia,SAAS,GAAG+D,gBAAgB,CAACvE,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IACjDuE,gBAAgB,CAACvE,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAGuE,gBAAgB,GAAG/D,SAAS;MAChF;MACA,IAAI+D,gBAAgB,CAACvE,OAAO,CAACQ,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI0D,UAAU,EAAE;QAC1D,IAAI,CAACxD,WAAW,CAAC4D,QAAQ,CAACpE,CAAC,CAAC,EAAE,IAAI,CAACxC,UAAU,CAAC;MAClD,CAAC,MACI;QACD+G,aAAa,GAAGH,QAAQ,CAACpE,CAAC,CAAC;QAC3B,IAAIqE,gBAAgB,CAACvE,OAAO,CAAC,IAAI,CAACtC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI8C,SAAS,CAACR,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;UACxF,IAAI,CAACtD,UAAU,CAACgI,kBAAkB,CAACJ,QAAQ,CAACpE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;QAC7D;QACA,IAAI,CAACyE,cAAc,CAACL,QAAQ,CAACpE,CAAC,CAAC,EAAE,IAAI,CAACxC,UAAU,CAAC;QACjD,IAAI,CAACiH,cAAc,CAACL,QAAQ,CAACpE,CAAC,CAAC,CAACH,UAAU,EAAE,IAAI,CAACrC,UAAU,CAAC;MAChE;MACA,IAAI4G,QAAQ,CAACpE,CAAC,CAAC,CAACzC,EAAE,CAACuC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,IAAIsE,QAAQ,CAACpE,CAAC,CAAC,CAACzC,EAAE,CAACuC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAIsE,QAAQ,CAACpE,CAAC,CAAC,CAACzC,EAAE,CAACuC,OAAO,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC,EAAE;QACpK,IAAI,IAAI,CAACP,oBAAoB,IAAI,IAAI,CAACA,oBAAoB,CAAC,CAAC,CAAC,IAAInB,KAAK,KAAK,IAAI,CAACmB,oBAAoB,CAAC,CAAC,CAAC,CAACnB,KAAK,EAAE;UAC3G,IAAI,CAACqG,cAAc,CAACL,QAAQ,CAACpE,CAAC,CAAC,EAAE,IAAI,CAACxC,UAAU,CAAC;QACrD;QACA,IAAI,IAAI,CAACC,mBAAmB,EAAE;UAC1B,KAAK,IAAIiH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjH,mBAAmB,CAACmD,MAAM,EAAE8D,CAAC,EAAE,EAAE;YACtD,IAAItG,KAAK,KAAK,IAAI,CAACX,mBAAmB,CAACiH,CAAC,CAAC,CAACtG,KAAK,EAAE;cAC7C,IAAI,CAACqG,cAAc,CAACL,QAAQ,CAACpE,CAAC,CAAC,EAAE,IAAI,CAACxC,UAAU,CAAC;YACrD;UACJ;QACJ;MACJ;IACJ;IACA,IAAI,IAAI,CAACwB,OAAO,CAAC2F,2BAA2B,IAAI,IAAI,CAAC3F,OAAO,CAACQ,cAAc,CAAC0E,OAAO,EAAE;MACjFI,WAAW,GAAGpI,UAAU,CAAC,IAAI,CAAC8C,OAAO,CAAC1B,OAAO,CAACC,EAAE,GAAG,sBAAsB,GAAGa,KAAK,CAAC;MAClF,IAAIkG,WAAW,EAAE;QACb,IAAIA,WAAW,CAACpE,YAAY,CAAC,OAAO,CAAC,EAAE;UACnC,IAAI,CAACuE,cAAc,CAACH,WAAW,EAAEA,WAAW,CAACnE,YAAY,CAAC,OAAO,CAAC,CAAC;QACvE;QACA,IAAIoE,aAAa,CAAC3D,MAAM,GAAG,CAAC,EAAE;UAC1ByD,gBAAgB,GAAGE,aAAa,CAAC,CAAC,CAAC,CAACpE,YAAY,CAAC,OAAO,CAAC;QAC7D,CAAC,MACI,IAAIoE,aAAa,EAAE;UACpBF,gBAAgB,GAAGE,aAAa,CAACpE,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;QAChE;QACA,IAAIkE,gBAAgB,CAACvE,OAAO,CAACQ,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI0D,UAAU,EAAE;UAC1D,IAAI,CAACxD,WAAW,CAAC8D,WAAW,EAAE,IAAI,CAAC9G,UAAU,CAAC;QAClD,CAAC,MACI;UACD,IAAI,CAACiH,cAAc,CAACH,WAAW,EAAE,IAAI,CAAC9G,UAAU,CAAC;UACjD,IAAI6G,gBAAgB,KAAK,EAAE,EAAE;YACzB,IAAI,CAACI,cAAc,CAACH,WAAW,EAAEhE,SAAS,CAAC;UAC/C,CAAC,MACI;YACD,IAAI,CAACE,WAAW,CAAC8D,WAAW,EAAEhE,SAAS,CAAC;UAC5C;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIhE,wBAAwB,CAACT,SAAS,CAAC8G,WAAW,GAAG,UAAUnE,QAAQ,EAAEH,KAAK,EAAE;IACxE,IAAIuG,iBAAiB,GAAG,IAAI,CAAC5F,OAAO,CAAC6F,4BAA4B;IACjE,KAAK,IAAI9B,EAAE,GAAG,CAAC,EAAE+B,UAAU,GAAGtG,QAAQ,EAAEuE,EAAE,GAAG+B,UAAU,CAAClE,MAAM,EAAEmC,EAAE,EAAE,EAAE;MAClE,IAAIzF,OAAO,GAAGwH,UAAU,CAAC/B,EAAE,CAAC;MAC5B,IAAIzF,OAAO,EAAE;QACT,IAAI,CAACmH,cAAc,CAACnH,OAAO,CAACuC,UAAU,EAAE,IAAI,CAACrC,UAAU,CAAC;QACxD,IAAI,CAACiH,cAAc,CAACnH,OAAO,EAAE,IAAI,CAACE,UAAU,CAAC;QAC7C,IAAIuH,OAAO,GAAGH,iBAAiB,IAAKA,iBAAiB,CAACI,cAAc,CAACpE,MAAM,GAAG,CAAC,IAC3EgE,iBAAiB,CAACI,cAAc,CAAC,CAAC,CAAC,CAAC5G,KAAK,CAACC,KAAK,KAAKA,KAAK,CAACD,KAAM,GAChEwG,iBAAiB,CAACK,UAAU,CAACF,OAAO,GAAG,IAAI,CAACnH,MAAM,CAACS,KAAK,CAACT,MAAM,CAAC,CAACmH,OAAO;QAC5EzH,OAAO,CAAC4H,YAAY,CAAC,SAAS,EAAEH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;QACnD,IAAI7H,OAAO,CAACC,EAAE,CAACuC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,IAAIxC,OAAO,CAACC,EAAE,CAACuC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAIxC,OAAO,CAACC,EAAE,CAACuC,OAAO,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC,EAAE;UACxJ,IAAI,CAACU,WAAW,CAAClD,OAAO,EAAE,IAAI,CAACmF,iBAAiB,CAACnF,OAAO,CAACC,EAAE,CAAC,CAAC;QACjE;QACA,IAAI,IAAI,CAACkF,iBAAiB,CAACnF,OAAO,CAACC,EAAE,CAAC,CAACuC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;UAC7D,IAAI,CAACtD,UAAU,CAAC4I,oBAAoB,CAAC9H,OAAO,CAAC;QACjD;MACJ;IACJ;IACA,IAAI,IAAI,CAAC0B,OAAO,CAAC2F,2BAA2B,IAAI,IAAI,CAAC3F,OAAO,CAACQ,cAAc,CAAC0E,OAAO,EAAE;MACjF,IAAII,WAAW,GAAG7F,QAAQ,CAACM,cAAc,CAAC,IAAI,CAACC,OAAO,CAAC1B,OAAO,CAACC,EAAE,GAAG,sBAAsB,GAAGc,KAAK,CAACD,KAAK,CAAC;MACzG,IAAI,CAACqG,cAAc,CAACH,WAAW,EAAEA,WAAW,CAACnE,YAAY,CAAC,OAAO,CAAC,CAAC;MACnE,IAAI,CAACK,WAAW,CAAC8D,WAAW,EAAE,IAAI,CAAC7B,iBAAiB,CAAC6B,WAAW,CAAC/G,EAAE,CAAC,CAAC;IACzE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIjB,wBAAwB,CAACT,SAAS,CAAC4G,iBAAiB,GAAG,UAAUlF,EAAE,EAAE;IACjE,OAAO,IAAI,CAACY,aAAa,CAAC,IAAI,CAACa,OAAO,CAACpB,MAAM,CAAC,IAAI,CAACiB,WAAW,CAACtB,EAAE,CAAC,CAACK,MAAM,CAAC,EAAE,IAAI,CAACiB,WAAW,CAACtB,EAAE,CAAC,CAACa,KAAK,CAAC;EAC3G,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI9B,wBAAwB,CAACT,SAAS,CAAC0H,eAAe,GAAG,UAAUL,KAAK,EAAEtF,MAAM,EAAE0E,gBAAgB,EAAEe,WAAW,EAAEC,kBAAkB,EAAEjF,KAAK,EAAE;IACpI,IAAIiE,gBAAgB,CAAC1B,MAAM,GAAG,CAAC,EAAE;MAC7B,IAAIpC,QAAQ,GAAG,EAAE;MACjB,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsC,gBAAgB,CAAC1B,MAAM,EAAEZ,CAAC,EAAE,EAAE;QAC9CxB,QAAQ,CAACM,IAAI,CAACwD,gBAAgB,CAACtC,CAAC,CAAC,CAAC;MACtC;MACA,IAAI,CAAC0C,YAAY,CAAClE,QAAQ,CAAC;MAC3B,IAAI,CAACkC,gBAAgB,CAAC,IAAI,CAACjD,mBAAmB,EAAE,IAAItB,KAAK,CAACyB,MAAM,EAAES,KAAK,CAACD,KAAK,CAAC,CAAC;MAC/E,KAAK,IAAI2E,EAAE,GAAG,CAAC,EAAES,EAAE,GAAGN,KAAK,CAACrF,aAAa,CAAC,CAAC,CAAC,CAACkE,MAAM,EAAEgB,EAAE,GAAGS,EAAE,CAAC5C,MAAM,EAAEmC,EAAE,EAAE,EAAE;QACvE,IAAIsC,KAAK,GAAG7B,EAAE,CAACT,EAAE,CAAC;QAClBM,WAAW,GAAG,IAAI,CAAClF,aAAa,CAAC+E,KAAK,CAACrF,aAAa,CAAC,CAAC,CAAC,EAAEwH,KAAK,CAAChH,KAAK,CAAC;QACrE,IAAII,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAG2E,WAAW,CAAC,CAACzC,MAAM,GAAG,CAAC,EAAE;UACzD,KAAK,IAAI0E,EAAE,GAAG,CAAC,EAAEC,UAAU,GAAG/G,QAAQ,EAAE8G,EAAE,GAAGC,UAAU,CAAC3E,MAAM,EAAE0E,EAAE,EAAE,EAAE;YAClE,IAAIhI,OAAO,GAAGiI,UAAU,CAACD,EAAE,CAAC;YAC5B,IAAI,CAAC5B,sBAAsB,CAACpG,OAAO,EAAE+F,WAAW,EAAE,IAAI,EAAE,IAAI,EAAEhF,KAAK,CAACD,KAAK,CAAC;UAC9E;UACAkF,kBAAkB,GAAG,KAAK;UAC1B;QACJ;MACJ;MACA,IAAIA,kBAAkB,EAAE;QACpB,IAAI,CAAC9B,UAAU,CAAC0B,KAAK,CAAC5F,OAAO,CAACC,EAAE,EAAE2F,KAAK,CAACrF,aAAa,CAAC;MAC1D;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvB,wBAAwB,CAACT,SAAS,CAAC6G,YAAY,GAAG,UAAUlE,QAAQ,EAAE;IAClE,KAAK,IAAIuE,EAAE,GAAG,CAAC,EAAEyC,UAAU,GAAGhH,QAAQ,EAAEuE,EAAE,GAAGyC,UAAU,CAAC5E,MAAM,EAAEmC,EAAE,EAAE,EAAE;MAClE,IAAIzF,OAAO,GAAGkI,UAAU,CAACzC,EAAE,CAAC;MAC5B,IAAIzF,OAAO,EAAE;QACT,IAAI,CAACmH,cAAc,CAACnH,OAAO,EAAE,IAAI,CAACmF,iBAAiB,CAACnF,OAAO,CAACC,EAAE,CAAC,CAAC;MACpE;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjB,wBAAwB,CAACT,SAAS,CAAC6E,gBAAgB,GAAG,UAAUoC,OAAO,EAAEzE,KAAK,EAAEoH,GAAG,EAAE;IACjF,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,OAAO,CAAClC,MAAM,EAAEZ,CAAC,EAAE,EAAE;MACrC,IAAI,IAAI,CAAC6D,WAAW,CAACf,OAAO,CAAC9C,CAAC,CAAC,EAAE3B,KAAK,CAAC,EAAE;QACrCyE,OAAO,CAACgB,MAAM,CAAC9D,CAAC,EAAE,CAAC,CAAC;QACpBA,CAAC,EAAE;MACP;IACJ;IACA,IAAIyF,GAAG,EAAE;MACL3C,OAAO,CAAChE,IAAI,CAACT,KAAK,CAAC;IACvB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI/B,wBAAwB,CAACT,SAAS,CAACgI,WAAW,GAAG,UAAU6B,KAAK,EAAEC,MAAM,EAAE;IACtE,OAASD,KAAK,CAACtH,KAAK,KAAKuH,MAAM,CAACvH,KAAK,IAAMsH,KAAK,CAAC9H,MAAM,KAAK+H,MAAM,CAAC/H,MAAO;EAC9E,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACItB,wBAAwB,CAACT,SAAS,CAACmB,SAAS,GAAG,UAAU6D,KAAK,EAAE;IAC5D,IAAIrE,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAI4C,aAAa,GAAGyB,KAAK,CAACE,MAAM;IAChC,IAAI,CAACvE,UAAU,CAACoJ,cAAc,IAAIpJ,UAAU,CAACqJ,8BAA8B,KAAKrJ,UAAU,CAAC8C,aAAa,KAAK,MAAM,IAAI9C,UAAU,CAACgD,cAAc,CAACC,eAAe,CAAC,EAAE;MAC/J,IAAI,CAACxD,iBAAiB,CAACmD,aAAa,CAAC,EAAE;QACnC,IAAIyB,KAAK,CAACE,MAAM,CAACxD,EAAE,CAACuC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAIe,KAAK,CAACE,MAAM,CAACxD,EAAE,CAACuC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;UAC/EV,aAAa,GAAGlD,UAAU,CAAC2E,KAAK,CAACE,MAAM,CAACxD,EAAE,CAAC4F,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxE;QACA,IAAK/D,aAAa,CAAEc,YAAY,CAAC,OAAO,CAAC,KAAMd,aAAa,CAAEe,YAAY,CAAC,OAAO,CAAC,CAACL,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IACzGV,aAAa,CAACe,YAAY,CAAC,OAAO,CAAC,CAACL,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;UAChE;QACJ;QACA,IAAI,CAACgB,yBAAyB,CAACtE,UAAU,EAAEqE,KAAK,CAACE,MAAM,EAAEF,KAAK,CAACG,IAAI,CAAC;QACpE,IAAI,IAAI,CAACzB,oBAAoB,KAAKH,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAIV,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,IACtI,IAAI,CAACP,oBAAoB,CAACqB,MAAM,GAAG,CAAC,IAAIxB,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IACnFV,aAAa,CAAC7B,EAAE,CAACuC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;UACjD,IAAI,CAACgG,2BAA2B,CAAC,CAAC;QACtC;QACA;MACJ;IACJ;IACA,IAAItJ,UAAU,CAACwB,aAAa,KAAK,MAAM,EAAE;MACrC;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI1B,wBAAwB,CAACT,SAAS,CAACiK,2BAA2B,GAAG,YAAY;IACzE,IAAI,CAACtJ,UAAU,CAACqJ,8BAA8B,CAACtG,oBAAoB,GAAG,EAAE;IACxE,IAAIwG,iBAAiB;IACrB,KAAK,IAAI/F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACxD,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC,CAACkE,MAAM,CAACnB,MAAM,EAAEZ,CAAC,EAAE,EAAE;MACrE+F,iBAAiB,GAAGtH,QAAQ,CAACuH,sBAAsB,CAAC,IAAI,CAAC7H,aAAa,CAAC,IAAI,CAAC3B,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC,EAAEmC,CAAC,CAAC,CAAC;MAC5G,IAAI,IAAI,CAACvC,mBAAmB,CAACmD,MAAM,KAAK,CAAC,EAAE;QACvCmF,iBAAiB,GAAGtH,QAAQ,CAACuH,sBAAsB,CAAC,IAAI,CAAC7H,aAAa,CAAC,IAAI,CAAC3B,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC,EAAEmC,CAAC,CAAC,CAAC;QAC5G,OAAO+F,iBAAiB,CAACnF,MAAM,GAAG,CAAC,EAAE;UACjC,IAAItD,OAAO,GAAGyI,iBAAiB,CAAC,CAAC,CAAC;UAClC,IAAIzI,OAAO,EAAE;YACT,IAAI,CAACmH,cAAc,CAACnH,OAAO,EAAEA,OAAO,CAAC6C,YAAY,CAAC,OAAO,CAAC,CAAC;UAC/D;QACJ;QACA4F,iBAAiB,GAAGtH,QAAQ,CAACuH,sBAAsB,CAAC,IAAI,CAACxI,UAAU,CAAC;QACpE,OAAOuI,iBAAiB,CAACnF,MAAM,GAAG,CAAC,EAAE;UACjC,IAAItD,OAAO,GAAGyI,iBAAiB,CAAC,CAAC,CAAC;UAClC,IAAIzI,OAAO,EAAE;YACT,IAAI,CAACmH,cAAc,CAACnH,OAAO,EAAEA,OAAO,CAAC6C,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3D,IAAI,IAAI,CAAChC,aAAa,CAAC,IAAI,CAAC3B,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC,EAAEmC,CAAC,CAAC,CAACF,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;cACnF,IAAI,CAACtD,UAAU,CAACgI,kBAAkB,CAAClH,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;YACzD;UACJ;QACJ;MACJ,CAAC,MACI;QACDyI,iBAAiB,GAAGtH,QAAQ,CAACuH,sBAAsB,CAAC,IAAI,CAAC7H,aAAa,CAAC,IAAI,CAAC3B,UAAU,CAACqB,aAAa,CAAC,CAAC,CAAC,EAAEmC,CAAC,CAAC,CAAC;QAC5G,OAAO+F,iBAAiB,CAACnF,MAAM,GAAG,CAAC,EAAE;UACjC,IAAItD,OAAO,GAAGyI,iBAAiB,CAAC,CAAC,CAAC;UAClC,IAAIzI,OAAO,EAAE;YACT,IAAI,CAACmH,cAAc,CAACnH,OAAO,EAAEA,OAAO,CAAC6C,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3D,IAAI,CAACK,WAAW,CAAClD,OAAO,EAAE,IAAI,CAACE,UAAU,CAAC;UAC9C;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlB,wBAAwB,CAACT,SAAS,CAACoK,aAAa,GAAG,YAAY;IAC3D,OAAO,0BAA0B;EACrC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI3J,wBAAwB,CAACT,SAAS,CAACqK,OAAO,GAAG,YAAY;IACrD;IACA,IAAI,CAAChJ,mBAAmB,CAAC,CAAC;EAC9B,CAAC;EACD,OAAOZ,wBAAwB;AACnC,CAAC,CAACF,aAAa,CAAE;AACjB,SAASE,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module"}