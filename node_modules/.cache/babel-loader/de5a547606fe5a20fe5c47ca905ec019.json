{"ast":null,"code":"import { isNullOrUndefined, isUndefined } from '@syncfusion/ej2-base';\nimport { WCharacterFormat } from '../index';\nimport { defaultFont } from '../../index';\nimport { HelperMethods } from '../editor/editor-helper';\nimport { CharacterRangeType, FontScriptType, FontHintType } from '../../index';\n/**\n * @private\n */\nvar TextHelper = /** @class */function () {\n  function TextHelper(documentHelper) {\n    this.paragraphMarkInfo = {};\n    this.documentHelper = documentHelper;\n    if (!isNullOrUndefined(documentHelper)) {\n      this.context = documentHelper.containerContext;\n    }\n  }\n  Object.defineProperty(TextHelper.prototype, \"paragraphMark\", {\n    get: function () {\n      return '¶';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextHelper.prototype, \"lineBreakMark\", {\n    get: function () {\n      return '↲';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TextHelper.prototype.getEnSpaceCharacter = function () {\n    return String.fromCharCode(8194);\n  };\n  TextHelper.prototype.repeatChar = function (char, count) {\n    var text = '';\n    for (var i = 0; i < count; i++) {\n      text += char;\n    }\n    return text;\n  };\n  TextHelper.prototype.getParagraphMarkWidth = function (characterFormat) {\n    return this.getParagraphMarkSize(characterFormat).Width;\n  };\n  TextHelper.prototype.getParagraphMarkSize = function (characterFormat) {\n    var format = this.getFormatText(characterFormat);\n    if (this.paragraphMarkInfo[\"\" + format]) {\n      return this.paragraphMarkInfo[\"\" + format];\n    }\n    // Gets the text element's width;\n    var width = this.getWidth(this.paragraphMark, characterFormat);\n    // Calculate the text element's height and baseline offset.\n    var textHelper = this.getHeight(characterFormat);\n    var textSizeInfo = {\n      'Width': width,\n      'Height': textHelper.Height,\n      'BaselineOffset': textHelper.BaselineOffset\n    };\n    return this.paragraphMarkInfo[\"\" + format] = textSizeInfo;\n  };\n  TextHelper.prototype.getTextSize = function (elementBox, characterFormat) {\n    // Gets the text element's width;\n    var textTrimEndWidth = 0;\n    var isRTL = characterFormat.bidi || this.isRTLText(elementBox.text);\n    var text = this.setText(elementBox.text, isRTL, characterFormat.bdo);\n    if (text === '\\r') {\n      text = String.fromCharCode(182);\n    }\n    textTrimEndWidth = this.getWidth(text, characterFormat, elementBox.scriptType);\n    elementBox.width = textTrimEndWidth;\n    // Calculate the text element's height and baseline offset.\n    var textHelper = this.getHeight(characterFormat, elementBox.scriptType);\n    if (!(this.documentHelper.compatibilityMode === 'Word2003' && elementBox.isColumnBreak)) {\n      elementBox.height = textHelper.Height;\n    }\n    elementBox.baselineOffset = textHelper.BaselineOffset;\n    if (elementBox.text[elementBox.text.length - 1] === ' ') {\n      textTrimEndWidth = this.getWidth(HelperMethods.trimEnd(elementBox.text), characterFormat, elementBox.scriptType);\n    }\n    elementBox.trimEndWidth = textTrimEndWidth;\n    return textTrimEndWidth;\n  };\n  TextHelper.prototype.getHeight = function (characterFormat, scriptType) {\n    var fontToRender = this.getFontNameToRender(scriptType, characterFormat);\n    // Get character format property as  below predefined structure to make it easy to check and retrieve\n    // Predefined static structure `[FontName];[FontSize];bold;italic` to maintain as key in the collection\n    var key = this.getFormatText(characterFormat, fontToRender);\n    if (!isNullOrUndefined(this.documentHelper.heightInfoCollection[\"\" + key])) {\n      return this.documentHelper.heightInfoCollection[\"\" + key];\n    }\n    var sizeInfo = this.documentHelper.owner.textMeasureHelper.getHeightInternal(characterFormat, fontToRender);\n    this.documentHelper.heightInfoCollection[\"\" + key] = sizeInfo;\n    return sizeInfo;\n  };\n  TextHelper.prototype.getFormatText = function (characterFormat, fontToRender) {\n    var formatText = '';\n    if (!isNullOrUndefined(fontToRender)) {\n      formatText = fontToRender.toLocaleLowerCase();\n    } else {\n      formatText = characterFormat.fontFamily.toLocaleLowerCase();\n    }\n    formatText += ';' + characterFormat.fontSize;\n    if (characterFormat.bold) {\n      formatText += ';' + 'bold';\n    }\n    if (characterFormat.italic) {\n      formatText += ';' + 'italic';\n    }\n    return formatText;\n  };\n  TextHelper.prototype.measureTextExcludingSpaceAtEnd = function (text, characterFormat, scriptType) {\n    return this.getWidth(HelperMethods.trimEnd(text), characterFormat, scriptType);\n  };\n  TextHelper.prototype.getWidth = function (text, characterFormat, scriptType) {\n    if (text.match('\\v')) {\n      text.replace('\\v', this.lineBreakMark);\n    }\n    var bold = '';\n    var italic = '';\n    var fontFamily = '';\n    var fontSize = characterFormat.fontSize;\n    bold = characterFormat.bold ? 'bold' : '';\n    italic = characterFormat.italic ? 'italic' : '';\n    fontFamily = this.getFontNameToRender(scriptType, characterFormat);\n    fontSize = fontSize === 0 ? 0.5 : fontSize / (characterFormat.baselineAlignment === 'Normal' ? 1 : 1.5);\n    this.context.font = bold + ' ' + italic + ' ' + fontSize + 'pt' + ' ' + '\"' + fontFamily + '\"';\n    this.context.letterSpacing = characterFormat.characterSpacing + 'pt';\n    var scaleFactor = characterFormat.scaling / 100;\n    if (characterFormat.allCaps) {\n      text = text.toUpperCase();\n    }\n    //ES-853789:For combine character we need  to add the base character to get the width of the text.\n    if (text == \"\\u0336\") {\n      text += \"A\";\n    }\n    return Math.abs(this.context.measureText(text).width * scaleFactor);\n  };\n  TextHelper.prototype.setText = function (textToRender, isBidi, bdo, isRender) {\n    if (isNullOrUndefined(isRender)) {\n      isRender = false;\n    }\n    if (textToRender.length === 0) {\n      return '';\n    }\n    var isRtlText = isBidi;\n    if (!isRtlText && bdo === 'RTL' || isRtlText && bdo === 'LTR') {\n      textToRender = HelperMethods.reverseString(textToRender);\n    } else if (isRender && isRtlText && HelperMethods.endsWith(textToRender)) {\n      var spaceCount = textToRender.length - HelperMethods.trimEnd(textToRender).length;\n      textToRender = HelperMethods.addSpace(spaceCount) + HelperMethods.trimEnd(textToRender);\n    }\n    return textToRender;\n  };\n  TextHelper.prototype.measureText = function (text, characterFormat, scriptType) {\n    // Gets the text element's width;\n    var width = this.getWidth(text, characterFormat, scriptType);\n    // Calculate the text element's height and baseline offset.\n    var textHelper = this.getHeight(characterFormat, scriptType);\n    return {\n      'Width': width,\n      'Height': textHelper.Height,\n      'BaselineOffset': textHelper.BaselineOffset\n    };\n  };\n  TextHelper.prototype.updateTextSize = function (elementBox, paragraph) {\n    var format = new WCharacterFormat(undefined);\n    var listCharacterFormat = elementBox.listLevel.characterFormat;\n    var breakCharacterFormat = paragraph.characterFormat;\n    format.fontSize = listCharacterFormat.hasValue('fontSize') ? listCharacterFormat.fontSize : breakCharacterFormat.fontSize;\n    format.fontFamily = listCharacterFormat.hasValue('fontFamily') ? listCharacterFormat.fontFamily : breakCharacterFormat.fontFamily;\n    var bold = '';\n    var italic = '';\n    var baselineAlignment = listCharacterFormat.baselineAlignment === 'Normal' ? breakCharacterFormat.baselineAlignment : listCharacterFormat.baselineAlignment;\n    bold = listCharacterFormat.hasValue('bold') ? listCharacterFormat.bold ? 'bold' : '' : breakCharacterFormat.bold ? 'bold' : '';\n    italic = listCharacterFormat.hasValue('italic') ? listCharacterFormat.italic ? 'italic' : '' : breakCharacterFormat.italic ? 'italic' : '';\n    format.baselineAlignment = baselineAlignment;\n    if (bold) {\n      format.bold = true;\n    }\n    if (italic) {\n      format.italic = true;\n    }\n    var isRTL = format.bidi || this.isRTLText(elementBox.text);\n    var text = this.setText(elementBox.text, isRTL, format.bdo);\n    elementBox.width = this.getWidth(text, format);\n    // Calculate the text element's height and baseline offset.\n    var textHelper = this.getHeight(format);\n    elementBox.height = textHelper.Height;\n    elementBox.baselineOffset = textHelper.BaselineOffset;\n    format.destroy();\n  };\n  TextHelper.prototype.containsSpecialCharAlone = function (text) {\n    /* eslint-disable */\n    var specialChars = '*|.\\:[]{}-`\\;()@&$#%!~?,' + ' ' + \"'\";\n    for (var i = 0; i < text.length; i++) {\n      if (specialChars.indexOf(text.charAt(i)) === -1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  TextHelper.prototype.containsNumberAlone = function (text) {\n    /* eslint-disable */\n    var number = '0123456789';\n    if (text === '') {\n      return false;\n    }\n    for (var i = 0; i < text.length; i++) {\n      if (number.indexOf(text.charAt(i)) === -1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  TextHelper.prototype.containsCombinationText = function (element) {\n    /* eslint-disable */\n    if (element.text.match(/^[0-9]+$/) && element.paragraph.bidi) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  TextHelper.prototype.inverseCharacter = function (ch) {\n    switch (ch) {\n      //Specify the '('\n      case '(':\n        //Specify the ')'\n        return ')';\n      //Specify the ')'\n      case ')':\n        //Specify the '('\n        return '(';\n      //Specify the '<'\n      case '<':\n        //Specify the '>'\n        return '>';\n      //Specify the '>'\n      case '>':\n        //Specify the '<'\n        return '<';\n      //Specify the '{'\n      case '{':\n        //Specify the '}'\n        return '}';\n      //Specify the '}'\n      case '}':\n        //Specify the '{'\n        return '{';\n      //Specify the '['\n      case '[':\n        //Specify the ']'\n        return ']';\n      //Specify the ']'\n      case ']':\n        //Specify the '['\n        return '[';\n      default:\n        return ch;\n    }\n  };\n  TextHelper.prototype.containsSpecialChar = function (text) {\n    var specialChars = '*|.\\:[]{}-`\\;()@&$#%!~?' + ' ';\n    for (var i = 0; i < text.length; i++) {\n      if (specialChars.indexOf(text.charAt(i)) !== -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @private\n   * @param {string} text - Specifies the text\n   * @returns {boolean} - Returns true if given text it right to left.\n   */\n  TextHelper.prototype.isRTLText = function (text) {\n    var isRTL = false;\n    if (!isNullOrUndefined(text)) {\n      for (var i = 0; i < text.length; i++) {\n        var temp = text[i];\n        if (temp >= String.fromCharCode(1424) && temp <= String.fromCharCode(1535) ////Script-Hebr, Hebrew characters https://en.wikipedia.org/wiki/Hebrew_alphabet#Unicode_and_HTML (https://en.wikipedia.org/wiki/Hebrew_(Unicode_block))\n        || temp >= String.fromCharCode(64285) && temp <= String.fromCharCode(64335) //Script-Hebr, Hebrew Alphabetic Presentation Forms characters https://en.wikipedia.org/wiki/Alphabetic_Presentation_Forms \n        || temp >= String.fromCharCode(1536) && temp <= String.fromCharCode(1791) //Arabic - Urdu characters\n        || temp >= String.fromCharCode(1872) && temp <= String.fromCharCode(1919) //Arabic - Urdu characters\n        || temp >= String.fromCharCode(2208) && temp <= String.fromCharCode(2303) //Arabic characters\n        || temp >= String.fromCharCode(64336) && temp <= String.fromCharCode(65023) //Arabic - Urdu characters\n        || temp >= String.fromCharCode(65136) && temp <= String.fromCharCode(65279) //Arabic - Urdu characters\n        || temp >= String.fromCharCode(43392) && temp <= String.fromCharCode(43487) //Javanese characters\n        || temp >= String.fromCharCode(1792) && temp <= String.fromCharCode(1871) //Syriac characters\n        || temp >= String.fromCharCode(1920) && temp <= String.fromCharCode(1983) //Thaana characters\n        || temp >= String.fromCharCode(2112) && temp <= String.fromCharCode(2143) //Mandiac characters\n        || temp >= String.fromCharCode(1984) && temp <= String.fromCharCode(2047) //N'Ko characters\n        || temp >= String.fromCharCode(2048) && temp <= String.fromCharCode(2111) //Samaritan characters\n        //Tifinag characters \n        || temp >= String.fromCharCode(11568) && temp <= String.fromCharCode(11647)) {\n          isRTL = true;\n          break;\n        }\n      }\n    }\n    return isRTL;\n  };\n  /**\n   * @private\n   * @param {string} text - Specifies the text\n   * @param {FontScriptType} scriptType - Specifies the script type\n   * @returns {boolean} - Returns true if given text is unicode text.\n   */\n  TextHelper.prototype.isUnicodeText = function (text, scriptType) {\n    var isUnicode = false;\n    if (!isNullOrUndefined(text)) {\n      for (var i = 0; i < text.length; i++) {\n        var temp = text[i];\n        if ((temp >= '\\u3000' && temp <= '\\u30ff' // Japanese characters\n        || temp >= '\\uff00' && temp <= '\\uffef' // Full-width roman characters and half-width katakana\n        || temp >= '\\u4e00' && temp <= '\\u9faf' //CJK unifed ideographs - Common and uncommon kanji\n        || temp >= '\\u3400' && temp <= '\\u4dbf' //CJK unified ideographs Extension A - Rare kanji\n        || temp >= '\\uac00' && temp <= '\\uffef' //Korean Hangul characters\n        || temp >= '\\u0d80' && temp <= '\\u0dff') && scriptType !== 0)\n          //Sinhala characters\n          {\n            isUnicode = true;\n            break;\n          }\n      }\n    }\n    return isUnicode;\n  };\n  /**\n   * @private\n   * @param {string} text - Specifies the text\n   * @returns {RtlInfo} - Returns the text info.\n   */\n  TextHelper.prototype.getRtlLanguage = function (text) {\n    if (isNullOrUndefined(text) || text === '') {\n      return {\n        isRtl: false,\n        id: 0\n      };\n    }\n    if (text >= String.fromCharCode(1424) && text <= String.fromCharCode(1535)) {\n      return {\n        isRtl: true,\n        id: 1\n      };\n      //Arabic - Urdu characters\n    } else if (text >= String.fromCharCode(1536) && text <= String.fromCharCode(1791) || text >= String.fromCharCode(1872) && text <= String.fromCharCode(1919) || text >= String.fromCharCode(2208) && text <= String.fromCharCode(2303) || text >= String.fromCharCode(64336) && text <= String.fromCharCode(65023) || text >= String.fromCharCode(65136) && text <= String.fromCharCode(65279)) {\n      return {\n        isRtl: true,\n        id: 2\n      };\n    } else if (text >= String.fromCharCode(43392) && text <= String.fromCharCode(43487)) {\n      return {\n        isRtl: true,\n        id: 3\n      };\n    } else if (text >= String.fromCharCode(1792) && text <= String.fromCharCode(1871)) {\n      return {\n        isRtl: true,\n        id: 4\n      };\n    } else if (text >= String.fromCharCode(1920) && text <= String.fromCharCode(1983)) {\n      return {\n        isRtl: true,\n        id: 5\n      };\n    } else if (text >= String.fromCharCode(2112) && text <= String.fromCharCode(2143)) {\n      return {\n        isRtl: true,\n        id: 6\n      };\n    } else if (text >= String.fromCharCode(1984) && text <= String.fromCharCode(2047)) {\n      return {\n        isRtl: true,\n        id: 7\n      };\n    } else if (text >= String.fromCharCode(2048) && text <= String.fromCharCode(2111)) {\n      return {\n        isRtl: true,\n        id: 8\n      };\n    } else if (text >= String.fromCharCode(11568) && text <= String.fromCharCode(11647)) {\n      return {\n        isRtl: true,\n        id: 9\n      };\n    }\n    return {\n      isRtl: false,\n      id: 0\n    };\n  };\n  /**\n   * @private\n   */\n  TextHelper.prototype.splitTextByConsecutiveLtrAndRtl = function (text, isTextBidi, isRTLLang, characterRangeTypes, isPrevLTRText, hasRTLCharacter) {\n    var charTypeIndex = characterRangeTypes.length;\n    var splittedText = [];\n    if (isNullOrUndefined(text) || text === '') {\n      return splittedText;\n    }\n    var lastLtrIndex = -1;\n    var ltrText = '';\n    var rtlText = '';\n    var wordSplitChars = '';\n    var numberText = '';\n    for (var i = 0; i < text.length; i++) {\n      var currentCharacterType = 0;\n      var separateEachWordSplitChars = false;\n      if ((!isNullOrUndefined(isPrevLTRText.value) ? !isPrevLTRText.value : isTextBidi) && this.isNumber(text[i])) {\n        numberText += text[i];\n        currentCharacterType = 4;\n      } else if (this.isWordSplitChar(text[i])) {\n        currentCharacterType = 2;\n        if (separateEachWordSplitChars = isTextBidi || text.charCodeAt(i) == 32 && wordSplitChars == '') {\n          wordSplitChars += text[i];\n        } else {\n          wordSplitChars += text[i];\n        }\n      } else if (this.isRTLText(text[i]) && !this.isNumber(text[i])) {\n        isPrevLTRText.value = false;\n        hasRTLCharacter.value = true;\n        rtlText += text[i];\n        currentCharacterType = 1;\n      } else {\n        isPrevLTRText.value = true;\n        ltrText += text[i];\n      }\n      if (numberText != '' && currentCharacterType != 4) {\n        splittedText.push(numberText);\n        characterRangeTypes.push(CharacterRangeType.Number);\n        numberText = '';\n      }\n      if (rtlText != '' && currentCharacterType != 1) {\n        splittedText.push(rtlText);\n        characterRangeTypes.push(CharacterRangeType.RightToLeft);\n        rtlText = '';\n      }\n      if (ltrText != '' && currentCharacterType != 0) {\n        splittedText.push(ltrText);\n        lastLtrIndex = splittedText.length - 1;\n        characterRangeTypes.push(CharacterRangeType.LeftToRight);\n        ltrText = '';\n      }\n      if (wordSplitChars != '' && (currentCharacterType != 2 || separateEachWordSplitChars)) {\n        splittedText.push(wordSplitChars);\n        characterRangeTypes.push(CharacterRangeType.WordSplit);\n        wordSplitChars = '';\n      }\n    }\n    if (numberText != '') {\n      splittedText.push(numberText);\n      characterRangeTypes.push(CharacterRangeType.Number);\n    } else if (rtlText != '') {\n      splittedText.push(rtlText);\n      characterRangeTypes.push(CharacterRangeType.RightToLeft);\n    } else if (ltrText != '') {\n      splittedText.push(ltrText);\n      lastLtrIndex = splittedText.length - 1;\n      characterRangeTypes.push(CharacterRangeType.LeftToRight);\n    } else if (wordSplitChars != '') {\n      splittedText.push(wordSplitChars);\n      characterRangeTypes.push(CharacterRangeType.WordSplit);\n    }\n    if (hasRTLCharacter.value || !isNullOrUndefined(isPrevLTRText.value) && !isPrevLTRText.value) {\n      for (var i = 1; i < splittedText.length; i++) {\n        //Combines the consecutive LTR, RTL, and Number (Number get combined only if it's splitted by non reversing characters (.,:)) \n        //along with single in-between word split character.\n        var charType = characterRangeTypes[i + charTypeIndex];\n        if (charType == CharacterRangeType.WordSplit && splittedText[i].length == 1 && i + charTypeIndex + 1 < characterRangeTypes.length && characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.WordSplit && (characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.Number\n        //Else handled to combine consecutive number when text bidi is false and middle word split character is not white space.\n        || TextHelper.isNumberNonReversingCharacter(splittedText[i], isTextBidi)) && characterRangeTypes[i + charTypeIndex - 1] == characterRangeTypes[i + charTypeIndex + 1]) {\n          splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + splittedText[i + 1];\n          splittedText.splice(i, 1);\n          splittedText.splice(i, 1);\n          characterRangeTypes.splice(i + charTypeIndex, 1);\n          characterRangeTypes.splice(i + charTypeIndex, 1);\n          i--;\n        }\n      }\n    } else if (lastLtrIndex != -1) {\n      if (isTextBidi) {\n        for (var i = 1; i < lastLtrIndex; i++) {\n          //Combines the first and last LTR along with all in-between splited text's.\n          var charType = characterRangeTypes[i + charTypeIndex];\n          if (charType == CharacterRangeType.WordSplit && i < lastLtrIndex && characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.LeftToRight) {\n            ltrText = '';\n            for (var j = i + 1; j <= lastLtrIndex; j++) {\n              ltrText += splittedText[j];\n              splittedText.splice(j, 1);\n              characterRangeTypes.splice(j + charTypeIndex, 1);\n              j--;\n              lastLtrIndex--;\n            }\n            splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + ltrText;\n            splittedText.splice(i, 1);\n            characterRangeTypes.splice(i + charTypeIndex, 1);\n            i--;\n            lastLtrIndex--;\n          }\n        }\n      } else {\n        //Return the input text if text bidi is false.\n        splittedText.length = 0;\n        splittedText.push(text);\n      }\n    } else if (!isTextBidi) {\n      //Return the input text if text bidi is false.\n      splittedText.length = 0;\n      splittedText.push(text);\n    }\n    if (isTextBidi) {\n      for (var i = 1; i < splittedText.length; i++) {\n        //Combines the consecutive LTR, RTL, and Number (Number get combined only if it's splitted by non reversing characters (.,:)\n        //or if it's lang attribute is represent a RTL language)\n        //along with single in-between number non reversing word split character.\n        var charType = characterRangeTypes[i + charTypeIndex];\n        if (charType == CharacterRangeType.WordSplit && splittedText[i].length == 1 && i + charTypeIndex + 1 < characterRangeTypes.length && characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.WordSplit && (characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.Number || TextHelper.isNumberNonReversingCharacter(splittedText[i], isTextBidi) || !isRTLLang) && characterRangeTypes[i + charTypeIndex - 1] == characterRangeTypes[i + charTypeIndex + 1]) {\n          splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + splittedText[i + 1];\n          splittedText.splice(i, 1);\n          splittedText.splice(i, 1);\n          characterRangeTypes.splice(i + charTypeIndex, 1);\n          characterRangeTypes.splice(i + charTypeIndex, 1);\n          i--;\n        }\n        //Combines the Number along with single non-word split characters (% $ #).\n        else if (charType == CharacterRangeType.WordSplit && characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.Number && this.isNonWordSplitCharacter(splittedText[i]) && !isRTLLang) {\n          splittedText[i - 1] = splittedText[i - 1] + splittedText[i];\n          splittedText.splice(i, 1);\n          characterRangeTypes.splice(i + charTypeIndex, 1);\n          i--;\n        }\n        //Combines the consecutive LTR and Number\n        else if (charType == CharacterRangeType.LeftToRight && (characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.Number || characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.LeftToRight)) {\n          splittedText[i - 1] = splittedText[i - 1] + splittedText[i];\n          characterRangeTypes[i + charTypeIndex - 1] = CharacterRangeType.LeftToRight;\n          splittedText.splice(i, 1);\n          characterRangeTypes.splice(i + charTypeIndex, 1);\n          i--;\n        }\n      }\n    }\n    return splittedText;\n  };\n  /**\n   * @private\n   */\n  TextHelper.prototype.isRightToLeftLanguage = function (lang) {\n    return lang == 14337 || lang == 15361 || lang == 5121 || lang == 3073 || lang == 2049 || lang == 11265 || lang == 13313 || lang == 12289 || lang == 4097 || lang == 8193 || lang == 16385 || lang == 1025 || lang == 10241 || lang == 7169 || lang == 9217 || lang == 10655;\n  };\n  TextHelper.prototype.isNumber = function (ch) {\n    if (!isNaN(parseInt(ch, 10))) {\n      //This logic works for universal digits 0 to 9.\n      return true;\n    } else if (ch >= String.fromCharCode(1632) && ch <= String.fromCharCode(1641)) {\n      //This logic works for ARABIC-INDIC DIGIT\n      return true;\n    } else if (ch >= String.fromCharCode(1776) && ch <= String.fromCharCode(1785)) {\n      //This logic works for EXTENDED ARABIC-INDIC DIGIT\n      return true;\n    } else {\n      //TODO: Extend this for language specific \n      return false;\n    }\n  };\n  /**\n   * @private\n   */\n  TextHelper.prototype.isWordSplitChar = function (character) {\n    for (var i = 0; i < TextHelper.wordSplitCharacters.length; i++) {\n      if (TextHelper.wordSplitCharacters[i] === character) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @private\n   */\n  TextHelper.isNumberNonReversingCharacter = function (character, isTextBidi) {\n    for (var i = 0; i < TextHelper.numberNonReversingCharacters.length; i++) {\n      var ch = TextHelper.numberNonReversingCharacters[i];\n      if (character[0] == ch && (ch.charCodeAt(0) == 47 ? !isTextBidi : true)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @private\n   */\n  TextHelper.prototype.isNonWordSplitCharacter = function (character) {\n    var isNonWordSplitChar = false;\n    for (var i = 0; i < character.length; i++) {\n      var charCode = character.charCodeAt(i);\n      //Consider a (% $ #) as non-word split characters\n      if (charCode == 35 || charCode == 36 || charCode == 37) {\n        isNonWordSplitChar = true;\n      } else {\n        isNonWordSplitChar = false;\n        break;\n      }\n    }\n    return isNonWordSplitChar;\n  };\n  TextHelper.prototype.getFontNameToRender = function (scriptType, charFormat) {\n    if (!isNullOrUndefined(scriptType)) {\n      if (charFormat.bidi || charFormat.complexScript) {\n        return this.getFontNameBidiToRender(scriptType, charFormat);\n      } else {\n        if (this.isEastAsiaScript(scriptType) && !isNullOrUndefined(charFormat.fontFamilyFarEast)) return this.getFontNameEAToRender(scriptType, charFormat);else return this.getFontNameAsciiToRender(scriptType, charFormat);\n      }\n    } else {\n      return charFormat.fontFamily;\n    }\n  };\n  /// <summary>\n  /// Check whether specified script is EastAsia script or not.\n  /// </summary>\n  /// <param name=\"scriptType\">Represent a FontScriptType to check.</param>\n  /// <returns></returns>\n  TextHelper.prototype.isEastAsiaScript = function (scriptType) {\n    return scriptType == FontScriptType.Japanese || scriptType == FontScriptType.Korean || scriptType == FontScriptType.Chinese;\n  };\n  /// <summary>\n  /// Get the font name East Asia to render\n  /// </summary>\n  /// <param name=\"scriptType\">Represent a CharacterRangeType.</param>\n  /// <returns>Returns a eastAsia font name to draw the text.</returns>\n  TextHelper.prototype.getFontNameEAToRender = function (scriptType, charFormat) {\n    var fontName = charFormat.fontFamilyFarEast;\n    if (isNullOrUndefined(fontName) || HelperMethods.isThemeFont(fontName)) return this.getFontNameFromTheme(charFormat, fontName, scriptType, FontHintType.EastAsia);else return fontName;\n  };\n  TextHelper.prototype.getFontNameAsciiToRender = function (scriptType, charFormat) {\n    var fontName = charFormat.fontFamilyAscii;\n    if (HelperMethods.isThemeFont(fontName)) return this.getFontNameFromTheme(charFormat, fontName, scriptType, FontHintType.Default);else return charFormat.fontFamily;\n  };\n  TextHelper.prototype.getFontNameBidiToRender = function (scriptType, charFormat) {\n    //If CharacterFormat.Bidi is true, then font is determined in the order: FontNameBidi, Script-Arab, font scheme(latin, ea, cs), default font (Times New Roman)\n    //CharacterRangeType of a text and FontHintType (IdctHint) has no impact in this behavior.\n    //Note: Behavior is traced using Word version 1808 (build 10730.20304)\n    //Determines the font nmae to used for RTL characters based on its script from direct or font scheme (Document theme file)\n    var fontName = charFormat.fontFamilyBidi;\n    if (!isNullOrUndefined(fontName) || HelperMethods.isThemeFont(fontName)) return this.getFontNameFromTheme(charFormat, fontName, scriptType, FontHintType.CS);else return fontName;\n  };\n  TextHelper.prototype.getFontNameFromTheme = function (charFormat, fontName, scriptType, hintType) {\n    var fontScheme;\n    if (this.documentHelper.hasThemes && !isNullOrUndefined(this.documentHelper.themes) && !isUndefined(this.documentHelper.themes.fontScheme)) fontScheme = this.documentHelper.themes.fontScheme;\n    if (fontName == \"majorAscii\" || fontName == \"majorBidi\" || fontName == \"majorEastAsia\" || fontName == \"majorHAnsi\") {\n      var majorFontScheme = void 0;\n      if (fontScheme != null && fontScheme.majorFontScheme != null) {\n        majorFontScheme = fontScheme.majorFontScheme;\n      }\n      fontName = this.updateFontNameFromTheme(charFormat, majorFontScheme, scriptType, fontName, hintType);\n    } else if (fontName == \"minorAscii\" || fontName == \"minorBidi\" || fontName == \"minorEastAsia\" || fontName == \"minorHAnsi\") {\n      var minorFontScheme = void 0;\n      if (fontScheme != null && fontScheme.majorFontScheme != null) {\n        minorFontScheme = fontScheme.minorFontScheme;\n      }\n      fontName = this.updateFontNameFromTheme(charFormat, minorFontScheme, scriptType, fontName, hintType);\n    }\n    if (isNullOrUndefined(fontName) || HelperMethods.isThemeFont(fontName))\n      //Gets the default font (Times New Roman)\n      fontName = defaultFont;\n    return fontName;\n  };\n  /// <summary>\n  /// Update a font name from theme, based on FontHintType.\n  /// </summary>\n  /// <param name=\"majorMinorFontScheme\"></param>\n  /// <param name=\"scriptType\"></param>\n  /// <param name=\"fontName\"></param>\n  /// <param name=\"hintType\"></param>\n  TextHelper.prototype.updateFontNameFromTheme = function (charFormat, majorMinorFontScheme, scriptType, fontName, hintType) {\n    //Script-Arab, font scheme(latin, ea, cs), default font (Times New Roman)\n    var fontNameFromTheme = \"\";\n    //Gets font from font scheme(latin, ea, cs) of document theme.\n    if (majorMinorFontScheme != null && majorMinorFontScheme.fontSchemeList != null && majorMinorFontScheme.fontSchemeList.length > 0) {\n      majorMinorFontScheme.fontSchemeList.forEach(function (fontSchemeStruct) {\n        if (fontSchemeStruct.name == \"cs\" && (fontName == \"majorBidi\" || fontName == \"minorBidi\")) fontNameFromTheme = fontSchemeStruct.typeface;else if (fontSchemeStruct.name == \"ea\" && (fontName == \"majorEastAsia\" || fontName == \"minorEastAsia\")) fontNameFromTheme = fontSchemeStruct.typeface;else if (fontSchemeStruct.name == \"latin\" && (fontName == \"majorAscii\" || fontName == \"majorHAnsi\" || fontName == \"minorAscii\" || fontName == \"minorHAnsi\")) fontNameFromTheme = fontSchemeStruct.typeface;\n      });\n    }\n    if (majorMinorFontScheme != null && majorMinorFontScheme.fontTypeface != null) {\n      if (hintType == FontHintType.CS) {\n        // //If it's an complex script and \"themeFontLang\" element has a \"bidi\" attribute, then we need to locate the font name\n        // //from the \"theme.xml\" for the language specified by the bidi attribute\n        // if (charFormat.complexScript && Document != null && Document.Settings.ThemeFontLanguages != null &&\n        //     Document.Settings.ThemeFontLanguages.HasValue(WCharacterFormat.LidBiKey))\n        // {\n        //     fontName = this.getFontNameWithFontScript(majorMinorFontScheme, Document.Settings.ThemeFontLanguages.LocaleIdBidi, hintType);\n        //     if (fontName != null)\n        //         fontNameFromTheme = fontName;\n        // }\n        // //To-Do: Have to implement the font name retrieval behavior, when a bidi attribute is not available in theme.\n        // else \n        if (majorMinorFontScheme.fontTypeface.containsKey('Arab')) {\n          //map(object => object.id).indexOf('c');\n          //Gets the Arab-script (language) based font from font scheme (theme)\n          fontNameFromTheme = majorMinorFontScheme.fontTypeface.get('Arab');\n        }\n      } else if (hintType == FontHintType.EastAsia) {\n        // if (Document != null && Document.Settings.ThemeFontLanguages != null &&\n        //     Document.Settings.ThemeFontLanguages.HasValue(WCharacterFormat.LocaleIdFarEastKey))\n        // {\n        //     fontName = this.getFontNameWithFontScript(majorMinorFontScheme, Document.Settings.ThemeFontLanguages.LocaleIdFarEast, hintType);\n        //     if (fontName != null)\n        //         fontNameFromTheme = fontName;\n        // }\n      } else if (isNullOrUndefined(fontNameFromTheme) && this.documentHelper.themeFontLanguage != null && (fontName === \"minorBidi\" || fontName === \"majorBidi\")) {\n        return fontName = this.getFontNameWithFontScript(majorMinorFontScheme, this.documentHelper.themeFontLanguage.localeIdBidi, hintType);\n      }\n    }\n    if (isNullOrUndefined(fontNameFromTheme))\n      //Gets the default font (Times New Roman)\n      fontNameFromTheme = defaultFont;\n    fontName = fontNameFromTheme;\n    return fontName;\n  };\n  // /// <summary>\n  // /// Gets the font name from a theme part for the specified font script.\n  // /// </summary>\n  TextHelper.prototype.getFontNameWithFontScript = function (majorMinorFontScheme, localeID, hintType) {\n    var fontName = null;\n    //To-Do: Should extend this behavior deponds on the localeID.\n    var lang = localeID.toString();\n    var fontTypeFaces = majorMinorFontScheme.fontTypeface;\n    //Gujarati\n    //If lang script is \"gu-IN\" or \"gu\", we should retrive the \"Gujr\" font from a theme part.\n    if ((lang == 'gu_IN' || localeID == 1095) && fontTypeFaces.containsKey(\"Gujr\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Hindi\n    //If lang script is \"hi-IN\" or \"hi\", we should retrive the \"Deva\" font from a theme part.\n    //Marathi\n    //If lang script is \"mr-IN\" or \"mr\", we should retrive the \"Deva\" font from a theme part.\n    else if ((lang == 'hi_IN' || lang == 'mr_IN' || localeID == 1081 || localeID == 1102) && fontTypeFaces.containsKey(\"Deva\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Korean\n    //If lang script is \"ko-KR\" or \"ko\", we should retrive the \"Hang\" font from a theme part.\n    else if ((lang == 'ko_KR' || localeID == 1042) && fontTypeFaces.containsKey(\"Hang\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Chinese - Simplified\n    //If lang script is \"zh-CN\", \"zh-SG\" or \"zh\", we should retrive the \"Hans\" font from a theme part.\n    else if ((lang == 'zh_CN' || lang == 'zh_SG' || localeID == 2052) && fontTypeFaces.containsKey(\"Hans\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Chinese - Traditional\n    //If lang script is \"zh-TW\", \"zh-HK\", or \"zh-MO\", we should retrive the \"Hant\" font from a theme part.\n    else if ((lang == 'zh_TW' || lang == 'zh_HK' || lang == 'zh_MO') && fontTypeFaces.containsKey(\"Hant\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Japanese\n    //If lang script is \"ja-JP\" or \"ja\", we should retrive the \"Jpan\" font from a theme part.\n    else if ((lang == 'ja_JP' || localeID == 1041) && fontTypeFaces.containsKey(\"Jpan\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Tamil\n    //If lang script is \"ta-IN\" or \"ta\", we should retrive the \"Taml\" font from a theme part.\n    else if ((lang == 'ta_IN' || localeID == 1097) && fontTypeFaces.containsKey(\"Taml\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Telugu\n    //If lang script is \"te-IN\" or \"te\", we should retrive the \"Telu\" font from a theme part.\n    else if ((lang == 'te_IN' || localeID == 1098) && fontTypeFaces.containsKey(\"Telu\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Hebrew\n    //If lang script is \"he-IL\" or \"he\", we should retrive the \"Hebr\" font from a theme part.\n    else if ((lang == 'he_IL' || lang == 'yi_Hebr' || localeID == 1037) && fontTypeFaces.containsKey(\"Hebr\")) fontName = fontTypeFaces.get(\"Arab\");\n    //Thai\n    //If lang script is \"th_TH\" or \"th\", we should retrive the \"Thai\" font from a theme part.\n    else if ((lang == 'th_TH' || localeID == 1054) && fontTypeFaces.containsKey(\"Thai\")) fontName = fontTypeFaces.get(\"Thai\");\n    //Arabic\n    else if (hintType == FontHintType.CS && fontTypeFaces.containsKey(\"Arab\")) fontName = fontTypeFaces.get(\"Arab\");\n    return fontName;\n  };\n  TextHelper.prototype.destroy = function () {\n    this.documentHelper = undefined;\n    this.context = undefined;\n    this.paragraphMarkInfo = {};\n    this.paragraphMarkInfo = undefined;\n  };\n  TextHelper.wordSplitCharacters = [String.fromCharCode(32), String.fromCharCode(33), String.fromCharCode(34), String.fromCharCode(35), String.fromCharCode(36), String.fromCharCode(37), String.fromCharCode(38), String.fromCharCode(39), String.fromCharCode(40), String.fromCharCode(41), String.fromCharCode(42), String.fromCharCode(43), String.fromCharCode(44), String.fromCharCode(45), String.fromCharCode(46), String.fromCharCode(47), String.fromCharCode(58), String.fromCharCode(59), String.fromCharCode(60), String.fromCharCode(61), String.fromCharCode(62), String.fromCharCode(63), String.fromCharCode(64), String.fromCharCode(91), String.fromCharCode(92), String.fromCharCode(93), String.fromCharCode(94), String.fromCharCode(95), String.fromCharCode(96), String.fromCharCode(123), String.fromCharCode(124), String.fromCharCode(125), String.fromCharCode(126), String.fromCharCode(1548), String.fromCharCode(1563), String.fromCharCode(8211), String.fromCharCode(8212), String.fromCharCode(8216), String.fromCharCode(8217), String.fromCharCode(8221), String.fromCharCode(12288), String.fromCharCode(8207)];\n  TextHelper.numberNonReversingCharacters = [String.fromCharCode(44), String.fromCharCode(46), String.fromCharCode(47), String.fromCharCode(58), String.fromCharCode(1548)];\n  return TextHelper;\n}();\nexport { TextHelper };","map":{"version":3,"names":["isNullOrUndefined","isUndefined","WCharacterFormat","defaultFont","HelperMethods","CharacterRangeType","FontScriptType","FontHintType","TextHelper","documentHelper","paragraphMarkInfo","context","containerContext","Object","defineProperty","prototype","get","enumerable","configurable","getEnSpaceCharacter","String","fromCharCode","repeatChar","char","count","text","i","getParagraphMarkWidth","characterFormat","getParagraphMarkSize","Width","format","getFormatText","width","getWidth","paragraphMark","textHelper","getHeight","textSizeInfo","Height","BaselineOffset","getTextSize","elementBox","textTrimEndWidth","isRTL","bidi","isRTLText","setText","bdo","scriptType","compatibilityMode","isColumnBreak","height","baselineOffset","length","trimEnd","trimEndWidth","fontToRender","getFontNameToRender","key","heightInfoCollection","sizeInfo","owner","textMeasureHelper","getHeightInternal","formatText","toLocaleLowerCase","fontFamily","fontSize","bold","italic","measureTextExcludingSpaceAtEnd","match","replace","lineBreakMark","baselineAlignment","font","letterSpacing","characterSpacing","scaleFactor","scaling","allCaps","toUpperCase","Math","abs","measureText","textToRender","isBidi","isRender","isRtlText","reverseString","endsWith","spaceCount","addSpace","updateTextSize","paragraph","undefined","listCharacterFormat","listLevel","breakCharacterFormat","hasValue","destroy","containsSpecialCharAlone","specialChars","indexOf","charAt","containsNumberAlone","number","containsCombinationText","element","inverseCharacter","ch","containsSpecialChar","temp","isUnicodeText","isUnicode","getRtlLanguage","isRtl","id","splitTextByConsecutiveLtrAndRtl","isTextBidi","isRTLLang","characterRangeTypes","isPrevLTRText","hasRTLCharacter","charTypeIndex","splittedText","lastLtrIndex","ltrText","rtlText","wordSplitChars","numberText","currentCharacterType","separateEachWordSplitChars","value","isNumber","isWordSplitChar","charCodeAt","push","Number","RightToLeft","LeftToRight","WordSplit","charType","isNumberNonReversingCharacter","splice","j","isNonWordSplitCharacter","isRightToLeftLanguage","lang","isNaN","parseInt","character","wordSplitCharacters","numberNonReversingCharacters","isNonWordSplitChar","charCode","charFormat","complexScript","getFontNameBidiToRender","isEastAsiaScript","fontFamilyFarEast","getFontNameEAToRender","getFontNameAsciiToRender","Japanese","Korean","Chinese","fontName","isThemeFont","getFontNameFromTheme","EastAsia","fontFamilyAscii","Default","fontFamilyBidi","CS","hintType","fontScheme","hasThemes","themes","majorFontScheme","updateFontNameFromTheme","minorFontScheme","majorMinorFontScheme","fontNameFromTheme","fontSchemeList","forEach","fontSchemeStruct","name","typeface","fontTypeface","containsKey","themeFontLanguage","getFontNameWithFontScript","localeIdBidi","localeID","toString","fontTypeFaces"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/text-helper.js"],"sourcesContent":["import { isNullOrUndefined, isUndefined } from '@syncfusion/ej2-base';\nimport { WCharacterFormat } from '../index';\nimport { defaultFont } from '../../index';\nimport { HelperMethods } from '../editor/editor-helper';\nimport { CharacterRangeType, FontScriptType, FontHintType } from '../../index';\n/**\n * @private\n */\nvar TextHelper = /** @class */ (function () {\n    function TextHelper(documentHelper) {\n        this.paragraphMarkInfo = {};\n        this.documentHelper = documentHelper;\n        if (!isNullOrUndefined(documentHelper)) {\n            this.context = documentHelper.containerContext;\n        }\n    }\n    Object.defineProperty(TextHelper.prototype, \"paragraphMark\", {\n        get: function () {\n            return '¶';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextHelper.prototype, \"lineBreakMark\", {\n        get: function () {\n            return '↲';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextHelper.prototype.getEnSpaceCharacter = function () {\n        return String.fromCharCode(8194);\n    };\n    TextHelper.prototype.repeatChar = function (char, count) {\n        var text = '';\n        for (var i = 0; i < count; i++) {\n            text += char;\n        }\n        return text;\n    };\n    TextHelper.prototype.getParagraphMarkWidth = function (characterFormat) {\n        return this.getParagraphMarkSize(characterFormat).Width;\n    };\n    TextHelper.prototype.getParagraphMarkSize = function (characterFormat) {\n        var format = this.getFormatText(characterFormat);\n        if (this.paragraphMarkInfo[\"\" + format]) {\n            return this.paragraphMarkInfo[\"\" + format];\n        }\n        // Gets the text element's width;\n        var width = this.getWidth(this.paragraphMark, characterFormat);\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(characterFormat);\n        var textSizeInfo = {\n            'Width': width, 'Height': textHelper.Height, 'BaselineOffset': textHelper.BaselineOffset\n        };\n        return this.paragraphMarkInfo[\"\" + format] = textSizeInfo;\n    };\n    TextHelper.prototype.getTextSize = function (elementBox, characterFormat) {\n        // Gets the text element's width;\n        var textTrimEndWidth = 0;\n        var isRTL = characterFormat.bidi || this.isRTLText(elementBox.text);\n        var text = this.setText(elementBox.text, isRTL, characterFormat.bdo);\n        if (text === '\\r') {\n            text = String.fromCharCode(182);\n        }\n        textTrimEndWidth = this.getWidth(text, characterFormat, elementBox.scriptType);\n        elementBox.width = textTrimEndWidth;\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(characterFormat, elementBox.scriptType);\n        if (!(this.documentHelper.compatibilityMode === 'Word2003' && elementBox.isColumnBreak)) {\n            elementBox.height = textHelper.Height;\n        }\n        elementBox.baselineOffset = textHelper.BaselineOffset;\n        if (elementBox.text[elementBox.text.length - 1] === ' ') {\n            textTrimEndWidth = this.getWidth(HelperMethods.trimEnd(elementBox.text), characterFormat, elementBox.scriptType);\n        }\n        elementBox.trimEndWidth = textTrimEndWidth;\n        return textTrimEndWidth;\n    };\n    TextHelper.prototype.getHeight = function (characterFormat, scriptType) {\n        var fontToRender = this.getFontNameToRender(scriptType, characterFormat);\n        // Get character format property as  below predefined structure to make it easy to check and retrieve\n        // Predefined static structure `[FontName];[FontSize];bold;italic` to maintain as key in the collection\n        var key = this.getFormatText(characterFormat, fontToRender);\n        if (!isNullOrUndefined(this.documentHelper.heightInfoCollection[\"\" + key])) {\n            return this.documentHelper.heightInfoCollection[\"\" + key];\n        }\n        var sizeInfo = this.documentHelper.owner.textMeasureHelper.getHeightInternal(characterFormat, fontToRender);\n        this.documentHelper.heightInfoCollection[\"\" + key] = sizeInfo;\n        return sizeInfo;\n    };\n    TextHelper.prototype.getFormatText = function (characterFormat, fontToRender) {\n        var formatText = '';\n        if (!isNullOrUndefined(fontToRender)) {\n            formatText = fontToRender.toLocaleLowerCase();\n        }\n        else {\n            formatText = characterFormat.fontFamily.toLocaleLowerCase();\n        }\n        formatText += ';' + characterFormat.fontSize;\n        if (characterFormat.bold) {\n            formatText += ';' + 'bold';\n        }\n        if (characterFormat.italic) {\n            formatText += ';' + 'italic';\n        }\n        return formatText;\n    };\n    TextHelper.prototype.measureTextExcludingSpaceAtEnd = function (text, characterFormat, scriptType) {\n        return this.getWidth(HelperMethods.trimEnd(text), characterFormat, scriptType);\n    };\n    TextHelper.prototype.getWidth = function (text, characterFormat, scriptType) {\n        if (text.match('\\v')) {\n            text.replace('\\v', this.lineBreakMark);\n        }\n        var bold = '';\n        var italic = '';\n        var fontFamily = '';\n        var fontSize = characterFormat.fontSize;\n        bold = characterFormat.bold ? 'bold' : '';\n        italic = characterFormat.italic ? 'italic' : '';\n        fontFamily = this.getFontNameToRender(scriptType, characterFormat);\n        fontSize = fontSize === 0 ? 0.5 : fontSize / (characterFormat.baselineAlignment === 'Normal' ? 1 : 1.5);\n        this.context.font = bold + ' ' + italic + ' ' + fontSize + 'pt' + ' ' + '\"' + fontFamily + '\"';\n        this.context.letterSpacing = characterFormat.characterSpacing + 'pt';\n        var scaleFactor = (characterFormat.scaling / 100);\n        if (characterFormat.allCaps) {\n            text = text.toUpperCase();\n        }\n        //ES-853789:For combine character we need  to add the base character to get the width of the text.\n        if (text == \"\\u0336\") {\n            text += \"A\";\n        }\n        return Math.abs(this.context.measureText(text).width * scaleFactor);\n    };\n    TextHelper.prototype.setText = function (textToRender, isBidi, bdo, isRender) {\n        if (isNullOrUndefined(isRender)) {\n            isRender = false;\n        }\n        if (textToRender.length === 0) {\n            return '';\n        }\n        var isRtlText = isBidi;\n        if ((!isRtlText && (bdo === 'RTL')) || (isRtlText && (bdo === 'LTR'))) {\n            textToRender = HelperMethods.reverseString(textToRender);\n        }\n        else if (isRender && isRtlText && HelperMethods.endsWith(textToRender)) {\n            var spaceCount = textToRender.length - HelperMethods.trimEnd(textToRender).length;\n            textToRender = HelperMethods.addSpace(spaceCount) + HelperMethods.trimEnd(textToRender);\n        }\n        return textToRender;\n    };\n    TextHelper.prototype.measureText = function (text, characterFormat, scriptType) {\n        // Gets the text element's width;\n        var width = this.getWidth(text, characterFormat, scriptType);\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(characterFormat, scriptType);\n        return {\n            'Width': width, 'Height': textHelper.Height, 'BaselineOffset': textHelper.BaselineOffset\n        };\n    };\n    TextHelper.prototype.updateTextSize = function (elementBox, paragraph) {\n        var format = new WCharacterFormat(undefined);\n        var listCharacterFormat = elementBox.listLevel.characterFormat;\n        var breakCharacterFormat = paragraph.characterFormat;\n        format.fontSize = listCharacterFormat.hasValue('fontSize') ? listCharacterFormat.fontSize : breakCharacterFormat.fontSize;\n        format.fontFamily = listCharacterFormat.hasValue('fontFamily') ? listCharacterFormat.fontFamily : breakCharacterFormat.fontFamily;\n        var bold = '';\n        var italic = '';\n        var baselineAlignment = listCharacterFormat.baselineAlignment === 'Normal' ?\n            breakCharacterFormat.baselineAlignment : listCharacterFormat.baselineAlignment;\n        bold = listCharacterFormat.hasValue('bold') ? listCharacterFormat.bold ? 'bold' : '' : breakCharacterFormat.bold ? 'bold' : '';\n        italic = listCharacterFormat.hasValue('italic') ? listCharacterFormat.italic ? 'italic' : ''\n            : breakCharacterFormat.italic ? 'italic' : '';\n        format.baselineAlignment = baselineAlignment;\n        if (bold) {\n            format.bold = true;\n        }\n        if (italic) {\n            format.italic = true;\n        }\n        var isRTL = format.bidi || this.isRTLText(elementBox.text);\n        var text = this.setText(elementBox.text, isRTL, format.bdo);\n        elementBox.width = this.getWidth(text, format);\n        // Calculate the text element's height and baseline offset.\n        var textHelper = this.getHeight(format);\n        elementBox.height = textHelper.Height;\n        elementBox.baselineOffset = textHelper.BaselineOffset;\n        format.destroy();\n    };\n    TextHelper.prototype.containsSpecialCharAlone = function (text) {\n        /* eslint-disable */\n        var specialChars = '*|.\\:[]{}-`\\;()@&$#%!~?,' + ' ' + \"'\";\n        for (var i = 0; i < text.length; i++) {\n            if (specialChars.indexOf(text.charAt(i)) === -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    TextHelper.prototype.containsNumberAlone = function (text) {\n        /* eslint-disable */\n        var number = '0123456789';\n        if (text === '') {\n            return false;\n        }\n        for (var i = 0; i < text.length; i++) {\n            if (number.indexOf(text.charAt(i)) === -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    TextHelper.prototype.containsCombinationText = function (element) {\n        /* eslint-disable */\n        if (element.text.match(/^[0-9]+$/) && element.paragraph.bidi) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TextHelper.prototype.inverseCharacter = function (ch) {\n        switch (ch) {\n            //Specify the '('\n            case '(':\n                //Specify the ')'\n                return ')';\n            //Specify the ')'\n            case ')':\n                //Specify the '('\n                return '(';\n            //Specify the '<'\n            case '<':\n                //Specify the '>'\n                return '>';\n            //Specify the '>'\n            case '>':\n                //Specify the '<'\n                return '<';\n            //Specify the '{'\n            case '{':\n                //Specify the '}'\n                return '}';\n            //Specify the '}'\n            case '}':\n                //Specify the '{'\n                return '{';\n            //Specify the '['\n            case '[':\n                //Specify the ']'\n                return ']';\n            //Specify the ']'\n            case ']':\n                //Specify the '['\n                return '[';\n            default:\n                return ch;\n        }\n    };\n    TextHelper.prototype.containsSpecialChar = function (text) {\n        var specialChars = '*|.\\:[]{}-`\\;()@&$#%!~?' + ' ';\n        for (var i = 0; i < text.length; i++) {\n            if (specialChars.indexOf(text.charAt(i)) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @param {string} text - Specifies the text\n     * @returns {boolean} - Returns true if given text it right to left.\n     */\n    TextHelper.prototype.isRTLText = function (text) {\n        var isRTL = false;\n        if (!isNullOrUndefined(text)) {\n            for (var i = 0; i < text.length; i++) {\n                var temp = text[i];\n                if ((temp >= String.fromCharCode(1424) && temp <= String.fromCharCode(1535)) ////Script-Hebr, Hebrew characters https://en.wikipedia.org/wiki/Hebrew_alphabet#Unicode_and_HTML (https://en.wikipedia.org/wiki/Hebrew_(Unicode_block))\n                    || (temp >= String.fromCharCode(64285) && temp <= String.fromCharCode(64335)) //Script-Hebr, Hebrew Alphabetic Presentation Forms characters https://en.wikipedia.org/wiki/Alphabetic_Presentation_Forms \n                    || (temp >= String.fromCharCode(1536) && temp <= String.fromCharCode(1791)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(1872) && temp <= String.fromCharCode(1919)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(2208) && temp <= String.fromCharCode(2303)) //Arabic characters\n                    || (temp >= String.fromCharCode(64336) && temp <= String.fromCharCode(65023)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(65136) && temp <= String.fromCharCode(65279)) //Arabic - Urdu characters\n                    || (temp >= String.fromCharCode(43392) && temp <= String.fromCharCode(43487)) //Javanese characters\n                    || (temp >= String.fromCharCode(1792) && temp <= String.fromCharCode(1871)) //Syriac characters\n                    || (temp >= String.fromCharCode(1920) && temp <= String.fromCharCode(1983)) //Thaana characters\n                    || (temp >= String.fromCharCode(2112) && temp <= String.fromCharCode(2143)) //Mandiac characters\n                    || (temp >= String.fromCharCode(1984) && temp <= String.fromCharCode(2047)) //N'Ko characters\n                    || (temp >= String.fromCharCode(2048) && temp <= String.fromCharCode(2111)) //Samaritan characters\n                    //Tifinag characters \n                    || (temp >= String.fromCharCode(11568) && temp <= String.fromCharCode(11647))) {\n                    isRTL = true;\n                    break;\n                }\n            }\n        }\n        return isRTL;\n    };\n    /**\n     * @private\n     * @param {string} text - Specifies the text\n     * @param {FontScriptType} scriptType - Specifies the script type\n     * @returns {boolean} - Returns true if given text is unicode text.\n     */\n    TextHelper.prototype.isUnicodeText = function (text, scriptType) {\n        var isUnicode = false;\n        if (!isNullOrUndefined(text)) {\n            for (var i = 0; i < text.length; i++) {\n                var temp = text[i];\n                if (((temp >= '\\u3000' && temp <= '\\u30ff') // Japanese characters\n                    || (temp >= '\\uff00' && temp <= '\\uffef') // Full-width roman characters and half-width katakana\n                    || (temp >= '\\u4e00' && temp <= '\\u9faf') //CJK unifed ideographs - Common and uncommon kanji\n                    || (temp >= '\\u3400' && temp <= '\\u4dbf') //CJK unified ideographs Extension A - Rare kanji\n                    || (temp >= '\\uac00' && temp <= '\\uffef') //Korean Hangul characters\n                    || (temp >= '\\u0d80' && temp <= '\\u0dff')) && scriptType !== 0) //Sinhala characters\n                 {\n                    isUnicode = true;\n                    break;\n                }\n            }\n        }\n        return isUnicode;\n    };\n    /**\n     * @private\n     * @param {string} text - Specifies the text\n     * @returns {RtlInfo} - Returns the text info.\n     */\n    TextHelper.prototype.getRtlLanguage = function (text) {\n        if (isNullOrUndefined(text) || text === '') {\n            return { isRtl: false, id: 0 };\n        }\n        if (text >= String.fromCharCode(1424) && text <= String.fromCharCode(1535)) {\n            return { isRtl: true, id: 1 };\n            //Arabic - Urdu characters\n        }\n        else if ((text >= String.fromCharCode(1536) && text <= String.fromCharCode(1791))\n            || (text >= String.fromCharCode(1872) && text <= String.fromCharCode(1919))\n            || (text >= String.fromCharCode(2208) && text <= String.fromCharCode(2303))\n            || (text >= String.fromCharCode(64336) && text <= String.fromCharCode(65023))\n            || (text >= String.fromCharCode(65136) && text <= String.fromCharCode(65279))) {\n            return { isRtl: true, id: 2 };\n        }\n        else if (text >= String.fromCharCode(43392) && text <= String.fromCharCode(43487)) {\n            return { isRtl: true, id: 3 };\n        }\n        else if (text >= String.fromCharCode(1792) && text <= String.fromCharCode(1871)) {\n            return { isRtl: true, id: 4 };\n        }\n        else if (text >= String.fromCharCode(1920) && text <= String.fromCharCode(1983)) {\n            return { isRtl: true, id: 5 };\n        }\n        else if (text >= String.fromCharCode(2112) && text <= String.fromCharCode(2143)) {\n            return { isRtl: true, id: 6 };\n        }\n        else if (text >= String.fromCharCode(1984) && text <= String.fromCharCode(2047)) {\n            return { isRtl: true, id: 7 };\n        }\n        else if (text >= String.fromCharCode(2048) && text <= String.fromCharCode(2111)) {\n            return { isRtl: true, id: 8 };\n        }\n        else if (text >= String.fromCharCode(11568) && text <= String.fromCharCode(11647)) {\n            return { isRtl: true, id: 9 };\n        }\n        return { isRtl: false, id: 0 };\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.splitTextByConsecutiveLtrAndRtl = function (text, isTextBidi, isRTLLang, characterRangeTypes, isPrevLTRText, hasRTLCharacter) {\n        var charTypeIndex = characterRangeTypes.length;\n        var splittedText = [];\n        if (isNullOrUndefined(text) || text === '') {\n            return splittedText;\n        }\n        var lastLtrIndex = -1;\n        var ltrText = '';\n        var rtlText = '';\n        var wordSplitChars = '';\n        var numberText = '';\n        for (var i = 0; i < text.length; i++) {\n            var currentCharacterType = 0;\n            var separateEachWordSplitChars = false;\n            if ((!isNullOrUndefined(isPrevLTRText.value) ? !isPrevLTRText.value : isTextBidi) && this.isNumber(text[i])) {\n                numberText += text[i];\n                currentCharacterType = 4;\n            }\n            else if (this.isWordSplitChar(text[i])) {\n                currentCharacterType = 2;\n                if (separateEachWordSplitChars = (isTextBidi || (text.charCodeAt(i) == 32 && wordSplitChars == ''))) {\n                    wordSplitChars += text[i];\n                }\n                else {\n                    wordSplitChars += text[i];\n                }\n            }\n            else if (this.isRTLText(text[i]) && !this.isNumber(text[i])) {\n                isPrevLTRText.value = false;\n                hasRTLCharacter.value = true;\n                rtlText += text[i];\n                currentCharacterType = 1;\n            }\n            else {\n                isPrevLTRText.value = true;\n                ltrText += text[i];\n            }\n            if (numberText != '' && currentCharacterType != 4) {\n                splittedText.push(numberText);\n                characterRangeTypes.push(CharacterRangeType.Number);\n                numberText = '';\n            }\n            if (rtlText != '' && currentCharacterType != 1) {\n                splittedText.push(rtlText);\n                characterRangeTypes.push(CharacterRangeType.RightToLeft);\n                rtlText = '';\n            }\n            if (ltrText != '' && currentCharacterType != 0) {\n                splittedText.push(ltrText);\n                lastLtrIndex = splittedText.length - 1;\n                characterRangeTypes.push(CharacterRangeType.LeftToRight);\n                ltrText = '';\n            }\n            if (wordSplitChars != '' && (currentCharacterType != 2 || separateEachWordSplitChars)) {\n                splittedText.push(wordSplitChars);\n                characterRangeTypes.push(CharacterRangeType.WordSplit);\n                wordSplitChars = '';\n            }\n        }\n        if (numberText != '') {\n            splittedText.push(numberText);\n            characterRangeTypes.push(CharacterRangeType.Number);\n        }\n        else if (rtlText != '') {\n            splittedText.push(rtlText);\n            characterRangeTypes.push(CharacterRangeType.RightToLeft);\n        }\n        else if (ltrText != '') {\n            splittedText.push(ltrText);\n            lastLtrIndex = splittedText.length - 1;\n            characterRangeTypes.push(CharacterRangeType.LeftToRight);\n        }\n        else if (wordSplitChars != '') {\n            splittedText.push(wordSplitChars);\n            characterRangeTypes.push(CharacterRangeType.WordSplit);\n        }\n        if (hasRTLCharacter.value || (!isNullOrUndefined(isPrevLTRText.value) && !isPrevLTRText.value)) {\n            for (var i = 1; i < splittedText.length; i++) {\n                //Combines the consecutive LTR, RTL, and Number (Number get combined only if it's splitted by non reversing characters (.,:)) \n                //along with single in-between word split character.\n                var charType = characterRangeTypes[i + charTypeIndex];\n                if (charType == CharacterRangeType.WordSplit && splittedText[i].length == 1\n                    && i + charTypeIndex + 1 < characterRangeTypes.length\n                    && characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.WordSplit\n                    && (characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.Number\n                        //Else handled to combine consecutive number when text bidi is false and middle word split character is not white space.\n                        || TextHelper.isNumberNonReversingCharacter(splittedText[i], isTextBidi))\n                    && characterRangeTypes[i + charTypeIndex - 1] == characterRangeTypes[i + charTypeIndex + 1]) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + splittedText[i + 1];\n                    splittedText.splice(i, 1);\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n            }\n        }\n        else if (lastLtrIndex != -1) {\n            if (isTextBidi) {\n                for (var i = 1; i < lastLtrIndex; i++) {\n                    //Combines the first and last LTR along with all in-between splited text's.\n                    var charType = characterRangeTypes[i + charTypeIndex];\n                    if (charType == CharacterRangeType.WordSplit && i < lastLtrIndex\n                        && characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.LeftToRight) {\n                        ltrText = '';\n                        for (var j = i + 1; j <= lastLtrIndex; j++) {\n                            ltrText += splittedText[j];\n                            splittedText.splice(j, 1);\n                            characterRangeTypes.splice(j + charTypeIndex, 1);\n                            j--;\n                            lastLtrIndex--;\n                        }\n                        splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + ltrText;\n                        splittedText.splice(i, 1);\n                        characterRangeTypes.splice(i + charTypeIndex, 1);\n                        i--;\n                        lastLtrIndex--;\n                    }\n                }\n            }\n            else {\n                //Return the input text if text bidi is false.\n                splittedText.length = 0;\n                splittedText.push(text);\n            }\n        }\n        else if (!isTextBidi) {\n            //Return the input text if text bidi is false.\n            splittedText.length = 0;\n            splittedText.push(text);\n        }\n        if (isTextBidi) {\n            for (var i = 1; i < splittedText.length; i++) {\n                //Combines the consecutive LTR, RTL, and Number (Number get combined only if it's splitted by non reversing characters (.,:)\n                //or if it's lang attribute is represent a RTL language)\n                //along with single in-between number non reversing word split character.\n                var charType = characterRangeTypes[i + charTypeIndex];\n                if (charType == CharacterRangeType.WordSplit && splittedText[i].length == 1\n                    && i + charTypeIndex + 1 < characterRangeTypes.length\n                    && characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.WordSplit\n                    && (characterRangeTypes[i + charTypeIndex - 1] != CharacterRangeType.Number\n                        || TextHelper.isNumberNonReversingCharacter(splittedText[i], isTextBidi) || !isRTLLang)\n                    && characterRangeTypes[i + charTypeIndex - 1] == characterRangeTypes[i + charTypeIndex + 1]) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i] + splittedText[i + 1];\n                    splittedText.splice(i, 1);\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n                //Combines the Number along with single non-word split characters (% $ #).\n                else if (charType == CharacterRangeType.WordSplit\n                    && characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.Number\n                    && this.isNonWordSplitCharacter(splittedText[i]) && !isRTLLang) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i];\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n                //Combines the consecutive LTR and Number\n                else if (charType == CharacterRangeType.LeftToRight\n                    && (characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.Number\n                        || characterRangeTypes[i + charTypeIndex - 1] == CharacterRangeType.LeftToRight)) {\n                    splittedText[i - 1] = splittedText[i - 1] + splittedText[i];\n                    characterRangeTypes[i + charTypeIndex - 1] = CharacterRangeType.LeftToRight;\n                    splittedText.splice(i, 1);\n                    characterRangeTypes.splice(i + charTypeIndex, 1);\n                    i--;\n                }\n            }\n        }\n        return splittedText;\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.isRightToLeftLanguage = function (lang) {\n        return (lang == 14337 || lang == 15361 || lang == 5121 || lang == 3073 || lang == 2049 ||\n            lang == 11265 || lang == 13313 || lang == 12289 || lang == 4097 || lang == 8193 ||\n            lang == 16385 || lang == 1025 || lang == 10241 || lang == 7169 || lang == 9217 || lang == 10655);\n    };\n    TextHelper.prototype.isNumber = function (ch) {\n        if (!isNaN(parseInt(ch, 10))) {\n            //This logic works for universal digits 0 to 9.\n            return true;\n        }\n        else if (ch >= String.fromCharCode(1632) && ch <= String.fromCharCode(1641)) {\n            //This logic works for ARABIC-INDIC DIGIT\n            return true;\n        }\n        else if (ch >= String.fromCharCode(1776) && ch <= String.fromCharCode(1785)) {\n            //This logic works for EXTENDED ARABIC-INDIC DIGIT\n            return true;\n        }\n        else {\n            //TODO: Extend this for language specific \n            return false;\n        }\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.isWordSplitChar = function (character) {\n        for (var i = 0; i < TextHelper.wordSplitCharacters.length; i++) {\n            if (TextHelper.wordSplitCharacters[i] === character) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    TextHelper.isNumberNonReversingCharacter = function (character, isTextBidi) {\n        for (var i = 0; i < TextHelper.numberNonReversingCharacters.length; i++) {\n            var ch = TextHelper.numberNonReversingCharacters[i];\n            if (character[0] == ch && (ch.charCodeAt(0) == 47 ? !isTextBidi : true)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    TextHelper.prototype.isNonWordSplitCharacter = function (character) {\n        var isNonWordSplitChar = false;\n        for (var i = 0; i < character.length; i++) {\n            var charCode = character.charCodeAt(i);\n            //Consider a (% $ #) as non-word split characters\n            if (charCode == 35 || charCode == 36 || charCode == 37) {\n                isNonWordSplitChar = true;\n            }\n            else {\n                isNonWordSplitChar = false;\n                break;\n            }\n        }\n        return isNonWordSplitChar;\n    };\n    TextHelper.prototype.getFontNameToRender = function (scriptType, charFormat) {\n        if (!isNullOrUndefined(scriptType)) {\n            if (charFormat.bidi || charFormat.complexScript) {\n                return this.getFontNameBidiToRender(scriptType, charFormat);\n            }\n            else {\n                if (this.isEastAsiaScript(scriptType) && !isNullOrUndefined(charFormat.fontFamilyFarEast))\n                    return this.getFontNameEAToRender(scriptType, charFormat);\n                else\n                    return this.getFontNameAsciiToRender(scriptType, charFormat);\n            }\n        }\n        else {\n            return charFormat.fontFamily;\n        }\n    };\n    /// <summary>\n    /// Check whether specified script is EastAsia script or not.\n    /// </summary>\n    /// <param name=\"scriptType\">Represent a FontScriptType to check.</param>\n    /// <returns></returns>\n    TextHelper.prototype.isEastAsiaScript = function (scriptType) {\n        return scriptType == FontScriptType.Japanese || scriptType == FontScriptType.Korean\n            || scriptType == FontScriptType.Chinese;\n    };\n    /// <summary>\n    /// Get the font name East Asia to render\n    /// </summary>\n    /// <param name=\"scriptType\">Represent a CharacterRangeType.</param>\n    /// <returns>Returns a eastAsia font name to draw the text.</returns>\n    TextHelper.prototype.getFontNameEAToRender = function (scriptType, charFormat) {\n        var fontName = charFormat.fontFamilyFarEast;\n        if (isNullOrUndefined(fontName) || HelperMethods.isThemeFont(fontName))\n            return this.getFontNameFromTheme(charFormat, fontName, scriptType, FontHintType.EastAsia);\n        else\n            return fontName;\n    };\n    TextHelper.prototype.getFontNameAsciiToRender = function (scriptType, charFormat) {\n        var fontName = charFormat.fontFamilyAscii;\n        if (HelperMethods.isThemeFont(fontName))\n            return this.getFontNameFromTheme(charFormat, fontName, scriptType, FontHintType.Default);\n        else\n            return charFormat.fontFamily;\n    };\n    TextHelper.prototype.getFontNameBidiToRender = function (scriptType, charFormat) {\n        //If CharacterFormat.Bidi is true, then font is determined in the order: FontNameBidi, Script-Arab, font scheme(latin, ea, cs), default font (Times New Roman)\n        //CharacterRangeType of a text and FontHintType (IdctHint) has no impact in this behavior.\n        //Note: Behavior is traced using Word version 1808 (build 10730.20304)\n        //Determines the font nmae to used for RTL characters based on its script from direct or font scheme (Document theme file)\n        var fontName = charFormat.fontFamilyBidi;\n        if (!isNullOrUndefined(fontName) || HelperMethods.isThemeFont(fontName))\n            return this.getFontNameFromTheme(charFormat, fontName, scriptType, FontHintType.CS);\n        else\n            return fontName;\n    };\n    TextHelper.prototype.getFontNameFromTheme = function (charFormat, fontName, scriptType, hintType) {\n        var fontScheme;\n        if (this.documentHelper.hasThemes && !isNullOrUndefined(this.documentHelper.themes) && !isUndefined(this.documentHelper.themes.fontScheme))\n            fontScheme = this.documentHelper.themes.fontScheme;\n        if (fontName == \"majorAscii\" || fontName == \"majorBidi\" || fontName == \"majorEastAsia\" || fontName == \"majorHAnsi\") {\n            var majorFontScheme = void 0;\n            if (fontScheme != null && fontScheme.majorFontScheme != null) {\n                majorFontScheme = fontScheme.majorFontScheme;\n            }\n            fontName = this.updateFontNameFromTheme(charFormat, majorFontScheme, scriptType, fontName, hintType);\n        }\n        else if (fontName == \"minorAscii\" || fontName == \"minorBidi\" || fontName == \"minorEastAsia\" || fontName == \"minorHAnsi\") {\n            var minorFontScheme = void 0;\n            if (fontScheme != null && fontScheme.majorFontScheme != null) {\n                minorFontScheme = fontScheme.minorFontScheme;\n            }\n            fontName = this.updateFontNameFromTheme(charFormat, minorFontScheme, scriptType, fontName, hintType);\n        }\n        if (isNullOrUndefined(fontName) || HelperMethods.isThemeFont(fontName))\n            //Gets the default font (Times New Roman)\n            fontName = defaultFont;\n        return fontName;\n    };\n    /// <summary>\n    /// Update a font name from theme, based on FontHintType.\n    /// </summary>\n    /// <param name=\"majorMinorFontScheme\"></param>\n    /// <param name=\"scriptType\"></param>\n    /// <param name=\"fontName\"></param>\n    /// <param name=\"hintType\"></param>\n    TextHelper.prototype.updateFontNameFromTheme = function (charFormat, majorMinorFontScheme, scriptType, fontName, hintType) {\n        //Script-Arab, font scheme(latin, ea, cs), default font (Times New Roman)\n        var fontNameFromTheme = \"\";\n        //Gets font from font scheme(latin, ea, cs) of document theme.\n        if (majorMinorFontScheme != null && majorMinorFontScheme.fontSchemeList != null\n            && majorMinorFontScheme.fontSchemeList.length > 0) {\n            majorMinorFontScheme.fontSchemeList.forEach(function (fontSchemeStruct) {\n                if (fontSchemeStruct.name == \"cs\" && (fontName == \"majorBidi\" || fontName == \"minorBidi\"))\n                    fontNameFromTheme = fontSchemeStruct.typeface;\n                else if (fontSchemeStruct.name == \"ea\" && (fontName == \"majorEastAsia\" || fontName == \"minorEastAsia\"))\n                    fontNameFromTheme = fontSchemeStruct.typeface;\n                else if (fontSchemeStruct.name == \"latin\" && (fontName == \"majorAscii\" || fontName == \"majorHAnsi\"\n                    || fontName == \"minorAscii\" || fontName == \"minorHAnsi\"))\n                    fontNameFromTheme = fontSchemeStruct.typeface;\n            });\n        }\n        if (majorMinorFontScheme != null && majorMinorFontScheme.fontTypeface != null) {\n            if (hintType == FontHintType.CS) {\n                // //If it's an complex script and \"themeFontLang\" element has a \"bidi\" attribute, then we need to locate the font name\n                // //from the \"theme.xml\" for the language specified by the bidi attribute\n                // if (charFormat.complexScript && Document != null && Document.Settings.ThemeFontLanguages != null &&\n                //     Document.Settings.ThemeFontLanguages.HasValue(WCharacterFormat.LidBiKey))\n                // {\n                //     fontName = this.getFontNameWithFontScript(majorMinorFontScheme, Document.Settings.ThemeFontLanguages.LocaleIdBidi, hintType);\n                //     if (fontName != null)\n                //         fontNameFromTheme = fontName;\n                // }\n                // //To-Do: Have to implement the font name retrieval behavior, when a bidi attribute is not available in theme.\n                // else \n                if (majorMinorFontScheme.fontTypeface.containsKey('Arab')) {\n                    //map(object => object.id).indexOf('c');\n                    //Gets the Arab-script (language) based font from font scheme (theme)\n                    fontNameFromTheme = majorMinorFontScheme.fontTypeface.get('Arab');\n                }\n            }\n            else if (hintType == FontHintType.EastAsia) {\n                // if (Document != null && Document.Settings.ThemeFontLanguages != null &&\n                //     Document.Settings.ThemeFontLanguages.HasValue(WCharacterFormat.LocaleIdFarEastKey))\n                // {\n                //     fontName = this.getFontNameWithFontScript(majorMinorFontScheme, Document.Settings.ThemeFontLanguages.LocaleIdFarEast, hintType);\n                //     if (fontName != null)\n                //         fontNameFromTheme = fontName;\n                // }\n            }\n            else if (isNullOrUndefined(fontNameFromTheme) && this.documentHelper.themeFontLanguage != null && (fontName === \"minorBidi\" || fontName === \"majorBidi\")) {\n                return fontName = this.getFontNameWithFontScript(majorMinorFontScheme, this.documentHelper.themeFontLanguage.localeIdBidi, hintType);\n            }\n        }\n        if (isNullOrUndefined(fontNameFromTheme))\n            //Gets the default font (Times New Roman)\n            fontNameFromTheme = defaultFont;\n        fontName = fontNameFromTheme;\n        return fontName;\n    };\n    // /// <summary>\n    // /// Gets the font name from a theme part for the specified font script.\n    // /// </summary>\n    TextHelper.prototype.getFontNameWithFontScript = function (majorMinorFontScheme, localeID, hintType) {\n        var fontName = null;\n        //To-Do: Should extend this behavior deponds on the localeID.\n        var lang = localeID.toString();\n        var fontTypeFaces = majorMinorFontScheme.fontTypeface;\n        //Gujarati\n        //If lang script is \"gu-IN\" or \"gu\", we should retrive the \"Gujr\" font from a theme part.\n        if ((lang == 'gu_IN' || localeID == 1095) && fontTypeFaces.containsKey(\"Gujr\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Hindi\n        //If lang script is \"hi-IN\" or \"hi\", we should retrive the \"Deva\" font from a theme part.\n        //Marathi\n        //If lang script is \"mr-IN\" or \"mr\", we should retrive the \"Deva\" font from a theme part.\n        else if ((lang == 'hi_IN' || lang == 'mr_IN' || localeID == 1081 || localeID == 1102)\n            && fontTypeFaces.containsKey(\"Deva\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Korean\n        //If lang script is \"ko-KR\" or \"ko\", we should retrive the \"Hang\" font from a theme part.\n        else if ((lang == 'ko_KR' || localeID == 1042) && fontTypeFaces.containsKey(\"Hang\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Chinese - Simplified\n        //If lang script is \"zh-CN\", \"zh-SG\" or \"zh\", we should retrive the \"Hans\" font from a theme part.\n        else if ((lang == 'zh_CN' || lang == 'zh_SG' || localeID == 2052) && fontTypeFaces.containsKey(\"Hans\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Chinese - Traditional\n        //If lang script is \"zh-TW\", \"zh-HK\", or \"zh-MO\", we should retrive the \"Hant\" font from a theme part.\n        else if ((lang == 'zh_TW' || lang == 'zh_HK' || lang == 'zh_MO')\n            && fontTypeFaces.containsKey(\"Hant\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Japanese\n        //If lang script is \"ja-JP\" or \"ja\", we should retrive the \"Jpan\" font from a theme part.\n        else if ((lang == 'ja_JP' || localeID == 1041) && fontTypeFaces.containsKey(\"Jpan\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Tamil\n        //If lang script is \"ta-IN\" or \"ta\", we should retrive the \"Taml\" font from a theme part.\n        else if ((lang == 'ta_IN' || localeID == 1097) && fontTypeFaces.containsKey(\"Taml\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Telugu\n        //If lang script is \"te-IN\" or \"te\", we should retrive the \"Telu\" font from a theme part.\n        else if ((lang == 'te_IN' || localeID == 1098) && fontTypeFaces.containsKey(\"Telu\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Hebrew\n        //If lang script is \"he-IL\" or \"he\", we should retrive the \"Hebr\" font from a theme part.\n        else if ((lang == 'he_IL' || lang == 'yi_Hebr' || localeID == 1037) && fontTypeFaces.containsKey(\"Hebr\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        //Thai\n        //If lang script is \"th_TH\" or \"th\", we should retrive the \"Thai\" font from a theme part.\n        else if ((lang == 'th_TH' || localeID == 1054) && fontTypeFaces.containsKey(\"Thai\"))\n            fontName = fontTypeFaces.get(\"Thai\");\n        //Arabic\n        else if (hintType == FontHintType.CS && fontTypeFaces.containsKey(\"Arab\"))\n            fontName = fontTypeFaces.get(\"Arab\");\n        return fontName;\n    };\n    TextHelper.prototype.destroy = function () {\n        this.documentHelper = undefined;\n        this.context = undefined;\n        this.paragraphMarkInfo = {};\n        this.paragraphMarkInfo = undefined;\n    };\n    TextHelper.wordSplitCharacters = [String.fromCharCode(32), String.fromCharCode(33), String.fromCharCode(34), String.fromCharCode(35), String.fromCharCode(36), String.fromCharCode(37), String.fromCharCode(38), String.fromCharCode(39), String.fromCharCode(40), String.fromCharCode(41), String.fromCharCode(42), String.fromCharCode(43), String.fromCharCode(44), String.fromCharCode(45), String.fromCharCode(46), String.fromCharCode(47), String.fromCharCode(58), String.fromCharCode(59), String.fromCharCode(60), String.fromCharCode(61), String.fromCharCode(62), String.fromCharCode(63), String.fromCharCode(64), String.fromCharCode(91), String.fromCharCode(92), String.fromCharCode(93), String.fromCharCode(94), String.fromCharCode(95), String.fromCharCode(96), String.fromCharCode(123), String.fromCharCode(124), String.fromCharCode(125), String.fromCharCode(126), String.fromCharCode(1548), String.fromCharCode(1563), String.fromCharCode(8211), String.fromCharCode(8212), String.fromCharCode(8216), String.fromCharCode(8217), String.fromCharCode(8221), String.fromCharCode(12288), String.fromCharCode(8207)];\n    TextHelper.numberNonReversingCharacters = [String.fromCharCode(44), String.fromCharCode(46), String.fromCharCode(47), String.fromCharCode(58), String.fromCharCode(1548)];\n    return TextHelper;\n}());\nexport { TextHelper };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}