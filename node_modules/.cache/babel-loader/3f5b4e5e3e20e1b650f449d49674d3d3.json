{"ast":null,"code":"import { createElement, Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Draggable from 'react-draggable';\nimport Resizable from 're-resizable';\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\nvar resizableStyle = {\n  width: 'auto',\n  height: 'auto',\n  display: 'inline-block',\n  position: 'absolute',\n  top: 0,\n  left: 0\n};\nvar Rnd = function (_React$Component) {\n  inherits(Rnd, _React$Component);\n  function Rnd(props) {\n    classCallCheck(this, Rnd);\n    var _this = possibleConstructorReturn(this, (Rnd.__proto__ || Object.getPrototypeOf(Rnd)).call(this, props));\n    _this.state = {\n      z: props.z,\n      original: {\n        x: 0,\n        y: 0\n      },\n      bounds: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      maxWidth: props.maxWidth,\n      maxHeight: props.maxHeight,\n      isMounted: false\n    };\n    _this.onResizeStart = _this.onResizeStart.bind(_this);\n    _this.onResize = _this.onResize.bind(_this);\n    _this.onResizeStop = _this.onResizeStop.bind(_this);\n    _this.onDragStart = _this.onDragStart.bind(_this);\n    _this.onDrag = _this.onDrag.bind(_this);\n    _this.onDragStop = _this.onDragStop.bind(_this);\n    _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);\n    return _this;\n  }\n  createClass(Rnd, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.z !== nextProps.z) {\n        this.setState({\n          z: nextProps.z\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.setParentPosition();\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: 'getParentSize',\n    value: function getParentSize() {\n      return this.resizable.getParentSize();\n    }\n  }, {\n    key: 'getMaxSizesFromProps',\n    value: function getMaxSizesFromProps() {\n      var maxWidth = typeof this.props.maxWidth === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;\n      var maxHeight = typeof this.props.maxHeight === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;\n      return {\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      };\n    }\n  }, {\n    key: 'getSelfElement',\n    value: function getSelfElement() {\n      if (!this) return null;\n      return findDOMNode(this);\n    }\n  }, {\n    key: 'setParentPosition',\n    value: function setParentPosition() {\n      var element = this.getSelfElement();\n      if (element instanceof Element) {\n        var parent = element.parentNode;\n        if (!parent || typeof window === 'undefined') return;\n        if (!(parent instanceof HTMLElement)) return;\n        if (getComputedStyle(parent).position !== 'static') {\n          return;\n        }\n        parent.style.position = 'relative';\n      }\n    }\n  }, {\n    key: 'onDragStart',\n    value: function onDragStart(e, data) {\n      if (this.props.onDragStart) {\n        this.props.onDragStart(e, data);\n      }\n      if (!this.props.bounds) return;\n      var parent = this.resizable && this.resizable.parentNode;\n      var target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n      if (!(target instanceof HTMLElement) || !(parent instanceof HTMLElement)) {\n        return;\n      }\n      var targetRect = target.getBoundingClientRect();\n      var targetLeft = targetRect.left;\n      var targetTop = targetRect.top;\n      var parentRect = parent.getBoundingClientRect();\n      var parentLeft = parentRect.left;\n      var parentTop = parentRect.top;\n      var left = targetLeft - parentLeft;\n      var top = targetTop - parentTop;\n      if (!this.resizable) return;\n      this.setState({\n        bounds: {\n          top: top,\n          right: left + (target.offsetWidth - this.resizable.size.width),\n          bottom: this.props._freeBottomBounds // eslint-disable-line\n          ? 2147483647 : top + (target.offsetHeight - this.resizable.size.height),\n          left: left\n        }\n      });\n    }\n  }, {\n    key: 'onDrag',\n    value: function onDrag(e, data) {\n      if (this.props.onDrag) {\n        this.props.onDrag(e, data);\n      }\n    }\n  }, {\n    key: 'onDragStop',\n    value: function onDragStop(e, data) {\n      if (this.props.onDragStop) {\n        this.props.onDragStop(e, data);\n      }\n    }\n  }, {\n    key: 'onResizeStart',\n    value: function onResizeStart(e, dir, refToElement) {\n      e.stopPropagation();\n      this.setState({\n        original: {\n          x: this.draggable.state.x,\n          y: this.draggable.state.y\n        }\n      });\n      if (this.props.bounds) {\n        var parent = this.resizable && this.resizable.parentNode;\n        var target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n        var self = this.getSelfElement();\n        if (self instanceof Element && target instanceof HTMLElement && parent instanceof HTMLElement) {\n          var _getMaxSizesFromProps = this.getMaxSizesFromProps(),\n            _maxWidth = _getMaxSizesFromProps.maxWidth,\n            _maxHeight = _getMaxSizesFromProps.maxHeight;\n          var parentSize = this.getParentSize();\n          if (_maxWidth && typeof _maxWidth === 'string') {\n            if (_maxWidth.endsWith('%')) {\n              var ratio = Number(_maxWidth.replace('%', '')) / 100;\n              _maxWidth = parentSize.width * ratio;\n            } else if (_maxWidth.endsWith('px')) {\n              _maxWidth = Number(_maxWidth.replace('px', ''));\n            }\n          }\n          if (_maxHeight && typeof _maxHeight === 'string') {\n            if (_maxHeight.endsWith('%')) {\n              var _ratio = Number(_maxHeight.replace('%', '')) / 100;\n              _maxHeight = parentSize.width * _ratio;\n            } else if (_maxHeight.endsWith('px')) {\n              _maxHeight = Number(_maxHeight.replace('px', ''));\n            }\n          }\n          var selfRect = self.getBoundingClientRect();\n          var selfLeft = selfRect.left;\n          var selfTop = selfRect.top;\n          var targetRect = target.getBoundingClientRect();\n          var targetLeft = targetRect.left;\n          var targetTop = targetRect.top;\n          if (/left/i.test(dir) && this.resizable) {\n            var max = selfLeft - targetLeft + this.resizable.size.width;\n            this.setState({\n              maxWidth: max > Number(_maxWidth) ? _maxWidth : max\n            });\n          }\n          if (/right/i.test(dir)) {\n            var _max = target.offsetWidth + (targetLeft - selfLeft);\n            this.setState({\n              maxWidth: _max > Number(_maxWidth) ? _maxWidth : _max\n            });\n          }\n          if (/top/i.test(dir) && this.resizable) {\n            var _max2 = selfTop - targetTop + this.resizable.size.height;\n            this.setState({\n              maxHeight: _max2 > Number(_maxHeight) ? _maxHeight : _max2\n            });\n          }\n          if (/bottom/i.test(dir)) {\n            var _max3 = target.offsetHeight + (targetTop - selfTop);\n            this.setState({\n              maxHeight: _max3 > Number(_maxHeight) ? _maxHeight : _max3\n            });\n          }\n        }\n      } else {\n        this.setState({\n          maxWidth: this.props.maxWidth,\n          maxHeight: this.props.maxHeight\n        });\n      }\n      if (this.props.onResizeStart) {\n        this.props.onResizeStart(e, dir, refToElement);\n      }\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize(e, direction, refToResizableElement, delta) {\n      var x = void 0;\n      var y = void 0;\n      if (/left/i.test(direction)) {\n        x = this.state.original.x - delta.width;\n        this.draggable.setState({\n          x: x\n        });\n      }\n      if (/top/i.test(direction)) {\n        y = this.state.original.y - delta.height;\n        this.draggable.setState({\n          y: y\n        });\n      }\n      if (this.props.onResize) {\n        this.props.onResize(e, direction, refToResizableElement, delta, {\n          x: x || this.draggable.state.x,\n          y: y || this.draggable.state.y\n        });\n      }\n    }\n  }, {\n    key: 'onResizeStop',\n    value: function onResizeStop(e, direction, refToResizableElement, delta) {\n      var _getMaxSizesFromProps2 = this.getMaxSizesFromProps(),\n        maxWidth = _getMaxSizesFromProps2.maxWidth,\n        maxHeight = _getMaxSizesFromProps2.maxHeight;\n      this.setState({\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n      if (this.props.onResizeStop) {\n        var _position = {\n          x: this.draggable.state.x,\n          y: this.draggable.state.y\n        };\n        this.props.onResizeStop(e, direction, refToResizableElement, delta, _position);\n      }\n    }\n  }, {\n    key: 'updateSize',\n    value: function updateSize(size) {\n      if (!this.resizable) return;\n      this.resizable.updateSize({\n        width: size.width,\n        height: size.height\n      });\n    }\n  }, {\n    key: 'updatePosition',\n    value: function updatePosition(position) {\n      this.draggable.setState(position);\n    }\n  }, {\n    key: 'updateZIndex',\n    value: function updateZIndex(z) {\n      this.setState({\n        z: z\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var cursorStyle = this.props.disableDragging || this.props.dragHandleClassName ? {\n        cursor: 'normal'\n      } : {\n        cursor: 'move'\n      };\n      var innerStyle = _extends({}, resizableStyle, {\n        zIndex: this.state.z\n      }, cursorStyle, this.props.style);\n      // HACK: Wait for setting relative to parent element.\n      if (!this.state.isMounted) return createElement('div', null, this.props.children);\n      var maxHeight = this.props._freeBottomBounds ? 2147483647 : this.state.maxHeight; // eslint-disable-line\n      return createElement(Draggable, {\n        ref: function ref(c) {\n          _this2.draggable = c;\n        },\n        handle: this.props.dragHandleClassName,\n        defaultPosition: this.props.default,\n        onStart: this.onDragStart,\n        onDrag: this.onDrag,\n        onStop: this.onDragStop,\n        axis: this.props.dragAxis,\n        disabled: this.props.disableDragging,\n        grid: this.props.dragGrid,\n        bounds: this.props.bounds ? this.state.bounds : undefined,\n        position: this.props.position,\n        enableUserSelectHack: this.props.enableUserSelectHack,\n        cancel: this.props.cancel\n      }, createElement(Resizable, _extends({}, this.props.extendsProps, {\n        className: this.props.className,\n        ref: function ref(c) {\n          _this2.resizable = c;\n        },\n        defaultSize: this.props.default,\n        size: this.props.size,\n        enable: this.props.enableResizing,\n        onResizeStart: this.onResizeStart,\n        onResize: this.onResize,\n        onResizeStop: this.onResizeStop,\n        style: innerStyle,\n        minWidth: this.props.minWidth,\n        minHeight: this.props.minHeight,\n        maxWidth: this.state.maxWidth,\n        maxHeight: maxHeight,\n        grid: this.props.resizeGrid,\n        handleWrapperClass: this.props.resizeHandleWrapperClass,\n        handleWrapperStyle: this.props.resizeHandleWrapperStyle,\n        lockAspectRatio: this.props.lockAspectRatio,\n        lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth,\n        lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight,\n        handleStyles: this.props.resizeHandleStyles,\n        handleClasses: this.props.resizeHandleClasses\n      }), this.props.children));\n    }\n  }]);\n  return Rnd;\n}(Component);\nRnd.defaultProps = {\n  maxWidth: Number.MAX_SAFE_INTEGER,\n  maxHeight: Number.MAX_SAFE_INTEGER,\n  onResizeStart: function onResizeStart() {},\n  onResize: function onResize() {},\n  onResizeStop: function onResizeStop() {},\n  onDragStart: function onDragStart() {},\n  onDrag: function onDrag() {},\n  onDragStop: function onDragStop() {}\n};\nexport default Rnd;","map":{"version":3,"sources":["../src/index.js"],"names":["resizableStyle","Rnd","React","defaultProps","Number","MAX_SAFE_INTEGER","props","state","z","maxWidth","maxHeight","onResizeStart","bind","onResize","onResizeStop","onDragStart","onDrag","onDragStop","getMaxSizesFromProps","nextProps","setState","setParentPosition","isMounted","resizable","getParentSize","findDOMNode","element","getSelfElement","Element","parent","parentNode","window","HTMLElement","getComputedStyle","position","style","e","data","bounds","target","document","querySelector","targetRect","getBoundingClientRect","targetLeft","left","targetTop","top","parentRect","parentLeft","parentTop","offsetWidth","size","width","_freeBottomBounds","offsetHeight","height","dir","refToElement","stopPropagation","x","draggable","y","self","parentSize","endsWith","ratio","replace","selfRect","selfLeft","selfTop","test","max","direction","refToResizableElement","delta","original","updateSize","cursorStyle","disableDragging","dragHandleClassName","cursor","innerStyle","React.createElement","children","c","default","dragAxis","dragGrid","undefined","enableUserSelectHack","cancel","extendsProps","className","enableResizing","minWidth","minHeight","resizeGrid","resizeHandleWrapperClass","resizeHandleWrapperStyle","lockAspectRatio","lockAspectRatioExtraWidth","lockAspectRatioExtraHeight","resizeHandleStyles","resizeHandleClasses"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Draggable from 'react-draggable';\nimport Resizable from 're-resizable';\nimport type { ResizeDirection, ResizeCallback, ResizeStartCallback } from 're-resizable';\n\nexport type Grid = [number, number];\n\nexport type Position = {\n  x: number,\n  y: number,\n};\n\nexport type DraggableData = {\n  node: HTMLElement,\n  deltaX: number,\n  deltaY: number,\n  lastX: number,\n  lastY: number,\n} & Position;\n\nexport type RndDragCallback = (e: Event, data: DraggableData) => void | false;\n\nexport type RndResizeStartCallback = (\n  e: SyntheticMouseEvent<HTMLDivElement> | SyntheticTouchEvent<HTMLDivElement>,\n  dir: ResizeDirection,\n  refToElement: React.ElementRef<'div'>,\n) => void;\n\nexport type ResizableDelta = {\n  width: number,\n  height: number,\n};\n\nexport type RndResizeCallback = (\n  e: MouseEvent | TouchEvent,\n  dir: ResizeDirection,\n  refToElement: React.ElementRef<'div'>,\n  delta: ResizableDelta,\n  position: Position,\n) => void;\n\ntype Size = {\n  width: string | number,\n  height: string | number,\n};\n\ntype State = {\n  z?: number,\n  original: Position,\n  bounds: {\n    top: number,\n    right: number,\n    bottom: number,\n    left: number,\n  },\n  maxWidth?: number | string,\n  maxHeight?: number | string,\n  isMounted: boolean,\n};\n\ntype MaxSize = {\n  maxWidth: number | string,\n  maxHeight: number | string,\n};\n\nexport type ResizeEnable = {\n  bottom?: boolean,\n  bottomLeft?: boolean,\n  bottomRight?: boolean,\n  left?: boolean,\n  right?: boolean,\n  top?: boolean,\n  topLeft?: boolean,\n  topRight?: boolean,\n};\n\nexport type HandleClasses = {\n  bottom?: string,\n  bottomLeft?: string,\n  bottomRight?: string,\n  left?: string,\n  right?: string,\n  top?: string,\n  topLeft?: string,\n  topRight?: string,\n};\n\ntype Style = {\n  [key: string]: string | number,\n};\n\nexport type HandleStyles = {\n  bottom?: Style,\n  bottomLeft?: Style,\n  bottomRight?: Style,\n  left?: Style,\n  right?: Style,\n  top?: Style,\n  topLeft?: Style,\n  topRight?: Style,\n};\n\ntype Props = {\n  z?: number,\n  dragGrid?: Grid,\n  default?: {\n    x: number,\n    y: number,\n  } & Size,\n  position?: {\n    x: number,\n    y: number,\n  },\n  size?: Size,\n  resizeGrid?: Grid,\n  bounds?: string,\n  onResizeStart?: RndResizeStartCallback,\n  onResize?: RndResizeCallback,\n  onResizeStop?: RndResizeCallback,\n  onDragStart?: RndDragCallback,\n  onDrag?: RndDragCallback,\n  onDragStop?: RndDragCallback,\n  className?: string,\n  style?: Style,\n  children?: React.Node,\n  enableResizing?: ResizeEnable,\n  extendsProps?: { [key: string]: any },\n  resizeHandleClasses?: HandleClasses,\n  resizeHandleStyles?: HandleStyles,\n  resizeHandleWrapperClass?: string,\n  resizeHandleWrapperStyle?: Style,\n  lockAspectRatio?: boolean | number,\n  lockAspectRatioExtraWidth?: number,\n  lockAspectRatioExtraHeight?: number,\n  maxHeight?: number | string,\n  maxWidth?: number | string,\n  minHeight?: number | string,\n  minWidth?: number | string,\n  dragAxis?: 'x' | 'y' | 'both' | 'none',\n  dragHandleClassName?: string,\n  disableDragging?: boolean,\n  cancel?: boolean,\n  enableUserSelectHack?: boolean,\n  _freeBottomBounds?: boolean, // Back door for react-elastic-grid.\n};\n\nconst resizableStyle = {\n  width: 'auto',\n  height: 'auto',\n  display: 'inline-block',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n};\n\nexport default class Rnd extends React.Component<Props, State> {\n  static defaultProps = {\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    maxHeight: Number.MAX_SAFE_INTEGER,\n    onResizeStart: () => {},\n    onResize: () => {},\n    onResizeStop: () => {},\n    onDragStart: () => {},\n    onDrag: () => {},\n    onDragStop: () => {},\n  };\n  resizable: React$ElementRef<typeof Resizable> | null;\n  draggable: Draggable;\n  onResizeStart: ResizeStartCallback;\n  onResize: ResizeCallback;\n  onResizeStop: ResizeCallback;\n  onDragStart: RndDragCallback;\n  onDrag: RndDragCallback;\n  onDragStop: RndDragCallback;\n  getMaxSizesFromProps: () => {\n    maxWidth: number | string,\n    maxHeight: number | string,\n  };\n  wrapper: HTMLElement;\n  parentId: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      z: props.z,\n      original: {\n        x: 0,\n        y: 0,\n      },\n      bounds: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n      maxWidth: props.maxWidth,\n      maxHeight: props.maxHeight,\n      isMounted: false,\n    };\n    this.onResizeStart = this.onResizeStart.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.onResizeStop = this.onResizeStop.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDrag = this.onDrag.bind(this);\n    this.onDragStop = this.onDragStop.bind(this);\n    this.getMaxSizesFromProps = this.getMaxSizesFromProps.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.z !== nextProps.z) {\n      this.setState({ z: nextProps.z });\n    }\n  }\n\n  componentDidMount() {\n    this.setParentPosition();\n    this.setState({ isMounted: true });\n  }\n\n  getParentSize(): { width: number, height: number } {\n    return (this.resizable: any).getParentSize();\n  }\n\n  getMaxSizesFromProps(): MaxSize {\n    const maxWidth = typeof this.props.maxWidth === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;\n    const maxHeight = typeof this.props.maxHeight === 'undefined' ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;\n    return { maxWidth, maxHeight };\n  }\n\n  getSelfElement(): null | Element | Text {\n    if (!this) return null;\n    return findDOMNode(this);\n  }\n\n  setParentPosition() {\n    const element = this.getSelfElement();\n    if (element instanceof Element) {\n      const parent = element.parentNode;\n      if (!parent || typeof window === 'undefined') return;\n      if (!(parent instanceof HTMLElement)) return;\n      if (getComputedStyle(parent).position !== 'static') {\n        return;\n      }\n      parent.style.position = 'relative';\n    }\n  }\n\n  onDragStart(e: Event, data: DraggableData) {\n    if (this.props.onDragStart) {\n      this.props.onDragStart(e, data);\n    }\n    if (!this.props.bounds) return;\n    const parent = this.resizable && this.resizable.parentNode;\n    const target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n    if (!(target instanceof HTMLElement) || !(parent instanceof HTMLElement)) {\n      return;\n    }\n    const targetRect = target.getBoundingClientRect();\n    const targetLeft = targetRect.left;\n    const targetTop = targetRect.top;\n    const parentRect = parent.getBoundingClientRect();\n    const parentLeft = parentRect.left;\n    const parentTop = parentRect.top;\n    const left = targetLeft - parentLeft;\n    const top = targetTop - parentTop;\n    if (!this.resizable) return;\n    this.setState({\n      bounds: {\n        top,\n        right: left + (target.offsetWidth - this.resizable.size.width),\n        bottom: this.props._freeBottomBounds // eslint-disable-line\n          ? 2147483647\n          : top + (target.offsetHeight - this.resizable.size.height),\n        left,\n      },\n    });\n  }\n\n  onDrag(e: Event, data: DraggableData) {\n    if (this.props.onDrag) {\n      this.props.onDrag(e, data);\n    }\n  }\n\n  onDragStop(e: Event, data: DraggableData) {\n    if (this.props.onDragStop) {\n      this.props.onDragStop(e, data);\n    }\n  }\n\n  onResizeStart(\n    e: SyntheticMouseEvent<HTMLDivElement> | SyntheticTouchEvent<HTMLDivElement>,\n    dir: ResizeDirection,\n    refToElement: React.ElementRef<'div'>,\n  ) {\n    e.stopPropagation();\n    this.setState({\n      original: { x: this.draggable.state.x, y: this.draggable.state.y },\n    });\n    if (this.props.bounds) {\n      const parent = this.resizable && this.resizable.parentNode;\n      const target = this.props.bounds === 'parent' ? parent : document.querySelector(this.props.bounds);\n      const self = this.getSelfElement();\n      if (self instanceof Element && target instanceof HTMLElement && parent instanceof HTMLElement) {\n        let { maxWidth, maxHeight } = this.getMaxSizesFromProps();\n        const parentSize = this.getParentSize();\n        if (maxWidth && typeof maxWidth === 'string') {\n          if (maxWidth.endsWith('%')) {\n            const ratio = Number(maxWidth.replace('%', '')) / 100;\n            maxWidth = parentSize.width * ratio;\n          } else if (maxWidth.endsWith('px')) {\n            maxWidth = Number(maxWidth.replace('px', ''));\n          }\n        }\n        if (maxHeight && typeof maxHeight === 'string') {\n          if (maxHeight.endsWith('%')) {\n            const ratio = Number(maxHeight.replace('%', '')) / 100;\n            maxHeight = parentSize.width * ratio;\n          } else if (maxHeight.endsWith('px')) {\n            maxHeight = Number(maxHeight.replace('px', ''));\n          }\n        }\n        const selfRect = self.getBoundingClientRect();\n        const selfLeft = selfRect.left;\n        const selfTop = selfRect.top;\n        const targetRect = target.getBoundingClientRect();\n        const targetLeft = targetRect.left;\n        const targetTop = targetRect.top;\n        if (/left/i.test(dir) && this.resizable) {\n          const max = selfLeft - targetLeft + this.resizable.size.width;\n          this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });\n        }\n        if (/right/i.test(dir)) {\n          const max = target.offsetWidth + (targetLeft - selfLeft);\n          this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });\n        }\n        if (/top/i.test(dir) && this.resizable) {\n          const max = selfTop - targetTop + this.resizable.size.height;\n          this.setState({\n            maxHeight: max > Number(maxHeight) ? maxHeight : max,\n          });\n        }\n        if (/bottom/i.test(dir)) {\n          const max = target.offsetHeight + (targetTop - selfTop);\n          this.setState({\n            maxHeight: max > Number(maxHeight) ? maxHeight : max,\n          });\n        }\n      }\n    } else {\n      this.setState({\n        maxWidth: this.props.maxWidth,\n        maxHeight: this.props.maxHeight,\n      });\n    }\n    if (this.props.onResizeStart) {\n      this.props.onResizeStart(e, dir, refToElement);\n    }\n  }\n\n  onResize(\n    e: MouseEvent | TouchEvent,\n    direction: ResizeDirection,\n    refToResizableElement: React.ElementRef<'div'>,\n    delta: { height: number, width: number },\n  ) {\n    let x;\n    let y;\n    if (/left/i.test(direction)) {\n      x = this.state.original.x - delta.width;\n      this.draggable.setState({ x });\n    }\n    if (/top/i.test(direction)) {\n      y = this.state.original.y - delta.height;\n      this.draggable.setState({ y });\n    }\n    if (this.props.onResize) {\n      this.props.onResize(e, direction, refToResizableElement, delta, {\n        x: x || this.draggable.state.x,\n        y: y || this.draggable.state.y,\n      });\n    }\n  }\n\n  onResizeStop(\n    e: MouseEvent | TouchEvent,\n    direction: ResizeDirection,\n    refToResizableElement: HTMLDivElement,\n    delta: { height: number, width: number },\n  ) {\n    const { maxWidth, maxHeight } = this.getMaxSizesFromProps();\n    this.setState({ maxWidth, maxHeight });\n    if (this.props.onResizeStop) {\n      const position: Position = {\n        x: this.draggable.state.x,\n        y: this.draggable.state.y,\n      };\n      this.props.onResizeStop(e, direction, refToResizableElement, delta, position);\n    }\n  }\n\n  updateSize(size: { width: number | string, height: number | string }) {\n    if (!this.resizable) return;\n    this.resizable.updateSize({ width: size.width, height: size.height });\n  }\n\n  updatePosition(position: Position) {\n    this.draggable.setState(position);\n  }\n\n  updateZIndex(z: number) {\n    this.setState({ z });\n  }\n\n  render(): React.Node {\n    const cursorStyle =\n      this.props.disableDragging || this.props.dragHandleClassName ? { cursor: 'normal' } : { cursor: 'move' };\n    const innerStyle = {\n      ...resizableStyle,\n      zIndex: this.state.z,\n      ...cursorStyle,\n      ...this.props.style,\n    };\n    // HACK: Wait for setting relative to parent element.\n    if (!this.state.isMounted) return <div>{this.props.children}</div>;\n    const maxHeight = this.props._freeBottomBounds ? 2147483647 : this.state.maxHeight; // eslint-disable-line\n    return (\n      <Draggable\n        ref={(c: Draggable) => {\n          this.draggable = c;\n        }}\n        handle={this.props.dragHandleClassName}\n        defaultPosition={this.props.default}\n        onStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onStop={this.onDragStop}\n        axis={this.props.dragAxis}\n        disabled={this.props.disableDragging}\n        grid={this.props.dragGrid}\n        bounds={this.props.bounds ? this.state.bounds : undefined}\n        position={this.props.position}\n        enableUserSelectHack={this.props.enableUserSelectHack}\n        cancel={this.props.cancel}\n      >\n        <Resizable\n          {...this.props.extendsProps}\n          className={this.props.className}\n          ref={(c: React$ElementRef<typeof Resizable> | null) => {\n            this.resizable = c;\n          }}\n          defaultSize={this.props.default}\n          size={this.props.size}\n          enable={this.props.enableResizing}\n          onResizeStart={this.onResizeStart}\n          onResize={this.onResize}\n          onResizeStop={this.onResizeStop}\n          style={innerStyle}\n          minWidth={this.props.minWidth}\n          minHeight={this.props.minHeight}\n          maxWidth={this.state.maxWidth}\n          maxHeight={maxHeight}\n          grid={this.props.resizeGrid}\n          handleWrapperClass={this.props.resizeHandleWrapperClass}\n          handleWrapperStyle={this.props.resizeHandleWrapperStyle}\n          lockAspectRatio={this.props.lockAspectRatio}\n          lockAspectRatioExtraWidth={this.props.lockAspectRatioExtraWidth}\n          lockAspectRatioExtraHeight={this.props.lockAspectRatioExtraHeight}\n          handleStyles={this.props.resizeHandleStyles}\n          handleClasses={this.props.resizeHandleClasses}\n        >\n          {this.props.children}\n        </Resizable>\n      </Draggable>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}