{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * Selection source file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getElement } from '../../common/utils/helper';\nimport { Index } from '../../common/model/base';\nimport { selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * The `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection3D = /** @class */function (_super) {\n  __extends(Selection3D, _super);\n  /**\n   * Constructor for selection module.\n   *\n   * @param {Chart3D} chart - Chart3D instance.\n   * @private\n   */\n  function Selection3D(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.seriesIndex = 0;\n    _this.chart = chart;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   *\n   * @returns {void}\n   */\n  Selection3D.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.mouseLeave, this);\n    this.chart.on('click', this.mouseClick, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n  };\n  /**\n   * Handles the mouse down event.\n   *\n   * @returns {void}\n   */\n  Selection3D.prototype.mousedown = function () {\n    var chart = this.chart;\n    if (chart.isPointMouseDown || chart.selectionMode === 'Point') {\n      return;\n    }\n  };\n  /**\n   * Unbinding events for selection module.\n   *\n   * @returns {void}\n   */\n  Selection3D.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n    this.chart.off('click', this.mouseClick);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n  };\n  /**\n   * To find private variable values\n   *\n   * @param {Chart3D} chart - Chart3D instance.\n   * @returns {void}\n   */\n  Selection3D.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.selectedDataIndexes = [];\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   *\n   * @param {Chart3D} chart - Chart3D instance\n   * @returns {void}\n   */\n  Selection3D.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n    this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n  };\n  /**\n   * Generates the style for the series.\n   *\n   * @param {Chart3DSeriesModel} series - The series for which the style is generated.\n   * @returns {string} - The generated style string.\n   */\n  Selection3D.prototype.generateStyle = function (series) {\n    if (series) {\n      return this.styleId + '_series_' + series.index;\n    }\n    return 'undefined';\n  };\n  /**\n   * Selects the specified data indexes in the Chart3D.\n   * This method is responsible for handling the selection of specific data indexes in the Chart3D.\n   *\n   * @param {Chart3D} chart - The Chart3D instance in which the data indexes are selected.\n   * @param {Index[]} indexes - An array of Index objects representing the data indexes to be selected.\n   * @returns {void}\n   */\n  Selection3D.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n    }\n  };\n  /**\n   * Retrieves the elements in the Chart3D associated with the specified data index.\n   *\n   * This method is responsible for obtaining the elements in the Chart3D related to the specified data index.\n   *\n   * @param {Chart3D} chart - The Chart3D instance containing the elements.\n   * @param {Index} index - An Index object representing the data index.\n   * @returns {Element[]} An array of Element objects representing the elements associated with the specified data index.\n   */\n  Selection3D.prototype.getElementByIndex = function (chart, index) {\n    var pointElements = [];\n    var elements = document.querySelectorAll('[id*=\"-region-series-' + index.series + '-point-' + index.point + '\"]');\n    elements.forEach(function (pointElement) {\n      pointElements.push(pointElement);\n    });\n    return pointElements;\n  };\n  /**\n   * This method is responsible for obtaining the clustered elements in the Chart3D related to the specified data index.\n   * Clustering typically involves obtaining a group of related elements for a specific data index.\n   *\n   * @param {Chart3D} chart - The Chart3D instance containing the clustered elements.\n   * @param {Index} index - An Index object representing the data index.\n   * @returns {Element[]} An array of Element objects representing the clustered elements associated with the specified data index.\n   */\n  Selection3D.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n        var pointElements = this.getElementByIndex(chart, index);\n        for (var i = 0; i < pointElements.length; i++) {\n          clusters.push(pointElements[i]);\n        }\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n      }\n    }\n    return clusters;\n  };\n  /**\n   * Method to get the selected element.\n   *\n   * @param {Chart3D} chart - The Chart3D instance to which the series belongs.\n   * @param {Chart3DSeriesModel} series - The series in which the data point is located.\n   * @param {Index} index - The index or position of the data point within the series.\n   * @returns {Element[]} An array of elements associated with the specified data point in the Chart3D.\n   * @private\n   */\n  Selection3D.prototype.findElements = function (chart, series, index) {\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index);\n    }\n  };\n  /**\n   * Checks whether the specified element is already selected in the Chart3D.\n   *\n   * @param {Element} targetElem - The target element to check for selection status.\n   * @param {string} eventType - The type of event triggering the selection check (e.g., 'click', 'hover').\n   * @param {Index} [index] - Optional. The index or position of the data point within the series.\n   * @returns {boolean} A boolean indicating whether the specified element is already selected.\n   */\n  Selection3D.prototype.isAlreadySelected = function (targetElem, eventType, index) {\n    if (eventType === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (eventType === 'mousemove' || eventType === 'pointermove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (eventType === 'click') {\n        return false;\n      }\n    }\n    if ((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var isElement = void 0;\n      var nodeName = targetElem.nodeName;\n      if (targetElem.parentNode) {\n        isElement = (nodeName === 'path' || nodeName === 'shape') && targetElem.id.indexOf('region') > 1 ? true : false;\n      }\n      var _loop_1 = function (i) {\n        if (this_1.previousSelectedEle[i].hasAttribute('class')) {\n          if (this_1.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || eventType === 'click')) {\n            var selectionClass_1;\n            this_1.previousSelectedEle[i].classList.forEach(function (className) {\n              if (className.indexOf('selection') > -1) {\n                selectionClass_1 = className;\n              }\n            });\n            this_1.previousSelectedEle[i].removeAttribute('class');\n            if (selectionClass_1) {\n              this_1.addSvgClass(this_1.previousSelectedEle[i], selectionClass_1);\n            }\n            this_1.previousSelectedEle[i].classList.remove(this_1.styleId + '_series_' + index.series);\n            if (this_1.chart.highlightColor !== '' && !isNullOrUndefined(this_1.chart.highlightColor) && this_1.chart.highlightPattern === 'None') {\n              this_1.previousSelectedEle[i].setAttribute('fill', this_1.control.visibleSeries[this_1.indexFinder(this_1.previousSelectedEle[i].id).series].interior);\n            }\n            this_1.addOrRemoveIndex(this_1.highlightDataIndexes, this_1.indexFinder(this_1.previousSelectedEle[i].id));\n          } else if (!isElement && this_1.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this_1.performSelection(this_1.indexFinder(this_1.previousSelectedEle[i].id), this_1.chart, this_1.previousSelectedEle[i]);\n          }\n        }\n      };\n      var this_1 = this;\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        _loop_1(i);\n      }\n    }\n    return true;\n  };\n  /**\n   * Handles the mouse click event in the Chart3D, triggering the calculation of selected elements.\n   *\n   * @param {Event} event - The mouse click event object.\n   * @returns {void}\n   */\n  Selection3D.prototype.mouseClick = function (event) {\n    if (!this.chart.rotateActivate) {\n      this.calculateSelectedElements(event.target, event.type);\n    }\n  };\n  /**\n   * Calculates the selected elements based on the provided target element and event type.\n   *\n   * @param {HTMLElement} targetElement - The target HTML element that triggered the selection.\n   * @param {string} eventType - The type of the event that triggered the selection (e.g., mouse click).\n   * @returns {void}\n   */\n  Selection3D.prototype.calculateSelectedElements = function (targetElement, eventType) {\n    if (isNullOrUndefined(targetElement)) {\n      return;\n    }\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id && targetElement.id.indexOf(this.chart.element.id + '-') === -1) {\n      return;\n    }\n    if (eventType === 'mousemove' || eventType === 'pointermove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n    }\n    this.isAlreadySelected(targetElement, eventType, this.indexFinder(targetElement.id));\n    if (targetElement.id && targetElement.id.indexOf('-series-') > -1 && targetElement.id.indexOf('_Text_') === -1) {\n      var element = void 0;\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\n   * Performs selection based on the provided index, chart, and optional element.\n   *\n   * @param {Index} index - The index or indices specifying the data points or elements to be selected.\n   * @param {Chart3D} chart - The Chart3D instance where the selection is being performed.\n   * @param {Element} [element] - Optional. The specific HTML element that triggered the selection.\n   * @returns {void}\n   */\n  Selection3D.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries, false);\n        break;\n      case 'Point':\n        if (!isNaN(index.point) && element) {\n          this.selection(chart, index, this.getElementByIndex(chart, index));\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false);\n        }\n        break;\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false);\n        }\n        break;\n    }\n  };\n  /**\n   * Handles the completion of a selection process in the Chart3D.\n   *\n   * @param {Chart3D} chart - The Chart3D instance where the selection process is completed.\n   * @param {Index} index - The selected index or indices representing the data points or elements.\n   * @param {Chart3DSelectionMode  | HighlightMode} selectionMode - The mode of selection, either SelectionMode or HighlightMode.\n   * @returns {void}\n   */\n  Selection3D.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n            if (!isNaN(pointIndex)) {\n              yValue = points[pointIndex].yValue;\n              selectedPointX = points[pointIndex].xValue;\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n              selectedPointValues.push({\n                x: selectedPointX,\n                y: yValue,\n                seriesIndex: seriesIndex,\n                pointIndex: pointIndex\n              });\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          if (this.selectedDataIndexes.length > 0) {\n            selectedPointValues.push({\n              seriesIndex: seriesIndex\n            });\n          }\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : this.highlightDataIndexes && this.highlightDataIndexes.length > 0 ? this.highlightDataIndexes[0].series : 0;\n        if (this.selectedDataIndexes.length > 0 || this.highlightDataIndexes && this.highlightDataIndexes.length > 0) {\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      }\n    } else if (selectionMode === 'Point') {\n      var selectedData = [];\n      if (this.styleId.indexOf('highlight') > -1) {\n        selectedData = this.highlightDataIndexes;\n      } else {\n        selectedData = this.selectedDataIndexes;\n      }\n      for (var i = 0; i < selectedData.length; i++) {\n        pointIndex = selectedData[i].point;\n        seriesIndex = selectedData[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = points[pointIndex].yValue;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n    var args = {\n      selectedDataValues: selectedPointValues,\n      cancel: false,\n      chart: chart\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   * Handles the selection process in the Chart3D.\n   *\n   * @param {Chart3D} chart - The Chart3D instance where the selection is taking place.\n   * @param {Index} index - The selected index or indices representing the data points or elements.\n   * @param {Element[]} selectedElements - The corresponding elements that are selected during the process.\n   * @returns {void}\n   */\n  Selection3D.prototype.selection = function (chart, index, selectedElements) {\n    if (!chart.isMultiSelect && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n      this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n    }\n    var indexValue = index.series;\n    if (!isNullOrUndefined(selectedElements[0])) {\n      if (chart.visibleSeries[indexValue].isRectSeries) {\n        if (selectedElements[0].id) {\n          if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n            selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n          }\n        }\n      }\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight ? selectedElements : [];\n        if (this.chart.selection3DModule) {\n          this.chart.selection3DModule.previousSelectedEle = selectedElements;\n        }\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   * Handles the cluster selection process in the Chart3D.\n   *\n   * @param {Chart3D} chart - The Chart3D instance where the cluster selection is taking place.\n   * @param {Index} index - The selected index or indices representing the cluster.\n   * @returns {void}\n   */\n  Selection3D.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Removes the selected elements during a multi-select operation in the Chart3D.\n   *\n   * @param {Chart3D} chart - The Chart3D instance where the multi-select operation is taking place.\n   * @param {Index[]} index - An array of selected indices to be removed.\n   * @param {Index} currentIndex - The current index representing the selection.\n   * @param {Chart3DSeriesModel[]} seriesCollection - The collection of series in the Chart3D.\n   * @returns {void}\n   */\n  Selection3D.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i]));\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Applies a blur effect to the specified chart elements for visual emphasis.\n   *\n   * @param {string} chartId - The unique identifier of the target chart where the blur effect is applied.\n   * @param {Chart3DSeries[]} visibleSeries - An array of visible series in the chart.\n   * @param {boolean} [isLegend=false] - A boolean indicating whether the blur effect is applied to legends.\n   * @returns {void}\n   */\n  Selection3D.prototype.blurEffect = function (chartId, visibleSeries, isLegend) {\n    if (isLegend === void 0) {\n      isLegend = false;\n    }\n    var visibility = this.checkVisibility(this.highlightDataIndexes, this.chart) || this.checkVisibility(this.selectedDataIndexes, this.chart);\n    var _loop_2 = function (series) {\n      var legendIndex = series.index;\n      var legendStrokeColor = this_2.chart.visibleSeries[series.index].interior;\n      var pointElements = [];\n      if (series.visible) {\n        var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n        elements.forEach(function (el) {\n          pointElements.push(el);\n        });\n        this_2.checkSelectionElements(pointElements, this_2.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this_2.checkSelectionElements(pointElements, this_2.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        }\n      }\n    };\n    var this_2 = this;\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n      _loop_2(series);\n    }\n  };\n  /**\n   * Checks the selection status of specified chart elements and updates their appearance.\n   *\n   * @param {Element[] | Element} element - The chart elements or a single element to be checked for selection.\n   * @param {string} className - The CSS class name used to identify selected elements.\n   * @param {boolean} visibility - A boolean indicating whether the elements should be visible or hidden based on selection.\n   * @param {boolean} [isLegend=true] - A boolean indicating whether the specified elements are legends.\n   * @param {number} [series=0] - The index of the series if the specified elements are series.\n   * @param {string} [legendStrokeColor='#D3D3D3'] - The stroke color used for legends when they are selected.\n   * @returns {void}\n   */\n  Selection3D.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n    if (isLegend === void 0) {\n      isLegend = true;\n    }\n    if (series === void 0) {\n      series = 0;\n    }\n    if (legendStrokeColor === void 0) {\n      legendStrokeColor = '#D3D3D3';\n    }\n    var children = this.isSeriesMode ? element || [element] : element;\n    if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n      children = element;\n    }\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n      if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n      }\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        if (elementClassName.indexOf(this.unselected) !== -1 && this.chart.tooltip3DModule && className.indexOf('highlight') > 0) {\n          this.chart.highlightAnimation(children[i], series, 700, 0.3);\n        }\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n    }\n    if (this.control.legend3DModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n          if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n            legendShape.setAttribute('stroke', legendStrokeColor);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', legendStrokeColor);\n            }\n          }\n        }\n        if (selectElement.length > 0) {\n          elementClassName = selectElement[0].getAttribute('class');\n          parentClassName = selectElement[0].parentNode.getAttribute('class') || '';\n        } else if (selectElement) {\n          elementClassName = selectElement.getAttribute('class') || '';\n          parentClassName = selectElement.parentNode.getAttribute('class') || '';\n        }\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight ? className : this.unselected);\n          this.removeSvgClass(legendShape, className);\n          if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n            if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !isNullOrUndefined(this.chart.highlightColor)) {\n              legendShape.setAttribute('stroke', this.chart.highlightColor);\n              if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                legendShape.setAttribute('fill', this.chart.highlightColor);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Applies custom styles to the specified chart elements.\n   *\n   * @param {Element[]} elements - An array of chart elements to which custom styles will be applied.\n   * @returns {void}\n   */\n  Selection3D.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        if (this.chart.series[0].pointColorMapping === 'fill') {\n          var className = this.getSelectionClass(element.id);\n          var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n          var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n          var pattern = void 0;\n          if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n            pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n          }\n          if (element.id.indexOf('legend') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\n            for (var i = 1; i < pattern.children.length; i++) {\n              pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n              pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n            }\n          }\n        }\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n        if (this.chart.tooltip3DModule && this.getSelectionClass(element.id).indexOf('highlight') > 0) {\n          var index = parseFloat(element.id.split('-series-')[1].split('-point-')[0]);\n          this.chart.stopElementAnimation(element, index);\n        }\n        if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\n          element.setAttribute('fill', this.chart.highlightColor);\n        }\n      }\n    }\n  };\n  /**\n   * Gets the CSS class name associated with the selection for a specific chart element.\n   *\n   * @param {string} id - A unique identifier for the selected element.\n   * @returns {string} The CSS class name associated with the selection for the selected element.\n   */\n  Selection3D.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\n  };\n  /**\n   * Removes styles associated with the selection from the selected elements.\n   *\n   *\n   * @param {Element[]} elements - An array of chart elements from which selection styles should be removed.\n   * @returns {void}\n   */\n  Selection3D.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n          var color = this.control.visibleSeries[this.indexFinder(element.id).series].interior;\n          if (element.getAttribute('name') === 'ZLight') {\n            color = this.chart.polygon.applyZLight(color, this.control);\n          }\n          if (element.getAttribute('name') === 'XLight') {\n            color = this.chart.polygon.applyXLight(color, this.control);\n          }\n          element.setAttribute('fill', color);\n        }\n      }\n    }\n  };\n  /**\n   * Adds or removes an index from the specified array based on the provided condition.\n   *\n   * @param {Index[]} indexes - The array of indexes to be modified.\n   * @param {Index} index - The index to be added or removed.\n   * @param {boolean} [isAdd=true] - A boolean flag indicating whether to add or remove the index.\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   * Compares two Index objects for equality.\n   *\n   * @param {Index} first - The first Index object to compare.\n   * @param {Index} second - The second Index object to compare.\n   * @param {boolean} [checkSeriesOnly=false] - A boolean flag indicating whether to\n   * @returns {boolean} - True if the Index objects are equal; otherwise, false.\n   */\n  Selection3D.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * Redraws the selection in the 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart instance where the selection needs to be redrawn.\n   * @param {Chart3DSelectionMode | HighlightMode} oldMode - The previous selection mode ('Series', 'Point', etc.).\n   * @param {boolean} [chartRedraw=false] - A boolean flag indicating whether to trigger a chart redraw.\n   * @returns {void}\n   */\n  Selection3D.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n    if (!isNullOrUndefined(oldMode)) {\n      if (chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries, false);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /**\n   * Handles the selection in the legend for the 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart instance associated with the legend.\n   * @param {number} series - The index of the series in the legend.\n   * @param {Element} targetElement - The HTML element that triggered the selection event.\n   * @param {string} eventType - The type of event that triggered the selection.\n   * @returns {void}\n   */\n  Selection3D.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n    if (eventType === 'mousemove') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('marker') > 1) {\n        targetElement = getElement(targetElement.id.replace('_marker', ''));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.chart.highlightMode;\n    } else if (eventType === 'click') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n    }\n    var index = this.indexFinder(targetElement.id);\n    var isPreSelected = this.isAlreadySelected(targetElement, eventType, index);\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n          }\n        }\n        var seriesElements = [];\n        if (this.chart.legendSettings.mode === 'Point') {\n          seriesElements = this.getElementByIndex(chart, index);\n        } else {\n          seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n        }\n        if (seriesElements.length > 0) {\n          this.checkSelectionElements(seriesElements, seriesStyle, false, true, series, '');\n          this.isSeriesMode = true;\n          this.selection(chart, new Index(index.series, NaN), seriesElements);\n          this.isSeriesMode = chart.selectionMode === 'Series';\n          this.blurEffect(chart.element.id, chart.visibleSeries, true);\n        }\n      }\n    }\n  };\n  /**\n   * Handles the removal of selection in the 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart instance where the selection needs to be removed.\n   * @param {number} series - The index of the series for which the selection is being removed.\n   * @param {NodeListOf<HTMLElement>} selectedElements - The HTML elements representing the selected items.\n   * @param {string} seriesStyle - The style to be applied to the series after the removal of selection.\n   * @param {boolean} isBlurEffectNeeded - A flag indicating whether a blur effect is needed after the removal of selection.\n   * @param {Index} index - The index representing the specific data point for which selection is being removed (optional).\n   * @returns {void}\n   */\n  Selection3D.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series, '');\n          }\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, null);\n      }\n    }\n  };\n  /**\n   * Retrieves the HTML elements associated with a specific 3D chart series.\n   *\n   * @param {Chart3DSeriesModel | Chart3DSeries} series - The 3D chart series for which HTML elements are to be retrieved.\n   * @returns {Element[]} An array of HTML elements representing the graphical elements of the specified 3D chart series.\n   * @private\n   */\n  Selection3D.prototype.getSeriesElements = function (series) {\n    var seriesElements = [];\n    if (series.visible) {\n      var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n      elements.forEach(function (seriesElement) {\n        seriesElements.push(seriesElement);\n      });\n    }\n    return seriesElements;\n  };\n  /**\n   * Finds and returns the index associated with the specified identifier.\n   *\n   * @param {string} id - The identifier used to find the associated index.\n   * @returns {Index} The index associated with the specified identifier.\n   * @private\n   */\n  Selection3D.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n    if (id.indexOf('-point-') > -1) {\n      ids = id.split('-series-')[1].split('-point-');\n    } else if (id.indexOf('-border-') > -1) {\n      ids[0] = id.split('-border-')[1];\n    } else if (id.indexOf('-series-') > -1) {\n      ids[0] = id.split('-series-')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Removes the selected elements from the chart based on the specified indices.\n   *\n   * @param {Chart3D} chart - The 3D chart instance.\n   * @param {Index[]} index - The array of indices representing the selected elements to be removed.\n   * @param {Chart3DSeriesModel[]} seriesCollection - The collection of series models.\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length);\n    var seriesElements;\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      if (series.visible) {\n        seriesElements = this.getSeriesElements(series);\n        this.removeStyles(seriesElements);\n        for (var _a = 0, seriesElements_1 = seriesElements; _a < seriesElements_1.length; _a++) {\n          var seriesElement = seriesElements_1[_a];\n          this.removeStyles(this.getChildren(seriesElement));\n        }\n      }\n    }\n  };\n  /**\n   * Handles the mouse leave event for the 3D chart.\n   *\n   * @param {Event} event - The mouse leave event object.\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.mouseLeave = function (event) {\n    this.completeSelection(event.target, event.type);\n  };\n  /**\n   * Completes the selection process based on the specified target element and event type.\n   *\n   * @param {HTMLElement} target - The target HTML element involved in the selection.\n   * @param {string} eventType - The type of event triggering the selection.\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.completeSelection = function (target, eventType) {\n    var chart = this.chart;\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    this.currentMode = chart.selectionMode;\n  };\n  /**\n   * Handles the mouse move event, typically used for tracking the movement of the mouse pointer.\n   * This method is marked as private to indicate that it should not be used externally.\n   *\n   * @param {PointerEvent | TouchEvent} event - The event object representing the mouse move or touch event.\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n    var eventType = event.type;\n    this.highlightChart(target, eventType);\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && event.preventDefault) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * Highlights the series elements based on the specified target element and event type.\n   *\n   * @param {Element} target - The target element on which the highlight action is performed.\n   * @param {string} eventType - The type of the event.\n   * @returns {void}\n   */\n  Selection3D.prototype.highlightChart = function (target, eventType) {\n    if (!this.chart.rotateActivate && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n      if (!isNullOrUndefined(target)) {\n        if (target.id.indexOf('_legend_text') > 1) {\n          target = getElement(target.id.replace('text', 'shape'));\n        }\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n        this.calculateSelectedElements(target, eventType);\n        if (this.chart.highlight3DModule.highlightDataIndexes && this.chart.highlight3DModule.highlightDataIndexes.length > 0 && target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('-series-') === -1) {\n          this.removeLegendHighlightStyles();\n        }\n      }\n      return;\n    }\n  };\n  /**\n   * remove highlighted legend when not focused.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.removeLegendHighlightStyles = function () {\n    this.chart.highlight3DModule.highlightDataIndexes = [];\n    var elementCollection;\n    for (var i = 0; i < this.chart.visibleSeries.length; i++) {\n      elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n      if (this.selectedDataIndexes.length === 0) {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n              var color = this.control.visibleSeries[i].interior;\n              if (element.getAttribute('name') === 'ZLight') {\n                color = this.chart.polygon.applyZLight(color, this.control);\n              }\n              if (element.getAttribute('name') === 'XLight') {\n                color = this.chart.polygon.applyXLight(color, this.control);\n              }\n              if (element.id.indexOf('_chart_legend_shape') !== -1 && element.getAttribute('stroke')) {\n                element.setAttribute('stroke', color);\n              }\n              element.setAttribute('fill', color);\n            }\n          }\n        }\n        elementCollection = document.getElementsByClassName(this.unselected);\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (this.chart.tooltip3DModule && this.generateStyle(this.chart.visibleSeries[i]).indexOf('highlight') > -1) {\n              this.chart.highlightAnimation(element, i, 700, 0.3);\n            }\n          }\n        }\n      } else {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            this.addSvgClass(element, this.unselected);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   * @private\n   */\n  Selection3D.prototype.getModuleName = function () {\n    return 'Selection3D';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection3D.prototype.destroy = function () {\n    this.removeEventListener();\n    // Destroy method performed here\n  };\n  return Selection3D;\n}(BaseSelection);\nexport { Selection3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","extend","isNullOrUndefined","getElement","Index","selectionComplete","BaseSelection","Selection3D","_super","chart","_this","call","seriesIndex","addEventListener","isDestroyed","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","mouseLeave","mouseClick","touchStartEvent","mousedown","touchEndEvent","isPointMouseDown","selectionMode","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","pointElements","elements","document","querySelectorAll","point","forEach","pointElement","push","getClusterElements","clusters","seriesStyle","selectedElements","_a","visible","i","findElements","getSeriesElements","isAlreadySelected","targetElem","eventType","highlightMode","highlightDataIndexes","legendSettings","enableHighlight","previousSelectedEle","isElement","nodeName","parentNode","indexOf","_loop_1","this_1","hasAttribute","getAttribute","selectionClass_1","classList","className","removeAttribute","addSvgClass","remove","highlightColor","highlightPattern","setAttribute","control","indexFinder","interior","addOrRemoveIndex","event","rotateActivate","calculateSelectedElements","target","type","targetElement","selection","blurEffect","isNaN","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","isMultiSelect","xValue","primaryXAxis","valueType","x","toLocaleString","Date","y","selectedData","args","selectedDataValues","cancel","trigger","removeMultiSelectElements","indexValue","isRectSeries","getElementById","isAdd","pClassName","getSelectionClass","removeStyles","selection3DModule","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","isLegend","visibility","checkVisibility","_loop_2","legendIndex","legendStrokeColor","this_2","el","checkSelectionElements","visibleSeries_1","children","elementClassName","parentClassName","legendShape","selectElement","tooltip3DModule","highlightAnimation","removeSvgClass","legend3DModule","trim","elements_1","pointColorMapping","parseInt","split","patternName","selectionPattern","pattern","parseFloat","stopElementAnimation","elements_2","color","polygon","applyZLight","applyXLight","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","replace","isPreSelected","isBlurEffectNeeded","removeSelection","seriesElements","mode","NaN","value","_b","elements_3","seriesElement","ids","seriesCollection_1","seriesElements_1","getChildren","completeSelection","highlightChart","isIos","isIos7","preventDefault","highlight3DModule","removeLegendHighlightStyles","elementCollection","getElementsByClassName","getModuleName","destroy"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Selection source file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getElement } from '../../common/utils/helper';\nimport { Index } from '../../common/model/base';\nimport { selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * The `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection3D = /** @class */ (function (_super) {\n    __extends(Selection3D, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @param {Chart3D} chart - Chart3D instance.\n     * @private\n     */\n    function Selection3D(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.seriesIndex = 0;\n        _this.chart = chart;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     *\n     * @returns {void}\n     */\n    Selection3D.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.mouseLeave, this);\n        this.chart.on('click', this.mouseClick, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n    };\n    /**\n     * Handles the mouse down event.\n     *\n     * @returns {void}\n     */\n    Selection3D.prototype.mousedown = function () {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'Point') {\n            return;\n        }\n    };\n    /**\n     * Unbinding events for selection module.\n     *\n     * @returns {void}\n     */\n    Selection3D.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n        this.chart.off('click', this.mouseClick);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n    };\n    /**\n     * To find private variable values\n     *\n     * @param {Chart3D} chart - Chart3D instance.\n     * @returns {void}\n     */\n    Selection3D.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.selectedDataIndexes = [];\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @param {Chart3D} chart - Chart3D instance\n     * @returns {void}\n     */\n    Selection3D.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    };\n    /**\n     * Generates the style for the series.\n     *\n     * @param {Chart3DSeriesModel} series - The series for which the style is generated.\n     * @returns {string} - The generated style string.\n     */\n    Selection3D.prototype.generateStyle = function (series) {\n        if (series) {\n            return (this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     * Selects the specified data indexes in the Chart3D.\n     * This method is responsible for handling the selection of specific data indexes in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance in which the data indexes are selected.\n     * @param {Index[]} indexes - An array of Index objects representing the data indexes to be selected.\n     * @returns {void}\n     */\n    Selection3D.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     * Retrieves the elements in the Chart3D associated with the specified data index.\n     *\n     * This method is responsible for obtaining the elements in the Chart3D related to the specified data index.\n     *\n     * @param {Chart3D} chart - The Chart3D instance containing the elements.\n     * @param {Index} index - An Index object representing the data index.\n     * @returns {Element[]} An array of Element objects representing the elements associated with the specified data index.\n     */\n    Selection3D.prototype.getElementByIndex = function (chart, index) {\n        var pointElements = [];\n        var elements = document.querySelectorAll('[id*=\"-region-series-' + index.series + '-point-' + index.point + '\"]');\n        elements.forEach(function (pointElement) {\n            pointElements.push(pointElement);\n        });\n        return pointElements;\n    };\n    /**\n     * This method is responsible for obtaining the clustered elements in the Chart3D related to the specified data index.\n     * Clustering typically involves obtaining a group of related elements for a specific data index.\n     *\n     * @param {Chart3D} chart - The Chart3D instance containing the clustered elements.\n     * @param {Index} index - An Index object representing the data index.\n     * @returns {Element[]} An array of Element objects representing the clustered elements associated with the specified data index.\n     */\n    Selection3D.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new Index(series.index, index.point);\n                var pointElements = this.getElementByIndex(chart, index);\n                for (var i = 0; i < pointElements.length; i++) {\n                    clusters.push(pointElements[i]);\n                }\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\n            }\n        }\n        return clusters;\n    };\n    /**\n     * Method to get the selected element.\n     *\n     * @param {Chart3D} chart - The Chart3D instance to which the series belongs.\n     * @param {Chart3DSeriesModel} series - The series in which the data point is located.\n     * @param {Index} index - The index or position of the data point within the series.\n     * @returns {Element[]} An array of elements associated with the specified data point in the Chart3D.\n     * @private\n     */\n    Selection3D.prototype.findElements = function (chart, series, index) {\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index);\n        }\n    };\n    /**\n     * Checks whether the specified element is already selected in the Chart3D.\n     *\n     * @param {Element} targetElem - The target element to check for selection status.\n     * @param {string} eventType - The type of event triggering the selection check (e.g., 'click', 'hover').\n     * @param {Index} [index] - Optional. The index or position of the data point within the series.\n     * @returns {boolean} A boolean indicating whether the specified element is already selected.\n     */\n    Selection3D.prototype.isAlreadySelected = function (targetElem, eventType, index) {\n        if (eventType === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (eventType === 'mousemove' || eventType === 'pointermove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if (((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var isElement = void 0;\n            var nodeName = targetElem.nodeName;\n            if (targetElem.parentNode) {\n                isElement = ((nodeName === 'path' || nodeName === 'shape') && targetElem.id.indexOf('region') > 1) ? true : false;\n            }\n            var _loop_1 = function (i) {\n                if (this_1.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this_1.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || eventType === 'click')) {\n                        var selectionClass_1;\n                        this_1.previousSelectedEle[i].classList.forEach(function (className) {\n                            if (className.indexOf('selection') > -1) {\n                                selectionClass_1 = className;\n                            }\n                        });\n                        this_1.previousSelectedEle[i].removeAttribute('class');\n                        if (selectionClass_1) {\n                            this_1.addSvgClass(this_1.previousSelectedEle[i], selectionClass_1);\n                        }\n                        this_1.previousSelectedEle[i].classList.remove(this_1.styleId + '_series_' + index.series);\n                        if (this_1.chart.highlightColor !== '' && !isNullOrUndefined(this_1.chart.highlightColor) && this_1.chart.highlightPattern === 'None') {\n                            this_1.previousSelectedEle[i].setAttribute('fill', this_1.control.visibleSeries[this_1.indexFinder(this_1.previousSelectedEle[i].id).series].interior);\n                        }\n                        this_1.addOrRemoveIndex(this_1.highlightDataIndexes, this_1.indexFinder(this_1.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this_1.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this_1.performSelection(this_1.indexFinder(this_1.previousSelectedEle[i].id), this_1.chart, this_1.previousSelectedEle[i]);\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                _loop_1(i);\n            }\n        }\n        return true;\n    };\n    /**\n     * Handles the mouse click event in the Chart3D, triggering the calculation of selected elements.\n     *\n     * @param {Event} event - The mouse click event object.\n     * @returns {void}\n     */\n    Selection3D.prototype.mouseClick = function (event) {\n        if (!this.chart.rotateActivate) {\n            this.calculateSelectedElements(event.target, event.type);\n        }\n    };\n    /**\n     * Calculates the selected elements based on the provided target element and event type.\n     *\n     * @param {HTMLElement} targetElement - The target HTML element that triggered the selection.\n     * @param {string} eventType - The type of the event that triggered the selection (e.g., mouse click).\n     * @returns {void}\n     */\n    Selection3D.prototype.calculateSelectedElements = function (targetElement, eventType) {\n        if (isNullOrUndefined(targetElement)) {\n            return;\n        }\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id && targetElement.id.indexOf(this.chart.element.id + '-') === -1) {\n            return;\n        }\n        if (eventType === 'mousemove' || eventType === 'pointermove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(targetElement, eventType, this.indexFinder(targetElement.id));\n        if (targetElement.id && targetElement.id.indexOf('-series-') > -1 && targetElement.id.indexOf('_Text_') === -1) {\n            var element = void 0;\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     * Performs selection based on the provided index, chart, and optional element.\n     *\n     * @param {Index} index - The index or indices specifying the data points or elements to be selected.\n     * @param {Chart3D} chart - The Chart3D instance where the selection is being performed.\n     * @param {Element} [element] - Optional. The specific HTML element that triggered the selection.\n     * @returns {void}\n     */\n    Selection3D.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries, false);\n                break;\n            case 'Point':\n                if (!isNaN(index.point) && element) {\n                    this.selection(chart, index, this.getElementByIndex(chart, index));\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false);\n                }\n                break;\n        }\n    };\n    /**\n     * Handles the completion of a selection process in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the selection process is completed.\n     * @param {Index} index - The selected index or indices representing the data points or elements.\n     * @param {Chart3DSelectionMode  | HighlightMode} selectionMode - The mode of selection, either SelectionMode or HighlightMode.\n     * @returns {void}\n     */\n    Selection3D.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = points[pointIndex].yValue;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            selectedPointValues.push({\n                                x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                pointIndex: pointIndex\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    if (this.selectedDataIndexes.length > 0) {\n                        selectedPointValues.push({\n                            seriesIndex: seriesIndex\n                        });\n                    }\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series :\n                    (this.highlightDataIndexes && this.highlightDataIndexes.length > 0) ? this.highlightDataIndexes[0].series : 0;\n                if (this.selectedDataIndexes.length > 0 || (this.highlightDataIndexes && this.highlightDataIndexes.length > 0)) {\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n        }\n        else if (selectionMode === 'Point') {\n            var selectedData = [];\n            if (this.styleId.indexOf('highlight') > -1) {\n                selectedData = this.highlightDataIndexes;\n            }\n            else {\n                selectedData = this.selectedDataIndexes;\n            }\n            for (var i = 0; i < selectedData.length; i++) {\n                pointIndex = selectedData[i].point;\n                seriesIndex = selectedData[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = points[pointIndex].yValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            selectedDataValues: selectedPointValues,\n            cancel: false,\n            chart: chart\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     * Handles the selection process in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the selection is taking place.\n     * @param {Index} index - The selected index or indices representing the data points or elements.\n     * @param {Element[]} selectedElements - The corresponding elements that are selected during the process.\n     * @returns {void}\n     */\n    Selection3D.prototype.selection = function (chart, index, selectedElements) {\n        if (!chart.isMultiSelect && (this.styleId.indexOf('highlight') === -1 &&\n            chart.selectionMode !== 'None')) {\n            this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n        }\n        var indexValue = index.series;\n        if (!isNullOrUndefined(selectedElements[0])) {\n            if (chart.visibleSeries[indexValue].isRectSeries) {\n                if (selectedElements[0].id) {\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n                        selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n                    }\n                }\n            }\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else {\n                this.previousSelectedEle = (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) ? selectedElements : [];\n                if (this.chart.selection3DModule) {\n                    this.chart.selection3DModule.previousSelectedEle = selectedElements;\n                }\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     * Handles the cluster selection process in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the cluster selection is taking place.\n     * @param {Index} index - The selected index or indices representing the cluster.\n     * @returns {void}\n     */\n    Selection3D.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Removes the selected elements during a multi-select operation in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the multi-select operation is taking place.\n     * @param {Index[]} index - An array of selected indices to be removed.\n     * @param {Index} currentIndex - The current index representing the selection.\n     * @param {Chart3DSeriesModel[]} seriesCollection - The collection of series in the Chart3D.\n     * @returns {void}\n     */\n    Selection3D.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) &&\n                    !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i]));\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Applies a blur effect to the specified chart elements for visual emphasis.\n     *\n     * @param {string} chartId - The unique identifier of the target chart where the blur effect is applied.\n     * @param {Chart3DSeries[]} visibleSeries - An array of visible series in the chart.\n     * @param {boolean} [isLegend=false] - A boolean indicating whether the blur effect is applied to legends.\n     * @returns {void}\n     */\n    Selection3D.prototype.blurEffect = function (chartId, visibleSeries, isLegend) {\n        if (isLegend === void 0) { isLegend = false; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes, this.chart) ||\n            this.checkVisibility(this.selectedDataIndexes, this.chart));\n        var _loop_2 = function (series) {\n            var legendIndex = series.index;\n            var legendStrokeColor = this_2.chart.visibleSeries[series.index].interior;\n            var pointElements = [];\n            if (series.visible) {\n                var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n                elements.forEach(function (el) {\n                    pointElements.push(el);\n                });\n                this_2.checkSelectionElements(pointElements, this_2.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this_2.checkSelectionElements(pointElements, this_2.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                }\n            }\n        };\n        var this_2 = this;\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            _loop_2(series);\n        }\n    };\n    /**\n     * Checks the selection status of specified chart elements and updates their appearance.\n     *\n     * @param {Element[] | Element} element - The chart elements or a single element to be checked for selection.\n     * @param {string} className - The CSS class name used to identify selected elements.\n     * @param {boolean} visibility - A boolean indicating whether the elements should be visible or hidden based on selection.\n     * @param {boolean} [isLegend=true] - A boolean indicating whether the specified elements are legends.\n     * @param {number} [series=0] - The index of the series if the specified elements are series.\n     * @param {string} [legendStrokeColor='#D3D3D3'] - The stroke color used for legends when they are selected.\n     * @returns {void}\n     */\n    Selection3D.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n        if (isLegend === void 0) { isLegend = true; }\n        if (series === void 0) { series = 0; }\n        if (legendStrokeColor === void 0) { legendStrokeColor = '#D3D3D3'; }\n        var children = (this.isSeriesMode ? element || [element] : element);\n        if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n            children = element;\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                if (elementClassName.indexOf(this.unselected) !== -1 && this.chart.tooltip3DModule && className.indexOf('highlight') > 0) {\n                    this.chart.highlightAnimation(children[i], series, 700, 0.3);\n                }\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n        }\n        if (this.control.legend3DModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n                        legendShape.setAttribute('stroke', legendStrokeColor);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', legendStrokeColor);\n                        }\n                    }\n                }\n                if (selectElement.length > 0) {\n                    elementClassName = selectElement[0].getAttribute('class');\n                    parentClassName = selectElement[0].parentNode.getAttribute('class') || '';\n                }\n                else if (selectElement) {\n                    elementClassName = selectElement.getAttribute('class') || '';\n                    parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                }\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, (this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight) ? className : this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                    if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !isNullOrUndefined(this.chart.highlightColor)) {\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Applies custom styles to the specified chart elements.\n     *\n     * @param {Element[]} elements - An array of chart elements to which custom styles will be applied.\n     * @returns {void}\n     */\n    Selection3D.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                if (this.chart.series[0].pointColorMapping === 'fill') {\n                    var className = this.getSelectionClass(element.id);\n                    var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n                    var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n                    var pattern = void 0;\n                    if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n                        pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n                    }\n                    if (element.id.indexOf('legend') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\n                        for (var i = 1; i < pattern.children.length; i++) {\n                            pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n                            pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n                        }\n                    }\n                }\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.tooltip3DModule && this.getSelectionClass(element.id).indexOf('highlight') > 0) {\n                    var index = parseFloat(element.id.split('-series-')[1].split('-point-')[0]);\n                    this.chart.stopElementAnimation(element, index);\n                }\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\n                    element.setAttribute('fill', this.chart.highlightColor);\n                }\n            }\n        }\n    };\n    /**\n     * Gets the CSS class name associated with the selection for a specific chart element.\n     *\n     * @param {string} id - A unique identifier for the selected element.\n     * @returns {string} The CSS class name associated with the selection for the selected element.\n     */\n    Selection3D.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\n    };\n    /**\n     * Removes styles associated with the selection from the selected elements.\n     *\n     *\n     * @param {Element[]} elements - An array of chart elements from which selection styles should be removed.\n     * @returns {void}\n     */\n    Selection3D.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n                    var color = this.control.visibleSeries[this.indexFinder(element.id).series].interior;\n                    if (element.getAttribute('name') === 'ZLight') {\n                        color = this.chart.polygon.applyZLight(color, this.control);\n                    }\n                    if (element.getAttribute('name') === 'XLight') {\n                        color = this.chart.polygon.applyXLight(color, this.control);\n                    }\n                    element.setAttribute('fill', color);\n                }\n            }\n        }\n    };\n    /**\n     * Adds or removes an index from the specified array based on the provided condition.\n     *\n     * @param {Index[]} indexes - The array of indexes to be modified.\n     * @param {Index} index - The index to be added or removed.\n     * @param {boolean} [isAdd=true] - A boolean flag indicating whether to add or remove the index.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * Compares two Index objects for equality.\n     *\n     * @param {Index} first - The first Index object to compare.\n     * @param {Index} second - The second Index object to compare.\n     * @param {boolean} [checkSeriesOnly=false] - A boolean flag indicating whether to\n     * @returns {boolean} - True if the Index objects are equal; otherwise, false.\n     */\n    Selection3D.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * Redraws the selection in the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance where the selection needs to be redrawn.\n     * @param {Chart3DSelectionMode | HighlightMode} oldMode - The previous selection mode ('Series', 'Point', etc.).\n     * @param {boolean} [chartRedraw=false] - A boolean flag indicating whether to trigger a chart redraw.\n     * @returns {void}\n     */\n    Selection3D.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!isNullOrUndefined(oldMode)) {\n            if (chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries, false);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /**\n     * Handles the selection in the legend for the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance associated with the legend.\n     * @param {number} series - The index of the series in the legend.\n     * @param {Element} targetElement - The HTML element that triggered the selection event.\n     * @param {string} eventType - The type of event that triggered the selection.\n     * @returns {void}\n     */\n    Selection3D.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('marker') > 1) {\n                targetElement = getElement(targetElement.id.replace('_marker', ''));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        else if (eventType === 'click') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n            }\n        }\n        var index = this.indexFinder(targetElement.id);\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType, index);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index);\n                    }\n                }\n                var seriesElements = [];\n                if (this.chart.legendSettings.mode === 'Point') {\n                    seriesElements = this.getElementByIndex(chart, index);\n                }\n                else {\n                    seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                }\n                if (seriesElements.length > 0) {\n                    this.checkSelectionElements(seriesElements, seriesStyle, false, true, series, '');\n                    this.isSeriesMode = true;\n                    this.selection(chart, new Index(index.series, NaN), seriesElements);\n                    this.isSeriesMode = chart.selectionMode === 'Series';\n                    this.blurEffect(chart.element.id, chart.visibleSeries, true);\n                }\n            }\n        }\n    };\n    /**\n     * Handles the removal of selection in the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance where the selection needs to be removed.\n     * @param {number} series - The index of the series for which the selection is being removed.\n     * @param {NodeListOf<HTMLElement>} selectedElements - The HTML elements representing the selected items.\n     * @param {string} seriesStyle - The style to be applied to the series after the removal of selection.\n     * @param {boolean} isBlurEffectNeeded - A flag indicating whether a blur effect is needed after the removal of selection.\n     * @param {Index} index - The index representing the specific data point for which selection is being removed (optional).\n     * @returns {void}\n     */\n    Selection3D.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded, index) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series, '');\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, null);\n            }\n        }\n    };\n    /**\n     * Retrieves the HTML elements associated with a specific 3D chart series.\n     *\n     * @param {Chart3DSeriesModel | Chart3DSeries} series - The 3D chart series for which HTML elements are to be retrieved.\n     * @returns {Element[]} An array of HTML elements representing the graphical elements of the specified 3D chart series.\n     * @private\n     */\n    Selection3D.prototype.getSeriesElements = function (series) {\n        var seriesElements = [];\n        if (series.visible) {\n            var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n            elements.forEach(function (seriesElement) {\n                seriesElements.push(seriesElement);\n            });\n        }\n        return seriesElements;\n    };\n    /**\n     * Finds and returns the index associated with the specified identifier.\n     *\n     * @param {string} id - The identifier used to find the associated index.\n     * @returns {Index} The index associated with the specified identifier.\n     * @private\n     */\n    Selection3D.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('-point-') > -1) {\n            ids = id.split('-series-')[1].split('-point-');\n        }\n        else if (id.indexOf('-border-') > -1) {\n            ids[0] = id.split('-border-')[1];\n        }\n        else if (id.indexOf('-series-') > -1) {\n            ids[0] = id.split('-series-')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Removes the selected elements from the chart based on the specified indices.\n     *\n     * @param {Chart3D} chart - The 3D chart instance.\n     * @param {Index[]} index - The array of indices representing the selected elements to be removed.\n     * @param {Chart3DSeriesModel[]} seriesCollection - The collection of series models.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length);\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            if (series.visible) {\n                seriesElements = this.getSeriesElements(series);\n                this.removeStyles(seriesElements);\n                for (var _a = 0, seriesElements_1 = seriesElements; _a < seriesElements_1.length; _a++) {\n                    var seriesElement = seriesElements_1[_a];\n                    this.removeStyles(this.getChildren(seriesElement));\n                }\n            }\n        }\n    };\n    /**\n     * Handles the mouse leave event for the 3D chart.\n     *\n     * @param {Event} event - The mouse leave event object.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.mouseLeave = function (event) {\n        this.completeSelection(event.target, event.type);\n    };\n    /**\n     * Completes the selection process based on the specified target element and event type.\n     *\n     * @param {HTMLElement} target - The target HTML element involved in the selection.\n     * @param {string} eventType - The type of event triggering the selection.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.completeSelection = function (target, eventType) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n    };\n    /**\n     * Handles the mouse move event, typically used for tracking the movement of the mouse pointer.\n     * This method is marked as private to indicate that it should not be used externally.\n     *\n     * @param {PointerEvent | TouchEvent} event - The event object representing the mouse move or touch event.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        var eventType = event.type;\n        this.highlightChart(target, eventType);\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && event.preventDefault) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * Highlights the series elements based on the specified target element and event type.\n     *\n     * @param {Element} target - The target element on which the highlight action is performed.\n     * @param {string} eventType - The type of the event.\n     * @returns {void}\n     */\n    Selection3D.prototype.highlightChart = function (target, eventType) {\n        if (!this.chart.rotateActivate && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n            if (!isNullOrUndefined(target)) {\n                if (target.id.indexOf('_legend_text') > 1) {\n                    target = getElement(target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(target, eventType);\n                if (this.chart.highlight3DModule.highlightDataIndexes && this.chart.highlight3DModule.highlightDataIndexes.length > 0 &&\n                    target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('-series-') === -1) {\n                    this.removeLegendHighlightStyles();\n                }\n            }\n            return;\n        }\n    };\n    /**\n     * remove highlighted legend when not focused.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.removeLegendHighlightStyles = function () {\n        this.chart.highlight3DModule.highlightDataIndexes = [];\n        var elementCollection;\n        for (var i = 0; i < this.chart.visibleSeries.length; i++) {\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n            if (this.selectedDataIndexes.length === 0) {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n                            var color = this.control.visibleSeries[i].interior;\n                            if (element.getAttribute('name') === 'ZLight') {\n                                color = this.chart.polygon.applyZLight(color, this.control);\n                            }\n                            if (element.getAttribute('name') === 'XLight') {\n                                color = this.chart.polygon.applyXLight(color, this.control);\n                            }\n                            if (element.id.indexOf('_chart_legend_shape') !== -1 && element.getAttribute('stroke')) {\n                                element.setAttribute('stroke', color);\n                            }\n                            element.setAttribute('fill', color);\n                        }\n                    }\n                }\n                elementCollection = document.getElementsByClassName(this.unselected);\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (this.chart.tooltip3DModule && this.generateStyle(this.chart.visibleSeries[i]).indexOf('highlight') > -1) {\n                            this.chart.highlightAnimation(element, i, 700, 0.3);\n                        }\n                    }\n                }\n            }\n            else {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        this.addSvgClass(element, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     * @private\n     */\n    Selection3D.prototype.getModuleName = function () {\n        return 'Selection3D';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection3D;\n}(BaseSelection));\nexport { Selection3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}