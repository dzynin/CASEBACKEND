{"ast":null,"code":"// \"viewport\" rectangle is { top, left, width, height }\n// \"scaled\" means that data structure stores (0, 1) coordinates.\n// for clarity reasons I decided not to store actual (0, 1) coordinates, but\n// provide width and height, so user can compute ratio himself if needed\nexport const viewportToScaled = (rect, {\n  width,\n  height\n}) => {\n  return {\n    x1: rect.left,\n    y1: rect.top,\n    x2: rect.left + rect.width,\n    y2: rect.top + rect.height,\n    width,\n    height\n  };\n};\n\nconst pdfToViewport = (pdf, viewport) => {\n  const [x1, y1, x2, y2] = viewport.convertToViewportRectangle([pdf.x1, pdf.y1, pdf.x2, pdf.y2]);\n  return {\n    left: x1,\n    top: y1,\n    width: x2 - x1,\n    height: y1 - y2\n  };\n};\n\nexport const scaledToViewport = (scaled, viewport, usePdfCoordinates = false) => {\n  const {\n    width,\n    height\n  } = viewport;\n\n  if (usePdfCoordinates) {\n    return pdfToViewport(scaled, viewport);\n  }\n\n  if (scaled.x1 === undefined) {\n    throw new Error(\"You are using old position format, please update\");\n  }\n\n  const x1 = width * scaled.x1 / scaled.width;\n  const y1 = height * scaled.y1 / scaled.height;\n  const x2 = width * scaled.x2 / scaled.width;\n  const y2 = height * scaled.y2 / scaled.height;\n  return {\n    left: x1,\n    top: y1,\n    width: x2 - x1,\n    height: y2 - y1\n  };\n};","map":{"version":3,"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONT/gptversion/CASEFRONT/node_modules/react-pdf-highlighter/build/lib/coordinates.js"],"names":["viewportToScaled","rect","width","height","x1","left","y1","top","x2","y2","pdfToViewport","pdf","viewport","convertToViewportRectangle","scaledToViewport","scaled","usePdfCoordinates","undefined","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAG,CAACC,IAAD,EAAO;AACrCC,EAAAA,KADqC;AAErCC,EAAAA;AAFqC,CAAP,KAG1B;AACJ,SAAO;AACLC,IAAAA,EAAE,EAAEH,IAAI,CAACI,IADJ;AAELC,IAAAA,EAAE,EAAEL,IAAI,CAACM,GAFJ;AAGLC,IAAAA,EAAE,EAAEP,IAAI,CAACI,IAAL,GAAYJ,IAAI,CAACC,KAHhB;AAILO,IAAAA,EAAE,EAAER,IAAI,CAACM,GAAL,GAAWN,IAAI,CAACE,MAJf;AAKLD,IAAAA,KALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAZM;;AAcP,MAAMO,aAAa,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACvC,QAAM,CAACR,EAAD,EAAKE,EAAL,EAASE,EAAT,EAAaC,EAAb,IAAmBG,QAAQ,CAACC,0BAAT,CAAoC,CAACF,GAAG,CAACP,EAAL,EAASO,GAAG,CAACL,EAAb,EAAiBK,GAAG,CAACH,EAArB,EAAyBG,GAAG,CAACF,EAA7B,CAApC,CAAzB;AACA,SAAO;AACLJ,IAAAA,IAAI,EAAED,EADD;AAELG,IAAAA,GAAG,EAAED,EAFA;AAGLJ,IAAAA,KAAK,EAAEM,EAAE,GAAGJ,EAHP;AAILD,IAAAA,MAAM,EAAEG,EAAE,GAAGG;AAJR,GAAP;AAMD,CARD;;AAUA,OAAO,MAAMK,gBAAgB,GAAG,CAACC,MAAD,EAASH,QAAT,EAAmBI,iBAAiB,GAAG,KAAvC,KAAiD;AAC/E,QAAM;AACJd,IAAAA,KADI;AAEJC,IAAAA;AAFI,MAGFS,QAHJ;;AAKA,MAAII,iBAAJ,EAAuB;AACrB,WAAON,aAAa,CAACK,MAAD,EAASH,QAAT,CAApB;AACD;;AAED,MAAIG,MAAM,CAACX,EAAP,KAAca,SAAlB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,QAAMd,EAAE,GAAGF,KAAK,GAAGa,MAAM,CAACX,EAAf,GAAoBW,MAAM,CAACb,KAAtC;AACA,QAAMI,EAAE,GAAGH,MAAM,GAAGY,MAAM,CAACT,EAAhB,GAAqBS,MAAM,CAACZ,MAAvC;AACA,QAAMK,EAAE,GAAGN,KAAK,GAAGa,MAAM,CAACP,EAAf,GAAoBO,MAAM,CAACb,KAAtC;AACA,QAAMO,EAAE,GAAGN,MAAM,GAAGY,MAAM,CAACN,EAAhB,GAAqBM,MAAM,CAACZ,MAAvC;AACA,SAAO;AACLE,IAAAA,IAAI,EAAED,EADD;AAELG,IAAAA,GAAG,EAAED,EAFA;AAGLJ,IAAAA,KAAK,EAAEM,EAAE,GAAGJ,EAHP;AAILD,IAAAA,MAAM,EAAEM,EAAE,GAAGH;AAJR,GAAP;AAMD,CAxBM","sourcesContent":["// \"viewport\" rectangle is { top, left, width, height }\n// \"scaled\" means that data structure stores (0, 1) coordinates.\n// for clarity reasons I decided not to store actual (0, 1) coordinates, but\n// provide width and height, so user can compute ratio himself if needed\nexport const viewportToScaled = (rect, {\n  width,\n  height\n}) => {\n  return {\n    x1: rect.left,\n    y1: rect.top,\n    x2: rect.left + rect.width,\n    y2: rect.top + rect.height,\n    width,\n    height\n  };\n};\n\nconst pdfToViewport = (pdf, viewport) => {\n  const [x1, y1, x2, y2] = viewport.convertToViewportRectangle([pdf.x1, pdf.y1, pdf.x2, pdf.y2]);\n  return {\n    left: x1,\n    top: y1,\n    width: x2 - x1,\n    height: y1 - y2\n  };\n};\n\nexport const scaledToViewport = (scaled, viewport, usePdfCoordinates = false) => {\n  const {\n    width,\n    height\n  } = viewport;\n\n  if (usePdfCoordinates) {\n    return pdfToViewport(scaled, viewport);\n  }\n\n  if (scaled.x1 === undefined) {\n    throw new Error(\"You are using old position format, please update\");\n  }\n\n  const x1 = width * scaled.x1 / scaled.width;\n  const y1 = height * scaled.y1 / scaled.height;\n  const x2 = width * scaled.x2 / scaled.width;\n  const y2 = height * scaled.y2 / scaled.height;\n  return {\n    left: x1,\n    top: y1,\n    width: x2 - x1,\n    height: y2 - y1\n  };\n};"]},"metadata":{},"sourceType":"module"}