{"ast":null,"code":"import axios from 'axios';\nimport async from 'async';\nimport { BASE_URL_DEV } from '../utils';\nexport async function fetchAndSetFileHighlights(dispatch, state, files, setIsLoading) {\n  try {\n    console.log(\"Starting to fetch and set file highlights for files:\", files);\n    async.eachSeries(files, function (element, cbBatch) {\n      console.log(`Fetching highlights for file: ${element.name}`);\n      axios.get(`${BASE_URL_DEV}/highlights-json/${state.auth.userPublicId}/${element.name}`, {\n        headers: {\n          'x-access-token': state.auth && state.auth.authToken\n        }\n      }).then(function (result) {\n        const fileHighlights = result.data;\n        console.log(`Received highlights for file: ${element.name}`, fileHighlights);\n        dispatch({\n          type: \"SET_CURR_FILE\",\n          payload: element\n        });\n        console.log(\"Dispatched SET_CURR_FILE with payload:\", element);\n        if (fileHighlights && Array.isArray(fileHighlights.highlights)) {\n          dispatch({\n            type: \"SET_FILE_HIGHLIGHTS\",\n            payload: {\n              name: element.name,\n              highlights: fileHighlights.highlights\n            }\n          });\n          console.log(\"Dispatched SET_FILE_HIGHLIGHTS with highlights:\", fileHighlights.highlights);\n        } else {\n          dispatch({\n            type: \"SET_FILE_HIGHLIGHTS\",\n            payload: {\n              name: element.name,\n              highlights: [] // Ensure highlights is an array\n            }\n          });\n          console.log(\"Dispatched SET_FILE_HIGHLIGHTS with empty highlights array\");\n        }\n        cbBatch(null);\n      }).catch(function (error) {\n        console.log(`Error fetching highlights for file: ${element.name}`, error);\n        cbBatch(error);\n      });\n    }, async loopErrBatch => {\n      if (loopErrBatch) {\n        console.log(\"Error in loop processing batch:\", loopErrBatch);\n        setIsLoading(false);\n        return;\n      }\n      const result = await axios(`${BASE_URL_DEV}/get/files`, {\n        headers: {\n          \"x-access-token\": state.auth && state.auth.authToken\n        }\n      });\n      const filesResponse = result.data && result.data.files;\n      console.log(\"Fetched files response:\", filesResponse);\n      if (filesResponse && filesResponse.length > 0) {\n        const results = await axios(`${BASE_URL_DEV}/get-graphdata`, {\n          headers: {\n            \"x-access-token\": state.auth && state.auth.authToken\n          }\n        });\n        const allgraphs = results.data;\n        console.log(\"Fetched graph data:\", allgraphs);\n        let Obj = {};\n        let _id = \"\";\n        allgraphs.graphdata.forEach(x => {\n          _id = x.fileName;\n          Obj[_id] = x.links.filter(e => e.source === \"CITATION\" || e.source === \"PROVISION\");\n        });\n        const fileNew = filesResponse.map(element => {\n          return {\n            ...element,\n            CITATION: Obj[element.name] && Obj[element.name].length > 0 ? Obj[element.name].filter(e => e.source === \"CITATION\") : [\"N/A\"],\n            PROVISION: Obj[element.name] && Obj[element.name].length > 0 ? Obj[element.name].filter(e => e.source === \"PROVISION\") : [\"N/A\"]\n          };\n        });\n        console.log(\"New file data with citations and provisions:\", fileNew);\n        setIsLoading(false);\n        dispatch({\n          type: \"ADD_FILE\",\n          payload: fileNew\n        });\n        dispatch({\n          type: \"SET_MODAL\",\n          payload: true\n        });\n      }\n    });\n  } catch (error) {\n    console.log(\"General error during fetching and setting file highlights:\", error);\n    setIsLoading(false);\n  }\n}","map":{"version":3,"names":["axios","async","BASE_URL_DEV","fetchAndSetFileHighlights","dispatch","state","files","setIsLoading","console","log","eachSeries","element","cbBatch","name","get","auth","userPublicId","headers","authToken","then","result","fileHighlights","data","type","payload","Array","isArray","highlights","catch","error","loopErrBatch","filesResponse","length","results","allgraphs","Obj","_id","graphdata","forEach","x","fileName","links","filter","e","source","fileNew","map","CITATION","PROVISION"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/src/utils/setPdfHighlights.js"],"sourcesContent":["import axios from 'axios';\nimport async from 'async';\nimport { BASE_URL_DEV } from '../utils';\n\nexport async function fetchAndSetFileHighlights(dispatch, state, files, setIsLoading) {\n    try {\n        console.log(\"Starting to fetch and set file highlights for files:\", files);\n        \n        async.eachSeries(files, function (element, cbBatch) {\n            console.log(`Fetching highlights for file: ${element.name}`);\n            axios.get(`${BASE_URL_DEV}/highlights-json/${state.auth.userPublicId}/${element.name}`, {\n                headers: {\n                    'x-access-token': state.auth && state.auth.authToken,\n                }\n            })\n            .then(function (result) {\n                const fileHighlights = result.data;\n                console.log(`Received highlights for file: ${element.name}`, fileHighlights);\n\n                dispatch({ type: \"SET_CURR_FILE\", payload: element });\n                console.log(\"Dispatched SET_CURR_FILE with payload:\", element);\n\n                if (fileHighlights && Array.isArray(fileHighlights.highlights)) {\n                    dispatch({\n                        type: \"SET_FILE_HIGHLIGHTS\",\n                        payload: {\n                            name: element.name,\n                            highlights: fileHighlights.highlights\n                        }\n                    });\n                    console.log(\"Dispatched SET_FILE_HIGHLIGHTS with highlights:\", fileHighlights.highlights);\n                } else {\n                    dispatch({\n                        type: \"SET_FILE_HIGHLIGHTS\",\n                        payload: {\n                            name: element.name,\n                            highlights: [] // Ensure highlights is an array\n                        }\n                    });\n                    console.log(\"Dispatched SET_FILE_HIGHLIGHTS with empty highlights array\");\n                }\n                cbBatch(null);\n            })\n            .catch(function (error) {\n                console.log(`Error fetching highlights for file: ${element.name}`, error);\n                cbBatch(error);\n            });\n        }, async (loopErrBatch) => {\n            if (loopErrBatch) {\n                console.log(\"Error in loop processing batch:\", loopErrBatch);\n                setIsLoading(false);\n                return;\n            }\n\n            const result = await axios(`${BASE_URL_DEV}/get/files`, {\n                headers: {\n                    \"x-access-token\": state.auth && state.auth.authToken,\n                },\n            });\n            const filesResponse = result.data && result.data.files;\n            console.log(\"Fetched files response:\", filesResponse);\n\n            if (filesResponse && filesResponse.length > 0) {\n                const results = await axios(`${BASE_URL_DEV}/get-graphdata`, {\n                    headers: {\n                        \"x-access-token\": state.auth && state.auth.authToken,\n                    },\n                });\n                const allgraphs = results.data;\n                console.log(\"Fetched graph data:\", allgraphs);\n\n                let Obj = {};\n                let _id = \"\";\n\n                allgraphs.graphdata.forEach(x => {\n                    _id = x.fileName;\n                    Obj[_id] = x.links.filter(e => e.source === \"CITATION\" || e.source === \"PROVISION\");\n                });\n\n                const fileNew = filesResponse.map(element => {\n                    return {\n                        ...element,\n                        CITATION: Obj[element.name] && Obj[element.name].length > 0 ? Obj[element.name].filter(e => e.source === \"CITATION\") : [\"N/A\"],\n                        PROVISION: Obj[element.name] && Obj[element.name].length > 0 ? Obj[element.name].filter(e => e.source === \"PROVISION\") : [\"N/A\"]\n                    };\n                });\n\n                console.log(\"New file data with citations and provisions:\", fileNew);\n\n                setIsLoading(false);\n                dispatch({ type: \"ADD_FILE\", payload: fileNew });\n                dispatch({ type: \"SET_MODAL\", payload: true });\n            }\n        });\n    } catch (error) {\n        console.log(\"General error during fetching and setting file highlights:\", error);\n        setIsLoading(false);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}