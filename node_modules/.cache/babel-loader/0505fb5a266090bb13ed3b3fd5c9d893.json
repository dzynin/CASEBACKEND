{"ast":null,"code":"const getAreaAsPNG = (canvas, position) => {\n  const {\n    left,\n    top,\n    width,\n    height\n  } = position; // @TODO: cache this?\n\n  const newCanvas = document.createElement(\"canvas\");\n\n  if (!(newCanvas instanceof HTMLCanvasElement)) {\n    return \"\";\n  }\n\n  newCanvas.width = width;\n  newCanvas.height = height;\n  const newCanvasContext = newCanvas.getContext(\"2d\");\n\n  if (!newCanvasContext || !canvas) {\n    return \"\";\n  }\n\n  const dpr = window.devicePixelRatio;\n  newCanvasContext.drawImage(canvas, left * dpr, top * dpr, width * dpr, height * dpr, 0, 0, width, height);\n  return newCanvas.toDataURL(\"image/png\");\n};\n\nexport default getAreaAsPNG;","map":{"version":3,"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONT/gptversion/CASEFRONT/node_modules/react-pdf-highlighter/build/lib/get-area-as-png.js"],"names":["getAreaAsPNG","canvas","position","left","top","width","height","newCanvas","document","createElement","HTMLCanvasElement","newCanvasContext","getContext","dpr","window","devicePixelRatio","drawImage","toDataURL"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACzC,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,GAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFJ,QALJ,CADyC,CAM3B;;AAEd,QAAMK,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB;;AAEA,MAAI,EAAEF,SAAS,YAAYG,iBAAvB,CAAJ,EAA+C;AAC7C,WAAO,EAAP;AACD;;AAEDH,EAAAA,SAAS,CAACF,KAAV,GAAkBA,KAAlB;AACAE,EAAAA,SAAS,CAACD,MAAV,GAAmBA,MAAnB;AACA,QAAMK,gBAAgB,GAAGJ,SAAS,CAACK,UAAV,CAAqB,IAArB,CAAzB;;AAEA,MAAI,CAACD,gBAAD,IAAqB,CAACV,MAA1B,EAAkC;AAChC,WAAO,EAAP;AACD;;AAED,QAAMY,GAAG,GAAGC,MAAM,CAACC,gBAAnB;AACAJ,EAAAA,gBAAgB,CAACK,SAAjB,CAA2Bf,MAA3B,EAAmCE,IAAI,GAAGU,GAA1C,EAA+CT,GAAG,GAAGS,GAArD,EAA0DR,KAAK,GAAGQ,GAAlE,EAAuEP,MAAM,GAAGO,GAAhF,EAAqF,CAArF,EAAwF,CAAxF,EAA2FR,KAA3F,EAAkGC,MAAlG;AACA,SAAOC,SAAS,CAACU,SAAV,CAAoB,WAApB,CAAP;AACD,CAzBD;;AA2BA,eAAejB,YAAf","sourcesContent":["const getAreaAsPNG = (canvas, position) => {\n  const {\n    left,\n    top,\n    width,\n    height\n  } = position; // @TODO: cache this?\n\n  const newCanvas = document.createElement(\"canvas\");\n\n  if (!(newCanvas instanceof HTMLCanvasElement)) {\n    return \"\";\n  }\n\n  newCanvas.width = width;\n  newCanvas.height = height;\n  const newCanvasContext = newCanvas.getContext(\"2d\");\n\n  if (!newCanvasContext || !canvas) {\n    return \"\";\n  }\n\n  const dpr = window.devicePixelRatio;\n  newCanvasContext.drawImage(canvas, left * dpr, top * dpr, width * dpr, height * dpr, 0, 0, width, height);\n  return newCanvas.toDataURL(\"image/png\");\n};\n\nexport default getAreaAsPNG;"]},"metadata":{},"sourceType":"module"}