{"ast":null,"code":"/**\n * Circular 3D chart tooltip.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ChildProperty, Complex, Property, extend, remove } from '@syncfusion/ej2-base';\nimport { Border, Font, Location } from '../../common/model/base';\nimport { removeElement, stopTimer, withInBounds } from '../../common/utils/helper';\nimport { Tooltip as SVGTooltip } from '@syncfusion/ej2-svg-base';\nimport { tooltipRender } from '../../common/model/constants';\n/**\n * Represents data for a 3D point in a circular 3D series.\n *\n * @private\n */\nvar CircularChart3DPointData = /** @class */function () {\n  /**\n   * Initializes a new instance of the CircularChart3DPointData class.\n   *\n   * @param {CircularChart3DPoints} point - The 3D point in the circular series.\n   * @param {CircularChart3DSeries} series - The circular series to which the point belongs.\n   * @param {number} index - The index of the point in the series. Default is 0.\n   */\n  function CircularChart3DPointData(point, series, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n    this.point = point;\n    this.series = series;\n    this.index = index;\n  }\n  return CircularChart3DPointData;\n}();\nexport { CircularChart3DPointData };\n/**\n * Represents the tooltip settings for a circular 3D chart.\n *\n */\nvar CircularChart3DTooltipSettings = /** @class */function (_super) {\n  __extends(CircularChart3DTooltipSettings, _super);\n  function CircularChart3DTooltipSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], CircularChart3DTooltipSettings.prototype, \"enable\", void 0);\n  __decorate([Property(true)], CircularChart3DTooltipSettings.prototype, \"enableMarker\", void 0);\n  __decorate([Property(null)], CircularChart3DTooltipSettings.prototype, \"fill\", void 0);\n  __decorate([Property(null)], CircularChart3DTooltipSettings.prototype, \"header\", void 0);\n  __decorate([Property(null)], CircularChart3DTooltipSettings.prototype, \"opacity\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: '12px',\n    fontStyle: 'Normal',\n    fontWeight: null,\n    color: null\n  }, Font)], CircularChart3DTooltipSettings.prototype, \"textStyle\", void 0);\n  __decorate([Property(null)], CircularChart3DTooltipSettings.prototype, \"format\", void 0);\n  __decorate([Property(null)], CircularChart3DTooltipSettings.prototype, \"template\", void 0);\n  __decorate([Property(false)], CircularChart3DTooltipSettings.prototype, \"enableAnimation\", void 0);\n  __decorate([Property(300)], CircularChart3DTooltipSettings.prototype, \"duration\", void 0);\n  __decorate([Property(700)], CircularChart3DTooltipSettings.prototype, \"fadeOutDuration\", void 0);\n  __decorate([Property(false)], CircularChart3DTooltipSettings.prototype, \"enableTextWrap\", void 0);\n  __decorate([Complex({\n    color: null,\n    width: null\n  }, Border)], CircularChart3DTooltipSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    x: null,\n    y: null\n  }, Location)], CircularChart3DTooltipSettings.prototype, \"location\", void 0);\n  return CircularChart3DTooltipSettings;\n}(ChildProperty);\nexport { CircularChart3DTooltipSettings };\n/**\n * The `CircularChart3DTooltip` module is used to render tooltips for a circular 3D chart.\n */\nvar CircularChartTooltip3D = /** @class */function (_super) {\n  __extends(CircularChartTooltip3D, _super);\n  function CircularChartTooltip3D() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n    _this.currentPoints = [];\n    /** @private */\n    _this.previousPoints = [];\n    /** @private */\n    _this.tooltipRendered = false;\n    return _this;\n  }\n  /**\n   * Handles the mouse leave event for the circular 3D chart.\n   *\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.mouseLeaveHandler = function () {\n    this.removeTooltip(this.control.tooltip.fadeOutDuration);\n  };\n  /**\n   * Handles the mouse up event for the circular 3D chart.\n   *\n   * @param {PointerEvent | TouchEvent} event - The mouse or touch event.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.mouseUpHandler = function (event, chart) {\n    this.control = chart;\n    this.element = chart.element;\n    var swipeThreshold = 10;\n    var isWithinSwipeThreshold = Math.abs(chart.mouseX - chart.cachedX) < swipeThreshold && Math.abs(chart.mouseY - chart.cachedY) < swipeThreshold;\n    if (this.control.tooltip.enable && this.control.isTouch && !chart.rotateActivate && isWithinSwipeThreshold && withInBounds(this.control.mouseX, this.control.mouseY, this.control.initialClipRect)) {\n      this.tooltip(event);\n      this.removeTooltip(2000);\n      this.tooltipRendered = true;\n    } else if (this.control.isTouch) {\n      this.removeTooltip(0);\n    }\n  };\n  /**\n   * Handles the mouse move event for the circular 3D chart.\n   *\n   * @param {PointerEvent | TouchEvent} event - The mouse or touch event.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.mouseMoveHandler = function (event, chart) {\n    this.control = chart;\n    this.element = chart.element;\n    if (!this.tooltipRendered) {\n      if (this.control.tooltip.enable && !chart.rotateActivate && withInBounds(this.control.mouseX, this.control.mouseY, this.control.initialClipRect)) {\n        this.tooltip(event);\n      } else {\n        this.removeTooltip(0);\n      }\n    }\n    this.tooltipRendered = false;\n  };\n  /**\n   * Displays the tooltip for the circular 3D pie chart on pointer events or touch events.\n   *\n   * @param  {PointerEvent} event - The event triggering the tooltip display (pointer event or touch event).\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.tooltip = function (event) {\n    this.renderSeriesTooltip(this.control, this.getPieData(event, this.control));\n  };\n  /**\n   * Gets the HTML element with the specified ID from the document.\n   *\n   * @param {string} id - The ID of the HTML element to retrieve.\n   * @returns {HTMLElement} - The HTML element with the specified ID, or null if not found.\n   */\n  CircularChartTooltip3D.prototype.getElement = function (id) {\n    return document.getElementById(id);\n  };\n  /**\n   * Gets the tooltip element based on the visibility of the tooltip.\n   *\n   * @param {boolean} isTooltip - A flag indicating whether the tooltip is currently visible.\n   * @returns {HTMLDivElement} - The tooltip element is returned, or null if the tooltip is not visible.\n   */\n  CircularChartTooltip3D.prototype.getTooltipElement = function (isTooltip) {\n    this.header = this.control.tooltip.header === null ? '${series.name}' : this.control.tooltip.header;\n    this.formattedText = [];\n    var tooltipDiv = document.getElementById(this.control.element.id + '_tooltip');\n    if (!isTooltip && !tooltipDiv) {\n      return this.createElement();\n    }\n    return null;\n  };\n  /**\n   * Creates and returns an HTMLDivElement for the tooltip.\n   *\n   * @returns {HTMLDivElement} - The created HTMLDivElement for the tooltip.\n   */\n  CircularChartTooltip3D.prototype.createElement = function () {\n    var tooltipDiv = document.createElement('div');\n    tooltipDiv.id = this.element.id + '_tooltip';\n    tooltipDiv.className = 'ejSVGTooltip';\n    tooltipDiv.style.pointerEvents = 'none';\n    tooltipDiv.style.position = 'absolute';\n    tooltipDiv.style.zIndex = '1';\n    return tooltipDiv;\n  };\n  /**\n   * Renders the tooltip for a circular 3D series based on the provided point data.\n   *\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @param {CircularChart3DPointData} data - The CircularChart3D point data for which the tooltip will be rendered.\n   * @returns {void}\n   * @private\n   */\n  CircularChartTooltip3D.prototype.renderSeriesTooltip = function (chart, data) {\n    var svgElement = this.getElement(this.element.id + '_tooltip_svg');\n    var isTooltip = svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0;\n    var tooltipDiv = this.getTooltipElement(isTooltip);\n    var isFirst = !isTooltip;\n    this.template = chart.tooltip.template;\n    this.currentPoints = [];\n    if (data.point) {\n      if (this.pushData(data, tooltipDiv)) {\n        this.triggerTooltipRender(data, isFirst, this.getTooltipText(data, chart.tooltip), this.findHeader(data));\n      }\n    } else {\n      if (!data.point && this.isRemove) {\n        this.removeTooltip(this.control.tooltip.fadeOutDuration);\n        this.isRemove = false;\n      }\n    }\n  };\n  /**\n   * Removes the tooltip with a specified duration.\n   *\n   * @param {number} duration - The duration for the tooltip removal animation.\n   * @returns {void}\n   * @private\n   */\n  CircularChartTooltip3D.prototype.removeTooltip = function (duration) {\n    var _this = this;\n    var tooltipElement = this.getElement(this.element.id + '_tooltip');\n    this.stopAnimation();\n    if (tooltipElement && this.previousPoints.length > 0) {\n      this.tooltipInterval = +setTimeout(function () {\n        if (_this.svgTooltip) {\n          _this.svgTooltip.fadeOut();\n        }\n      }, duration);\n    }\n  };\n  /**\n   * Stops the animation by clearing the tooltip interval.\n   *\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.stopAnimation = function () {\n    stopTimer(this.tooltipInterval);\n  };\n  /**\n   * Pushes CircularChart3D point data to the currentPoints array and updates the tooltip div if tooltip are enabled for the series.\n   *\n   * @param {CircularChart3DPointData} data - The CircularChart3D point data to be pushed.\n   * @param {HTMLDivElement} tooltipDiv - The tooltip div element to be updated if tooltip are enabled.\n   * @returns {boolean} - A flag indicating whether the data was successfully pushed.\n   */\n  CircularChartTooltip3D.prototype.pushData = function (data, tooltipDiv) {\n    if (data.series.enableTooltip) {\n      this.currentPoints.push(data);\n      this.stopAnimation();\n      if (tooltipDiv && !document.getElementById(tooltipDiv.id)) {\n        document.getElementById(this.element.id + '_Secondary_Element').appendChild(tooltipDiv);\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Triggers the rendering of a tooltip for a CircularChart3D point data.\n   *\n   * @param {CircularChart3DPointData} point - The CircularChart3D point data for which the tooltip will be rendered.\n   * @param {boolean} isFirst - A flag indicating whether it is the first rendering of the tooltip.\n   * @param {string} textCollection - The collection of text to be included in the tooltip.\n   * @param {string} headerText - The header text for the tooltip.\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.triggerTooltipRender = function (point, isFirst, textCollection, headerText) {\n    var _this = this;\n    var tooltip = this.control.tooltip;\n    var argsData = {\n      cancel: false,\n      text: textCollection,\n      point: point.point,\n      textStyle: tooltip.textStyle,\n      series: point.series,\n      headerText: headerText,\n      template: this.template,\n      data: {\n        pointX: point.point.x,\n        pointY: point.point.y,\n        seriesIndex: point.series.index,\n        pointIndex: point.point.index,\n        pointText: point.point.text,\n        seriesName: point.series.name\n      }\n    };\n    var padding = 10;\n    var tooltipSuccess = function (argsData) {\n      if (!argsData.cancel) {\n        _this.formattedText = _this.formattedText.concat(argsData.text);\n        _this.text = _this.formattedText;\n        _this.headerText = argsData.headerText;\n        var location_1 = {\n          x: tooltip.location.x !== null ? tooltip.location.x : _this.control.mouseX,\n          y: tooltip.location.y !== null ? tooltip.location.y : _this.control.mouseY - padding\n        };\n        _this.createTooltip(_this.control, isFirst, location_1, point.series.clipRect, point.point, 0, _this.control.initialClipRect, null, point.point, _this.template ? argsData.template : '');\n      } else {\n        _this.removeHighlight();\n        remove(_this.getElement(_this.element.id + '_tooltip'));\n      }\n      _this.isRemove = true;\n    };\n    tooltipSuccess.bind(this, point);\n    this.control.trigger(tooltipRender, argsData, tooltipSuccess);\n  };\n  /**\n   * Gets the CircularChart3D point data associated with a pointer or touch event on the chart.\n   *\n   * @param {PointerEvent | TouchEvent} event - The pointer or touch event.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {CircularChart3DPointData} - The CircularChart3D point data corresponding to the event.\n   */\n  CircularChartTooltip3D.prototype.getPieData = function (event, chart) {\n    var point;\n    var series = chart.visibleSeries[0];\n    var element = event.target;\n    if (element.id.indexOf('point') > -1 && element.id.indexOf('series') > -1) {\n      var pointIndex = parseInt(element.id.split('point-')[1], 10);\n      point = series.points[pointIndex];\n    } else if (element.id.indexOf('-data-label-text') > -1 && series.dataLabel.position === 'Inside') {\n      var index = parseInt(element.id.split('data-label-text-')[1], 10);\n      point = series.points[index];\n    } else if (element.id.indexOf('data-label-series') > -1 && series.dataLabel.position === 'Inside') {\n      var index = parseInt(element.id.split('data-label-series-0-shape-')[1], 10);\n      point = series.points[index];\n    }\n    if (point) {\n      var pointData = {\n        point: point,\n        series: series,\n        index: point.index\n      };\n      return pointData;\n    }\n    return new CircularChart3DPointData(null, null);\n  };\n  /**\n   * Gets the tooltip text for a circular 3D point data based on the specified tooltip settings.\n   *\n   * @param {CircularChart3DPointData} data - The circularChart3D point data for which the tooltip text will be generated.\n   * @param {CircularChart3DTooltipSettingsModel} tooltip - The tooltip settings to determine the format of the text.\n   * @returns {string} - The generated tooltip text.\n   */\n  CircularChartTooltip3D.prototype.getTooltipText = function (data, tooltip) {\n    var series = data.series;\n    var format = tooltip.format ? tooltip.format : '${point.x} : <b>${point.y}</b>';\n    format = this.control.useGroupingSeparator ? format.replace('${point.y}', '${point.separatorY}') : format;\n    return this.parseTemplate(data.point, series, format);\n  };\n  /**\n   * Finds the header for circular 3D point data.\n   *\n   * @param {CircularChart3DPointData} data - The circular 3D point data for which the header will be found.\n   * @returns {string} - The found header string.\n   */\n  CircularChartTooltip3D.prototype.findHeader = function (data) {\n    if (this.header === '') {\n      return '';\n    }\n    this.header = this.parseTemplate(data.point, data.series, this.header);\n    if (this.header.replace(/<b>/g, '').replace(/<\\/b>/g, '').trim() !== '') {\n      return this.header;\n    }\n    return '';\n  };\n  /**\n   * Parses a template for a circular 3D chart.\n   *\n   * @param {CircularChart3DPoints} point - The circular 3D series point associated with the template.\n   * @param {CircularChart3DSeries} series - The circular 3D series associated with the template.\n   * @param {string} format - The format for parsing the template.\n   * @returns {string} - The parsed template string.\n   */\n  CircularChartTooltip3D.prototype.parseTemplate = function (point, series, format) {\n    var value;\n    var textValue;\n    for (var _i = 0, _a = Object.keys(point); _i < _a.length; _i++) {\n      var dataValue = _a[_i];\n      // eslint-disable-next-line security/detect-non-literal-regexp\n      value = new RegExp('${point' + '.' + dataValue + '}', 'gm');\n      format = format.replace(value.source, point[dataValue]);\n    }\n    for (var _b = 0, _c = Object.keys(Object.getPrototypeOf(series)); _b < _c.length; _b++) {\n      var dataValue = _c[_b];\n      // eslint-disable-next-line security/detect-non-literal-regexp\n      value = new RegExp('${series' + '.' + dataValue + '}', 'gm');\n      textValue = series[dataValue];\n      format = format.replace(value.source, textValue);\n    }\n    return format;\n  };\n  /**\n   * Creates a tooltip for a circularChart3D chart.\n   *\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @param {boolean} isFirst - A flag indicating whether it is the first tooltip.\n   * @param {CircularChart3DLocation} location - The location where the tooltip will be positioned.\n   * @param {CircularChart3DLocation} clipLocation - The clipping location for the tooltip.\n   * @param {CircularChart3DPoints} point - The circular 3D point associated with the tooltip.\n   * @param {number} offset - The offset for the tooltip.\n   * @param {Rect} bounds - The bounds of the tooltip.\n   * @param {CircularChart3DPointData[]} extraPoints - An array of additional CircularChart3DPointData for the tooltip.\n   * @param {CircularChart3DPoints | CircularChart3DPoints[]} templatePoint - The template point or points for the tooltip.\n   * @param {string | Function} customTemplate - A custom template for the tooltip, specified as a string or a function.\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.createTooltip = function (chart, isFirst, location, clipLocation, point, offset, bounds, extraPoints, templatePoint, customTemplate) {\n    if (extraPoints === void 0) {\n      extraPoints = null;\n    }\n    if (templatePoint === void 0) {\n      templatePoint = null;\n    }\n    var module = chart.circularChartTooltip3DModule;\n    if (!module || location === null) {\n      // For the tooltip enable is false.\n      removeElement(this.control.element.id + '_tooltip');\n      return;\n    }\n    if (isFirst) {\n      this.svgTooltip = new SVGTooltip({\n        opacity: chart.tooltip.opacity ? chart.tooltip.opacity : this.control.theme === 'Material3' || this.control.theme === 'Material3Dark' ? 1 : 0.75,\n        header: this.headerText,\n        content: this.text,\n        fill: chart.tooltip.fill,\n        border: chart.tooltip.border,\n        enableAnimation: chart.tooltip.enableAnimation,\n        location: location,\n        shared: false,\n        crosshair: false,\n        shapes: !chart.tooltip.enableMarker ? [] : ['Circle'],\n        clipBounds: clipLocation,\n        areaBounds: bounds,\n        palette: this.findPalette(),\n        template: customTemplate || this.template,\n        data: templatePoint,\n        theme: chart.theme,\n        offset: offset,\n        textStyle: chart.tooltip.textStyle,\n        isNegative: false,\n        inverted: false,\n        arrowPadding: 0,\n        availableSize: chart.availableSize,\n        duration: this.control.tooltip.duration,\n        isCanvas: false,\n        isFixed: this.control.tooltip.location.x !== null || this.control.tooltip.location.y !== null,\n        isTextWrap: chart.tooltip.enableTextWrap,\n        blazorTemplate: {\n          name: 'Template',\n          parent: this.control.tooltip\n        },\n        controlInstance: this.control,\n        enableRTL: chart.enableRtl,\n        controlName: 'Chart',\n        allowHighlight: false,\n        tooltipRender: function () {\n          module.removeHighlight();\n          module.highlightPoints();\n          module.updatePreviousPoint(extraPoints);\n        },\n        animationComplete: function (args) {\n          if (args.tooltip.fadeOuted) {\n            module.fadeOut();\n          }\n        }\n      });\n      this.svgTooltip.appendTo(this.getElement(this.element.id + '_tooltip'));\n    } else {\n      if (this.svgTooltip) {\n        this.svgTooltip.location = location;\n        this.svgTooltip.content = this.text;\n        this.svgTooltip.header = this.headerText;\n        this.svgTooltip.offset = offset;\n        this.svgTooltip.palette = this.findPalette();\n        this.svgTooltip.shapes = !chart.tooltip.enableMarker ? [] : ['Circle'];\n        this.svgTooltip.data = templatePoint;\n        this.svgTooltip.template = this.template;\n        this.svgTooltip.controlName = 'Chart';\n        this.svgTooltip.crosshair = false;\n        this.svgTooltip.textStyle = chart.tooltip.textStyle;\n        this.svgTooltip.isNegative = false;\n        this.svgTooltip.clipBounds = clipLocation;\n        this.svgTooltip.arrowPadding = 0;\n        this.svgTooltip.allowHighlight = false;\n        this.svgTooltip.dataBind();\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this.control.isReact) {\n      this.control.renderReactTemplates();\n    }\n  };\n  /**\n   * Highlights multiple points in a circular 3D chart series.\n   * This method iterates through a collection of points (assuming they are represented by 'i') and applies the highlight effect to each point.\n   *\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.highlightPoints = function () {\n    for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n      var item = _a[_i];\n      if (item.series.isRectSeries && item.series.category === 'Series') {\n        this.highlightPoint(item.series, item.point.index, true);\n      }\n    }\n  };\n  /**\n   * Removes the highlight from a previously highlighted point in a circular 3D chart series.\n   *\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.removeHighlight = function () {\n    var item;\n    for (var i = 0, len = this.previousPoints.length; i < len; i++) {\n      item = this.previousPoints[i];\n      if (item.series.isRectSeries) {\n        if (item.series.visible) {\n          this.highlightPoint(item.series, item.point.index, false);\n        }\n        continue;\n      }\n    }\n  };\n  /**\n   * Highlights or un highlights a specific point in a circular 3D chart series.\n   *\n   * @param {CircularChart3DSeries} series - The circular 3D series to which the point belongs.\n   * @param {number} pointIndex - The index of the point to be highlighted or un highlighted.\n   * @param {boolean} highlight - A flag indicating whether to highlight (true) or un highlight (false) the point.\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.highlightPoint = function (series, pointIndex, highlight) {\n    var _this = this;\n    if (this.control.circularChartHighlight3DModule && this.control.highlightMode === 'None' || !this.control.circularChartHighlight3DModule) {\n      var elements = document.querySelectorAll(\"[id*=\\\"region-series-0-point-\" + pointIndex + \"\\\"]\");\n      var pointElements_1 = [];\n      elements.forEach(function (pointElement) {\n        var elementIndex = parseInt(pointElement.id.split('point-')[1], 10);\n        if (elementIndex === pointIndex) {\n          pointElements_1.push(pointElement);\n        }\n      });\n      var datalabelElement = document.getElementById(this.control.element.id + '-svg-data-label-text-' + pointIndex);\n      var connectorElement = document.getElementById(this.control.element.id + '-datalabel-series-0-connector-' + pointIndex);\n      var shapeElement = document.getElementById(this.control.element.id + '-svg-data-label-series-0-shape-' + pointIndex);\n      if (datalabelElement) {\n        pointElements_1.push(datalabelElement);\n      }\n      if (connectorElement) {\n        pointElements_1.push(connectorElement);\n      }\n      if (shapeElement) {\n        pointElements_1.push(shapeElement);\n      }\n      var seriesElements = document.getElementById(this.element.id + '-svg-chart-3d').children;\n      if (seriesElements) {\n        for (var _i = 0, seriesElements_1 = seriesElements; _i < seriesElements_1.length; _i++) {\n          var seriesElement = seriesElements_1[_i];\n          if (seriesElement.parentElement.id === this.control.groupElement.id) {\n            var selection = seriesElement.hasAttribute('class') ? seriesElement.getAttribute('class').indexOf('_selection_') === -1 : true;\n            seriesElement.setAttribute('opacity', (highlight && this.control.highlightColor !== 'transparent' && selection ? 0.2 : series.opacity).toString());\n          }\n        }\n      }\n      if (pointElements_1) {\n        pointElements_1.forEach(function (element) {\n          if (element.parentElement.id === _this.control.groupElement.id) {\n            element.setAttribute('opacity', series.opacity.toString());\n          }\n        });\n      }\n    }\n  };\n  /**\n   * Fades out the tooltip associated with the provided CircularChart3DPointData.\n   *\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.fadeOut = function () {\n    var svgElement = this.getElement(this.element.id + '_tooltip_svg');\n    var isTooltip = svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0;\n    if (!isTooltip) {\n      this.currentPoints = [];\n      this.removeHighlight();\n      this.previousPoints = [];\n      this.svgTooltip = null;\n      this.control.trigger('animationComplete', {});\n    }\n  };\n  /**\n   * Updates the previous point with additional CircularChart3DPointData.\n   *\n   * @param {CircularChart3DPointData} extraPoints - An array of additional CircularChart3DPointData to update the previous point.\n   * @returns {void}\n   */\n  CircularChartTooltip3D.prototype.updatePreviousPoint = function (extraPoints) {\n    if (extraPoints) {\n      this.currentPoints = this.currentPoints.concat(extraPoints);\n    }\n    this.previousPoints = extend([], this.currentPoints, null, true);\n  };\n  /**\n   * Finds and returns an array of colors from the current points.\n   *\n   * @returns {string[]} - An array of color strings.\n   */\n  CircularChartTooltip3D.prototype.findPalette = function () {\n    var colors = [];\n    for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n      var data = _a[_i];\n      colors.push(data.point.color);\n    }\n    return colors;\n  };\n  /**\n   * Gets the module name for the circular 3D tooltip.\n   *\n   * @returns {string} - The module name.\n   */\n  CircularChartTooltip3D.prototype.getModuleName = function () {\n    return 'CircularChartTooltip3D';\n  };\n  /**\n   * Destroys the circular 3D tooltip module.\n   *\n   * @returns {void}\n   * @private\n   */\n  CircularChartTooltip3D.prototype.destroy = function () {\n    /**\n     * Destroy method calling here.\n     */\n  };\n  return CircularChartTooltip3D;\n}(ChildProperty);\nexport { CircularChartTooltip3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","ChildProperty","Complex","Property","extend","remove","Border","Font","Location","removeElement","stopTimer","withInBounds","Tooltip","SVGTooltip","tooltipRender","CircularChart3DPointData","point","series","index","CircularChart3DTooltipSettings","_super","apply","fontFamily","size","fontStyle","fontWeight","color","width","x","y","CircularChartTooltip3D","_this","currentPoints","previousPoints","tooltipRendered","mouseLeaveHandler","removeTooltip","control","tooltip","fadeOutDuration","mouseUpHandler","event","chart","element","swipeThreshold","isWithinSwipeThreshold","Math","abs","mouseX","cachedX","mouseY","cachedY","enable","isTouch","rotateActivate","initialClipRect","mouseMoveHandler","renderSeriesTooltip","getPieData","getElement","id","document","getElementById","getTooltipElement","isTooltip","header","formattedText","tooltipDiv","createElement","className","style","pointerEvents","position","zIndex","data","svgElement","parseInt","getAttribute","isFirst","template","pushData","triggerTooltipRender","getTooltipText","findHeader","isRemove","duration","tooltipElement","stopAnimation","tooltipInterval","setTimeout","svgTooltip","fadeOut","enableTooltip","push","appendChild","textCollection","headerText","argsData","cancel","text","textStyle","pointX","pointY","seriesIndex","pointIndex","pointText","seriesName","name","padding","tooltipSuccess","concat","location_1","location","createTooltip","clipRect","removeHighlight","bind","trigger","visibleSeries","indexOf","split","points","dataLabel","pointData","format","useGroupingSeparator","replace","parseTemplate","trim","value","textValue","_i","_a","keys","dataValue","RegExp","source","_b","_c","getPrototypeOf","clipLocation","offset","bounds","extraPoints","templatePoint","customTemplate","module","circularChartTooltip3DModule","opacity","theme","content","fill","border","enableAnimation","shared","crosshair","shapes","enableMarker","clipBounds","areaBounds","palette","findPalette","isNegative","inverted","arrowPadding","availableSize","isCanvas","isFixed","isTextWrap","enableTextWrap","blazorTemplate","parent","controlInstance","enableRTL","enableRtl","controlName","allowHighlight","highlightPoints","updatePreviousPoint","animationComplete","args","fadeOuted","appendTo","dataBind","isReact","renderReactTemplates","item","isRectSeries","category","highlightPoint","len","visible","highlight","circularChartHighlight3DModule","highlightMode","elements","querySelectorAll","pointElements_1","forEach","pointElement","elementIndex","datalabelElement","connectorElement","shapeElement","seriesElements","children","seriesElements_1","seriesElement","parentElement","groupElement","selection","hasAttribute","setAttribute","highlightColor","toString","colors","getModuleName","destroy"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/tooltip.js"],"sourcesContent":["/**\n * Circular 3D chart tooltip.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ChildProperty, Complex, Property, extend, remove } from '@syncfusion/ej2-base';\nimport { Border, Font, Location } from '../../common/model/base';\nimport { removeElement, stopTimer, withInBounds } from '../../common/utils/helper';\nimport { Tooltip as SVGTooltip } from '@syncfusion/ej2-svg-base';\nimport { tooltipRender } from '../../common/model/constants';\n/**\n * Represents data for a 3D point in a circular 3D series.\n *\n * @private\n */\nvar CircularChart3DPointData = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the CircularChart3DPointData class.\n     *\n     * @param {CircularChart3DPoints} point - The 3D point in the circular series.\n     * @param {CircularChart3DSeries} series - The circular series to which the point belongs.\n     * @param {number} index - The index of the point in the series. Default is 0.\n     */\n    function CircularChart3DPointData(point, series, index) {\n        if (index === void 0) { index = 0; }\n        this.point = point;\n        this.series = series;\n        this.index = index;\n    }\n    return CircularChart3DPointData;\n}());\nexport { CircularChart3DPointData };\n/**\n * Represents the tooltip settings for a circular 3D chart.\n *\n */\nvar CircularChart3DTooltipSettings = /** @class */ (function (_super) {\n    __extends(CircularChart3DTooltipSettings, _super);\n    function CircularChart3DTooltipSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], CircularChart3DTooltipSettings.prototype, \"enable\", void 0);\n    __decorate([\n        Property(true)\n    ], CircularChart3DTooltipSettings.prototype, \"enableMarker\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DTooltipSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DTooltipSettings.prototype, \"header\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DTooltipSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: null, color: null }, Font)\n    ], CircularChart3DTooltipSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DTooltipSettings.prototype, \"format\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DTooltipSettings.prototype, \"template\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DTooltipSettings.prototype, \"enableAnimation\", void 0);\n    __decorate([\n        Property(300)\n    ], CircularChart3DTooltipSettings.prototype, \"duration\", void 0);\n    __decorate([\n        Property(700)\n    ], CircularChart3DTooltipSettings.prototype, \"fadeOutDuration\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DTooltipSettings.prototype, \"enableTextWrap\", void 0);\n    __decorate([\n        Complex({ color: null, width: null }, Border)\n    ], CircularChart3DTooltipSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ x: null, y: null }, Location)\n    ], CircularChart3DTooltipSettings.prototype, \"location\", void 0);\n    return CircularChart3DTooltipSettings;\n}(ChildProperty));\nexport { CircularChart3DTooltipSettings };\n/**\n * The `CircularChart3DTooltip` module is used to render tooltips for a circular 3D chart.\n */\nvar CircularChartTooltip3D = /** @class */ (function (_super) {\n    __extends(CircularChartTooltip3D, _super);\n    function CircularChartTooltip3D() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.currentPoints = [];\n        /** @private */\n        _this.previousPoints = [];\n        /** @private */\n        _this.tooltipRendered = false;\n        return _this;\n    }\n    /**\n     * Handles the mouse leave event for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.mouseLeaveHandler = function () {\n        this.removeTooltip(this.control.tooltip.fadeOutDuration);\n    };\n    /**\n     * Handles the mouse up event for the circular 3D chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The mouse or touch event.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.mouseUpHandler = function (event, chart) {\n        this.control = chart;\n        this.element = chart.element;\n        var swipeThreshold = 10;\n        var isWithinSwipeThreshold = Math.abs(chart.mouseX - chart.cachedX) < swipeThreshold &&\n            Math.abs(chart.mouseY - chart.cachedY) < swipeThreshold;\n        if (this.control.tooltip.enable && this.control.isTouch && !chart.rotateActivate && isWithinSwipeThreshold\n            && withInBounds(this.control.mouseX, this.control.mouseY, this.control.initialClipRect)) {\n            this.tooltip(event);\n            this.removeTooltip(2000);\n            this.tooltipRendered = true;\n        }\n        else if (this.control.isTouch) {\n            this.removeTooltip(0);\n        }\n    };\n    /**\n     * Handles the mouse move event for the circular 3D chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The mouse or touch event.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.mouseMoveHandler = function (event, chart) {\n        this.control = chart;\n        this.element = chart.element;\n        if (!this.tooltipRendered) {\n            if (this.control.tooltip.enable && !chart.rotateActivate &&\n                withInBounds(this.control.mouseX, this.control.mouseY, this.control.initialClipRect)) {\n                this.tooltip(event);\n            }\n            else {\n                this.removeTooltip(0);\n            }\n        }\n        this.tooltipRendered = false;\n    };\n    /**\n     * Displays the tooltip for the circular 3D pie chart on pointer events or touch events.\n     *\n     * @param  {PointerEvent} event - The event triggering the tooltip display (pointer event or touch event).\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.tooltip = function (event) {\n        this.renderSeriesTooltip(this.control, this.getPieData(event, this.control));\n    };\n    /**\n     * Gets the HTML element with the specified ID from the document.\n     *\n     * @param {string} id - The ID of the HTML element to retrieve.\n     * @returns {HTMLElement} - The HTML element with the specified ID, or null if not found.\n     */\n    CircularChartTooltip3D.prototype.getElement = function (id) {\n        return document.getElementById(id);\n    };\n    /**\n     * Gets the tooltip element based on the visibility of the tooltip.\n     *\n     * @param {boolean} isTooltip - A flag indicating whether the tooltip is currently visible.\n     * @returns {HTMLDivElement} - The tooltip element is returned, or null if the tooltip is not visible.\n     */\n    CircularChartTooltip3D.prototype.getTooltipElement = function (isTooltip) {\n        this.header = (this.control.tooltip.header === null) ? '${series.name}' : (this.control.tooltip.header);\n        this.formattedText = [];\n        var tooltipDiv = document.getElementById(this.control.element.id + '_tooltip');\n        if (!isTooltip && !tooltipDiv) {\n            return this.createElement();\n        }\n        return null;\n    };\n    /**\n     * Creates and returns an HTMLDivElement for the tooltip.\n     *\n     * @returns {HTMLDivElement} - The created HTMLDivElement for the tooltip.\n     */\n    CircularChartTooltip3D.prototype.createElement = function () {\n        var tooltipDiv = document.createElement('div');\n        tooltipDiv.id = this.element.id + '_tooltip';\n        tooltipDiv.className = 'ejSVGTooltip';\n        tooltipDiv.style.pointerEvents = 'none';\n        tooltipDiv.style.position = 'absolute';\n        tooltipDiv.style.zIndex = '1';\n        return tooltipDiv;\n    };\n    /**\n     * Renders the tooltip for a circular 3D series based on the provided point data.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DPointData} data - The CircularChart3D point data for which the tooltip will be rendered.\n     * @returns {void}\n     * @private\n     */\n    CircularChartTooltip3D.prototype.renderSeriesTooltip = function (chart, data) {\n        var svgElement = this.getElement(this.element.id + '_tooltip_svg');\n        var isTooltip = svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0;\n        var tooltipDiv = this.getTooltipElement(isTooltip);\n        var isFirst = !isTooltip;\n        this.template = chart.tooltip.template;\n        this.currentPoints = [];\n        if (data.point) {\n            if (this.pushData(data, tooltipDiv)) {\n                this.triggerTooltipRender(data, isFirst, this.getTooltipText(data, chart.tooltip), this.findHeader(data));\n            }\n        }\n        else {\n            if (!data.point && this.isRemove) {\n                this.removeTooltip(this.control.tooltip.fadeOutDuration);\n                this.isRemove = false;\n            }\n        }\n    };\n    /**\n     * Removes the tooltip with a specified duration.\n     *\n     * @param {number} duration - The duration for the tooltip removal animation.\n     * @returns {void}\n     * @private\n     */\n    CircularChartTooltip3D.prototype.removeTooltip = function (duration) {\n        var _this = this;\n        var tooltipElement = this.getElement(this.element.id + '_tooltip');\n        this.stopAnimation();\n        if (tooltipElement && this.previousPoints.length > 0) {\n            this.tooltipInterval = +setTimeout(function () {\n                if (_this.svgTooltip) {\n                    _this.svgTooltip.fadeOut();\n                }\n            }, duration);\n        }\n    };\n    /**\n     * Stops the animation by clearing the tooltip interval.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.stopAnimation = function () {\n        stopTimer(this.tooltipInterval);\n    };\n    /**\n     * Pushes CircularChart3D point data to the currentPoints array and updates the tooltip div if tooltip are enabled for the series.\n     *\n     * @param {CircularChart3DPointData} data - The CircularChart3D point data to be pushed.\n     * @param {HTMLDivElement} tooltipDiv - The tooltip div element to be updated if tooltip are enabled.\n     * @returns {boolean} - A flag indicating whether the data was successfully pushed.\n     */\n    CircularChartTooltip3D.prototype.pushData = function (data, tooltipDiv) {\n        if (data.series.enableTooltip) {\n            this.currentPoints.push(data);\n            this.stopAnimation();\n            if (tooltipDiv && !document.getElementById(tooltipDiv.id)) {\n                document.getElementById(this.element.id + '_Secondary_Element').appendChild(tooltipDiv);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Triggers the rendering of a tooltip for a CircularChart3D point data.\n     *\n     * @param {CircularChart3DPointData} point - The CircularChart3D point data for which the tooltip will be rendered.\n     * @param {boolean} isFirst - A flag indicating whether it is the first rendering of the tooltip.\n     * @param {string} textCollection - The collection of text to be included in the tooltip.\n     * @param {string} headerText - The header text for the tooltip.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.triggerTooltipRender = function (point, isFirst, textCollection, headerText) {\n        var _this = this;\n        var tooltip = this.control.tooltip;\n        var argsData = {\n            cancel: false, text: textCollection, point: point.point, textStyle: tooltip.textStyle,\n            series: point.series, headerText: headerText, template: this.template,\n            data: {\n                pointX: point.point.x, pointY: point.point.y, seriesIndex: point.series.index,\n                pointIndex: point.point.index, pointText: point.point.text, seriesName: point.series.name\n            }\n        };\n        var padding = 10;\n        var tooltipSuccess = function (argsData) {\n            if (!argsData.cancel) {\n                _this.formattedText = _this.formattedText.concat(argsData.text);\n                _this.text = _this.formattedText;\n                _this.headerText = argsData.headerText;\n                var location_1 = {\n                    x: (tooltip.location.x !== null) ? tooltip.location.x : _this.control.mouseX,\n                    y: (tooltip.location.y !== null) ? tooltip.location.y : _this.control.mouseY - padding\n                };\n                _this.createTooltip(_this.control, isFirst, location_1, point.series.clipRect, point.point, 0, _this.control.initialClipRect, null, point.point, _this.template ? argsData.template : '');\n            }\n            else {\n                _this.removeHighlight();\n                remove(_this.getElement(_this.element.id + '_tooltip'));\n            }\n            _this.isRemove = true;\n        };\n        tooltipSuccess.bind(this, point);\n        this.control.trigger(tooltipRender, argsData, tooltipSuccess);\n    };\n    /**\n     * Gets the CircularChart3D point data associated with a pointer or touch event on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The pointer or touch event.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {CircularChart3DPointData} - The CircularChart3D point data corresponding to the event.\n     */\n    CircularChartTooltip3D.prototype.getPieData = function (event, chart) {\n        var point;\n        var series = chart.visibleSeries[0];\n        var element = event.target;\n        if (element.id.indexOf('point') > -1 && element.id.indexOf('series') > -1) {\n            var pointIndex = parseInt(element.id.split('point-')[1], 10);\n            point = series.points[pointIndex];\n        }\n        else if (element.id.indexOf('-data-label-text') > -1 && series.dataLabel.position === 'Inside') {\n            var index = parseInt(element.id.split('data-label-text-')[1], 10);\n            point = series.points[index];\n        }\n        else if (element.id.indexOf('data-label-series') > -1 && series.dataLabel.position === 'Inside') {\n            var index = parseInt(element.id.split('data-label-series-0-shape-')[1], 10);\n            point = series.points[index];\n        }\n        if (point) {\n            var pointData = { point: point, series: series, index: point.index };\n            return pointData;\n        }\n        return new CircularChart3DPointData(null, null);\n    };\n    /**\n     * Gets the tooltip text for a circular 3D point data based on the specified tooltip settings.\n     *\n     * @param {CircularChart3DPointData} data - The circularChart3D point data for which the tooltip text will be generated.\n     * @param {CircularChart3DTooltipSettingsModel} tooltip - The tooltip settings to determine the format of the text.\n     * @returns {string} - The generated tooltip text.\n     */\n    CircularChartTooltip3D.prototype.getTooltipText = function (data, tooltip) {\n        var series = data.series;\n        var format = tooltip.format ? tooltip.format : '${point.x} : <b>${point.y}</b>';\n        format = this.control.useGroupingSeparator ? format.replace('${point.y}', '${point.separatorY}') : format;\n        return this.parseTemplate(data.point, series, format);\n    };\n    /**\n     * Finds the header for circular 3D point data.\n     *\n     * @param {CircularChart3DPointData} data - The circular 3D point data for which the header will be found.\n     * @returns {string} - The found header string.\n     */\n    CircularChartTooltip3D.prototype.findHeader = function (data) {\n        if (this.header === '') {\n            return '';\n        }\n        this.header = this.parseTemplate(data.point, data.series, this.header);\n        if (this.header.replace(/<b>/g, '').replace(/<\\/b>/g, '').trim() !== '') {\n            return this.header;\n        }\n        return '';\n    };\n    /**\n     * Parses a template for a circular 3D chart.\n     *\n     * @param {CircularChart3DPoints} point - The circular 3D series point associated with the template.\n     * @param {CircularChart3DSeries} series - The circular 3D series associated with the template.\n     * @param {string} format - The format for parsing the template.\n     * @returns {string} - The parsed template string.\n     */\n    CircularChartTooltip3D.prototype.parseTemplate = function (point, series, format) {\n        var value;\n        var textValue;\n        for (var _i = 0, _a = Object.keys(point); _i < _a.length; _i++) {\n            var dataValue = _a[_i];\n            // eslint-disable-next-line security/detect-non-literal-regexp\n            value = new RegExp('${point' + '.' + dataValue + '}', 'gm');\n            format = format.replace(value.source, point[dataValue]);\n        }\n        for (var _b = 0, _c = Object.keys(Object.getPrototypeOf(series)); _b < _c.length; _b++) {\n            var dataValue = _c[_b];\n            // eslint-disable-next-line security/detect-non-literal-regexp\n            value = new RegExp('${series' + '.' + dataValue + '}', 'gm');\n            textValue = series[dataValue];\n            format = format.replace(value.source, textValue);\n        }\n        return format;\n    };\n    /**\n     * Creates a tooltip for a circularChart3D chart.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {boolean} isFirst - A flag indicating whether it is the first tooltip.\n     * @param {CircularChart3DLocation} location - The location where the tooltip will be positioned.\n     * @param {CircularChart3DLocation} clipLocation - The clipping location for the tooltip.\n     * @param {CircularChart3DPoints} point - The circular 3D point associated with the tooltip.\n     * @param {number} offset - The offset for the tooltip.\n     * @param {Rect} bounds - The bounds of the tooltip.\n     * @param {CircularChart3DPointData[]} extraPoints - An array of additional CircularChart3DPointData for the tooltip.\n     * @param {CircularChart3DPoints | CircularChart3DPoints[]} templatePoint - The template point or points for the tooltip.\n     * @param {string | Function} customTemplate - A custom template for the tooltip, specified as a string or a function.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.createTooltip = function (chart, isFirst, location, clipLocation, point, offset, bounds, extraPoints, templatePoint, customTemplate) {\n        if (extraPoints === void 0) { extraPoints = null; }\n        if (templatePoint === void 0) { templatePoint = null; }\n        var module = chart.circularChartTooltip3DModule;\n        if (!module || location === null) { // For the tooltip enable is false.\n            removeElement(this.control.element.id + '_tooltip');\n            return;\n        }\n        if (isFirst) {\n            this.svgTooltip = new SVGTooltip({\n                opacity: chart.tooltip.opacity ? chart.tooltip.opacity : ((this.control.theme === 'Material3' || this.control.theme === 'Material3Dark') ? 1 : 0.75),\n                header: this.headerText,\n                content: this.text,\n                fill: chart.tooltip.fill,\n                border: chart.tooltip.border,\n                enableAnimation: chart.tooltip.enableAnimation,\n                location: location,\n                shared: false,\n                crosshair: false,\n                shapes: !chart.tooltip.enableMarker ? [] : ['Circle'],\n                clipBounds: clipLocation,\n                areaBounds: bounds,\n                palette: this.findPalette(),\n                template: customTemplate || this.template,\n                data: templatePoint,\n                theme: chart.theme,\n                offset: offset,\n                textStyle: chart.tooltip.textStyle,\n                isNegative: false,\n                inverted: false,\n                arrowPadding: 0,\n                availableSize: chart.availableSize,\n                duration: this.control.tooltip.duration,\n                isCanvas: false,\n                isFixed: (this.control.tooltip.location.x !== null || this.control.tooltip.location.y !== null),\n                isTextWrap: chart.tooltip.enableTextWrap,\n                blazorTemplate: { name: 'Template', parent: this.control.tooltip },\n                controlInstance: this.control,\n                enableRTL: chart.enableRtl,\n                controlName: 'Chart',\n                allowHighlight: false,\n                tooltipRender: function () {\n                    module.removeHighlight();\n                    module.highlightPoints();\n                    module.updatePreviousPoint(extraPoints);\n                },\n                animationComplete: function (args) {\n                    if (args.tooltip.fadeOuted) {\n                        module.fadeOut();\n                    }\n                }\n            });\n            this.svgTooltip.appendTo(this.getElement(this.element.id + '_tooltip'));\n        }\n        else {\n            if (this.svgTooltip) {\n                this.svgTooltip.location = location;\n                this.svgTooltip.content = this.text;\n                this.svgTooltip.header = this.headerText;\n                this.svgTooltip.offset = offset;\n                this.svgTooltip.palette = this.findPalette();\n                this.svgTooltip.shapes = !chart.tooltip.enableMarker ? [] : ['Circle'];\n                this.svgTooltip.data = templatePoint;\n                this.svgTooltip.template = this.template;\n                this.svgTooltip.controlName = 'Chart';\n                this.svgTooltip.crosshair = false;\n                this.svgTooltip.textStyle = chart.tooltip.textStyle;\n                this.svgTooltip.isNegative = false;\n                this.svgTooltip.clipBounds = clipLocation;\n                this.svgTooltip.arrowPadding = 0;\n                this.svgTooltip.allowHighlight = false;\n                this.svgTooltip.dataBind();\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.control.isReact) {\n            this.control.renderReactTemplates();\n        }\n    };\n    /**\n     * Highlights multiple points in a circular 3D chart series.\n     * This method iterates through a collection of points (assuming they are represented by 'i') and applies the highlight effect to each point.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.highlightPoints = function () {\n        for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.series.isRectSeries && item.series.category === 'Series') {\n                this.highlightPoint(item.series, item.point.index, true);\n            }\n        }\n    };\n    /**\n     * Removes the highlight from a previously highlighted point in a circular 3D chart series.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.removeHighlight = function () {\n        var item;\n        for (var i = 0, len = this.previousPoints.length; i < len; i++) {\n            item = this.previousPoints[i];\n            if (item.series.isRectSeries) {\n                if (item.series.visible) {\n                    this.highlightPoint(item.series, item.point.index, false);\n                }\n                continue;\n            }\n        }\n    };\n    /**\n     * Highlights or un highlights a specific point in a circular 3D chart series.\n     *\n     * @param {CircularChart3DSeries} series - The circular 3D series to which the point belongs.\n     * @param {number} pointIndex - The index of the point to be highlighted or un highlighted.\n     * @param {boolean} highlight - A flag indicating whether to highlight (true) or un highlight (false) the point.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.highlightPoint = function (series, pointIndex, highlight) {\n        var _this = this;\n        if ((this.control.circularChartHighlight3DModule && this.control.highlightMode === 'None') || !this.control.circularChartHighlight3DModule) {\n            var elements = document.querySelectorAll(\"[id*=\\\"region-series-0-point-\" + pointIndex + \"\\\"]\");\n            var pointElements_1 = [];\n            elements.forEach(function (pointElement) {\n                var elementIndex = parseInt(pointElement.id.split('point-')[1], 10);\n                if (elementIndex === pointIndex) {\n                    pointElements_1.push(pointElement);\n                }\n            });\n            var datalabelElement = document.getElementById(this.control.element.id + '-svg-data-label-text-' + pointIndex);\n            var connectorElement = document.getElementById(this.control.element.id + '-datalabel-series-0-connector-' + pointIndex);\n            var shapeElement = document.getElementById(this.control.element.id + '-svg-data-label-series-0-shape-' + pointIndex);\n            if (datalabelElement) {\n                pointElements_1.push(datalabelElement);\n            }\n            if (connectorElement) {\n                pointElements_1.push(connectorElement);\n            }\n            if (shapeElement) {\n                pointElements_1.push(shapeElement);\n            }\n            var seriesElements = document.getElementById(this.element.id + '-svg-chart-3d').children;\n            if (seriesElements) {\n                for (var _i = 0, seriesElements_1 = seriesElements; _i < seriesElements_1.length; _i++) {\n                    var seriesElement = seriesElements_1[_i];\n                    if (seriesElement.parentElement.id === this.control.groupElement.id) {\n                        var selection = seriesElement.hasAttribute('class') ? seriesElement.getAttribute('class').indexOf('_selection_') === -1 : true;\n                        seriesElement.setAttribute('opacity', (highlight && this.control.highlightColor !== 'transparent' && selection ? 0.2 : series.opacity).toString());\n                    }\n                }\n            }\n            if (pointElements_1) {\n                pointElements_1.forEach(function (element) {\n                    if (element.parentElement.id === _this.control.groupElement.id) {\n                        element.setAttribute('opacity', (series.opacity).toString());\n                    }\n                });\n            }\n        }\n    };\n    /**\n     * Fades out the tooltip associated with the provided CircularChart3DPointData.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.fadeOut = function () {\n        var svgElement = this.getElement(this.element.id + '_tooltip_svg');\n        var isTooltip = (svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0);\n        if (!isTooltip) {\n            this.currentPoints = [];\n            this.removeHighlight();\n            this.previousPoints = [];\n            this.svgTooltip = null;\n            this.control.trigger('animationComplete', {});\n        }\n    };\n    /**\n     * Updates the previous point with additional CircularChart3DPointData.\n     *\n     * @param {CircularChart3DPointData} extraPoints - An array of additional CircularChart3DPointData to update the previous point.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.updatePreviousPoint = function (extraPoints) {\n        if (extraPoints) {\n            this.currentPoints = this.currentPoints.concat(extraPoints);\n        }\n        this.previousPoints = extend([], this.currentPoints, null, true);\n    };\n    /**\n     * Finds and returns an array of colors from the current points.\n     *\n     * @returns {string[]} - An array of color strings.\n     */\n    CircularChartTooltip3D.prototype.findPalette = function () {\n        var colors = [];\n        for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n            var data = _a[_i];\n            colors.push(data.point.color);\n        }\n        return colors;\n    };\n    /**\n     * Gets the module name for the circular 3D tooltip.\n     *\n     * @returns {string} - The module name.\n     */\n    CircularChartTooltip3D.prototype.getModuleName = function () {\n        return 'CircularChartTooltip3D';\n    };\n    /**\n     * Destroys the circular 3D tooltip module.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartTooltip3D.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    return CircularChartTooltip3D;\n}(ChildProperty));\nexport { CircularChartTooltip3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}