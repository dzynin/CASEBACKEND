{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\nimport { HelperMethods } from '../editor/editor-helper';\nimport { Size } from '../utility/size';\n/**\n * @private\n */\nvar Ruler = /** @class */function () {\n  /**\n   *  Constructor for creating the Ruler Component\n   *\n   * @param {RulerModel} options The ruler model.\n   * @param {string | HTMLElement} element The ruler element.\n   */\n  function Ruler(element, rulerHelper) {\n    /**\n     * Defines the unique interval of the ruler.\n     *\n     * @default 6\n     */\n    this.interval = 4;\n    /**\n     * Sets the segment width of the ruler.\n     *\n     * @default 36\n     */\n    this.segmentWidth = 47.9988;\n    /**\n     * Defines the orientation of the ruler.\n     *\n     * @default 'Horizontal'\n     */\n    this.orientation = 'Horizontal';\n    /**\n     * Defines the alignment of the tick in the ruler.\n     *\n     *\n     * @default 'RightOrBottom'\n     */\n    this.tickAlignment = 'RightOrBottom';\n    /**\n     * Defines the color of the marker.\n     *\n     * @default 'red'\n     */\n    this.markerColor = 'red';\n    /**\n     * Defines the thickness of the ruler.\n     *\n     * @default 15\n     */\n    this.thickness = 15;\n    /**\n     * Sets the segment width of the ruler.\n     *\n     * @default null\n      */\n    this.arrangeTick = null;\n    /**\n     * Defines the length of the ruler.\n     *\n     * @default 400\n     */\n    this.length = 400;\n    /**   @private  */\n    this.offset = 0;\n    /**   @private  */\n    this.scale = 1;\n    /**   @private  */\n    this.rulerStartValue = 1584;\n    /**   @private  */\n    this.zeroPosition = HelperMethods.convertPointToPixel(1584);\n    /**   @private  */\n    this.addSegmentWidth = false;\n    this.element = element;\n    this.rulerHelper = rulerHelper;\n  }\n  /**\n   * @private\n   */\n  Ruler.prototype.appendTo = function () {\n    this.preRender();\n    this.render();\n  };\n  /**\n   * Initializes the values of private members.\n   *\n   * @returns {void}  Initializes the values of private members.\n   * @private\n   */\n  Ruler.prototype.preRender = function () {\n    this.unWireEvents();\n    this.wireEvents();\n  };\n  /**\n   * Renders the rulers.\n   *\n   * @returns {void}  Renders the rulers.\n   * @private\n   */\n  Ruler.prototype.render = function () {\n    this.updateRulerGeometry();\n    //this.renderComplete();\n  };\n  /**\n   * Core method to return the component name.\n   *\n   * @returns {string}  Core method to return the component name.\n   * @private\n   */\n  Ruler.prototype.getModuleName = function () {\n    return 'Ruler';\n  };\n  /**\n   *To destroy the ruler\n   *\n   * @returns {void} To destroy the ruler\n   */\n  Ruler.prototype.destroy = function () {\n    this.unWireEvents();\n    // this.notify('destroy', {});\n    // super.destroy();\n    this.element.classList.remove('e-ruler');\n  };\n  /**\n   * Refreshes the ruler when the Ruler properties are updated\\\n   *\n   * @returns {  void}    Refreshes the ruler when the Ruler properties are updated .\\\n   * @param {RulerModel} newProp - provide the newProp value.\n   * @param {RulerModel} oldProp - provide the oldProp value.\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  // public onPropertyChanged(newProp: RulerModel, oldProp: RulerModel): void {\n  //     for (const prop of Object.keys(newProp)) {\n  //         switch (prop) {\n  //             case 'interval':\n  //             case 'segmentWidth':\n  //             case 'tickAlignment':\n  //             case 'markerColor':\n  //             case 'thickness':\n  //                 this.updateRuler();\n  //                 break;\n  //         }\n  //     }\n  // }\n  /**\n   * @private\n   */\n  Ruler.prototype.showHideRuler = function (show) {\n    if (show) {\n      this.element.style.display = 'block';\n    } else {\n      this.element.style.display = 'none';\n    }\n  };\n  Ruler.prototype.updateRulerGeometry = function () {\n    this.element.style.textAlign = 'left';\n    this.renderRulerSpace();\n    this.updateRuler();\n  };\n  Ruler.prototype.renderRulerSpace = function () {\n    var rulerGeometry = this.getRulerGeometry();\n    var div = document.getElementById(this.element.id + '_ruler_space');\n    if (!div) {\n      div = this.rulerHelper.createHtmlElement('div', {\n        'id': this.element.id + '_ruler_space',\n        'style': 'height:' + rulerGeometry.height + 'px;width:' + rulerGeometry.width + 'px;cssFloat:' + 'left;'\n      });\n      this.element.appendChild(div);\n    }\n    return div;\n  };\n  /**\n   * @private\n   *\n   * @returns {void} To update the ruler\n   */\n  Ruler.prototype.updateRuler = function () {\n    var rulerSize = this.getRulerSize();\n    var rulerGeometry = this.getRulerGeometry();\n    var length = 0;\n    var offset = 0;\n    var availableSize = new Size();\n    var svg = this.getRulerSVG(rulerGeometry);\n    if (svg) {\n      length = this.length;\n      availableSize.height = rulerSize;\n      offset = this.offset;\n      if (length && length !== Infinity) {\n        var unitLength = length;\n        var unitOffset = offset;\n        this.updateSegments(unitOffset, unitLength + Math.abs(unitOffset), svg, rulerSize);\n      }\n    }\n  };\n  Ruler.prototype.updateSegments = function (start, end, svg, rulerSize) {\n    var run = start;\n    var trans = {\n      trans: 0\n    };\n    this.rulerStartValue = HelperMethods.convertPixelToPoint(this.zeroPosition);\n    while (run < end) {\n      var rulerSegment = this.getNewSegment(run, svg);\n      if (rulerSegment) {\n        svg.appendChild(rulerSegment.segment);\n        run = this.updateSegment(start, end, rulerSegment, run, trans, rulerSize);\n      }\n    }\n    this.addSegmentWidth = false;\n  };\n  Ruler.prototype.updateSegment = function (start, end, rulerSegment, run, trans, rulerSize) {\n    var segWidth = this.updateSegmentWidth(this.scale);\n    if (run === start) {\n      this.startValue = Math.floor(start / segWidth) * segWidth / this.scale;\n      this.startValue = this.startValue % 1 !== 0 ? Number(this.startValue.toFixed(1)) : this.startValue;\n      rulerSegment.label.textContent = this.rulerStartValue.toString();\n      this.defStartValue = run = this.startValue * this.scale;\n      if (this.orientation === 'Horizontal') {\n        this.hRulerOffset = start - run;\n      } else {\n        this.vRulerOffset = start - run;\n      }\n    } else {\n      //  this.startValue = (run / this.scale);\n      this.startValue = HelperMethods.convertPixelToPoint(run);\n      this.startValue = this.startValue % 1 !== 0 ? Number(this.startValue.toFixed(1)) : this.startValue;\n      //  rulerSegment.label.textContent = (this.startValue).toString();\n      var labeltext = void 0;\n      if (this.rulerStartValue == 0) {\n        this.addSegmentWidth = true;\n      }\n      if (this.addSegmentWidth) {\n        labeltext = Math.abs(this.rulerStartValue + 36);\n      } else {\n        labeltext = Math.abs(this.rulerStartValue - 36);\n      }\n      // const labeltext = this.subtractAndAdd(this.rulerStartValue, 36);\n      rulerSegment.label.textContent = labeltext.toString();\n      this.rulerStartValue = labeltext;\n      //  if (this.addSegmentWidth) {\n      //   if ((1584 - this.startValue) <= this.leftMargin && !((1584 -this.startValue) >= (HelperMethods.convertPixelToPoint(this.pageWidth) - this.rightMargin))) {\n      //  rulerSegment.label.textContent = (this.startValue - this.leftMargin).toString();\n      // if (this.startValue >= 1584 && (Math.round(HelperMethods.convertPointToPixel(this.startValue)) < ((2112 - HelperMethods.convertPointToPixel(this.startMargin)) + ((pageLength) - HelperMethods.convertPointToPixel(this.endMargin))))) {\n      //     const rectElement = rulerSegment.segment.querySelector('.e-ruler-segment1') as SVGRectElement;\n      //     var rect = rulerSegment.segment.firstChild;\n      //     rectElement.setAttribute(\"fill\", \"white\");\n      // }\n      //}\n    }\n    this.updateTickLabel(rulerSegment, rulerSize);\n    var translate = this.orientation === 'Horizontal' ? trans.trans + 0.5 + ',0.5' : '0.5,' + (trans.trans + 0.5);\n    rulerSegment.segment.setAttribute('transform', 'translate(' + translate + ') scale(' + 1 + ',1)');\n    trans.trans += segWidth * this.scale;\n    run += segWidth;\n    return run;\n  };\n  Ruler.prototype.updateTickLabel = function (rulerSegment, rulerSize) {\n    var bBox = rulerSegment.segment.lastChild.getBBox();\n    var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n    var isRightOrBottom = this.tickAlignment === 'RightOrBottom' ? true : false;\n    var x = isHorizontal ? -4 : 0;\n    var y = isHorizontal ? isRightOrBottom ? rulerSize / 2 + 11 / 2 - 11 / 2 : rulerSize / 2 + 11 / 2 : bBox.height;\n    if (isHorizontal) {\n      y = y + 2;\n    }\n    if (!isHorizontal) {\n      x = x + 10;\n      y = y + 2;\n    }\n    var translate = isRightOrBottom ? -(bBox.width + 2) + ',' + (rulerSize / 2 - bBox.height) : -(bBox.width + 2) + ',' + (rulerSize / 2 - bBox.height / 2);\n    var attr = isHorizontal ? {\n      'x': x,\n      'y': y\n    } : {\n      'x': x,\n      'y': y,\n      'transform': 'rotate(270)' + 'translate(' + translate + ')'\n    };\n    this.rulerHelper.setAttributeSvg(rulerSegment.segment.lastChild, attr);\n  };\n  Ruler.prototype.getNewSegment = function (run, svg) {\n    var segment = this.createNewTicks(run, svg);\n    var label = this.createTickLabel(svg, segment);\n    return {\n      segment: segment,\n      label: label\n    };\n  };\n  Ruler.prototype.createNewTicks = function (run, svg) {\n    var tick;\n    var tickInterval;\n    var segmentWidth = this.updateSegmentWidth(this.scale);\n    //let g: SVGElement;\n    var attr = {\n      'class': 'e-de-ruler-segment'\n    };\n    var g = this.rulerHelper.createSvgElement('g', attr);\n    //let rect: SVGElement;\n    var rectattr = {\n      'class': 'e-de-ruler-segment1'\n    };\n    var rect = this.rulerHelper.createSvgElement('rect', rectattr);\n    var width = this.orientation === \"Horizontal\" ? segmentWidth * this.scale : 15;\n    var height = this.orientation === \"Horizontal\" ? 15 : segmentWidth;\n    rect.setAttribute(\"x\", \"0\");\n    rect.setAttribute(\"y\", \"0\");\n    rect.setAttribute(\"width\", width.toString());\n    rect.setAttribute(\"height\", height.toString());\n    rect.setAttribute(\"fill\", \"lightgrey\");\n    // g.appendChild(rect);\n    for (var i = 0; i < this.interval; i++) {\n      tickInterval = segmentWidth / this.interval;\n      tick = this.createTick(svg, tickInterval, i + 1, run);\n      if (tick) {\n        g.appendChild(tick);\n      }\n    }\n    return g;\n  };\n  Ruler.prototype.getLinePoint = function (svg, tickInterval, length) {\n    var segmentWidth = this.updateSegmentWidth(this.scale);\n    var rulerSize = this.getRulerSize();\n    tickInterval = tickInterval * (length - 1);\n    length = tickInterval % segmentWidth === 0 ? rulerSize : rulerSize * 0.3;\n    return length;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Ruler.prototype.createTick = function (svg, tickInterval, length, run) {\n    var ruler;\n    //let line: SVGElement;\n    var linePoint = this.getLinePoint(svg, tickInterval, length);\n    var rulerSize = this.getRulerSize();\n    //let args: IArrangeTickOptions;\n    //let attr: Object;\n    var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n    var isRightOrBottom = this.tickAlignment === 'RightOrBottom' ? true : false;\n    // const arrangeTick: Function = getFunction(this.arrangeTick);\n    // // eslint-disable-next-line\n    // const args:IArrangeTickOptions = { ruler: ruler, tickLength: linePoint, tickInterval: ((this.segmentWidth / this.interval) * (length - 1)) };\n    // if (arrangeTick) {\n    //     arrangeTick(args);\n    // }\n    // linePoint = args.tickLength;\n    var point = tickInterval * (length - 1) * this.scale;\n    var x1 = isHorizontal ? point : isRightOrBottom ? rulerSize : 0;\n    var x2 = isHorizontal ? point : isRightOrBottom ? rulerSize - linePoint : rulerSize - (rulerSize - linePoint);\n    var y1 = isHorizontal ? isRightOrBottom ? rulerSize : rulerSize - (rulerSize - linePoint) : point;\n    var y2 = isHorizontal ? isRightOrBottom ? rulerSize - linePoint : 0 : point;\n    var line;\n    if (y2 !== 0) {\n      y1 = y1 - 6;\n      y2 = y2 - 6;\n      if (!isHorizontal) {\n        x1 = x1 - 6;\n        x2 = x2 - 6;\n      }\n      var attr = {\n        'x1': x1,\n        'y1': y1,\n        'x2': x2,\n        'y2': y2,\n        'stroke-width': '0.25',\n        'stroke': 'black'\n      };\n      line = this.rulerHelper.createSvgElement('line', attr);\n      line.setAttribute('class', 'e-de-ruler-tick');\n    }\n    return line;\n  };\n  Ruler.prototype.createTickLabel = function (svg, segment) {\n    var text;\n    if (segment) {\n      var attr = {\n        'class': 'e-de-ruler-tick-label',\n        'style': 'font-weight: 400'\n      };\n      text = this.rulerHelper.createSvgElement('text', attr);\n      segment.appendChild(text);\n    }\n    return text;\n  };\n  /**\n   * @private\n   * @param {number} scale\n   */\n  /**\n   * updateSegmentWidth method\\\n   *\n   * @returns {number}    updateSegmentWidth method .\\\n   * @param {string} scale - provide the scale value.\n   *\n   * @private\n   */\n  Ruler.prototype.updateSegmentWidth = function (scale) {\n    if (this.segmentWidth !== 100) {\n      return this.segmentWidth;\n    }\n    var five = 25;\n    var multiples = 1;\n    var div;\n    //let scaleRound: number;\n    var fifty = 100;\n    var scaleRound = Math.pow(2, Math.round(Math.log(scale) / Math.log(2)));\n    div = fifty;\n    div = fifty / scaleRound;\n    while (div > 100) {\n      multiples /= 10;\n      div /= 10;\n    }\n    while (div < 25) {\n      multiples *= 10;\n      div *= 10;\n    }\n    if (div >= five && div % five !== 0) {\n      div = Math.round(div / five) * five;\n    }\n    return div * scale / multiples;\n  };\n  Ruler.prototype.createMarkerLine = function (rulerSvg, rulerObj, attr) {\n    var line;\n    if (rulerObj) {\n      line = rulerSvg.getElementById(rulerObj.id + '_marker');\n      if (line) {\n        line.parentNode.removeChild(line);\n      }\n      line = this.rulerHelper.createSvgElement('line', attr);\n    }\n    return line;\n  };\n  /**\n   * updateSegmentWidth method\\\n   *\n   * @returns {void}    updateSegmentWidth method .\\\n   * @param {HTMLElement} rulerObj - Defines the ruler Object\n   * @param {PointModel} currentPoint - Defines the current point for ruler Object\n   * @param {number} offset - Defines the offset ruler Object\n   *\n   * @private\n   */\n  Ruler.prototype.drawRulerMarker = function (rulerObj, currentPoint, offset) {\n    var rulerSvg;\n    var rulerSize;\n    var scale;\n    var diff;\n    var i;\n    var attr;\n    var line;\n    var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var rulerSvgElements = rulerObj.getElementsByTagName('svg');\n    for (i = 0; i < rulerSvgElements.length; i++) {\n      if (rulerSvgElements[parseInt(i.toString(), 10)]) {\n        rulerSvg = rulerSvgElements[parseInt(i.toString(), 10)];\n      }\n      break;\n    }\n    if (rulerSvg) {\n      rulerSize = this.getRulerSize();\n      attr = {\n        'id': rulerObj.id + '_marker',\n        'x1': 0,\n        'y1': 0,\n        'x2': isHorizontal ? 0 : rulerSize,\n        'y2': isHorizontal ? rulerSize : 0,\n        'stroke': this.markerColor,\n        'stroke-width': 1.5,\n        'class': 'e-d-ruler-marker'\n      };\n      line = this.createMarkerLine(rulerSvg, rulerObj, attr);\n      scale = this.scale;\n      diff = this.offset - this.defStartValue;\n      var point = isHorizontal ? currentPoint.x : currentPoint.y;\n      var move = point * scale + offset + diff;\n      line.setAttribute('transform', 'translate(' + (isHorizontal ? move + 0.5 + ' 0.5' : '0.5 ' + (move + 0.5)) + ')');\n      rulerSvg.appendChild(line);\n    }\n  };\n  Ruler.prototype.getRulerGeometry = function () {\n    if (this.orientation === \"Horizontal\") {\n      return new Size(this.length, this.element ? this.element.getBoundingClientRect().height : 0);\n    } else {\n      return new Size(this.element ? this.element.getBoundingClientRect().width : 0, this.length);\n    }\n  };\n  Ruler.prototype.getRulerSize = function () {\n    return this.thickness;\n  };\n  Ruler.prototype.getRulerSVG = function (rulerGeometry) {\n    var rulerSpace;\n    var rulerSize = this.getRulerSize();\n    var svg;\n    if (this.element) {\n      rulerSpace = document.getElementById(this.element.id + '_ruler_space');\n      if (rulerSpace) {\n        var attr = {\n          'id': this.element.id + '_Ruler_svg',\n          width: this.orientation === 'Horizontal' ? this.length : rulerSize + 'px',\n          height: this.orientation === 'Horizontal' ? rulerSize : rulerGeometry.height + 'px',\n          style: 'position:inherit;'\n        };\n        svg = this.rulerHelper.createSvgElement('svg', attr);\n        if (rulerSpace.childNodes.length > 0) {\n          for (var i = rulerSpace.childNodes.length - 1; i >= 0; i--) {\n            rulerSpace.childNodes[parseInt(i.toString(), 10)].parentNode.removeChild(rulerSpace.childNodes[parseInt(i.toString(), 10)]);\n          }\n        }\n        rulerSpace.appendChild(svg);\n      }\n    }\n    return svg;\n  };\n  /**\n   * Method to bind events for the ruler \\\n   *\n   * @returns {void}    Method to bind events for the ruler .\\\n   * @private\n   */\n  Ruler.prototype.wireEvents = function () {\n    //wire Events\n  };\n  /**\n   *  Method to unbind events for the ruler \\\n   *\n   * @returns {void}     Method to unbind events for the ruler .\\\n   * @private\n   */\n  Ruler.prototype.unWireEvents = function () {\n    //unWire Events\n  };\n  return Ruler;\n}();\nexport { Ruler };","map":{"version":3,"names":["HelperMethods","Size","Ruler","element","rulerHelper","interval","segmentWidth","orientation","tickAlignment","markerColor","thickness","arrangeTick","length","offset","scale","rulerStartValue","zeroPosition","convertPointToPixel","addSegmentWidth","prototype","appendTo","preRender","render","unWireEvents","wireEvents","updateRulerGeometry","getModuleName","destroy","classList","remove","showHideRuler","show","style","display","textAlign","renderRulerSpace","updateRuler","rulerGeometry","getRulerGeometry","div","document","getElementById","id","createHtmlElement","height","width","appendChild","rulerSize","getRulerSize","availableSize","svg","getRulerSVG","Infinity","unitLength","unitOffset","updateSegments","Math","abs","start","end","run","trans","convertPixelToPoint","rulerSegment","getNewSegment","segment","updateSegment","segWidth","updateSegmentWidth","startValue","floor","Number","toFixed","label","textContent","toString","defStartValue","hRulerOffset","vRulerOffset","labeltext","updateTickLabel","translate","setAttribute","bBox","lastChild","getBBox","isHorizontal","isRightOrBottom","x","y","attr","setAttributeSvg","createNewTicks","createTickLabel","tick","tickInterval","g","createSvgElement","rectattr","rect","i","createTick","getLinePoint","ruler","linePoint","point","x1","x2","y1","y2","line","text","five","multiples","fifty","scaleRound","pow","round","log","createMarkerLine","rulerSvg","rulerObj","parentNode","removeChild","drawRulerMarker","currentPoint","diff","rulerSvgElements","getElementsByTagName","parseInt","move","getBoundingClientRect","rulerSpace","childNodes"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/ruler/ruler.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { HelperMethods } from '../editor/editor-helper';\nimport { Size } from '../utility/size';\n/**\n * @private\n */\nvar Ruler = /** @class */ (function () {\n    /**\n     *  Constructor for creating the Ruler Component\n     *\n     * @param {RulerModel} options The ruler model.\n     * @param {string | HTMLElement} element The ruler element.\n     */\n    function Ruler(element, rulerHelper) {\n        /**\n         * Defines the unique interval of the ruler.\n         *\n         * @default 6\n         */\n        this.interval = 4;\n        /**\n         * Sets the segment width of the ruler.\n         *\n         * @default 36\n         */\n        this.segmentWidth = 47.9988;\n        /**\n         * Defines the orientation of the ruler.\n         *\n         * @default 'Horizontal'\n         */\n        this.orientation = 'Horizontal';\n        /**\n         * Defines the alignment of the tick in the ruler.\n         *\n         *\n         * @default 'RightOrBottom'\n         */\n        this.tickAlignment = 'RightOrBottom';\n        /**\n         * Defines the color of the marker.\n         *\n         * @default 'red'\n         */\n        this.markerColor = 'red';\n        /**\n         * Defines the thickness of the ruler.\n         *\n         * @default 15\n         */\n        this.thickness = 15;\n        /**\n         * Sets the segment width of the ruler.\n         *\n         * @default null\n\n         */\n        this.arrangeTick = null;\n        /**\n         * Defines the length of the ruler.\n         *\n         * @default 400\n         */\n        this.length = 400;\n        /**   @private  */\n        this.offset = 0;\n        /**   @private  */\n        this.scale = 1;\n        /**   @private  */\n        this.rulerStartValue = 1584;\n        /**   @private  */\n        this.zeroPosition = HelperMethods.convertPointToPixel(1584);\n        /**   @private  */\n        this.addSegmentWidth = false;\n        this.element = element;\n        this.rulerHelper = rulerHelper;\n    }\n    /**\n     * @private\n     */\n    Ruler.prototype.appendTo = function () {\n        this.preRender();\n        this.render();\n    };\n    /**\n     * Initializes the values of private members.\n     *\n     * @returns {void}  Initializes the values of private members.\n     * @private\n     */\n    Ruler.prototype.preRender = function () {\n        this.unWireEvents();\n        this.wireEvents();\n    };\n    /**\n     * Renders the rulers.\n     *\n     * @returns {void}  Renders the rulers.\n     * @private\n     */\n    Ruler.prototype.render = function () {\n        this.updateRulerGeometry();\n        //this.renderComplete();\n    };\n    /**\n     * Core method to return the component name.\n     *\n     * @returns {string}  Core method to return the component name.\n     * @private\n     */\n    Ruler.prototype.getModuleName = function () {\n        return 'Ruler';\n    };\n    /**\n     *To destroy the ruler\n     *\n     * @returns {void} To destroy the ruler\n     */\n    Ruler.prototype.destroy = function () {\n        this.unWireEvents();\n        // this.notify('destroy', {});\n        // super.destroy();\n        this.element.classList.remove('e-ruler');\n    };\n    /**\n     * Refreshes the ruler when the Ruler properties are updated\\\n     *\n     * @returns {  void}    Refreshes the ruler when the Ruler properties are updated .\\\n     * @param {RulerModel} newProp - provide the newProp value.\n     * @param {RulerModel} oldProp - provide the oldProp value.\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    // public onPropertyChanged(newProp: RulerModel, oldProp: RulerModel): void {\n    //     for (const prop of Object.keys(newProp)) {\n    //         switch (prop) {\n    //             case 'interval':\n    //             case 'segmentWidth':\n    //             case 'tickAlignment':\n    //             case 'markerColor':\n    //             case 'thickness':\n    //                 this.updateRuler();\n    //                 break;\n    //         }\n    //     }\n    // }\n    /**\n     * @private\n     */\n    Ruler.prototype.showHideRuler = function (show) {\n        if (show) {\n            this.element.style.display = 'block';\n        }\n        else {\n            this.element.style.display = 'none';\n        }\n    };\n    Ruler.prototype.updateRulerGeometry = function () {\n        this.element.style.textAlign = 'left';\n        this.renderRulerSpace();\n        this.updateRuler();\n    };\n    Ruler.prototype.renderRulerSpace = function () {\n        var rulerGeometry = this.getRulerGeometry();\n        var div = document.getElementById(this.element.id + '_ruler_space');\n        if (!div) {\n            div = this.rulerHelper.createHtmlElement('div', {\n                'id': this.element.id + '_ruler_space',\n                'style': 'height:' + rulerGeometry.height + 'px;width:' + rulerGeometry.width + 'px;cssFloat:' + 'left;'\n            });\n            this.element.appendChild(div);\n        }\n        return div;\n    };\n    /**\n     * @private\n     *\n     * @returns {void} To update the ruler\n     */\n    Ruler.prototype.updateRuler = function () {\n        var rulerSize = this.getRulerSize();\n        var rulerGeometry = this.getRulerGeometry();\n        var length = 0;\n        var offset = 0;\n        var availableSize = new Size();\n        var svg = this.getRulerSVG(rulerGeometry);\n        if (svg) {\n            length = this.length;\n            availableSize.height = rulerSize;\n            offset = this.offset;\n            if (length && length !== Infinity) {\n                var unitLength = length;\n                var unitOffset = offset;\n                this.updateSegments(unitOffset, (unitLength + Math.abs(unitOffset)), svg, rulerSize);\n            }\n        }\n    };\n    Ruler.prototype.updateSegments = function (start, end, svg, rulerSize) {\n        var run = start;\n        var trans = { trans: 0 };\n        this.rulerStartValue = HelperMethods.convertPixelToPoint(this.zeroPosition);\n        while (run < end) {\n            var rulerSegment = this.getNewSegment(run, svg);\n            if (rulerSegment) {\n                svg.appendChild(rulerSegment.segment);\n                run = this.updateSegment(start, end, rulerSegment, run, trans, rulerSize);\n            }\n        }\n        this.addSegmentWidth = false;\n    };\n    Ruler.prototype.updateSegment = function (start, end, rulerSegment, run, trans, rulerSize) {\n        var segWidth = this.updateSegmentWidth(this.scale);\n        if (run === start) {\n            this.startValue = Math.floor(start / segWidth) * segWidth / this.scale;\n            this.startValue = (this.startValue % 1) !== 0 ? Number((this.startValue).toFixed(1)) : this.startValue;\n            rulerSegment.label.textContent = this.rulerStartValue.toString();\n            this.defStartValue = run = this.startValue * this.scale;\n            if (this.orientation === 'Horizontal') {\n                this.hRulerOffset = start - run;\n            }\n            else {\n                this.vRulerOffset = start - run;\n            }\n        }\n        else {\n            //  this.startValue = (run / this.scale);\n            this.startValue = HelperMethods.convertPixelToPoint(run);\n            this.startValue = (this.startValue % 1) !== 0 ? Number((this.startValue).toFixed(1)) : this.startValue;\n            //  rulerSegment.label.textContent = (this.startValue).toString();\n            var labeltext = void 0;\n            if (this.rulerStartValue == 0) {\n                this.addSegmentWidth = true;\n            }\n            if (this.addSegmentWidth) {\n                labeltext = Math.abs(this.rulerStartValue + 36);\n            }\n            else {\n                labeltext = Math.abs(this.rulerStartValue - 36);\n            }\n            // const labeltext = this.subtractAndAdd(this.rulerStartValue, 36);\n            rulerSegment.label.textContent = (labeltext).toString();\n            this.rulerStartValue = labeltext;\n            //  if (this.addSegmentWidth) {\n            //   if ((1584 - this.startValue) <= this.leftMargin && !((1584 -this.startValue) >= (HelperMethods.convertPixelToPoint(this.pageWidth) - this.rightMargin))) {\n            //  rulerSegment.label.textContent = (this.startValue - this.leftMargin).toString();\n            // if (this.startValue >= 1584 && (Math.round(HelperMethods.convertPointToPixel(this.startValue)) < ((2112 - HelperMethods.convertPointToPixel(this.startMargin)) + ((pageLength) - HelperMethods.convertPointToPixel(this.endMargin))))) {\n            //     const rectElement = rulerSegment.segment.querySelector('.e-ruler-segment1') as SVGRectElement;\n            //     var rect = rulerSegment.segment.firstChild;\n            //     rectElement.setAttribute(\"fill\", \"white\");\n            // }\n            //}\n        }\n        this.updateTickLabel(rulerSegment, rulerSize);\n        var translate = (this.orientation === 'Horizontal') ? ((trans.trans + 0.5) + ',0.5') : ('0.5,' + (trans.trans + 0.5));\n        rulerSegment.segment.setAttribute('transform', 'translate(' + translate + ') scale(' + 1 + ',1)');\n        trans.trans += segWidth * this.scale;\n        run += segWidth;\n        return run;\n    };\n    Ruler.prototype.updateTickLabel = function (rulerSegment, rulerSize) {\n        var bBox = rulerSegment.segment.lastChild.getBBox();\n        var isHorizontal = (this.orientation === 'Horizontal') ? true : false;\n        var isRightOrBottom = (this.tickAlignment === 'RightOrBottom') ? true : false;\n        var x = isHorizontal ? -4 : 0;\n        var y = isHorizontal ? (isRightOrBottom ? (rulerSize / 2 + (11 / 2) - (11 / 2)) :\n            (rulerSize / 2 + (11 / 2))) : bBox.height;\n        if (isHorizontal) {\n            y = y + 2;\n        }\n        if (!isHorizontal) {\n            x = x + 10;\n            y = y + 2;\n        }\n        var translate = isRightOrBottom ? (-(bBox.width + 2) + ',' + ((rulerSize / 2) - bBox.height)) :\n            (-(bBox.width + 2) + ',' + ((rulerSize / 2) - bBox.height / 2));\n        var attr = isHorizontal ? { 'x': x, 'y': y } :\n            { 'x': x, 'y': y, 'transform': 'rotate(270)' + 'translate(' + translate + ')' };\n        this.rulerHelper.setAttributeSvg(rulerSegment.segment.lastChild, attr);\n    };\n    Ruler.prototype.getNewSegment = function (run, svg) {\n        var segment = this.createNewTicks(run, svg);\n        var label = this.createTickLabel(svg, segment);\n        return { segment: segment, label: label };\n    };\n    Ruler.prototype.createNewTicks = function (run, svg) {\n        var tick;\n        var tickInterval;\n        var segmentWidth = this.updateSegmentWidth(this.scale);\n        //let g: SVGElement;\n        var attr = { 'class': 'e-de-ruler-segment' };\n        var g = this.rulerHelper.createSvgElement('g', attr);\n        //let rect: SVGElement;\n        var rectattr = { 'class': 'e-de-ruler-segment1' };\n        var rect = this.rulerHelper.createSvgElement('rect', rectattr);\n        var width = this.orientation === \"Horizontal\" ? (segmentWidth * this.scale) : 15;\n        var height = this.orientation === \"Horizontal\" ? 15 : segmentWidth;\n        rect.setAttribute(\"x\", \"0\");\n        rect.setAttribute(\"y\", \"0\");\n        rect.setAttribute(\"width\", width.toString());\n        rect.setAttribute(\"height\", height.toString());\n        rect.setAttribute(\"fill\", \"lightgrey\");\n        // g.appendChild(rect);\n        for (var i = 0; i < this.interval; i++) {\n            tickInterval = segmentWidth / this.interval;\n            tick = this.createTick(svg, tickInterval, i + 1, run);\n            if (tick) {\n                g.appendChild(tick);\n            }\n        }\n        return g;\n    };\n    Ruler.prototype.getLinePoint = function (svg, tickInterval, length) {\n        var segmentWidth = this.updateSegmentWidth(this.scale);\n        var rulerSize = this.getRulerSize();\n        tickInterval = tickInterval * (length - 1);\n        length = ((tickInterval % segmentWidth) === 0) ? rulerSize : rulerSize * 0.3;\n        return length;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Ruler.prototype.createTick = function (svg, tickInterval, length, run) {\n        var ruler;\n        //let line: SVGElement;\n        var linePoint = this.getLinePoint(svg, tickInterval, length);\n        var rulerSize = this.getRulerSize();\n        //let args: IArrangeTickOptions;\n        //let attr: Object;\n        var isHorizontal = (this.orientation === 'Horizontal') ? true : false;\n        var isRightOrBottom = (this.tickAlignment === 'RightOrBottom') ? true : false;\n        // const arrangeTick: Function = getFunction(this.arrangeTick);\n        // // eslint-disable-next-line\n        // const args:IArrangeTickOptions = { ruler: ruler, tickLength: linePoint, tickInterval: ((this.segmentWidth / this.interval) * (length - 1)) };\n        // if (arrangeTick) {\n        //     arrangeTick(args);\n        // }\n        // linePoint = args.tickLength;\n        var point = tickInterval * (length - 1) * this.scale;\n        var x1 = isHorizontal ? point : (isRightOrBottom ? rulerSize : 0);\n        var x2 = isHorizontal ? point : (isRightOrBottom ? (rulerSize - linePoint) : (rulerSize - (rulerSize - linePoint)));\n        var y1 = isHorizontal ? (isRightOrBottom ? rulerSize : (rulerSize - (rulerSize - linePoint))) : point;\n        var y2 = isHorizontal ? (isRightOrBottom ? (rulerSize - linePoint) : 0) : point;\n        var line;\n        if (y2 !== 0) {\n            y1 = y1 - 6;\n            y2 = y2 - 6;\n            if (!isHorizontal) {\n                x1 = x1 - 6;\n                x2 = x2 - 6;\n            }\n            var attr = { 'x1': x1, 'y1': y1, 'x2': x2, 'y2': y2, 'stroke-width': '0.25', 'stroke': 'black' };\n            line = this.rulerHelper.createSvgElement('line', attr);\n            line.setAttribute('class', 'e-de-ruler-tick');\n        }\n        return line;\n    };\n    Ruler.prototype.createTickLabel = function (svg, segment) {\n        var text;\n        if (segment) {\n            var attr = { 'class': 'e-de-ruler-tick-label', 'style': 'font-weight: 400' };\n            text = this.rulerHelper.createSvgElement('text', attr);\n            segment.appendChild(text);\n        }\n        return text;\n    };\n    /**\n     * @private\n     * @param {number} scale\n     */\n    /**\n     * updateSegmentWidth method\\\n     *\n     * @returns {number}    updateSegmentWidth method .\\\n     * @param {string} scale - provide the scale value.\n     *\n     * @private\n     */\n    Ruler.prototype.updateSegmentWidth = function (scale) {\n        if (this.segmentWidth !== 100) {\n            return this.segmentWidth;\n        }\n        var five = 25;\n        var multiples = 1;\n        var div;\n        //let scaleRound: number;\n        var fifty = 100;\n        var scaleRound = Math.pow(2, Math.round(Math.log(scale) / Math.log(2)));\n        div = fifty;\n        div = (fifty / scaleRound);\n        while (div > 100) {\n            multiples /= 10;\n            div /= 10;\n        }\n        while (div < 25) {\n            multiples *= 10;\n            div *= 10;\n        }\n        if (div >= five && div % five !== 0) {\n            div = Math.round(div / five) * five;\n        }\n        return div * scale / multiples;\n    };\n    Ruler.prototype.createMarkerLine = function (rulerSvg, rulerObj, attr) {\n        var line;\n        if (rulerObj) {\n            line = rulerSvg.getElementById(rulerObj.id + '_marker');\n            if (line) {\n                line.parentNode.removeChild(line);\n            }\n            line = this.rulerHelper.createSvgElement('line', attr);\n        }\n        return line;\n    };\n    /**\n     * updateSegmentWidth method\\\n     *\n     * @returns {void}    updateSegmentWidth method .\\\n     * @param {HTMLElement} rulerObj - Defines the ruler Object\n     * @param {PointModel} currentPoint - Defines the current point for ruler Object\n     * @param {number} offset - Defines the offset ruler Object\n     *\n     * @private\n     */\n    Ruler.prototype.drawRulerMarker = function (rulerObj, currentPoint, offset) {\n        var rulerSvg;\n        var rulerSize;\n        var scale;\n        var diff;\n        var i;\n        var attr;\n        var line;\n        var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var rulerSvgElements = rulerObj.getElementsByTagName('svg');\n        for (i = 0; i < rulerSvgElements.length; i++) {\n            if (rulerSvgElements[parseInt(i.toString(), 10)]) {\n                rulerSvg = rulerSvgElements[parseInt(i.toString(), 10)];\n            }\n            break;\n        }\n        if (rulerSvg) {\n            rulerSize = this.getRulerSize();\n            attr = {\n                'id': rulerObj.id + '_marker', 'x1': 0, 'y1': 0, 'x2': (isHorizontal ? 0 : rulerSize),\n                'y2': (isHorizontal ? rulerSize : 0), 'stroke': this.markerColor, 'stroke-width': 1.5,\n                'class': 'e-d-ruler-marker'\n            };\n            line = this.createMarkerLine(rulerSvg, rulerObj, attr);\n            scale = this.scale;\n            diff = this.offset - this.defStartValue;\n            var point = isHorizontal ? currentPoint.x : currentPoint.y;\n            var move = (point * scale) + offset + diff;\n            line.setAttribute('transform', 'translate(' + (isHorizontal ? ((move + 0.5) + ' 0.5') : ('0.5 ' + (move + 0.5))) + ')');\n            rulerSvg.appendChild(line);\n        }\n    };\n    Ruler.prototype.getRulerGeometry = function () {\n        if (this.orientation === \"Horizontal\") {\n            return new Size(this.length, this.element ? this.element.getBoundingClientRect().height : 0);\n        }\n        else {\n            return new Size(this.element ? this.element.getBoundingClientRect().width : 0, this.length);\n        }\n    };\n    Ruler.prototype.getRulerSize = function () {\n        return this.thickness;\n    };\n    Ruler.prototype.getRulerSVG = function (rulerGeometry) {\n        var rulerSpace;\n        var rulerSize = this.getRulerSize();\n        var svg;\n        if (this.element) {\n            rulerSpace = document.getElementById(this.element.id + '_ruler_space');\n            if (rulerSpace) {\n                var attr = {\n                    'id': this.element.id + '_Ruler_svg',\n                    width: this.orientation === 'Horizontal' ? this.length : rulerSize + 'px',\n                    height: this.orientation === 'Horizontal' ? rulerSize : (rulerGeometry.height) + 'px',\n                    style: 'position:inherit;'\n                };\n                svg = this.rulerHelper.createSvgElement('svg', attr);\n                if (rulerSpace.childNodes.length > 0) {\n                    for (var i = rulerSpace.childNodes.length - 1; i >= 0; i--) {\n                        rulerSpace.childNodes[parseInt(i.toString(), 10)].parentNode.removeChild(rulerSpace.childNodes[parseInt(i.toString(), 10)]);\n                    }\n                }\n                rulerSpace.appendChild(svg);\n            }\n        }\n        return svg;\n    };\n    /**\n     * Method to bind events for the ruler \\\n     *\n     * @returns {void}    Method to bind events for the ruler .\\\n     * @private\n     */\n    Ruler.prototype.wireEvents = function () {\n        //wire Events\n    };\n    /**\n     *  Method to unbind events for the ruler \\\n     *\n     * @returns {void}     Method to unbind events for the ruler .\\\n     * @private\n     */\n    Ruler.prototype.unWireEvents = function () {\n        //unWire Events\n    };\n    return Ruler;\n}());\nexport { Ruler };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}