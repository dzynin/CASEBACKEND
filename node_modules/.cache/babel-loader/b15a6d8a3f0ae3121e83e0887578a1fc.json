{"ast":null,"code":"import { isNullOrUndefined, Internationalization, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { ZipArchive } from '@syncfusion/ej2-compression';\nimport { ElementBox, TextElementBox } from '../viewer/page';\nimport { FieldElementBox } from '../viewer/page';\nimport { boldProperty, italicProperty, fontSizeProperty, fontFamilyProperty, underlineProperty, strikethroughProperty, baselineAlignmentProperty, highlightColorProperty, fontColorProperty, styleNameProperty, bidiProperty, bdoProperty, boldBidiProperty, italicBidiProperty, fontSizeBidiProperty, fontFamilyBidiProperty, allCapsProperty, localeIdBidiProperty, localeIdProperty, complexScriptProperty, fontFamilyAsciiProperty, characterSpacingProperty, scalingProperty, fontFamilyFarEastProperty, fontFamilyNonFarEastProperty, bordersProperty, leftIndentProperty, rightIndentProperty, firstLineIndentProperty, textAlignmentProperty, beforeSpacingProperty, afterSpacingProperty, spaceBeforeAutoProperty, spaceAfterAutoProperty, lineSpacingProperty, lineSpacingTypeProperty, outlineLevelProperty, keepLinesTogetherProperty, keepWithNextProperty, contextualSpacingProperty, widowControlProperty, topProperty, leftProperty, rightProperty, bottomProperty, horizontalProperty, verticalProperty, colorProperty, hasNoneStyleProperty, lineStyleProperty, lineWidthProperty, shadowProperty, spaceProperty } from '../../index';\n/**\n * @private\n */\nvar HelperMethods = /** @class */function () {\n  function HelperMethods() {}\n  /**\n   * Inserts text at specified index in string.\n   *\n   * @private\n   * @param {string} spanText - Specifies the span text.\n   * @param {number} index - Specifies the index\n   * @param {string} text - Specifies the text\n   * @returns {string} - Returns modified string\n   */\n  HelperMethods.insert = function (spanText, index, text) {\n    if (index >= 0) {\n      return [spanText.slice(0, index) + text + spanText.slice(index)].join('');\n    } else {\n      return text + this;\n    }\n  };\n  /**\n   * @private\n   * @param text\n   * @returns\n   */\n  HelperMethods.replaceSpecialChars = function (text) {\n    text = text.replace(\"^[\\\\s]*\", '');\n    text = text.replace(\"^[#@!~\\\\$%^&\\\\*\\\\(\\\\)\\\\-_\\\\+\\\\.=\\\\{\\\\}\\\\[\\\\]:;,<>\\\\?'\\\\\\\\\\\"\\\\“\\\\”\\\\//0123456789]+\", '');\n    text = text.replace(\"[#@!~\\\\$%^&\\\\*\\\\(\\\\)\\\\-_\\\\+\\\\.=\\\\{\\\\}\\\\[\\\\]:;,<>\\\\?'\\\\\\\\\\\"\\\\“\\\\”\\\\//0123456789]+$\", '');\n    return text;\n  };\n  /**\n   * @private\n   * @param text\n   * @returns\n   */\n  HelperMethods.getSpellCheckData = function (text) {\n    text = text.replace('\\r\\n', ' ');\n    text = text.replace('\\n', ' ');\n    text = text.replace('\\r', ' ');\n    text = text.replace('\\v', ' ');\n    text = text.replace('\\t', ' ');\n    text = text.replace('/', ' ');\n    var stringarr = text.split(' ');\n    var spellColl = [];\n    for (var _i = 0, stringarr_1 = stringarr; _i < stringarr_1.length; _i++) {\n      var str = stringarr_1[_i];\n      var spellInfo = {};\n      spellInfo.Text = this.replaceSpecialChars(str);\n      spellInfo.HasSpellError = false;\n      spellColl.push(spellInfo);\n    }\n    return spellColl;\n  };\n  /**\n   * Check given string is a valid either roman or arabic number\n   * @private\n   * @param {string} input input string value to check if it is a number\n   * @returns {boolean} weather given string is a number or not\n   */\n  HelperMethods.checkTextFormat = function (input) {\n    // Regular expression patterns for Roman and Arabic numerals\n    var romanPattern = /^(M{0,3})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/i;\n    var arabicPattern = /^[0-9]+$/;\n    // Check if the input matches either pattern\n    if (romanPattern.test(input) || arabicPattern.test(input)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * @private\n   * Sanitize the string for xss string content\n   * @param value\n   * @returns\n   */\n  HelperMethods.sanitizeString = function (value) {\n    if (isNullOrUndefined(value)) return '';\n    var sanitizedContent = SanitizeHtmlHelper.sanitize(value).replace(/&amp;/g, '&').replace(/&nbsp;/g, String.fromCharCode(160)).replace(/&gt;/g, '>').replace(/&lt;/g, '<');\n    return sanitizedContent;\n  };\n  /**\n   * @private\n   * Get the SFDT document from the optimized SFDT.\n   * @param json\n   * @returns\n   */\n  HelperMethods.getSfdtDocument = function (json) {\n    json = json instanceof Object ? json : JSON.parse(json);\n    if (!isNullOrUndefined(json.sfdt)) {\n      var zipArchive = new ZipArchive();\n      zipArchive.open(JSON.stringify(json.sfdt));\n      var zipItem = zipArchive.items[0];\n      var value = new Uint8Array(zipItem.data);\n      var str = new TextDecoder(\"utf-8\").decode(value);\n      json = JSON.parse(str);\n    }\n    // json = JSON.parse(this.sanitizeString(JSON.stringify(json)));\n    return json;\n  };\n  /**\n   * @private\n   * Generates a unique unique hexadecimal ID.\n   * @returns\n   */\n  HelperMethods.generateUniqueId = function (lists, abstractLists) {\n    var isAbstractList = !isNullOrUndefined(abstractLists) ? true : false;\n    var randomNumber = Math.floor(Math.random() * 100000000);\n    if (isAbstractList) {\n      return this.isSameListIDExists(randomNumber, undefined, abstractLists, isAbstractList) ? this.generateUniqueId(undefined, abstractLists) : randomNumber;\n    } else {\n      return this.isSameListIDExists(randomNumber, lists) ? this.generateUniqueId(lists) : randomNumber;\n    }\n  };\n  /**\n   * @private\n   */\n  HelperMethods.isSameListIDExists = function (nsid, lists, abstractLists, isAbstractList) {\n    if (isAbstractList) {\n      for (var i = 0; i < abstractLists.length; i++) {\n        var abstractList = abstractLists[parseInt(i.toString(), 10)];\n        if (nsid == abstractList.nsid) {\n          return true;\n        }\n      }\n    } else {\n      for (var j = 0; j < lists.length; j++) {\n        var list = lists[parseInt(j.toString(), 10)];\n        if (nsid == list.nsid) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  /* eslint-enable */\n  /**\n   * Removes text from specified index in string.\n   *\n   * @private\n   * @param {string} text - Specifies the text\n   * @param {number} index - Specifies the index\n   * @returns {string} - Returns modified string\n   */\n  HelperMethods.remove = function (text, index) {\n    if (index === 0) {\n      return text.substring(index + 1, text.length);\n    } else {\n      return text.substring(0, index) + text.substring(index + 1, text.length);\n    }\n  };\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  HelperMethods.indexOfAny = function (text, wordSplitCharacter) {\n    var index = undefined;\n    for (var j = 0; j < wordSplitCharacter.length; j++) {\n      var temp = text.indexOf(wordSplitCharacter[parseInt(j.toString(), 10)]);\n      if (temp !== -1 && isNullOrUndefined(index)) {\n        index = temp;\n      } else if (temp !== -1 && temp < index) {\n        index = temp;\n      }\n    }\n    return isNullOrUndefined(index) ? -1 : index;\n  };\n  HelperMethods.lastIndexOfAny = function (text, wordSplitCharacter) {\n    for (var i = text.length - 1; i >= 0; i--) {\n      for (var j = 0; j <= wordSplitCharacter.length - 1; j++) {\n        if (text[parseInt(i.toString(), 10)] === wordSplitCharacter[parseInt(j.toString(), 10)]) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n  /**\n   * Convert ARGB to RGB\n   * @private\n   * @param {string} color\n   * @returns {string}\n   */\n  HelperMethods.convertArgbToRgb = function (color) {\n    if (color.length >= 8) {\n      return color.substr(0, 6);\n    }\n    return color;\n  };\n  HelperMethods.convertRgbToHex = function (val) {\n    var hex = Number(val).toString(16);\n    if (hex.length < 2) {\n      hex = '0' + hex;\n    }\n    return hex;\n  };\n  // public static convertPointsToCentimetre(val: number): number {\n  //     return val/28.34644;\n  // }\n  // public static convertCentimetreToPoints(val: number): number {\n  //     return val*28.34644;\n  // }\n  /**\n   * @private\n   */\n  HelperMethods.getNumberFromString = function (input) {\n    var numbers = [];\n    var currentNumber = \"\";\n    for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {\n      var char = input_1[_i];\n      if (/\\d|\\./.test(char)) {\n        currentNumber += char;\n      } else if (currentNumber) {\n        numbers.push(parseFloat(currentNumber));\n        currentNumber = \"\";\n      }\n    }\n    if (currentNumber) {\n      numbers.push(parseFloat(currentNumber));\n    }\n    return parseFloat(numbers.join(''));\n  };\n  HelperMethods.convertHexToRgb = function (colorCode) {\n    var r;\n    var g;\n    var b;\n    if (colorCode) {\n      colorCode = colorCode.replace(/[^0-9A-â€Œâ€‹F]/gi, ''); // To remove # from color code string.\n      var colCodeNo = parseInt(colorCode, 16);\n      if (colorCode.length === 8) {\n        r = colCodeNo >> 32 & 255;\n        g = colCodeNo >> 16 & 255;\n        b = colCodeNo >> 8 & 255;\n      } else if (colorCode.length === 6) {\n        r = colCodeNo >> 16 & 255;\n        g = colCodeNo >> 8 & 255;\n        b = colCodeNo & 255;\n      }\n      return {\n        'r': r,\n        'g': g,\n        'b': b\n      };\n    }\n    return undefined;\n  };\n  HelperMethods.addCssStyle = function (css) {\n    var style = document.createElement('style');\n    if (style.style.cssText) {\n      style.style.cssText = css;\n    } else {\n      style.appendChild(document.createTextNode(css));\n    }\n    document.getElementsByTagName('head')[0].appendChild(style);\n  };\n  /**\n   * @private\n   */\n  HelperMethods.convertNodeListToArray = function (nodeList) {\n    var array = [];\n    if (!isNullOrUndefined(nodeList)) {\n      for (var i = 0; i < nodeList.length; i++) {\n        array.push(nodeList[parseInt(i.toString(), 10)]);\n      }\n    }\n    return array;\n  };\n  HelperMethods.getHighlightColorCode = function (highlightColor) {\n    var color = '#ffffff';\n    switch (highlightColor) {\n      case 'Yellow':\n        color = '#ffff00';\n        break;\n      case 'BrightGreen':\n        color = '#00ff00';\n        break;\n      case 'Turquoise':\n        color = '#00ffff';\n        break;\n      case 'Pink':\n        color = '#ff00ff';\n        break;\n      case 'Blue':\n        color = '#0000ff';\n        break;\n      case 'Red':\n        color = '#ff0000';\n        break;\n      case 'DarkBlue':\n        color = '#000080';\n        break;\n      case 'Teal':\n        color = '#008080';\n        break;\n      case 'Green':\n        color = '#008000';\n        break;\n      case 'Violet':\n        color = '#800080';\n        break;\n      case 'DarkRed':\n        color = '#800000';\n        break;\n      case 'DarkYellow':\n        color = '#808000';\n        break;\n      case 'Gray50':\n        color = '#808080';\n        break;\n      case 'Gray25':\n        color = '#c0c0c0';\n        break;\n      case 'Black':\n        color = '#000000';\n        break;\n    }\n    return color;\n  };\n  HelperMethods.isVeryDark = function (backColor) {\n    var backgroundColor = backColor.substring(1);\n    var r = parseInt(backgroundColor.substr(0, 2), 16);\n    var g = parseInt(backgroundColor.substr(2, 2), 16);\n    var b = parseInt(backgroundColor.substr(4, 2), 16);\n    var contrast = (r * 299 + g * 587 + b * 114) / 1000;\n    return contrast <= 60;\n  };\n  HelperMethods.getColor = function (color) {\n    if (color.length > 0) {\n      if (color[0] === '#') {\n        if (color.length > 7) {\n          return color.substr(0, 7);\n        }\n      }\n    }\n    return color;\n  };\n  HelperMethods.getTextVerticalAlignment = function (textVerticalAlignment) {\n    switch (textVerticalAlignment) {\n      case 0:\n        return 'Top';\n      case 1:\n        return 'Center';\n      case 2:\n        return 'Bottom';\n      default:\n        return textVerticalAlignment;\n    }\n  };\n  HelperMethods.convertPointToPixel = function (point) {\n    point = HelperMethods.round(point, 5);\n    var pixel = HelperMethods.round(point * 96 / 72, 5);\n    return pixel;\n  };\n  HelperMethods.convertPixelToPoint = function (pixel) {\n    var point = HelperMethods.round(pixel * 72 / 96, 5);\n    return point;\n  };\n  HelperMethods.isLinkedFieldCharacter = function (inline) {\n    if (inline instanceof FieldElementBox && inline.fieldType === 0) {\n      return !isNullOrUndefined(inline.fieldEnd);\n    } else if (inline instanceof FieldElementBox && inline.fieldType === 2) {\n      return !isNullOrUndefined(inline.fieldBegin) && !isNullOrUndefined(inline.fieldEnd);\n    } else {\n      return !isNullOrUndefined(inline.fieldBegin);\n    }\n  };\n  /**\n   * Removes white space in a string.\n   *\n   * @private\n   * @param {string} text - Specifies text to trim.\n   * @returns {string} - Returns modified text.\n   */\n  HelperMethods.removeSpace = function (text) {\n    if (!isNullOrUndefined(text) && text.length !== 0) {\n      for (var i = 0; i < text.length; i++) {\n        if (text.charAt(i) === ' ') {\n          //replace the space by empty string in string\n          text = text.replace(' ', '');\n        }\n      }\n    }\n    return text;\n  };\n  /**\n   * Trims white space at start of the string.\n   *\n   * @private\n   * @param {string} text - Specifies text to trim.\n   * @returns {string} - Returns modified text.\n   */\n  HelperMethods.trimStart = function (text) {\n    var i = 0;\n    for (i; i < text.length; i++) {\n      if (text[parseInt(i.toString(), 10)] !== ' ') {\n        break;\n      }\n    }\n    return text.substring(i, text.length);\n  };\n  /**\n   * Trims white space at end of the string.\n   *\n   * @private\n   * @param {string} text - Specifies text to trim.\n   * @returns {string} - Returns modified text.\n   */\n  HelperMethods.trimEnd = function (text) {\n    var i = text.length - 1;\n    for (i; i >= 0; i--) {\n      if (text[parseInt(i.toString(), 10)] !== ' ') {\n        break;\n      }\n    }\n    return text.substring(0, i + 1);\n  };\n  /**\n   * Checks whether string ends with whitespace.\n   *\n   * @private\n   * @param {string} text - Specifies the text.\n   * @returns {boolean} - Returns true if text ends with specified text.\n   */\n  HelperMethods.endsWith = function (text) {\n    if (!isNullOrUndefined(text) && text.length !== 0) {\n      return text[text.length - 1] === ' ';\n    }\n    return false;\n  };\n  HelperMethods.addSpace = function (length) {\n    var str = '';\n    if (length > 0) {\n      for (var i = 0; i < length; i++) {\n        str += ' ';\n      }\n    }\n    return str;\n  };\n  HelperMethods.getBoolValue = function (value) {\n    return value ? 1 : 0;\n  };\n  HelperMethods.getBoolInfo = function (value, keywordIndex) {\n    if (keywordIndex === 1) {\n      return this.getBoolValue(value);\n    } else {\n      return value;\n    }\n  };\n  HelperMethods.parseBoolValue = function (value) {\n    if (value instanceof String) {\n      if (isNullOrUndefined(value) || value === \"f\" || value === \"0\" || value === \"off\" || value === \"false\") {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      if (value == 1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  };\n  HelperMethods.getBaselineAlignmentEnumValue = function (baselineAlignment) {\n    switch (baselineAlignment) {\n      case 'Normal':\n        return 0;\n      case 'Superscript':\n        return 1;\n      case 'Subscript':\n        return 2;\n    }\n  };\n  HelperMethods.getUnderlineEnumValue = function (underline) {\n    switch (underline) {\n      case 'None':\n        return 0;\n      case 'Single':\n        return 1;\n      case 'Words':\n        return 2;\n      case 'Double':\n        return 3;\n      case 'Dotted':\n        return 4;\n      case 'Thick':\n        return 5;\n      case 'Dash':\n        return 6;\n      case 'DashLong':\n        return 7;\n      case 'DotDash':\n        return 8;\n      case 'DotDotDash':\n        return 9;\n      case 'Wavy':\n        return 10;\n      case 'DottedHeavy':\n        return 11;\n      case 'DashHeavy':\n        return 12;\n      case 'DashLongHeavy':\n        return 13;\n      case 'DotDashHeavy':\n        return 14;\n      case 'DotDotDashHeavy':\n        return 15;\n      case 'WavyHeavy':\n        return 16;\n      case 'WavyDouble':\n        return 17;\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.getStrikeThroughEnumValue = function (strikethrough) {\n    switch (strikethrough) {\n      case 'None':\n        return 0;\n      case 'SingleStrike':\n        return 1;\n      case 'DoubleStrike':\n        return 2;\n    }\n  };\n  HelperMethods.getHighlightColorEnumValue = function (highlightColor) {\n    switch (highlightColor) {\n      case 'NoColor':\n        return 0;\n      case 'Yellow':\n        return 1;\n      case 'BrightGreen':\n        return 2;\n      case 'Turquoise':\n        return 3;\n      case 'Pink':\n        return 4;\n      case 'Blue':\n        return 5;\n      case 'Red':\n        return 6;\n      case 'DarkBlue':\n        return 7;\n      case 'Teal':\n        return 8;\n      case 'Green':\n        return 9;\n      case 'Violet':\n        return 10;\n      case 'DarkRed':\n        return 11;\n      case 'DarkYellow':\n        return 12;\n      case 'Gray50':\n        return 13;\n      case 'Gray25':\n        return 14;\n      case 'Black':\n        return 15;\n    }\n  };\n  HelperMethods.getBiDirectionalOverride = function (biDirectionalOverride) {\n    switch (biDirectionalOverride) {\n      case 'None':\n        return 0;\n      case 'LTR':\n        return 1;\n      case 'RTL':\n        return 2;\n    }\n  };\n  HelperMethods.getBreakClearType = function (breakClearType) {\n    switch (breakClearType) {\n      case 'None':\n        return 0;\n      case 'Left':\n        return 1;\n      case 'Right':\n        return 2;\n      case 'All':\n        return 3;\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.getOutlineLevelEnumValue = function (outlineLevel) {\n    switch (outlineLevel) {\n      case 'BodyText':\n        return 0;\n      case 'Level1':\n        return 1;\n      case 'Level2':\n        return 2;\n      case 'Level3':\n        return 3;\n      case 'Level4':\n        return 4;\n      case 'Level5':\n        return 5;\n      case 'Level6':\n        return 6;\n      case 'Level7':\n        return 7;\n      case 'Level8':\n        return 8;\n      case 'Level9':\n        return 9;\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.getTextAlignmentEnumValue = function (textAlignment) {\n    switch (textAlignment) {\n      case 'Left':\n        return 0;\n      case 'Center':\n        return 1;\n      case 'Right':\n        return 2;\n      case 'Justify':\n        return 3;\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.getLineStyleEnumValue = function (lineStyle) {\n    switch (lineStyle) {\n      case 'Single':\n        return 0;\n      case 'None':\n        return 1;\n      case 'Dot':\n        return 2;\n      case 'DashSmallGap':\n        return 3;\n      case 'DashLargeGap':\n        return 4;\n      case 'DashDot':\n        return 5;\n      case 'DashDotDot':\n        return 6;\n      case 'Double':\n        return 7;\n      case 'Triple':\n        return 8;\n      case 'ThinThickSmallGap':\n        return 9;\n      case 'ThickThinSmallGap':\n        return 10;\n      case 'ThinThickThinSmallGap':\n        return 11;\n      case 'ThinThickMediumGap':\n        return 12;\n      case 'ThickThinMediumGap':\n        return 13;\n      case 'ThinThickThinMediumGap':\n        return 14;\n      case 'ThinThickLargeGap':\n        return 15;\n      case 'ThickThinLargeGap':\n        return 16;\n      case 'ThinThickThinLargeGap':\n        return 17;\n      case 'SingleWavy':\n        return 18;\n      case 'DoubleWavy':\n        return 19;\n      case 'DashDotStroked':\n        return 20;\n      case 'Emboss3D':\n        return 21;\n      case 'Engrave3D':\n        return 22;\n      case 'Outset':\n        return 23;\n      case 'Inset':\n        return 24;\n      case 'Thick':\n        return 25;\n      case 'Cleared':\n        return 26;\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.getLineSpacingTypeEnumValue = function (lineSpacing) {\n    switch (lineSpacing) {\n      case 'Multiple':\n        return 0;\n      case 'AtLeast':\n        return 1;\n      case 'Exactly':\n        return 2;\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.writeBorder = function (wBorder, keywordIndex) {\n    var border = {};\n    border[colorProperty[keywordIndex]] = wBorder.hasValue('color') ? wBorder.color : undefined;\n    border[hasNoneStyleProperty[keywordIndex]] = wBorder.hasValue('hasNoneStyle') ? HelperMethods.getBoolInfo(wBorder.hasNoneStyle, keywordIndex) : undefined;\n    border[lineStyleProperty[keywordIndex]] = wBorder.hasValue('lineStyle') ? keywordIndex == 1 ? this.getLineStyleEnumValue(wBorder.lineStyle) : wBorder.lineStyle : undefined;\n    border[lineWidthProperty[keywordIndex]] = wBorder.hasValue('lineWidth') ? wBorder.lineWidth : undefined;\n    border[shadowProperty[keywordIndex]] = wBorder.hasValue('shadow') ? HelperMethods.getBoolInfo(wBorder.shadow, keywordIndex) : undefined;\n    border[spaceProperty[keywordIndex]] = wBorder.hasValue('space') ? wBorder.space : undefined;\n    return border;\n  };\n  /* eslint-disable */\n  HelperMethods.writeBorders = function (wBorders, keywordIndex) {\n    var borders = {};\n    borders[topProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('top'), keywordIndex);\n    borders[leftProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('left'), keywordIndex);\n    borders[rightProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('right'), keywordIndex);\n    borders[bottomProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('bottom'), keywordIndex);\n    borders[horizontalProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('horizontal'), keywordIndex);\n    borders[verticalProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('vertical'), keywordIndex);\n    return borders;\n  };\n  /* eslint-disable */\n  HelperMethods.writeParagraphFormat = function (paragraphFormat, isInline, format, keywordIndex) {\n    keywordIndex = isNullOrUndefined(keywordIndex) ? 0 : keywordIndex;\n    paragraphFormat[bordersProperty[keywordIndex]] = this.writeBorders(format.borders, keywordIndex);\n    paragraphFormat[leftIndentProperty[keywordIndex]] = isInline ? format.leftIndent : format.getValue('leftIndent');\n    paragraphFormat[rightIndentProperty[keywordIndex]] = isInline ? format.rightIndent : format.getValue('rightIndent');\n    paragraphFormat[firstLineIndentProperty[keywordIndex]] = isInline ? format.firstLineIndent : format.getValue('firstLineIndent');\n    paragraphFormat[textAlignmentProperty[keywordIndex]] = isInline ? keywordIndex == 1 ? this.getTextAlignmentEnumValue(format.textAlignment) : format.textAlignment : keywordIndex == 1 ? this.getTextAlignmentEnumValue(format.getValue('textAlignment')) : format.getValue('textAlignment');\n    paragraphFormat[beforeSpacingProperty[keywordIndex]] = isInline ? format.beforeSpacing : format.getValue('beforeSpacing');\n    paragraphFormat[afterSpacingProperty[keywordIndex]] = isInline ? format.afterSpacing : format.getValue('afterSpacing');\n    paragraphFormat[spaceBeforeAutoProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.spaceBeforeAuto, keywordIndex) : format.getValue('spaceBeforeAuto');\n    paragraphFormat[spaceAfterAutoProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.spaceAfterAuto, keywordIndex) : format.getValue('spaceAfterAuto');\n    paragraphFormat[lineSpacingProperty[keywordIndex]] = isInline ? format.lineSpacing : format.getValue('lineSpacing');\n    paragraphFormat[lineSpacingTypeProperty[keywordIndex]] = isInline ? keywordIndex == 1 ? this.getLineSpacingTypeEnumValue(format.lineSpacingType) : format.lineSpacingType : keywordIndex == 1 ? this.getLineSpacingTypeEnumValue(format.getValue('lineSpacingType')) : format.getValue('lineSpacingType');\n    paragraphFormat[styleNameProperty[keywordIndex]] = !isNullOrUndefined(format.baseStyle) ? format.baseStyle.name : undefined;\n    paragraphFormat[outlineLevelProperty[keywordIndex]] = isInline ? keywordIndex == 1 ? this.getOutlineLevelEnumValue(format.outlineLevel) : format.outlineLevel : keywordIndex == 1 ? this.getOutlineLevelEnumValue(format.getValue('outlineLevel')) : format.getValue('outlineLevel');\n    paragraphFormat[bidiProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.bidi, keywordIndex) : format.getValue('bidi');\n    paragraphFormat[keepLinesTogetherProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.keepLinesTogether, keywordIndex) : format.getValue('keepLinesTogether');\n    paragraphFormat[keepWithNextProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.keepWithNext, keywordIndex) : format.getValue('keepWithNext');\n    paragraphFormat[contextualSpacingProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.contextualSpacing, keywordIndex) : format.getValue('contextualSpacing');\n    paragraphFormat[widowControlProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.widowControl, keywordIndex) : format.getValue('widowControl');\n  };\n  /* eslint-disable */\n  HelperMethods.writeCharacterFormat = function (characterFormat, isInline, format, keywordIndex, isWriteAllValues) {\n    keywordIndex = isNullOrUndefined(keywordIndex) ? 0 : keywordIndex;\n    characterFormat[boldProperty[keywordIndex]] = isWriteAllValues ? HelperMethods.getBoolInfo(format.bold, keywordIndex) : isInline ? HelperMethods.getBoolInfo(format.bold, keywordIndex) : format.getValue('bold');\n    characterFormat[italicProperty[keywordIndex]] = isWriteAllValues ? HelperMethods.getBoolInfo(format.italic, keywordIndex) : isInline ? HelperMethods.getBoolInfo(format.italic, keywordIndex) : format.getValue('italic');\n    characterFormat[fontSizeProperty[keywordIndex]] = isWriteAllValues ? format.fontSize : isInline ? this.toWriteInline(format, 'fontSize') : format.getValue('fontSize');\n    characterFormat[fontFamilyProperty[keywordIndex]] = isWriteAllValues ? format.fontFamily : isInline ? this.toWriteInline(format, 'fontFamily') : format.getValue('fontFamily');\n    characterFormat[underlineProperty[keywordIndex]] = isWriteAllValues ? format.underline : isInline ? keywordIndex == 1 ? HelperMethods.getUnderlineEnumValue(format.underline) : format.underline : keywordIndex == 1 ? HelperMethods.getUnderlineEnumValue(format.getValue('underline')) : format.getValue('underline');\n    characterFormat[strikethroughProperty[keywordIndex]] = isWriteAllValues ? format.strikethrough : isInline ? keywordIndex == 1 ? HelperMethods.getStrikeThroughEnumValue(format.strikethrough) : format.strikethrough : keywordIndex == 1 ? HelperMethods.getStrikeThroughEnumValue(format.getValue('strikethrough')) : format.getValue('strikethrough');\n    characterFormat[baselineAlignmentProperty[keywordIndex]] = isWriteAllValues ? format.baselineAlignment : isInline ? keywordIndex == 1 ? HelperMethods.getBaselineAlignmentEnumValue(format.baselineAlignment) : format.baselineAlignment : keywordIndex == 1 ? HelperMethods.getBaselineAlignmentEnumValue(format.getValue('baselineAlignment')) : format.getValue('baselineAlignment');\n    characterFormat[highlightColorProperty[keywordIndex]] = isWriteAllValues ? format.highlightColor : isInline ? keywordIndex == 1 ? HelperMethods.getHighlightColorEnumValue(format.highlightColor) : format.highlightColor : keywordIndex == 1 ? HelperMethods.getHighlightColorEnumValue(format.getValue('highlightColor')) : format.getValue('highlightColor');\n    characterFormat[fontColorProperty[keywordIndex]] = isWriteAllValues ? format.fontColor : isInline ? this.toWriteInline(format, 'fontColor') : format.getValue('fontColor');\n    characterFormat[styleNameProperty[keywordIndex]] = !isNullOrUndefined(format.baseCharStyle) ? format.baseCharStyle.name : undefined;\n    characterFormat[bidiProperty[keywordIndex]] = isWriteAllValues ? format.bidi : isInline ? HelperMethods.getBoolInfo(format.bidi, keywordIndex) : format.getValue('bidi');\n    characterFormat[bdoProperty[keywordIndex]] = isWriteAllValues ? format.bdo : isInline ? keywordIndex == 1 ? HelperMethods.getBiDirectionalOverride(format.bdo) : format.bdo : keywordIndex == 1 ? HelperMethods.getBiDirectionalOverride(format.getValue('bdo')) : format.getValue('bdo');\n    characterFormat[boldBidiProperty[keywordIndex]] = isWriteAllValues ? format.boldBidi : isInline ? HelperMethods.getBoolInfo(format.boldBidi, keywordIndex) : format.getValue('boldBidi');\n    characterFormat[italicBidiProperty[keywordIndex]] = isWriteAllValues ? format.italicBidi : isInline ? HelperMethods.getBoolInfo(format.italicBidi, keywordIndex) : format.getValue('italicBidi');\n    characterFormat[fontSizeBidiProperty[keywordIndex]] = isWriteAllValues ? format.fontSizeBidi : isInline ? format.fontSizeBidi : format.getValue('fontSizeBidi');\n    characterFormat[fontFamilyBidiProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyBidi : isInline ? format.fontFamilyBidi : format.getValue('fontFamilyBidi');\n    characterFormat[allCapsProperty[keywordIndex]] = isWriteAllValues ? format.allCaps : isInline ? HelperMethods.getBoolInfo(format.allCaps, keywordIndex) : format.getValue('allCaps');\n    characterFormat[localeIdBidiProperty[keywordIndex]] = isWriteAllValues ? format.localeIdBidi : isInline ? format.localeIdBidi : format.getValue('localeIdBidi');\n    characterFormat[localeIdProperty[keywordIndex]] = isWriteAllValues ? format.localeIdBidi : isInline ? format.localeIdAscii : format.getValue('localeIdAscii');\n    characterFormat[complexScriptProperty[keywordIndex]] = isWriteAllValues ? format.complexScript : isInline ? HelperMethods.getBoolInfo(format.complexScript, keywordIndex) : format.getValue('complexScript');\n    characterFormat[fontFamilyAsciiProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyAscii : isInline ? this.toWriteInline(format, 'fontFamilyAscii') : format.getValue('fontFamilyAscii');\n    characterFormat[fontFamilyNonFarEastProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyNonFarEast : isInline ? this.toWriteInline(format, 'fontFamilyNonFarEast') : format.getValue('fontFamilyNonFarEast');\n    characterFormat[fontFamilyFarEastProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyFarEast : isInline ? this.toWriteInline(format, 'fontFamilyFarEast') : format.getValue('fontFamilyFarEast');\n    characterFormat[characterSpacingProperty[keywordIndex]] = isWriteAllValues ? format.characterSpacing : isInline ? this.toWriteInline(format, 'characterSpacing') : format.getValue('characterSpacing');\n    characterFormat[scalingProperty[keywordIndex]] = isWriteAllValues ? format.scaling : isInline ? this.toWriteInline(format, 'scaling') : format.getValue('scaling');\n    if (format.hasValue('fontFamily') || isWriteAllValues) {\n      if (isNullOrUndefined(characterFormat[fontFamilyAsciiProperty[keywordIndex]])) {\n        characterFormat[fontFamilyAsciiProperty[keywordIndex]] = format.fontFamily;\n      }\n      if (isNullOrUndefined(characterFormat[fontFamilyNonFarEastProperty[keywordIndex]])) {\n        characterFormat[fontFamilyNonFarEastProperty[keywordIndex]] = format.fontFamily;\n      }\n      if (isNullOrUndefined(characterFormat[fontFamilyFarEastProperty[keywordIndex]])) {\n        characterFormat[fontFamilyFarEastProperty[keywordIndex]] = format.fontFamily;\n      }\n    }\n  };\n  /// <summary>\n  /// To check whether the font name is theme font or not.\n  /// </summary>\n  /// <param name=\"fontName\">Specify the font name.</param>\n  /// <returns>Returns true if the font name is represent a theme font.</returns>\n  HelperMethods.isThemeFont = function (fontName) {\n    return fontName == \"majorAscii\" || fontName == \"majorBidi\" || fontName == \"majorEastAsia\" || fontName == \"majorHAnsi\" || fontName == \"minorAscii\" || fontName == \"minorBidi\" || fontName == \"minorEastAsia\" || fontName == \"minorHAnsi\";\n  };\n  HelperMethods.toWriteInline = function (format, propertyName) {\n    if (!isNullOrUndefined(format.ownerBase) && format.ownerBase instanceof ElementBox) {\n      return format.hasValue(propertyName) ? format[propertyName] : format.getValue(propertyName);\n    } else {\n      return format[propertyName];\n    }\n  };\n  /* eslint-enable */\n  HelperMethods.round = function (value, decimalDigits) {\n    var temp = value;\n    for (var i = 0; i < decimalDigits; i++) {\n      temp = temp * 10;\n    }\n    temp = Math.round(temp);\n    for (var i = 0; i < decimalDigits; i++) {\n      temp = temp / 10;\n    }\n    return temp;\n  };\n  /* eslint-disable  */\n  HelperMethods.removeInvalidXmlChars = function (text) {\n    // From xml spec valid chars:\n    // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n    // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n    // and used unicodes in DocumentEditor \\f | \\v | \\r | \\u000E\n    var invalidXMLChars = /[^\\x09\\x0A\\x0C\\x0D\\v\\f\\r\\u000E\\x20-\\uD7FF\\uE000-\\uFFFD\\u{10000}-\\u{10FFFF}]/ug;\n    return text.replace(invalidXMLChars, '');\n  };\n  HelperMethods.reverseString = function (text) {\n    if (!isNullOrUndefined(text) && text !== '') {\n      // return a new array\n      var splitString = text.split('');\n      // reverse the new created array\n      var reverseString = splitString.reverse();\n      // join all elements of the array into a string\n      text = reverseString.join('');\n    }\n    return text;\n  };\n  HelperMethods.formatClippedString = function (base64ImageString) {\n    var extension = '';\n    var formatClippedString = '';\n    if (this.startsWith(base64ImageString, 'data:image/svg+xml;base64,')) {\n      extension = '.svg';\n      formatClippedString = base64ImageString.replace('data:image/svg+xml;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/svg+xml;utf8,')) {\n      extension = '.svg';\n      formatClippedString = base64ImageString.replace('data:image/svg+xml;utf8,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/bmp;base64,')) {\n      extension = '.bmp';\n      formatClippedString = base64ImageString.replace('data:image/bmp;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/x-emf;base64,')) {\n      extension = '.emf';\n      formatClippedString = base64ImageString.replace('data:image/x-emf;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/exif;base64,')) {\n      extension = '.exif';\n      formatClippedString = base64ImageString.replace('data:image/exif;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/gif;base64,')) {\n      extension = '.gif';\n      formatClippedString = base64ImageString.replace('data:image/gif;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/icon;base64,')) {\n      extension = '.ico';\n      formatClippedString = base64ImageString.replace('data:image/icon;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/jpeg;base64,')) {\n      extension = '.jpeg';\n      formatClippedString = base64ImageString.replace('data:image/jpeg;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/jpg;base64,')) {\n      extension = '.jpg';\n      formatClippedString = base64ImageString.replace('data:image/jpg;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/png;base64,')) {\n      extension = '.png';\n      formatClippedString = base64ImageString.replace('data:image/png;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/tiff;base64,')) {\n      extension = '.tif';\n      formatClippedString = base64ImageString.replace('data:image/tiff;base64,', '');\n    } else if (this.startsWith(base64ImageString, 'data:image/x-wmf;base64,')) {\n      extension = '.wmf';\n      formatClippedString = base64ImageString.replace('data:image/x-wmf;base64,', '');\n    } else {\n      extension = '.jpeg';\n    }\n    return {\n      'extension': extension,\n      'formatClippedString': formatClippedString\n    };\n  };\n  /**\n   * @private\n   * @param sourceString\n   * @param startString\n   * @returns\n   */\n  HelperMethods.startsWith = function (sourceString, startString) {\n    return startString.length > 0 && sourceString.substring(0, startString.length) === startString;\n  };\n  HelperMethods.formatText = function (format, value) {\n    var text = value;\n    switch (format.toLowerCase()) {\n      case 'uppercase':\n        text = value.toUpperCase();\n        break;\n      case 'lowercase':\n        text = value.toLowerCase();\n        break;\n      case 'firstlower':\n        text = this.lowerFirstChar(value);\n        break;\n      case 'firstcapital':\n        text = this.capitaliseFirst(value, 'FirstCapital');\n        break;\n      case 'titlecase':\n        text = this.capitaliseFirst(value, 'Titlecase');\n        break;\n    }\n    return text;\n  };\n  HelperMethods.formatNumber = function (format, value) {\n    var intl = new Internationalization();\n    var dotData = value.split('.');\n    value = dotData[0];\n    var numberValue = intl.parseNumber(value);\n    if (value.toString() === 'NaN') {\n      return '';\n    }\n    if (format === '') {\n      format = '0';\n    }\n    var numberFormat = {\n      format: format\n    };\n    return intl.formatNumber(numberValue, numberFormat);\n  };\n  HelperMethods.formatDate = function (format, value) {\n    var intl = new Internationalization();\n    var date = new Date(value);\n    if (isNaN(date.getDate())) {\n      return '';\n    }\n    if (format === '') {\n      return value;\n    }\n    if (format.indexOf('am/pm') !== -1) {\n      format = format.replace(/am\\/pm/gi, 'a');\n    }\n    var dateFormat = {\n      'format': format\n    };\n    return intl.formatDate(date, dateFormat);\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  HelperMethods.capitaliseFirst = function (value, type, splitBy) {\n    var text = '';\n    if (type === 'Titlecase') {\n      var valArry = splitBy ? value.split(splitBy) : value.split(' ');\n      for (var i = 0; i < valArry.length; i++) {\n        /* eslint-disable-next-line max-len */\n        text += splitBy ? valArry[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + valArry[parseInt(i.toString(), 10)].slice(1, valArry[parseInt(i.toString(), 10)].length) : this.capitaliseFirstInternal(valArry[parseInt(i.toString(), 10)]);\n        if (valArry.length >= 0 && !splitBy) {\n          text += ' ';\n        }\n      }\n      if (!splitBy) {\n        text = this.capitaliseFirst(text, 'Titlecase', '\\r');\n      }\n    } else if (type === 'FirstCapital') {\n      text = this.capitaliseFirstInternal(value);\n    }\n    return text;\n  };\n  HelperMethods.lowerFirstChar = function (value) {\n    return value.charAt(0).toLowerCase() + value.slice(1, value.length);\n  };\n  HelperMethods.capitaliseFirstInternal = function (value) {\n    return value.charAt(0).toUpperCase() + value.slice(1, value.length).toLowerCase();\n  };\n  HelperMethods.getModifiedDate = function (date) {\n    var modifiedDate = HelperMethods.getLocaleDate(date);\n    var dateString = modifiedDate.toLocaleDateString([], {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    var time = modifiedDate.toLocaleTimeString([], {\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n    var dateTime = dateString + ' ' + time;\n    return dateTime;\n  };\n  HelperMethods.getUtcDate = function () {\n    var now = new Date();\n    return new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString();\n  };\n  HelperMethods.getLocaleDate = function (date) {\n    var dt = new Date(date);\n    return new Date(dt.getTime() + dt.getTimezoneOffset() * 60000);\n  };\n  HelperMethods.getCompatibilityModeValue = function (compatibilityMode) {\n    var compatValue;\n    switch (compatibilityMode) {\n      case 1:\n        compatValue = '11';\n        break;\n      case 2:\n        compatValue = '12';\n        break;\n      case 3:\n        compatValue = '14';\n        break;\n      default:\n        compatValue = '15';\n        break;\n    }\n    return compatValue;\n  };\n  /**\n   * @private\n   * @returns {string} - Returns the unique id for document editor.\n   */\n  HelperMethods.getUniqueElementId = function () {\n    return 'de_element' + Date.now().toString(36) + Math.random().toString(36).substring(2);\n  };\n  /**\n   * @private\n   * @param element - element to be splitted of space\n   * @param fromStart - weather to removed space from start or end\n   * @returns {Boolean} - is the input element is splitted\n   */\n  /* eslint-disable  */\n  HelperMethods.splitSpaceInTextElementBox = function (element, fromStart) {\n    var elementText = element.text;\n    var emptySpace = \"\";\n    if (fromStart) {\n      while (HelperMethods.startsWith(elementText, \" \")) {\n        emptySpace += ' ';\n        elementText = elementText.substring(1);\n      }\n    } else {\n      while (HelperMethods.endsWith(elementText)) {\n        emptySpace += ' ';\n        elementText = elementText.slice(0, -1);\n      }\n    }\n    if (emptySpace != \"\") {\n      var textBox = new TextElementBox();\n      textBox.characterFormat.copyFormat(element.characterFormat);\n      if (element.revisions.length > 0) {\n        for (var i = 0; i < element.revisions.length; i++) {\n          var currentRevision = element.revisions[i];\n          textBox.revisions.push(currentRevision);\n          var rangeIndex = currentRevision.range.indexOf(element);\n          if (rangeIndex < 0) {\n            currentRevision.range.push(textBox);\n          } else {\n            currentRevision.range.splice(rangeIndex + 1, 0, textBox);\n          }\n        }\n        textBox.isMarkedForRevision = element.isMarkedForRevision;\n      }\n      textBox.line = element.line;\n      var lineChildren = textBox.line.children;\n      if (fromStart) {\n        element.text = emptySpace;\n        textBox.text = elementText;\n      } else {\n        element.text = elementText;\n        textBox.text = emptySpace;\n      }\n      lineChildren.splice(lineChildren.indexOf(element) + 1, 0, textBox);\n    }\n  };\n  /* eslint-disable */\n  HelperMethods.getTextIndexAfterWhitespace = function (text, startIndex) {\n    var length = text.length;\n    var index = 0;\n    index = text.indexOf(' ', startIndex) + 1;\n    var nextIndex = index;\n    if (nextIndex === 0 || nextIndex === length) {\n      return nextIndex;\n    }\n    while (text[nextIndex] === ' ') {\n      nextIndex++;\n      if (nextIndex === length) {\n        break;\n      }\n    }\n    return nextIndex;\n  };\n  /**\n   * @private\n   * @param {TextElementBox} textElementBox text element box to split the text based on max text length.\n   * @param {LineWidget} lineWidget  line widget to add the splitted text element box.\n   * @returns {void}\n   */\n  HelperMethods.splitWordByMaxLength = function (textElementBox, lineWidget, isInitialParsing) {\n    var text = textElementBox.text;\n    var index = 0;\n    var textLength = text.length;\n    var maxLength = 90;\n    var splittedText = '';\n    var characterFormat = textElementBox.characterFormat;\n    var revisions = textElementBox.revisions;\n    var spanIndex = lineWidget.children.indexOf(textElementBox);\n    while (index < textLength) {\n      var nextIndex = index + maxLength;\n      if (nextIndex > textLength) {\n        nextIndex = textLength;\n      }\n      var spaceIndex = HelperMethods.getTextIndexAfterWhitespace(text, nextIndex);\n      if (spaceIndex === 0 || spaceIndex > textLength) {\n        spaceIndex = nextIndex;\n      }\n      splittedText = text.substring(index, spaceIndex);\n      if (index === 0) {\n        textElementBox.text = splittedText;\n      } else {\n        var splittedElement = new TextElementBox();\n        splittedElement.text = splittedText;\n        splittedElement.line = lineWidget;\n        splittedElement.characterFormat.copyFormat(characterFormat);\n        if (revisions.length > 0) {\n          for (var i = 0; i < revisions.length; i++) {\n            var revision = revisions[i];\n            splittedElement.revisions.push(revision);\n            var rangeIndex = revision.range.indexOf(textElementBox);\n            if (isInitialParsing) {\n              revision.range.push(splittedElement);\n            } else {\n              if (rangeIndex < 0) {\n                revision.range.push(splittedElement);\n              } else {\n                revision.range.splice(rangeIndex + 1, 0, splittedElement);\n              }\n            }\n          }\n        }\n        if (isInitialParsing) {\n          lineWidget.children.push(splittedElement);\n        } else {\n          lineWidget.children.splice(spanIndex + 1, 0, splittedElement);\n          spanIndex++;\n        }\n      }\n      index = spaceIndex;\n    }\n  };\n  /**\n   * @private\n   */\n  HelperMethods.wordBefore = '\\\\b';\n  /**\n   * @private\n   */\n  HelperMethods.wordAfter = '\\\\b';\n  /**\n   * @private\n   */\n  HelperMethods.wordSplitCharacters = [' ', ',', '.', ':', ';', '<', '>', '=', '+', '-', '_', '{', '}', '[', ']', '`', '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '\"', '?', '/', '|', '\\\\', '”', '　', '،', '؟', '؛', '’', '‘'];\n  return HelperMethods;\n}();\nexport { HelperMethods };\n/**\n * @private\n */\nvar Point = /** @class */function () {\n  function Point(xPosition, yPosition) {\n    this.xIn = 0;\n    this.yIn = 0;\n    this.xIn = xPosition;\n    this.yIn = yPosition;\n  }\n  Object.defineProperty(Point.prototype, \"x\", {\n    get: function () {\n      return this.xIn;\n    },\n    set: function (value) {\n      this.xIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Point.prototype, \"y\", {\n    get: function () {\n      return this.yIn;\n    },\n    set: function (value) {\n      this.yIn = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Point.prototype.copy = function (point) {\n    this.xIn = point.xIn;\n    this.yIn = point.yIn;\n  };\n  /**\n   * Destroys the internal objects maintained.\n   *\n   * @returns {void}\n   */\n  Point.prototype.destroy = function () {\n    this.xIn = undefined;\n    this.yIn = undefined;\n  };\n  return Point;\n}();\nexport { Point };\n/**\n * @private\n */\nvar Base64 = /** @class */function () {\n  function Base64() {\n    this.keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  }\n  // public method for encoding\n  Base64.prototype.encodeString = function (input) {\n    var output = '';\n    var chr1;\n    var chr2;\n    var chr3;\n    var enc1;\n    var enc2;\n    var enc3;\n    var enc4;\n    var i = 0;\n    input = this.unicodeEncode(input);\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n      output = output + this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) + this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);\n    }\n    return output;\n  };\n  // private method for UTF-8 encoding\n  Base64.prototype.unicodeEncode = function (input) {\n    var tempInput = input.replace(/\\r\\n/g, '\\n');\n    var utftext = '';\n    for (var n = 0; n < tempInput.length; n++) {\n      var c = tempInput.charCodeAt(n);\n      if (c < 128) {\n        utftext += String.fromCharCode(c);\n      } else if (c > 127 && c < 2048) {\n        utftext += String.fromCharCode(c >> 6 | 192);\n        utftext += String.fromCharCode(c & 63 | 128);\n      } else {\n        utftext += String.fromCharCode(c >> 12 | 224);\n        utftext += String.fromCharCode(c >> 6 & 63 | 128);\n        utftext += String.fromCharCode(c & 63 | 128);\n      }\n    }\n    return utftext;\n  };\n  Base64.prototype.decodeString = function (input) {\n    var chr1;\n    var chr2;\n    var chr3;\n    var enc1;\n    var enc2;\n    var enc3;\n    var enc4;\n    var i = 0;\n    var resultIndex = 0;\n    /*let dataUrlPrefix: string = 'data:';*/\n    input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n    var totalLength = input.length * 3 / 4;\n    if (input.charAt(input.length - 1) === this.keyStr.charAt(64)) {\n      totalLength--;\n    }\n    if (input.charAt(input.length - 2) === this.keyStr.charAt(64)) {\n      totalLength--;\n    }\n    if (totalLength % 1 !== 0) {\n      // totalLength is not an integer, the length does not match a valid\n      // base64 content. That can happen if:\n      // - the input is not a base64 content\n      // - the input is *almost* a base64 content, with a extra chars at the\n      // beginning or at the end\n      // - the input uses a base64 variant (base64url for example)\n      throw new Error('Invalid base64 input, bad content length.');\n    }\n    var output = new Uint8Array(totalLength | 0);\n    while (i < input.length) {\n      enc1 = this.keyStr.indexOf(input.charAt(i++));\n      enc2 = this.keyStr.indexOf(input.charAt(i++));\n      enc3 = this.keyStr.indexOf(input.charAt(i++));\n      enc4 = this.keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output[resultIndex++] = chr1;\n      if (enc3 !== 64) {\n        output[resultIndex++] = chr2;\n      }\n      if (enc4 !== 64) {\n        output[resultIndex++] = chr3;\n      }\n    }\n    return output;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  Base64.prototype.destroy = function () {\n    this.keyStr = undefined;\n  };\n  return Base64;\n}();\nexport { Base64 };\n/**\n * @private\n */\nvar WrapPosition = /** @class */function () {\n  function WrapPosition(x, width) {\n    this.x = 0;\n    this.width = 0;\n    this.x = x;\n    this.width = width;\n  }\n  Object.defineProperty(WrapPosition.prototype, \"right\", {\n    get: function () {\n      return this.x + this.width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WrapPosition;\n}();\nexport { WrapPosition };","map":{"version":3,"names":["isNullOrUndefined","Internationalization","SanitizeHtmlHelper","ZipArchive","ElementBox","TextElementBox","FieldElementBox","boldProperty","italicProperty","fontSizeProperty","fontFamilyProperty","underlineProperty","strikethroughProperty","baselineAlignmentProperty","highlightColorProperty","fontColorProperty","styleNameProperty","bidiProperty","bdoProperty","boldBidiProperty","italicBidiProperty","fontSizeBidiProperty","fontFamilyBidiProperty","allCapsProperty","localeIdBidiProperty","localeIdProperty","complexScriptProperty","fontFamilyAsciiProperty","characterSpacingProperty","scalingProperty","fontFamilyFarEastProperty","fontFamilyNonFarEastProperty","bordersProperty","leftIndentProperty","rightIndentProperty","firstLineIndentProperty","textAlignmentProperty","beforeSpacingProperty","afterSpacingProperty","spaceBeforeAutoProperty","spaceAfterAutoProperty","lineSpacingProperty","lineSpacingTypeProperty","outlineLevelProperty","keepLinesTogetherProperty","keepWithNextProperty","contextualSpacingProperty","widowControlProperty","topProperty","leftProperty","rightProperty","bottomProperty","horizontalProperty","verticalProperty","colorProperty","hasNoneStyleProperty","lineStyleProperty","lineWidthProperty","shadowProperty","spaceProperty","HelperMethods","insert","spanText","index","text","slice","join","replaceSpecialChars","replace","getSpellCheckData","stringarr","split","spellColl","_i","stringarr_1","length","str","spellInfo","Text","HasSpellError","push","checkTextFormat","input","romanPattern","arabicPattern","test","sanitizeString","value","sanitizedContent","sanitize","String","fromCharCode","getSfdtDocument","json","Object","JSON","parse","sfdt","zipArchive","open","stringify","zipItem","items","Uint8Array","data","TextDecoder","decode","generateUniqueId","lists","abstractLists","isAbstractList","randomNumber","Math","floor","random","isSameListIDExists","undefined","nsid","i","abstractList","parseInt","toString","j","list","remove","substring","indexOfAny","wordSplitCharacter","temp","indexOf","lastIndexOfAny","convertArgbToRgb","color","substr","convertRgbToHex","val","hex","Number","getNumberFromString","numbers","currentNumber","input_1","char","parseFloat","convertHexToRgb","colorCode","r","g","b","colCodeNo","addCssStyle","css","style","document","createElement","cssText","appendChild","createTextNode","getElementsByTagName","convertNodeListToArray","nodeList","array","getHighlightColorCode","highlightColor","isVeryDark","backColor","backgroundColor","contrast","getColor","getTextVerticalAlignment","textVerticalAlignment","convertPointToPixel","point","round","pixel","convertPixelToPoint","isLinkedFieldCharacter","inline","fieldType","fieldEnd","fieldBegin","removeSpace","charAt","trimStart","trimEnd","endsWith","addSpace","getBoolValue","getBoolInfo","keywordIndex","parseBoolValue","getBaselineAlignmentEnumValue","baselineAlignment","getUnderlineEnumValue","underline","getStrikeThroughEnumValue","strikethrough","getHighlightColorEnumValue","getBiDirectionalOverride","biDirectionalOverride","getBreakClearType","breakClearType","getOutlineLevelEnumValue","outlineLevel","getTextAlignmentEnumValue","textAlignment","getLineStyleEnumValue","lineStyle","getLineSpacingTypeEnumValue","lineSpacing","writeBorder","wBorder","border","hasValue","hasNoneStyle","lineWidth","shadow","space","writeBorders","wBorders","borders","getBorder","writeParagraphFormat","paragraphFormat","isInline","format","leftIndent","getValue","rightIndent","firstLineIndent","beforeSpacing","afterSpacing","spaceBeforeAuto","spaceAfterAuto","lineSpacingType","baseStyle","name","bidi","keepLinesTogether","keepWithNext","contextualSpacing","widowControl","writeCharacterFormat","characterFormat","isWriteAllValues","bold","italic","fontSize","toWriteInline","fontFamily","fontColor","baseCharStyle","bdo","boldBidi","italicBidi","fontSizeBidi","fontFamilyBidi","allCaps","localeIdBidi","localeIdAscii","complexScript","fontFamilyAscii","fontFamilyNonFarEast","fontFamilyFarEast","characterSpacing","scaling","isThemeFont","fontName","propertyName","ownerBase","decimalDigits","removeInvalidXmlChars","invalidXMLChars","reverseString","splitString","reverse","formatClippedString","base64ImageString","extension","startsWith","sourceString","startString","formatText","toLowerCase","toUpperCase","lowerFirstChar","capitaliseFirst","formatNumber","intl","dotData","numberValue","parseNumber","numberFormat","formatDate","date","Date","isNaN","getDate","dateFormat","type","splitBy","valArry","capitaliseFirstInternal","getModifiedDate","modifiedDate","getLocaleDate","dateString","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute","dateTime","getUtcDate","now","getTime","getTimezoneOffset","toISOString","dt","getCompatibilityModeValue","compatibilityMode","compatValue","getUniqueElementId","splitSpaceInTextElementBox","element","fromStart","elementText","emptySpace","textBox","copyFormat","revisions","currentRevision","rangeIndex","range","splice","isMarkedForRevision","line","lineChildren","children","getTextIndexAfterWhitespace","startIndex","nextIndex","splitWordByMaxLength","textElementBox","lineWidget","isInitialParsing","textLength","maxLength","splittedText","spanIndex","spaceIndex","splittedElement","revision","wordBefore","wordAfter","wordSplitCharacters","Point","xPosition","yPosition","xIn","yIn","defineProperty","prototype","get","set","enumerable","configurable","copy","destroy","Base64","keyStr","encodeString","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","unicodeEncode","charCodeAt","tempInput","utftext","n","c","decodeString","resultIndex","totalLength","Error","WrapPosition","x","width"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js"],"sourcesContent":["import { isNullOrUndefined, Internationalization, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { ZipArchive } from '@syncfusion/ej2-compression';\nimport { ElementBox, TextElementBox } from '../viewer/page';\nimport { FieldElementBox } from '../viewer/page';\nimport { boldProperty, italicProperty, fontSizeProperty, fontFamilyProperty, underlineProperty, strikethroughProperty, baselineAlignmentProperty, highlightColorProperty, fontColorProperty, styleNameProperty, bidiProperty, bdoProperty, boldBidiProperty, italicBidiProperty, fontSizeBidiProperty, fontFamilyBidiProperty, allCapsProperty, localeIdBidiProperty, localeIdProperty, complexScriptProperty, fontFamilyAsciiProperty, characterSpacingProperty, scalingProperty, fontFamilyFarEastProperty, fontFamilyNonFarEastProperty, bordersProperty, leftIndentProperty, rightIndentProperty, firstLineIndentProperty, textAlignmentProperty, beforeSpacingProperty, afterSpacingProperty, spaceBeforeAutoProperty, spaceAfterAutoProperty, lineSpacingProperty, lineSpacingTypeProperty, outlineLevelProperty, keepLinesTogetherProperty, keepWithNextProperty, contextualSpacingProperty, widowControlProperty, topProperty, leftProperty, rightProperty, bottomProperty, horizontalProperty, verticalProperty, colorProperty, hasNoneStyleProperty, lineStyleProperty, lineWidthProperty, shadowProperty, spaceProperty } from '../../index';\n/**\n * @private\n */\nvar HelperMethods = /** @class */ (function () {\n    function HelperMethods() {\n    }\n    /**\n     * Inserts text at specified index in string.\n     *\n     * @private\n     * @param {string} spanText - Specifies the span text.\n     * @param {number} index - Specifies the index\n     * @param {string} text - Specifies the text\n     * @returns {string} - Returns modified string\n     */\n    HelperMethods.insert = function (spanText, index, text) {\n        if (index >= 0) {\n            return [spanText.slice(0, index) + text + spanText.slice(index)].join('');\n        }\n        else {\n            return text + this;\n        }\n    };\n    /**\n     * @private\n     * @param text\n     * @returns\n     */\n    HelperMethods.replaceSpecialChars = function (text) {\n        text = text.replace(\"^[\\\\s]*\", '');\n        text = text.replace(\"^[#@!~\\\\$%^&\\\\*\\\\(\\\\)\\\\-_\\\\+\\\\.=\\\\{\\\\}\\\\[\\\\]:;,<>\\\\?'\\\\\\\\\\\"\\\\“\\\\”\\\\//0123456789]+\", '');\n        text = text.replace(\"[#@!~\\\\$%^&\\\\*\\\\(\\\\)\\\\-_\\\\+\\\\.=\\\\{\\\\}\\\\[\\\\]:;,<>\\\\?'\\\\\\\\\\\"\\\\“\\\\”\\\\//0123456789]+$\", '');\n        return text;\n    };\n    /**\n     * @private\n     * @param text\n     * @returns\n     */\n    HelperMethods.getSpellCheckData = function (text) {\n        text = text.replace('\\r\\n', ' ');\n        text = text.replace('\\n', ' ');\n        text = text.replace('\\r', ' ');\n        text = text.replace('\\v', ' ');\n        text = text.replace('\\t', ' ');\n        text = text.replace('/', ' ');\n        var stringarr = text.split(' ');\n        var spellColl = [];\n        for (var _i = 0, stringarr_1 = stringarr; _i < stringarr_1.length; _i++) {\n            var str = stringarr_1[_i];\n            var spellInfo = {};\n            spellInfo.Text = this.replaceSpecialChars(str);\n            spellInfo.HasSpellError = false;\n            spellColl.push(spellInfo);\n        }\n        return spellColl;\n    };\n    /**\n     * Check given string is a valid either roman or arabic number\n     * @private\n     * @param {string} input input string value to check if it is a number\n     * @returns {boolean} weather given string is a number or not\n     */\n    HelperMethods.checkTextFormat = function (input) {\n        // Regular expression patterns for Roman and Arabic numerals\n        var romanPattern = /^(M{0,3})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/i;\n        var arabicPattern = /^[0-9]+$/;\n        // Check if the input matches either pattern\n        if (romanPattern.test(input) || arabicPattern.test(input)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * Sanitize the string for xss string content\n     * @param value\n     * @returns\n     */\n    HelperMethods.sanitizeString = function (value) {\n        if (isNullOrUndefined(value))\n            return '';\n        var sanitizedContent = SanitizeHtmlHelper.sanitize(value)\n            .replace(/&amp;/g, '&')\n            .replace(/&nbsp;/g, String.fromCharCode(160))\n            .replace(/&gt;/g, '>')\n            .replace(/&lt;/g, '<');\n        return sanitizedContent;\n    };\n    /**\n     * @private\n     * Get the SFDT document from the optimized SFDT.\n     * @param json\n     * @returns\n     */\n    HelperMethods.getSfdtDocument = function (json) {\n        json = (json instanceof Object) ? json : JSON.parse(json);\n        if (!isNullOrUndefined(json.sfdt)) {\n            var zipArchive = new ZipArchive();\n            zipArchive.open(JSON.stringify(json.sfdt));\n            var zipItem = zipArchive.items[0];\n            var value = new Uint8Array(zipItem.data);\n            var str = new TextDecoder(\"utf-8\").decode(value);\n            json = JSON.parse(str);\n        }\n        // json = JSON.parse(this.sanitizeString(JSON.stringify(json)));\n        return json;\n    };\n    /**\n     * @private\n     * Generates a unique unique hexadecimal ID.\n     * @returns\n     */\n    HelperMethods.generateUniqueId = function (lists, abstractLists) {\n        var isAbstractList = !isNullOrUndefined(abstractLists) ? true : false;\n        var randomNumber = Math.floor(Math.random() * 100000000);\n        if (isAbstractList) {\n            return this.isSameListIDExists(randomNumber, undefined, abstractLists, isAbstractList) ? this.generateUniqueId(undefined, abstractLists) : randomNumber;\n        }\n        else {\n            return this.isSameListIDExists(randomNumber, lists) ? this.generateUniqueId(lists) : randomNumber;\n        }\n    };\n    /**\n     * @private\n     */\n    HelperMethods.isSameListIDExists = function (nsid, lists, abstractLists, isAbstractList) {\n        if (isAbstractList) {\n            for (var i = 0; i < abstractLists.length; i++) {\n                var abstractList = abstractLists[parseInt(i.toString(), 10)];\n                if (nsid == abstractList.nsid) {\n                    return true;\n                }\n            }\n        }\n        else {\n            for (var j = 0; j < lists.length; j++) {\n                var list = lists[parseInt(j.toString(), 10)];\n                if (nsid == list.nsid) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /* eslint-enable */\n    /**\n     * Removes text from specified index in string.\n     *\n     * @private\n     * @param {string} text - Specifies the text\n     * @param {number} index - Specifies the index\n     * @returns {string} - Returns modified string\n     */\n    HelperMethods.remove = function (text, index) {\n        if (index === 0) {\n            return text.substring(index + 1, text.length);\n        }\n        else {\n            return text.substring(0, index) + text.substring(index + 1, text.length);\n        }\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    HelperMethods.indexOfAny = function (text, wordSplitCharacter) {\n        var index = undefined;\n        for (var j = 0; j < wordSplitCharacter.length; j++) {\n            var temp = text.indexOf(wordSplitCharacter[parseInt(j.toString(), 10)]);\n            if (temp !== -1 && isNullOrUndefined(index)) {\n                index = temp;\n            }\n            else if (temp !== -1 && temp < index) {\n                index = temp;\n            }\n        }\n        return isNullOrUndefined(index) ? -1 : index;\n    };\n    HelperMethods.lastIndexOfAny = function (text, wordSplitCharacter) {\n        for (var i = text.length - 1; i >= 0; i--) {\n            for (var j = 0; j <= wordSplitCharacter.length - 1; j++) {\n                if (text[parseInt(i.toString(), 10)] === wordSplitCharacter[parseInt(j.toString(), 10)]) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * Convert ARGB to RGB\n     * @private\n     * @param {string} color\n     * @returns {string}\n     */\n    HelperMethods.convertArgbToRgb = function (color) {\n        if (color.length >= 8) {\n            return color.substr(0, 6);\n        }\n        return color;\n    };\n    HelperMethods.convertRgbToHex = function (val) {\n        var hex = Number(val).toString(16);\n        if (hex.length < 2) {\n            hex = '0' + hex;\n        }\n        return hex;\n    };\n    // public static convertPointsToCentimetre(val: number): number {\n    //     return val/28.34644;\n    // }\n    // public static convertCentimetreToPoints(val: number): number {\n    //     return val*28.34644;\n    // }\n    /**\n     * @private\n     */\n    HelperMethods.getNumberFromString = function (input) {\n        var numbers = [];\n        var currentNumber = \"\";\n        for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {\n            var char = input_1[_i];\n            if (/\\d|\\./.test(char)) {\n                currentNumber += char;\n            }\n            else if (currentNumber) {\n                numbers.push(parseFloat(currentNumber));\n                currentNumber = \"\";\n            }\n        }\n        if (currentNumber) {\n            numbers.push(parseFloat(currentNumber));\n        }\n        return parseFloat(numbers.join(''));\n    };\n    HelperMethods.convertHexToRgb = function (colorCode) {\n        var r;\n        var g;\n        var b;\n        if (colorCode) {\n            colorCode = colorCode.replace(/[^0-9A-â€Œâ€‹F]/gi, ''); // To remove # from color code string.\n            var colCodeNo = parseInt(colorCode, 16);\n            if (colorCode.length === 8) {\n                r = (colCodeNo >> 32) & 255;\n                g = (colCodeNo >> 16) & 255;\n                b = (colCodeNo >> 8) & 255;\n            }\n            else if (colorCode.length === 6) {\n                r = (colCodeNo >> 16) & 255;\n                g = (colCodeNo >> 8) & 255;\n                b = colCodeNo & 255;\n            }\n            return { 'r': r, 'g': g, 'b': b };\n        }\n        return undefined;\n    };\n    HelperMethods.addCssStyle = function (css) {\n        var style = document.createElement('style');\n        if (style.style.cssText) {\n            style.style.cssText = css;\n        }\n        else {\n            style.appendChild(document.createTextNode(css));\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    };\n    /**\n     * @private\n     */\n    HelperMethods.convertNodeListToArray = function (nodeList) {\n        var array = [];\n        if (!isNullOrUndefined(nodeList)) {\n            for (var i = 0; i < nodeList.length; i++) {\n                array.push(nodeList[parseInt(i.toString(), 10)]);\n            }\n        }\n        return array;\n    };\n    HelperMethods.getHighlightColorCode = function (highlightColor) {\n        var color = '#ffffff';\n        switch (highlightColor) {\n            case 'Yellow':\n                color = '#ffff00';\n                break;\n            case 'BrightGreen':\n                color = '#00ff00';\n                break;\n            case 'Turquoise':\n                color = '#00ffff';\n                break;\n            case 'Pink':\n                color = '#ff00ff';\n                break;\n            case 'Blue':\n                color = '#0000ff';\n                break;\n            case 'Red':\n                color = '#ff0000';\n                break;\n            case 'DarkBlue':\n                color = '#000080';\n                break;\n            case 'Teal':\n                color = '#008080';\n                break;\n            case 'Green':\n                color = '#008000';\n                break;\n            case 'Violet':\n                color = '#800080';\n                break;\n            case 'DarkRed':\n                color = '#800000';\n                break;\n            case 'DarkYellow':\n                color = '#808000';\n                break;\n            case 'Gray50':\n                color = '#808080';\n                break;\n            case 'Gray25':\n                color = '#c0c0c0';\n                break;\n            case 'Black':\n                color = '#000000';\n                break;\n        }\n        return color;\n    };\n    HelperMethods.isVeryDark = function (backColor) {\n        var backgroundColor = backColor.substring(1);\n        var r = parseInt(backgroundColor.substr(0, 2), 16);\n        var g = parseInt(backgroundColor.substr(2, 2), 16);\n        var b = parseInt(backgroundColor.substr(4, 2), 16);\n        var contrast = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n        return contrast <= 60;\n    };\n    HelperMethods.getColor = function (color) {\n        if (color.length > 0) {\n            if (color[0] === '#') {\n                if (color.length > 7) {\n                    return color.substr(0, 7);\n                }\n            }\n        }\n        return color;\n    };\n    HelperMethods.getTextVerticalAlignment = function (textVerticalAlignment) {\n        switch (textVerticalAlignment) {\n            case 0:\n                return 'Top';\n            case 1:\n                return 'Center';\n            case 2:\n                return 'Bottom';\n            default:\n                return textVerticalAlignment;\n        }\n    };\n    HelperMethods.convertPointToPixel = function (point) {\n        point = HelperMethods.round(point, 5);\n        var pixel = HelperMethods.round((point * 96 / 72), 5);\n        return pixel;\n    };\n    HelperMethods.convertPixelToPoint = function (pixel) {\n        var point = HelperMethods.round((pixel * 72 / 96), 5);\n        return point;\n    };\n    HelperMethods.isLinkedFieldCharacter = function (inline) {\n        if (inline instanceof FieldElementBox && inline.fieldType === 0) {\n            return !isNullOrUndefined(inline.fieldEnd);\n        }\n        else if (inline instanceof FieldElementBox && inline.fieldType === 2) {\n            return !isNullOrUndefined(inline.fieldBegin) && !isNullOrUndefined(inline.fieldEnd);\n        }\n        else {\n            return !isNullOrUndefined(inline.fieldBegin);\n        }\n    };\n    /**\n     * Removes white space in a string.\n     *\n     * @private\n     * @param {string} text - Specifies text to trim.\n     * @returns {string} - Returns modified text.\n     */\n    HelperMethods.removeSpace = function (text) {\n        if (!isNullOrUndefined(text) && text.length !== 0) {\n            for (var i = 0; i < text.length; i++) {\n                if (text.charAt(i) === ' ') {\n                    //replace the space by empty string in string\n                    text = text.replace(' ', '');\n                }\n            }\n        }\n        return text;\n    };\n    /**\n     * Trims white space at start of the string.\n     *\n     * @private\n     * @param {string} text - Specifies text to trim.\n     * @returns {string} - Returns modified text.\n     */\n    HelperMethods.trimStart = function (text) {\n        var i = 0;\n        for (i; i < text.length; i++) {\n            if (text[parseInt(i.toString(), 10)] !== ' ') {\n                break;\n            }\n        }\n        return text.substring(i, text.length);\n    };\n    /**\n     * Trims white space at end of the string.\n     *\n     * @private\n     * @param {string} text - Specifies text to trim.\n     * @returns {string} - Returns modified text.\n     */\n    HelperMethods.trimEnd = function (text) {\n        var i = text.length - 1;\n        for (i; i >= 0; i--) {\n            if (text[parseInt(i.toString(), 10)] !== ' ') {\n                break;\n            }\n        }\n        return text.substring(0, i + 1);\n    };\n    /**\n     * Checks whether string ends with whitespace.\n     *\n     * @private\n     * @param {string} text - Specifies the text.\n     * @returns {boolean} - Returns true if text ends with specified text.\n     */\n    HelperMethods.endsWith = function (text) {\n        if (!isNullOrUndefined(text) && text.length !== 0) {\n            return text[text.length - 1] === ' ';\n        }\n        return false;\n    };\n    HelperMethods.addSpace = function (length) {\n        var str = '';\n        if (length > 0) {\n            for (var i = 0; i < length; i++) {\n                str += ' ';\n            }\n        }\n        return str;\n    };\n    HelperMethods.getBoolValue = function (value) {\n        return value ? 1 : 0;\n    };\n    HelperMethods.getBoolInfo = function (value, keywordIndex) {\n        if (keywordIndex === 1) {\n            return this.getBoolValue(value);\n        }\n        else {\n            return value;\n        }\n    };\n    HelperMethods.parseBoolValue = function (value) {\n        if (value instanceof String) {\n            if (isNullOrUndefined(value) || value === \"f\" || value === \"0\" || value === \"off\" || value === \"false\") {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            if (value == 1) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    HelperMethods.getBaselineAlignmentEnumValue = function (baselineAlignment) {\n        switch (baselineAlignment) {\n            case 'Normal':\n                return 0;\n            case 'Superscript':\n                return 1;\n            case 'Subscript':\n                return 2;\n        }\n    };\n    HelperMethods.getUnderlineEnumValue = function (underline) {\n        switch (underline) {\n            case 'None':\n                return 0;\n            case 'Single':\n                return 1;\n            case 'Words':\n                return 2;\n            case 'Double':\n                return 3;\n            case 'Dotted':\n                return 4;\n            case 'Thick':\n                return 5;\n            case 'Dash':\n                return 6;\n            case 'DashLong':\n                return 7;\n            case 'DotDash':\n                return 8;\n            case 'DotDotDash':\n                return 9;\n            case 'Wavy':\n                return 10;\n            case 'DottedHeavy':\n                return 11;\n            case 'DashHeavy':\n                return 12;\n            case 'DashLongHeavy':\n                return 13;\n            case 'DotDashHeavy':\n                return 14;\n            case 'DotDotDashHeavy':\n                return 15;\n            case 'WavyHeavy':\n                return 16;\n            case 'WavyDouble':\n                return 17;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getStrikeThroughEnumValue = function (strikethrough) {\n        switch (strikethrough) {\n            case 'None':\n                return 0;\n            case 'SingleStrike':\n                return 1;\n            case 'DoubleStrike':\n                return 2;\n        }\n    };\n    HelperMethods.getHighlightColorEnumValue = function (highlightColor) {\n        switch (highlightColor) {\n            case 'NoColor':\n                return 0;\n            case 'Yellow':\n                return 1;\n            case 'BrightGreen':\n                return 2;\n            case 'Turquoise':\n                return 3;\n            case 'Pink':\n                return 4;\n            case 'Blue':\n                return 5;\n            case 'Red':\n                return 6;\n            case 'DarkBlue':\n                return 7;\n            case 'Teal':\n                return 8;\n            case 'Green':\n                return 9;\n            case 'Violet':\n                return 10;\n            case 'DarkRed':\n                return 11;\n            case 'DarkYellow':\n                return 12;\n            case 'Gray50':\n                return 13;\n            case 'Gray25':\n                return 14;\n            case 'Black':\n                return 15;\n        }\n    };\n    HelperMethods.getBiDirectionalOverride = function (biDirectionalOverride) {\n        switch (biDirectionalOverride) {\n            case 'None':\n                return 0;\n            case 'LTR':\n                return 1;\n            case 'RTL':\n                return 2;\n        }\n    };\n    HelperMethods.getBreakClearType = function (breakClearType) {\n        switch (breakClearType) {\n            case 'None':\n                return 0;\n            case 'Left':\n                return 1;\n            case 'Right':\n                return 2;\n            case 'All':\n                return 3;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getOutlineLevelEnumValue = function (outlineLevel) {\n        switch (outlineLevel) {\n            case 'BodyText':\n                return 0;\n            case 'Level1':\n                return 1;\n            case 'Level2':\n                return 2;\n            case 'Level3':\n                return 3;\n            case 'Level4':\n                return 4;\n            case 'Level5':\n                return 5;\n            case 'Level6':\n                return 6;\n            case 'Level7':\n                return 7;\n            case 'Level8':\n                return 8;\n            case 'Level9':\n                return 9;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getTextAlignmentEnumValue = function (textAlignment) {\n        switch (textAlignment) {\n            case 'Left':\n                return 0;\n            case 'Center':\n                return 1;\n            case 'Right':\n                return 2;\n            case 'Justify':\n                return 3;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getLineStyleEnumValue = function (lineStyle) {\n        switch (lineStyle) {\n            case 'Single':\n                return 0;\n            case 'None':\n                return 1;\n            case 'Dot':\n                return 2;\n            case 'DashSmallGap':\n                return 3;\n            case 'DashLargeGap':\n                return 4;\n            case 'DashDot':\n                return 5;\n            case 'DashDotDot':\n                return 6;\n            case 'Double':\n                return 7;\n            case 'Triple':\n                return 8;\n            case 'ThinThickSmallGap':\n                return 9;\n            case 'ThickThinSmallGap':\n                return 10;\n            case 'ThinThickThinSmallGap':\n                return 11;\n            case 'ThinThickMediumGap':\n                return 12;\n            case 'ThickThinMediumGap':\n                return 13;\n            case 'ThinThickThinMediumGap':\n                return 14;\n            case 'ThinThickLargeGap':\n                return 15;\n            case 'ThickThinLargeGap':\n                return 16;\n            case 'ThinThickThinLargeGap':\n                return 17;\n            case 'SingleWavy':\n                return 18;\n            case 'DoubleWavy':\n                return 19;\n            case 'DashDotStroked':\n                return 20;\n            case 'Emboss3D':\n                return 21;\n            case 'Engrave3D':\n                return 22;\n            case 'Outset':\n                return 23;\n            case 'Inset':\n                return 24;\n            case 'Thick':\n                return 25;\n            case 'Cleared':\n                return 26;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getLineSpacingTypeEnumValue = function (lineSpacing) {\n        switch (lineSpacing) {\n            case 'Multiple':\n                return 0;\n            case 'AtLeast':\n                return 1;\n            case 'Exactly':\n                return 2;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.writeBorder = function (wBorder, keywordIndex) {\n        var border = {};\n        border[colorProperty[keywordIndex]] = wBorder.hasValue('color') ? wBorder.color : undefined;\n        border[hasNoneStyleProperty[keywordIndex]] = wBorder.hasValue('hasNoneStyle') ? HelperMethods.getBoolInfo(wBorder.hasNoneStyle, keywordIndex) : undefined;\n        border[lineStyleProperty[keywordIndex]] = wBorder.hasValue('lineStyle') ?\n            keywordIndex == 1 ? this.getLineStyleEnumValue(wBorder.lineStyle) : wBorder.lineStyle : undefined;\n        border[lineWidthProperty[keywordIndex]] = wBorder.hasValue('lineWidth') ? wBorder.lineWidth : undefined;\n        border[shadowProperty[keywordIndex]] = wBorder.hasValue('shadow') ? HelperMethods.getBoolInfo(wBorder.shadow, keywordIndex) : undefined;\n        border[spaceProperty[keywordIndex]] = wBorder.hasValue('space') ? wBorder.space : undefined;\n        return border;\n    };\n    /* eslint-disable */\n    HelperMethods.writeBorders = function (wBorders, keywordIndex) {\n        var borders = {};\n        borders[topProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('top'), keywordIndex);\n        borders[leftProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('left'), keywordIndex);\n        borders[rightProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('right'), keywordIndex);\n        borders[bottomProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('bottom'), keywordIndex);\n        borders[horizontalProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('horizontal'), keywordIndex);\n        borders[verticalProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('vertical'), keywordIndex);\n        return borders;\n    };\n    /* eslint-disable */\n    HelperMethods.writeParagraphFormat = function (paragraphFormat, isInline, format, keywordIndex) {\n        keywordIndex = isNullOrUndefined(keywordIndex) ? 0 : keywordIndex;\n        paragraphFormat[bordersProperty[keywordIndex]] = this.writeBorders(format.borders, keywordIndex);\n        paragraphFormat[leftIndentProperty[keywordIndex]] = isInline ? format.leftIndent : format.getValue('leftIndent');\n        paragraphFormat[rightIndentProperty[keywordIndex]] = isInline ? format.rightIndent : format.getValue('rightIndent');\n        paragraphFormat[firstLineIndentProperty[keywordIndex]] = isInline ? format.firstLineIndent : format.getValue('firstLineIndent');\n        paragraphFormat[textAlignmentProperty[keywordIndex]] = isInline ?\n            keywordIndex == 1 ? this.getTextAlignmentEnumValue(format.textAlignment) : format.textAlignment :\n            keywordIndex == 1 ? this.getTextAlignmentEnumValue(format.getValue('textAlignment')) : format.getValue('textAlignment');\n        paragraphFormat[beforeSpacingProperty[keywordIndex]] = isInline ? format.beforeSpacing : format.getValue('beforeSpacing');\n        paragraphFormat[afterSpacingProperty[keywordIndex]] = isInline ? format.afterSpacing : format.getValue('afterSpacing');\n        paragraphFormat[spaceBeforeAutoProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.spaceBeforeAuto, keywordIndex) : format.getValue('spaceBeforeAuto');\n        paragraphFormat[spaceAfterAutoProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.spaceAfterAuto, keywordIndex) : format.getValue('spaceAfterAuto');\n        paragraphFormat[lineSpacingProperty[keywordIndex]] = isInline ? format.lineSpacing : format.getValue('lineSpacing');\n        paragraphFormat[lineSpacingTypeProperty[keywordIndex]] = isInline ?\n            keywordIndex == 1 ? this.getLineSpacingTypeEnumValue(format.lineSpacingType) : format.lineSpacingType :\n            keywordIndex == 1 ? this.getLineSpacingTypeEnumValue(format.getValue('lineSpacingType')) : format.getValue('lineSpacingType');\n        paragraphFormat[styleNameProperty[keywordIndex]] = !isNullOrUndefined(format.baseStyle) ? format.baseStyle.name : undefined;\n        paragraphFormat[outlineLevelProperty[keywordIndex]] = isInline ?\n            keywordIndex == 1 ? this.getOutlineLevelEnumValue(format.outlineLevel) : format.outlineLevel :\n            keywordIndex == 1 ? this.getOutlineLevelEnumValue(format.getValue('outlineLevel')) : format.getValue('outlineLevel');\n        paragraphFormat[bidiProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.bidi, keywordIndex) : format.getValue('bidi');\n        paragraphFormat[keepLinesTogetherProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.keepLinesTogether, keywordIndex) : format.getValue('keepLinesTogether');\n        paragraphFormat[keepWithNextProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.keepWithNext, keywordIndex) : format.getValue('keepWithNext');\n        paragraphFormat[contextualSpacingProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.contextualSpacing, keywordIndex) : format.getValue('contextualSpacing');\n        paragraphFormat[widowControlProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.widowControl, keywordIndex) : format.getValue('widowControl');\n    };\n    /* eslint-disable */\n    HelperMethods.writeCharacterFormat = function (characterFormat, isInline, format, keywordIndex, isWriteAllValues) {\n        keywordIndex = isNullOrUndefined(keywordIndex) ? 0 : keywordIndex;\n        characterFormat[boldProperty[keywordIndex]] = isWriteAllValues ? HelperMethods.getBoolInfo(format.bold, keywordIndex) : isInline ? HelperMethods.getBoolInfo(format.bold, keywordIndex) : format.getValue('bold');\n        characterFormat[italicProperty[keywordIndex]] = isWriteAllValues ? HelperMethods.getBoolInfo(format.italic, keywordIndex) : isInline ? HelperMethods.getBoolInfo(format.italic, keywordIndex) : format.getValue('italic');\n        characterFormat[fontSizeProperty[keywordIndex]] = isWriteAllValues ? format.fontSize : isInline ? this.toWriteInline(format, 'fontSize') : format.getValue('fontSize');\n        characterFormat[fontFamilyProperty[keywordIndex]] = isWriteAllValues ? format.fontFamily : isInline ? this.toWriteInline(format, 'fontFamily') : format.getValue('fontFamily');\n        characterFormat[underlineProperty[keywordIndex]] = isWriteAllValues ? format.underline : isInline ?\n            keywordIndex == 1 ? HelperMethods.getUnderlineEnumValue(format.underline) : format.underline :\n            keywordIndex == 1 ? HelperMethods.getUnderlineEnumValue(format.getValue('underline')) : format.getValue('underline');\n        characterFormat[strikethroughProperty[keywordIndex]] = isWriteAllValues ? format.strikethrough : isInline ?\n            keywordIndex == 1 ? HelperMethods.getStrikeThroughEnumValue(format.strikethrough) : (format.strikethrough) :\n            keywordIndex == 1 ? HelperMethods.getStrikeThroughEnumValue(format.getValue('strikethrough')) : format.getValue('strikethrough');\n        characterFormat[baselineAlignmentProperty[keywordIndex]] = isWriteAllValues ? format.baselineAlignment : isInline ?\n            keywordIndex == 1 ? HelperMethods.getBaselineAlignmentEnumValue(format.baselineAlignment) : (format.baselineAlignment) :\n            keywordIndex == 1 ? HelperMethods.getBaselineAlignmentEnumValue(format.getValue('baselineAlignment')) : format.getValue('baselineAlignment');\n        characterFormat[highlightColorProperty[keywordIndex]] = isWriteAllValues ? format.highlightColor : isInline ?\n            keywordIndex == 1 ? HelperMethods.getHighlightColorEnumValue(format.highlightColor) : (format.highlightColor) :\n            keywordIndex == 1 ? HelperMethods.getHighlightColorEnumValue(format.getValue('highlightColor')) : format.getValue('highlightColor');\n        characterFormat[fontColorProperty[keywordIndex]] = isWriteAllValues ? format.fontColor : isInline ? this.toWriteInline(format, 'fontColor') : format.getValue('fontColor');\n        characterFormat[styleNameProperty[keywordIndex]] = !isNullOrUndefined(format.baseCharStyle) ? format.baseCharStyle.name : undefined;\n        characterFormat[bidiProperty[keywordIndex]] = isWriteAllValues ? format.bidi : isInline ? HelperMethods.getBoolInfo(format.bidi, keywordIndex) : format.getValue('bidi');\n        characterFormat[bdoProperty[keywordIndex]] = isWriteAllValues ? format.bdo : isInline ?\n            keywordIndex == 1 ? HelperMethods.getBiDirectionalOverride(format.bdo) : (format.bdo) :\n            keywordIndex == 1 ? HelperMethods.getBiDirectionalOverride(format.getValue('bdo')) : format.getValue('bdo');\n        characterFormat[boldBidiProperty[keywordIndex]] = isWriteAllValues ? format.boldBidi : isInline ? HelperMethods.getBoolInfo(format.boldBidi, keywordIndex) : format.getValue('boldBidi');\n        characterFormat[italicBidiProperty[keywordIndex]] = isWriteAllValues ? format.italicBidi : isInline ? HelperMethods.getBoolInfo(format.italicBidi, keywordIndex) : format.getValue('italicBidi');\n        characterFormat[fontSizeBidiProperty[keywordIndex]] = isWriteAllValues ? format.fontSizeBidi : isInline ? format.fontSizeBidi : format.getValue('fontSizeBidi');\n        characterFormat[fontFamilyBidiProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyBidi : isInline ? format.fontFamilyBidi : format.getValue('fontFamilyBidi');\n        characterFormat[allCapsProperty[keywordIndex]] = isWriteAllValues ? format.allCaps : isInline ? HelperMethods.getBoolInfo(format.allCaps, keywordIndex) : format.getValue('allCaps');\n        characterFormat[localeIdBidiProperty[keywordIndex]] = isWriteAllValues ? format.localeIdBidi : isInline ? format.localeIdBidi : format.getValue('localeIdBidi');\n        characterFormat[localeIdProperty[keywordIndex]] = isWriteAllValues ? format.localeIdBidi : isInline ? format.localeIdAscii : format.getValue('localeIdAscii');\n        characterFormat[complexScriptProperty[keywordIndex]] = isWriteAllValues ? format.complexScript : isInline ? HelperMethods.getBoolInfo(format.complexScript, keywordIndex) : format.getValue('complexScript');\n        characterFormat[fontFamilyAsciiProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyAscii : isInline ? this.toWriteInline(format, 'fontFamilyAscii') : format.getValue('fontFamilyAscii');\n        characterFormat[fontFamilyNonFarEastProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyNonFarEast : isInline ? this.toWriteInline(format, 'fontFamilyNonFarEast') : format.getValue('fontFamilyNonFarEast');\n        characterFormat[fontFamilyFarEastProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyFarEast : isInline ? this.toWriteInline(format, 'fontFamilyFarEast') : format.getValue('fontFamilyFarEast');\n        characterFormat[characterSpacingProperty[keywordIndex]] = isWriteAllValues ? format.characterSpacing : isInline ? this.toWriteInline(format, 'characterSpacing') : format.getValue('characterSpacing');\n        characterFormat[scalingProperty[keywordIndex]] = isWriteAllValues ? format.scaling : isInline ? this.toWriteInline(format, 'scaling') : format.getValue('scaling');\n        if (format.hasValue('fontFamily') || isWriteAllValues) {\n            if (isNullOrUndefined(characterFormat[fontFamilyAsciiProperty[keywordIndex]])) {\n                characterFormat[fontFamilyAsciiProperty[keywordIndex]] = format.fontFamily;\n            }\n            if (isNullOrUndefined(characterFormat[fontFamilyNonFarEastProperty[keywordIndex]])) {\n                characterFormat[fontFamilyNonFarEastProperty[keywordIndex]] = format.fontFamily;\n            }\n            if (isNullOrUndefined(characterFormat[fontFamilyFarEastProperty[keywordIndex]])) {\n                characterFormat[fontFamilyFarEastProperty[keywordIndex]] = format.fontFamily;\n            }\n        }\n    };\n    /// <summary>\n    /// To check whether the font name is theme font or not.\n    /// </summary>\n    /// <param name=\"fontName\">Specify the font name.</param>\n    /// <returns>Returns true if the font name is represent a theme font.</returns>\n    HelperMethods.isThemeFont = function (fontName) {\n        return (fontName == \"majorAscii\" || fontName == \"majorBidi\" || fontName == \"majorEastAsia\"\n            || fontName == \"majorHAnsi\" || fontName == \"minorAscii\" || fontName == \"minorBidi\" || fontName == \"minorEastAsia\"\n            || fontName == \"minorHAnsi\");\n    };\n    HelperMethods.toWriteInline = function (format, propertyName) {\n        if (!isNullOrUndefined(format.ownerBase) && (format.ownerBase instanceof ElementBox)) {\n            return format.hasValue(propertyName) ? format[propertyName] : format.getValue(propertyName);\n        }\n        else {\n            return format[propertyName];\n        }\n    };\n    /* eslint-enable */\n    HelperMethods.round = function (value, decimalDigits) {\n        var temp = value;\n        for (var i = 0; i < decimalDigits; i++) {\n            temp = temp * 10;\n        }\n        temp = Math.round(temp);\n        for (var i = 0; i < decimalDigits; i++) {\n            temp = temp / 10;\n        }\n        return temp;\n    };\n    /* eslint-disable  */\n    HelperMethods.removeInvalidXmlChars = function (text) {\n        // From xml spec valid chars:\n        // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n        // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n        // and used unicodes in DocumentEditor \\f | \\v | \\r | \\u000E\n        var invalidXMLChars = /[^\\x09\\x0A\\x0C\\x0D\\v\\f\\r\\u000E\\x20-\\uD7FF\\uE000-\\uFFFD\\u{10000}-\\u{10FFFF}]/ug;\n        return text.replace(invalidXMLChars, '');\n    };\n    HelperMethods.reverseString = function (text) {\n        if (!isNullOrUndefined(text) && text !== '') {\n            // return a new array\n            var splitString = text.split('');\n            // reverse the new created array\n            var reverseString = splitString.reverse();\n            // join all elements of the array into a string\n            text = reverseString.join('');\n        }\n        return text;\n    };\n    HelperMethods.formatClippedString = function (base64ImageString) {\n        var extension = '';\n        var formatClippedString = '';\n        if (this.startsWith(base64ImageString, 'data:image/svg+xml;base64,')) {\n            extension = '.svg';\n            formatClippedString = base64ImageString.replace('data:image/svg+xml;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/svg+xml;utf8,')) {\n            extension = '.svg';\n            formatClippedString = base64ImageString.replace('data:image/svg+xml;utf8,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/bmp;base64,')) {\n            extension = '.bmp';\n            formatClippedString = base64ImageString.replace('data:image/bmp;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/x-emf;base64,')) {\n            extension = '.emf';\n            formatClippedString = base64ImageString.replace('data:image/x-emf;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/exif;base64,')) {\n            extension = '.exif';\n            formatClippedString = base64ImageString.replace('data:image/exif;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/gif;base64,')) {\n            extension = '.gif';\n            formatClippedString = base64ImageString.replace('data:image/gif;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/icon;base64,')) {\n            extension = '.ico';\n            formatClippedString = base64ImageString.replace('data:image/icon;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/jpeg;base64,')) {\n            extension = '.jpeg';\n            formatClippedString = base64ImageString.replace('data:image/jpeg;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/jpg;base64,')) {\n            extension = '.jpg';\n            formatClippedString = base64ImageString.replace('data:image/jpg;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/png;base64,')) {\n            extension = '.png';\n            formatClippedString = base64ImageString.replace('data:image/png;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/tiff;base64,')) {\n            extension = '.tif';\n            formatClippedString = base64ImageString.replace('data:image/tiff;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/x-wmf;base64,')) {\n            extension = '.wmf';\n            formatClippedString = base64ImageString.replace('data:image/x-wmf;base64,', '');\n        }\n        else {\n            extension = '.jpeg';\n        }\n        return { 'extension': extension, 'formatClippedString': formatClippedString };\n    };\n    /**\n     * @private\n     * @param sourceString\n     * @param startString\n     * @returns\n     */\n    HelperMethods.startsWith = function (sourceString, startString) {\n        return startString.length > 0 && sourceString.substring(0, startString.length) === startString;\n    };\n    HelperMethods.formatText = function (format, value) {\n        var text = value;\n        switch (format.toLowerCase()) {\n            case 'uppercase':\n                text = value.toUpperCase();\n                break;\n            case 'lowercase':\n                text = value.toLowerCase();\n                break;\n            case 'firstlower':\n                text = this.lowerFirstChar(value);\n                break;\n            case 'firstcapital':\n                text = this.capitaliseFirst(value, 'FirstCapital');\n                break;\n            case 'titlecase':\n                text = this.capitaliseFirst(value, 'Titlecase');\n                break;\n        }\n        return text;\n    };\n    HelperMethods.formatNumber = function (format, value) {\n        var intl = new Internationalization();\n        var dotData = value.split('.');\n        value = dotData[0];\n        var numberValue = intl.parseNumber(value);\n        if (value.toString() === 'NaN') {\n            return '';\n        }\n        if (format === '') {\n            format = '0';\n        }\n        var numberFormat = { format: format };\n        return intl.formatNumber(numberValue, numberFormat);\n    };\n    HelperMethods.formatDate = function (format, value) {\n        var intl = new Internationalization();\n        var date = new Date(value);\n        if (isNaN(date.getDate())) {\n            return '';\n        }\n        if (format === '') {\n            return value;\n        }\n        if (format.indexOf('am/pm') !== -1) {\n            format = format.replace(/am\\/pm/gi, 'a');\n        }\n        var dateFormat = { 'format': format };\n        return intl.formatDate(date, dateFormat);\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    HelperMethods.capitaliseFirst = function (value, type, splitBy) {\n        var text = '';\n        if (type === 'Titlecase') {\n            var valArry = splitBy ? value.split(splitBy) : value.split(' ');\n            for (var i = 0; i < valArry.length; i++) {\n                /* eslint-disable-next-line max-len */\n                text += splitBy ? valArry[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + valArry[parseInt(i.toString(), 10)].slice(1, valArry[parseInt(i.toString(), 10)].length) : this.capitaliseFirstInternal(valArry[parseInt(i.toString(), 10)]);\n                if (valArry.length >= 0 && !splitBy) {\n                    text += ' ';\n                }\n            }\n            if (!splitBy) {\n                text = this.capitaliseFirst(text, 'Titlecase', '\\r');\n            }\n        }\n        else if (type === 'FirstCapital') {\n            text = this.capitaliseFirstInternal(value);\n        }\n        return text;\n    };\n    HelperMethods.lowerFirstChar = function (value) {\n        return (value.charAt(0).toLowerCase() + value.slice(1, value.length));\n    };\n    HelperMethods.capitaliseFirstInternal = function (value) {\n        return (value.charAt(0).toUpperCase() + value.slice(1, value.length).toLowerCase());\n    };\n    HelperMethods.getModifiedDate = function (date) {\n        var modifiedDate = HelperMethods.getLocaleDate(date);\n        var dateString = modifiedDate.toLocaleDateString([], { year: 'numeric', month: 'long', day: 'numeric' });\n        var time = modifiedDate.toLocaleTimeString([], { hour: 'numeric', minute: 'numeric' });\n        var dateTime = dateString + ' ' + time;\n        return dateTime;\n    };\n    HelperMethods.getUtcDate = function () {\n        var now = new Date();\n        return new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString();\n    };\n    HelperMethods.getLocaleDate = function (date) {\n        var dt = new Date(date);\n        return new Date(dt.getTime() + dt.getTimezoneOffset() * 60000);\n    };\n    HelperMethods.getCompatibilityModeValue = function (compatibilityMode) {\n        var compatValue;\n        switch (compatibilityMode) {\n            case 1:\n                compatValue = '11';\n                break;\n            case 2:\n                compatValue = '12';\n                break;\n            case 3:\n                compatValue = '14';\n                break;\n            default:\n                compatValue = '15';\n                break;\n        }\n        return compatValue;\n    };\n    /**\n     * @private\n     * @returns {string} - Returns the unique id for document editor.\n     */\n    HelperMethods.getUniqueElementId = function () {\n        return 'de_element' + Date.now().toString(36) + Math.random().toString(36).substring(2);\n    };\n    /**\n     * @private\n     * @param element - element to be splitted of space\n     * @param fromStart - weather to removed space from start or end\n     * @returns {Boolean} - is the input element is splitted\n     */\n    /* eslint-disable  */\n    HelperMethods.splitSpaceInTextElementBox = function (element, fromStart) {\n        var elementText = element.text;\n        var emptySpace = \"\";\n        if (fromStart) {\n            while (HelperMethods.startsWith(elementText, \" \")) {\n                emptySpace += ' ';\n                elementText = elementText.substring(1);\n            }\n        }\n        else {\n            while (HelperMethods.endsWith(elementText)) {\n                emptySpace += ' ';\n                elementText = elementText.slice(0, -1);\n            }\n        }\n        if (emptySpace != \"\") {\n            var textBox = new TextElementBox();\n            textBox.characterFormat.copyFormat(element.characterFormat);\n            if (element.revisions.length > 0) {\n                for (var i = 0; i < element.revisions.length; i++) {\n                    var currentRevision = element.revisions[i];\n                    textBox.revisions.push(currentRevision);\n                    var rangeIndex = currentRevision.range.indexOf(element);\n                    if (rangeIndex < 0) {\n                        currentRevision.range.push(textBox);\n                    }\n                    else {\n                        currentRevision.range.splice(rangeIndex + 1, 0, textBox);\n                    }\n                }\n                textBox.isMarkedForRevision = element.isMarkedForRevision;\n            }\n            textBox.line = element.line;\n            var lineChildren = textBox.line.children;\n            if (fromStart) {\n                element.text = emptySpace;\n                textBox.text = elementText;\n            }\n            else {\n                element.text = elementText;\n                textBox.text = emptySpace;\n            }\n            lineChildren.splice(lineChildren.indexOf(element) + 1, 0, textBox);\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getTextIndexAfterWhitespace = function (text, startIndex) {\n        var length = text.length;\n        var index = 0;\n        index = text.indexOf(' ', startIndex) + 1;\n        var nextIndex = index;\n        if (nextIndex === 0 || nextIndex === length) {\n            return nextIndex;\n        }\n        while (text[nextIndex] === ' ') {\n            nextIndex++;\n            if (nextIndex === length) {\n                break;\n            }\n        }\n        return nextIndex;\n    };\n    /**\n     * @private\n     * @param {TextElementBox} textElementBox text element box to split the text based on max text length.\n     * @param {LineWidget} lineWidget  line widget to add the splitted text element box.\n     * @returns {void}\n     */\n    HelperMethods.splitWordByMaxLength = function (textElementBox, lineWidget, isInitialParsing) {\n        var text = textElementBox.text;\n        var index = 0;\n        var textLength = text.length;\n        var maxLength = 90;\n        var splittedText = '';\n        var characterFormat = textElementBox.characterFormat;\n        var revisions = textElementBox.revisions;\n        var spanIndex = lineWidget.children.indexOf(textElementBox);\n        while (index < textLength) {\n            var nextIndex = index + maxLength;\n            if (nextIndex > textLength) {\n                nextIndex = textLength;\n            }\n            var spaceIndex = HelperMethods.getTextIndexAfterWhitespace(text, nextIndex);\n            if (spaceIndex === 0 || spaceIndex > textLength) {\n                spaceIndex = nextIndex;\n            }\n            splittedText = text.substring(index, spaceIndex);\n            if (index === 0) {\n                textElementBox.text = splittedText;\n            }\n            else {\n                var splittedElement = new TextElementBox();\n                splittedElement.text = splittedText;\n                splittedElement.line = lineWidget;\n                splittedElement.characterFormat.copyFormat(characterFormat);\n                if (revisions.length > 0) {\n                    for (var i = 0; i < revisions.length; i++) {\n                        var revision = revisions[i];\n                        splittedElement.revisions.push(revision);\n                        var rangeIndex = revision.range.indexOf(textElementBox);\n                        if (isInitialParsing) {\n                            revision.range.push(splittedElement);\n                        }\n                        else {\n                            if (rangeIndex < 0) {\n                                revision.range.push(splittedElement);\n                            }\n                            else {\n                                revision.range.splice(rangeIndex + 1, 0, splittedElement);\n                            }\n                        }\n                    }\n                }\n                if (isInitialParsing) {\n                    lineWidget.children.push(splittedElement);\n                }\n                else {\n                    lineWidget.children.splice(spanIndex + 1, 0, splittedElement);\n                    spanIndex++;\n                }\n            }\n            index = spaceIndex;\n        }\n    };\n    /**\n     * @private\n     */\n    HelperMethods.wordBefore = '\\\\b';\n    /**\n     * @private\n     */\n    HelperMethods.wordAfter = '\\\\b';\n    /**\n     * @private\n     */\n    HelperMethods.wordSplitCharacters = [' ', ',', '.', ':', ';', '<', '>', '=',\n        '+', '-', '_', '{', '}', '[', ']', '`', '~', '!', '@', '#', '$', '%', '^', '&',\n        '*', '(', ')', '\"', '?', '/', '|', '\\\\', '”', '　', '،', '؟', '؛', '’', '‘'];\n    return HelperMethods;\n}());\nexport { HelperMethods };\n/**\n * @private\n */\nvar Point = /** @class */ (function () {\n    function Point(xPosition, yPosition) {\n        this.xIn = 0;\n        this.yIn = 0;\n        this.xIn = xPosition;\n        this.yIn = yPosition;\n    }\n    Object.defineProperty(Point.prototype, \"x\", {\n        get: function () {\n            return this.xIn;\n        },\n        set: function (value) {\n            this.xIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Point.prototype, \"y\", {\n        get: function () {\n            return this.yIn;\n        },\n        set: function (value) {\n            this.yIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Point.prototype.copy = function (point) {\n        this.xIn = point.xIn;\n        this.yIn = point.yIn;\n    };\n    /**\n     * Destroys the internal objects maintained.\n     *\n     * @returns {void}\n     */\n    Point.prototype.destroy = function () {\n        this.xIn = undefined;\n        this.yIn = undefined;\n    };\n    return Point;\n}());\nexport { Point };\n/**\n * @private\n */\nvar Base64 = /** @class */ (function () {\n    function Base64() {\n        this.keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    }\n    // public method for encoding\n    Base64.prototype.encodeString = function (input) {\n        var output = '';\n        var chr1;\n        var chr2;\n        var chr3;\n        var enc1;\n        var enc2;\n        var enc3;\n        var enc4;\n        var i = 0;\n        input = this.unicodeEncode(input);\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            }\n            else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output +\n                this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) +\n                this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);\n        }\n        return output;\n    };\n    // private method for UTF-8 encoding\n    Base64.prototype.unicodeEncode = function (input) {\n        var tempInput = input.replace(/\\r\\n/g, '\\n');\n        var utftext = '';\n        for (var n = 0; n < tempInput.length; n++) {\n            var c = tempInput.charCodeAt(n);\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            }\n            else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n            else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n        return utftext;\n    };\n    Base64.prototype.decodeString = function (input) {\n        var chr1;\n        var chr2;\n        var chr3;\n        var enc1;\n        var enc2;\n        var enc3;\n        var enc4;\n        var i = 0;\n        var resultIndex = 0;\n        /*let dataUrlPrefix: string = 'data:';*/\n        input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        var totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === this.keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (input.charAt(input.length - 2) === this.keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (totalLength % 1 !== 0) {\n            // totalLength is not an integer, the length does not match a valid\n            // base64 content. That can happen if:\n            // - the input is not a base64 content\n            // - the input is *almost* a base64 content, with a extra chars at the\n            // beginning or at the end\n            // - the input uses a base64 variant (base64url for example)\n            throw new Error('Invalid base64 input, bad content length.');\n        }\n        var output = new Uint8Array(totalLength | 0);\n        while (i < input.length) {\n            enc1 = this.keyStr.indexOf(input.charAt(i++));\n            enc2 = this.keyStr.indexOf(input.charAt(i++));\n            enc3 = this.keyStr.indexOf(input.charAt(i++));\n            enc4 = this.keyStr.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output[resultIndex++] = chr1;\n            if (enc3 !== 64) {\n                output[resultIndex++] = chr2;\n            }\n            if (enc4 !== 64) {\n                output[resultIndex++] = chr3;\n            }\n        }\n        return output;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Base64.prototype.destroy = function () {\n        this.keyStr = undefined;\n    };\n    return Base64;\n}());\nexport { Base64 };\n/**\n * @private\n */\nvar WrapPosition = /** @class */ (function () {\n    function WrapPosition(x, width) {\n        this.x = 0;\n        this.width = 0;\n        this.x = x;\n        this.width = width;\n    }\n    Object.defineProperty(WrapPosition.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return WrapPosition;\n}());\nexport { WrapPosition };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}