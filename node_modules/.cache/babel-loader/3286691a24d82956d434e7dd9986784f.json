{"ast":null,"code":"import { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';\n/**\n *  Class which performs optimized text measuring logic to find font height.\n */\nvar Optimized = /** @class */function () {\n  /**\n   * Constructor to initialize Optimized module.\n   *\n   * @param {DocumentHelper} documentHelper - the document helper object.\n   */\n  function Optimized(documentHelper) {\n    this.documentHelper = documentHelper;\n    this.optimizedHeightCollection = {};\n  }\n  Optimized.prototype.getModuleName = function () {\n    return 'Optimized';\n  };\n  /**\n   * Construct key based on the character format.\n   *\n   * @param {WCharacterFormat} characterFormat - the character format to construct key.\n   * @returns {string} - the constructed key.\n   */\n  Optimized.prototype.getkeyFromCharFormat = function (characterFormat) {\n    var formatText = characterFormat.fontFamily.toLocaleLowerCase();\n    if (characterFormat.bold) {\n      formatText += ';' + 'bold';\n    }\n    if (characterFormat.italic) {\n      formatText += ';' + 'italic';\n    }\n    return formatText;\n  };\n  /**\n   * Method to retrieve font information with optimized text measuring logic.\n   *\n   * @param {WCharacterFormat} characterFormat -character format to apply.\n   * @returns {string} - returns font size information.\n   */\n  Optimized.prototype.getFontInfo = function (characterFormat) {\n    var iframe = createElement('iframe');\n    document.body.appendChild(iframe);\n    var innerHtml = '<!DOCTYPE html>' + '<html><head></head>' + '<body>' + '</body>' + '</html>';\n    if (!isNullOrUndefined(iframe.contentDocument)) {\n      iframe.contentDocument.open();\n      iframe.contentDocument.write(innerHtml);\n      iframe.contentDocument.close();\n    }\n    var container = document.createElement('div');\n    container.setAttribute('style', 'position:absolute;top:-1000px;left:-1000px;opacity:0;font-size:0px;line-height:normal;');\n    // constant tested height value for calculating height factor which matches 90% accuracy with GDI+ value.\n    var maxFontHeight = 288;\n    var factor = 1.0 / window.devicePixelRatio;\n    container.style.transform = 'scale(' + factor.toString() + ',' + factor.toString() + ')';\n    /* eslint-disable-next-line max-len */\n    container.innerHTML = '<span class=\"e-de-font-info\" style=\"font-size:0; font-family: ' + characterFormat.fontFamily + '; display: inline-block;\">m</span><span class=\"e-de-font-info\" style=\"font-size:' + maxFontHeight + 'pt; font-family: ' + characterFormat.fontFamily + ';' + (characterFormat.bold ? 'font-weight:bold;' : '') + (characterFormat.italic ? 'font-style:italic;' : '') + ' display: inline-block;\">m</span>';\n    iframe.contentDocument.body.appendChild(container);\n    /* eslint-disable-next-line max-len */\n    var baseLineFactor = container.firstChild.offsetTop / container.lastChild.offsetHeight;\n    var heightFactor = parseFloat((container.lastChild.offsetHeight / maxFontHeight).toFixed(2));\n    document.body.removeChild(iframe);\n    return {\n      HeightFactor: heightFactor,\n      BaselineFactor: baseLineFactor\n    };\n  };\n  /**\n   * @private\n   * @param {WCharacterFormat} characterFormat - character format to apply.\n   * @returns {TextSizeInfo} returns text size information.\n   */\n  Optimized.prototype.getHeightInternal = function (characterFormat) {\n    var key = this.getkeyFromCharFormat(characterFormat);\n    //With optimized technique, height and baseline factor will be same for each font-family, hence we maintaining cache for the factors and updating height based on font size.\n    if (isNullOrUndefined(this.optimizedHeightCollection[\"\" + key])) {\n      var fontInfo = this.getFontInfo(characterFormat);\n      this.optimizedHeightCollection[\"\" + key] = fontInfo;\n      var fontHeight = fontInfo.HeightFactor * characterFormat.fontSize;\n      return {\n        Height: fontHeight,\n        BaselineOffset: fontInfo.BaselineFactor * fontHeight\n      };\n    } else {\n      var fontSizeInfo = this.optimizedHeightCollection[\"\" + key];\n      var fontHeight = fontSizeInfo.HeightFactor * characterFormat.fontSize;\n      return {\n        Height: fontHeight,\n        BaselineOffset: fontSizeInfo.BaselineFactor * fontHeight\n      };\n    }\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  Optimized.prototype.destroy = function () {\n    this.documentHelper = undefined;\n    this.optimizedHeightCollection = undefined;\n  };\n  return Optimized;\n}();\nexport { Optimized };","map":{"version":3,"names":["isNullOrUndefined","createElement","Optimized","documentHelper","optimizedHeightCollection","prototype","getModuleName","getkeyFromCharFormat","characterFormat","formatText","fontFamily","toLocaleLowerCase","bold","italic","getFontInfo","iframe","document","body","appendChild","innerHtml","contentDocument","open","write","close","container","setAttribute","maxFontHeight","factor","window","devicePixelRatio","style","transform","toString","innerHTML","baseLineFactor","firstChild","offsetTop","lastChild","offsetHeight","heightFactor","parseFloat","toFixed","removeChild","HeightFactor","BaselineFactor","getHeightInternal","key","fontInfo","fontHeight","fontSize","Height","BaselineOffset","fontSizeInfo","destroy","undefined"],"sources":["/home/taymur/Documents/legal2/DATA/Highlight/newmerged/CASEFRONTt/node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/text-helper/optimized.js"],"sourcesContent":["import { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';\n/**\n *  Class which performs optimized text measuring logic to find font height.\n */\nvar Optimized = /** @class */ (function () {\n    /**\n     * Constructor to initialize Optimized module.\n     *\n     * @param {DocumentHelper} documentHelper - the document helper object.\n     */\n    function Optimized(documentHelper) {\n        this.documentHelper = documentHelper;\n        this.optimizedHeightCollection = {};\n    }\n    Optimized.prototype.getModuleName = function () {\n        return 'Optimized';\n    };\n    /**\n     * Construct key based on the character format.\n     *\n     * @param {WCharacterFormat} characterFormat - the character format to construct key.\n     * @returns {string} - the constructed key.\n     */\n    Optimized.prototype.getkeyFromCharFormat = function (characterFormat) {\n        var formatText = characterFormat.fontFamily.toLocaleLowerCase();\n        if (characterFormat.bold) {\n            formatText += ';' + 'bold';\n        }\n        if (characterFormat.italic) {\n            formatText += ';' + 'italic';\n        }\n        return formatText;\n    };\n    /**\n     * Method to retrieve font information with optimized text measuring logic.\n     *\n     * @param {WCharacterFormat} characterFormat -character format to apply.\n     * @returns {string} - returns font size information.\n     */\n    Optimized.prototype.getFontInfo = function (characterFormat) {\n        var iframe = createElement('iframe');\n        document.body.appendChild(iframe);\n        var innerHtml = '<!DOCTYPE html>'\n            + '<html><head></head>'\n            + '<body>'\n            + '</body>'\n            + '</html>';\n        if (!isNullOrUndefined(iframe.contentDocument)) {\n            iframe.contentDocument.open();\n            iframe.contentDocument.write(innerHtml);\n            iframe.contentDocument.close();\n        }\n        var container = document.createElement('div');\n        container.setAttribute('style', 'position:absolute;top:-1000px;left:-1000px;opacity:0;font-size:0px;line-height:normal;');\n        // constant tested height value for calculating height factor which matches 90% accuracy with GDI+ value.\n        var maxFontHeight = 288;\n        var factor = 1.0 / window.devicePixelRatio;\n        container.style.transform = 'scale(' + factor.toString() + ',' + factor.toString() + ')';\n        /* eslint-disable-next-line max-len */\n        container.innerHTML = '<span class=\"e-de-font-info\" style=\"font-size:0; font-family: ' + characterFormat.fontFamily + '; display: inline-block;\">m</span><span class=\"e-de-font-info\" style=\"font-size:' + maxFontHeight + 'pt; font-family: ' + characterFormat.fontFamily + ';' + ((characterFormat.bold) ? 'font-weight:bold;' : '') + ((characterFormat.italic) ? 'font-style:italic;' : '') + ' display: inline-block;\">m</span>';\n        iframe.contentDocument.body.appendChild(container);\n        /* eslint-disable-next-line max-len */\n        var baseLineFactor = container.firstChild.offsetTop / container.lastChild.offsetHeight;\n        var heightFactor = parseFloat((container.lastChild.offsetHeight / maxFontHeight).toFixed(2));\n        document.body.removeChild(iframe);\n        return { HeightFactor: heightFactor, BaselineFactor: baseLineFactor };\n    };\n    /**\n     * @private\n     * @param {WCharacterFormat} characterFormat - character format to apply.\n     * @returns {TextSizeInfo} returns text size information.\n     */\n    Optimized.prototype.getHeightInternal = function (characterFormat) {\n        var key = this.getkeyFromCharFormat(characterFormat);\n        //With optimized technique, height and baseline factor will be same for each font-family, hence we maintaining cache for the factors and updating height based on font size.\n        if (isNullOrUndefined(this.optimizedHeightCollection[\"\" + key])) {\n            var fontInfo = this.getFontInfo(characterFormat);\n            this.optimizedHeightCollection[\"\" + key] = fontInfo;\n            var fontHeight = fontInfo.HeightFactor * characterFormat.fontSize;\n            return { Height: fontHeight, BaselineOffset: fontInfo.BaselineFactor * fontHeight };\n        }\n        else {\n            var fontSizeInfo = this.optimizedHeightCollection[\"\" + key];\n            var fontHeight = fontSizeInfo.HeightFactor * characterFormat.fontSize;\n            return { Height: fontHeight, BaselineOffset: fontSizeInfo.BaselineFactor * fontHeight };\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Optimized.prototype.destroy = function () {\n        this.documentHelper = undefined;\n        this.optimizedHeightCollection = undefined;\n    };\n    return Optimized;\n}());\nexport { Optimized };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}