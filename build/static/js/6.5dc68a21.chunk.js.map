{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","Dashboard/Tip.js","Dashboard/StickyNote.js","Dashboard/PdfViewer.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Tip","props","state","setState","useState","compact","text","emoji","onConfirm","onOpen","React","createElement","className","onClick","onSubmit","event","preventDefault","width","placeholder","autoFocus","value","onChange","target","ref","node","focus","processMd","type","StickyNote","_ref","isScrolledTo","position","comment","pdfViewer","document","querySelector","offset","clientWidth","style","left","concat","top","boundingRect","background","padding","borderRadius","boxShadow","zIndex","resetHash","location","hash","HighlightPopup","Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","highlightColors","default","legalTest","issue","conclusion","PdfViewer","dispatch","useContext","UserContext","currFile","setCurrFile","highlights","setHighlights","useEffect","_state$currentFile","length","payload","name","currentFile","url","Blob","reader","FileReader","onload","result","readAsDataURL","console","error","fileHighlights","find","item","pdfHighlighter","useRef","scrollToHighlightFromHash","highlight","slice","current","scrollTo","window","addEventListener","removeEventListener","minHeight","color","Fragment","PdfLoader","beforeLoad","Spinner","pdfDocument","PdfHighlighter","enableAreaSelection","altKey","onScrollChange","scrollRef","onSelectionFinished","content","hideTipAndSelection","transformSelection","String","Math","random","highlightTransform","index","setTip","hideTip","viewportToScaled","screenshot","component","Boolean","image","AreaHighlight","updateHighlight","highlightId","map","h","Popup","popupContent","onMouseOver","onMouseOut","key","children","files","Container"],"mappings":"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","file":"static/js/6.5dc68a21.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 534;","// @flow\r\n\r\nimport React, { useState } from \"react\";\r\nimport processMd from './markdown'\r\nimport \"../style/Tip.css\";\r\n\r\nfunction Tip(props) {\r\n\tconst [state, setState] = useState({\r\n\t\tcompact: true,\r\n\t\ttext: '',\r\n\t\temoji: '',\r\n\t});\r\n\r\n\tconst { onConfirm, onOpen } = props;\r\n\tconst { compact, text, emoji } = state;\r\n\r\n\treturn (\r\n\t\t<div className=\"Tip\">\r\n\t\t\t{compact ? (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"Tip__compact\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonOpen();\r\n\t\t\t\t\t\tsetState({ compact: false });\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tAdd highlight\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<form\r\n\t\t\t\t\tclassName=\"Tip__card\"\r\n\t\t\t\t\tonSubmit={event => {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\tonConfirm({ text, emoji });\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\t\tplaceholder=\"Your comments\"\r\n\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\tvalue={text}\r\n\t\t\t\t\t\t\tonChange={event => setState({ text: event.target.value })}\r\n\t\t\t\t\t\t\tref={node => {\r\n\t\t\t\t\t\t\t\tif (node) {\r\n\t\t\t\t\t\t\t\t\tnode.focus();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tid=\"preview\"\r\n\t\t\t\t\t\twidth='100%'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tprocessMd(state.text)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type=\"submit\" value=\"Save\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Tip;\r\n","import React from 'react';\n// import '../style/StickyNote.css'; // Make sure the path to your CSS file is correct\n\nfunction StickyNote({ isScrolledTo, position, comment }) {\n    // Assuming the PDF viewer container has a specific class or ID\n    const pdfViewer = document.querySelector('.pdf-viewer'); // Adjust the selector as needed\n\n    // Calculate 5% of the PDF viewer's width\n    const offset = pdfViewer ? pdfViewer.clientWidth * 0.004 : 0;\n\n    // Adjust the styling to start at 5% offset of the PDF viewer's width\n    const style = {\n        position: 'absolute',\n        left: `${offset}px`, // Start from 5% of the PDF viewer's width\n        top: `${position.boundingRect.top}px`,\n        background: 'yellow',\n        padding: '10px',\n        borderRadius: '5px',\n        boxShadow: '10 2px 5px rgba(0,0,0,0.3)',\n        zIndex: 1000  // Ensure it appears above other elements\n    };\n\n    return (\n        <div style={style}>\n            {comment && comment.text}\n        </div>\n\n    //     <div className=\"sticky-content\">\n    //     {comment && comment.text}\n    // </div>\n\n\n    );\n}\n\nexport default StickyNote;\n","import React, { useContext, useEffect, useState, useRef } from \"react\";\nimport {\n    PdfLoader,\n    PdfHighlighter,\n    Highlight,\n    Popup,\n    AreaHighlight,\n} from \"react-pdf-highlighter\";\n\nimport StickyNote from './StickyNote';\nimport { Container } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport Spinner from \"../shared/Spinner\";\nimport Tip from \"./Tip\";\nimport processMd from \"./markdown\";\nimport { UserContext } from \"../App\";\nimport { BASE_URL_DEV } from \"../utils\";\nimport PdfViewerSide from \"./PdfViewerSide\";\n\nconst getNextId = () => String(Math.random()).slice(2);\n\nconst parseIdFromHash = () =>\n    document.location.hash.slice(\"#pdf-highlight-\".length);\n\nconst resetHash = () => {\n    document.location.hash = \"\";\n};\n\nconst HighlightPopup = ({ comment }) =>\n    comment.text ? (\n        <div className=\"Highlight__popup\">\n            {comment.emoji} {processMd(comment.text)}\n        </div>\n    ) : null;\n\nconst Wrapper = styled.div`\n  .Highlight__part {\n    background: ${props => props.highlightColors.default || \"#000000\"};\n  }\n  .AreaHighlight {\n    border: 3px solid ${props => props.highlightColors.default || \"#000000\"};\n  }\n  .Highlight__part.OTHER {\n    background: rgb(93, 115, 240);\n  }\n  .Highlight__part.LEGALTEST {\n    background: ${props => props.highlightColors.legalTest};\n  }\n  .Highlight__part.ISSUE {\n    background: ${props => props.highlightColors.issue};\n  }\n  .Highlight__part.CONCLUSION {\n    background: ${props => props.highlightColors.conclusion};\n  }\n`;\n\nfunction PdfViewer() {\n    const { state, dispatch } = useContext(UserContext);\n    const [currFile, setCurrFile] = useState(null);\n    const [highlights, setHighlights] = useState([]);\n\n    useEffect(() => {\n        if (highlights.length > 0) {\n            dispatch({\n                type: \"SET_FILE_HIGHLIGHTS\",\n                payload: {\n                    highlights,\n                    name: state.currentFile?.name,\n                },\n            });\n        }\n    }, [highlights]);\n\n    useEffect(() => {\n        if (state.currentFile) {\n            if (state.currentFile.url) {\n                setCurrFile(state.currentFile.url);\n            } else if (state.currentFile instanceof Blob) {\n                const reader = new FileReader();\n                reader.onload = () => {\n                    setCurrFile(reader.result);\n                };\n                reader.readAsDataURL(state.currentFile);\n            } else {\n                console.error('Current file is not a Blob');\n            }\n        } else {\n            setCurrFile(null);\n        }\n    }, [state.currentFile]);\n\n    useEffect(() => {\n        if (state.currentFile) {\n            const fileHighlights = state.fileHighlights.find(item => item.name === state.currentFile.name);\n            setHighlights(fileHighlights ? fileHighlights.highlights : []);\n        } else {\n            setHighlights([]);\n        }\n    }, [state.currentFile, state.fileHighlights]);\n\n    const pdfHighlighter = useRef(null);\n    const getHighlightById = (id) => highlights.find((highlight) => highlight.id === id);\n\n    const scrollToHighlightFromHash = () => {\n        const highlight = getHighlightById(parseIdFromHash());\n        if (highlight) {\n            pdfHighlighter.current.scrollTo(highlight);\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"hashchange\", scrollToHighlightFromHash, false);\n        return () => window.removeEventListener(\"hashchange\", scrollToHighlightFromHash);\n    }, [highlights]);\n\n    const addHighlight = (highlight) => {\n        setHighlights([{ ...highlight, id: getNextId() }, ...highlights]);\n    };\n\n    const updateHighlight = (highlightId, position, content) => {\n        setHighlights(highlights.map((h) =>\n            h.id === highlightId\n                ? { ...h, position: { ...h.position, ...position }, content: { ...h.content, ...content } }\n                : h\n        ));\n    };\n\n    return (\n        <Wrapper highlightColors={state.highlightColors}>\n            <div className=\"d-flex\">\n                <div style={{ minHeight: \"calc(100vh - 70px)\", color: \"#000000\", width: \"80%\" }} className=\"pdf-viewer\">\n                    {currFile ? (\n                        <>\n                            <PdfLoader className=\"my-pdf-viewer\" url={currFile} beforeLoad={<Spinner />}>\n                                {(pdfDocument) => (\n                                    <PdfHighlighter\n                                        ref={pdfHighlighter}\n                                        pdfDocument={pdfDocument}\n                                        enableAreaSelection={(event) => event.altKey}\n                                        onScrollChange={resetHash}\n                                        scrollRef={(scrollTo) => { }}\n                                        onSelectionFinished={(\n                                            position,\n                                            content,\n                                            hideTipAndSelection,\n                                            transformSelection\n                                        ) => (\n                                            <Tip\n                                                onOpen={transformSelection}\n                                                onConfirm={(comment) => {\n                                                    addHighlight({ content, position, comment });\n                                                    hideTipAndSelection();\n                                                }}\n                                            />\n                                        )}\n                                        highlightTransform={(\n                                            highlight,\n                                            index,\n                                            setTip,\n                                            hideTip,\n                                            viewportToScaled,\n                                            screenshot,\n                                            isScrolledTo\n                                        ) => {\n                                            const isTextHighlight = !Boolean(highlight.content && highlight.content.image);\n                                            const component = isTextHighlight ? (\n                                                <StickyNote\n                                                    isScrolledTo={isScrolledTo}\n                                                    position={highlight.position}\n                                                    comment={highlight.comment}\n                                                />\n                                            ) : (\n                                                <AreaHighlight\n                                                    highlight={highlight}\n                                                    onChange={(boundingRect) => {\n                                                        updateHighlight(\n                                                            highlight.id,\n                                                            { boundingRect: viewportToScaled(boundingRect) },\n                                                            { image: screenshot(boundingRect) }\n                                                        );\n                                                    }}\n                                                />\n                                            );\n\n                                            return (\n                                                <Popup\n                                                    popupContent={<HighlightPopup {...highlight} />}\n                                                    onMouseOver={(popupContent) =>\n                                                        setTip(highlight, (highlight) => popupContent)\n                                                    }\n                                                    onMouseOut={hideTip}\n                                                    key={index}\n                                                    children={component}\n                                                />\n                                            );\n                                        }}\n                                        highlights={highlights}\n                                    />\n                                )}\n                            </PdfLoader>\n                        </>\n                    ) : state.files && state.files.length === 0 ? (\n                        <Container>\n                            <div className=\"h3 text-center mt-5\">No File Selected!!</div>\n                        </Container>\n                    ) : (\n                        <Spinner />\n                    )}\n                </div>\n                {/* <PdfViewerSide /> */}\n            </div>\n        </Wrapper>\n    );\n}\n\nexport default PdfViewer;\n"],"sourceRoot":""}